<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Nana Chat —— QQ Bot 模块</title>
    <url>/NanaChat/</url>
    <content><![CDATA[<p>服务器基本的配置已经完成，我们可以使用她来做有趣的事了。</p>
<p>接下来和 Nana 的日常，主要是从“实现项目”这个角度来展开。</p>
<p>所以，我们这次还是祭出我们的传统艺能，QQ Bot.</p>
<p>不过这次要在项目管理方面做好一点，不能再是 if-else 的大杂烩了.</p>
<h1 id="Current-Status-咕了"><a href="#Current-Status-咕了" class="headerlink" title="Current Status: 咕了"></a>Current Status: 咕了</h1><a id="more"></a>
<h2 id="Dependencies-前期调研"><a href="#Dependencies-前期调研" class="headerlink" title="Dependencies 前期调研"></a>Dependencies 前期调研</h2><h3 id="mirai-amp-mirai-api-http"><a href="#mirai-amp-mirai-api-http" class="headerlink" title="mirai &amp; mirai-api-http"></a>mirai &amp; mirai-api-http</h3><p>Mirai 是一个在全平台下运行，提供 QQ Android 和 TIM PC 协议支持的高效率机器人框架.</p>
<p><a href="https://github.com/project-mirai/mirai-api-http">https://github.com/project-mirai/mirai-api-http</a></p>
<h4 id="下载与设置守护进程"><a href="#下载与设置守护进程" class="headerlink" title="下载与设置守护进程"></a>下载与设置守护进程</h4><ul>
<li>安装 Java 运行时 <code>sudo apt install openjdk-11-jre</code></li>
<li>下载 MCL，安装 mirai-api-http</li>
<li>登录 Bot（使用 QQ 浏览器验证？使用 QQ 打开链接即可）<ul>
<li>如果有需要的话可以安装验证码库</li>
</ul>
</li>
<li><p>设置为自动登录</p>
</li>
<li><p>配置 supervisor</p>
</li>
</ul>
<pre class="language-conf" data-language="conf"><code class="language-conf">[program:mcl]
command&#x3D;&#x2F;home&#x2F;ftpuser&#x2F;5050-mcl&#x2F;mcl-1.2.2&#x2F;mcl
autostart&#x3D;true
autorestart&#x3D;true
user&#x3D;root</code></pre>
<h3 id="Brainstorming-项目构思"><a href="#Brainstorming-项目构思" class="headerlink" title="Brainstorming 项目构思"></a>Brainstorming 项目构思</h3><p>我们可以考虑采用 websocket 这种 adapter，可以同时处理主动发信和消息上报事件.</p>
<pre class="mermaid">graph TB
    subgraph "NanaChat (Daemon)"
        nCore["NanaChat-Core (Port 5051)"]
        nPlugin[NanaChat-Plugins]
    end

    subgraph "Mirai-api-http (Daemon)"
        ws["WebSocket Server (Port 5050)"]
    end

    wa-->|"收信 [1]"|nCore
    nCore -->|"主动发信"| ws
    ws -->|"消息上报"| nCore
    nCore --> nPlugin
    nPlugin --> nCore</pre>

<pre class="mermaid">graph TD;
ncore[NanaChat-Core]
s[Scheduler<br/>定时事件]
d[Dispatcher<br/>消息发送处理]
l[Listener<br/>创建 Socket 连接<br/>监听事件]
pm[PluginManager<br/>管理插件<br/>协助注册监听器与调度器]
ncore --> l
ncore --> s
ncore --> d
ncore --> pm</pre>

<h2 id="Docs"><a href="#Docs" class="headerlink" title="Docs"></a>Docs</h2><h3 id="Nana-Core"><a href="#Nana-Core" class="headerlink" title="Nana-Core"></a>Nana-Core</h3><h3 id="Nana-Plugins"><a href="#Nana-Plugins" class="headerlink" title="Nana-Plugins"></a>Nana-Plugins</h3><p>注册 Nana-Core::Listener…</p>
<p>使用 Nana-Core::Dispatcher…</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/综合</category>
      </categories>
      <tags>
        <tag>QQ Bot</tag>
      </tags>
  </entry>
  <entry>
    <title>微积分课程的一些补充内容</title>
    <url>/calculus-complement/</url>
    <content><![CDATA[<p>这里记录了一些 c7w 在学习微积分的过程中认为比较重要的补充内容。本文首先介绍了三角函数的任意整数幂次的不定积分的求法，然后给出了三角函数定积分的 Wallis 公式，最后给出了在多元微积分中常见的一些参数曲线的图像。</p>
<a id="more"></a>
<h1 id="三角函数的正整数幂的不定积分"><a href="#三角函数的正整数幂的不定积分" class="headerlink" title="三角函数的正整数幂的不定积分"></a>三角函数的正整数幂的不定积分</h1><h2 id="Knowledge-Base"><a href="#Knowledge-Base" class="headerlink" title="Knowledge Base"></a>Knowledge Base</h2><ul>
<li>换元法（凑微分法）</li>
</ul>
<script type="math/tex; mode=display">
\int f'(\phi(x))\phi'(x)dx = \int f'(\phi(x))d\phi(x) = f(\phi(x))+C</script><script type="math/tex; mode=display">
\int f'(u)du = \int f'(\phi(x)) \phi'(x)dx = g(x)+C = g(\phi^{-1} (x))+C</script><ul>
<li>分部积分法</li>
</ul>
<h2 id="关于三角函数的幂的积分"><a href="#关于三角函数的幂的积分" class="headerlink" title="关于三角函数的幂的积分"></a>关于三角函数的幂的积分</h2><h3 id="sin-或-cos-的幂"><a href="#sin-或-cos-的幂" class="headerlink" title="sin 或 cos 的幂"></a>sin 或 cos 的幂</h3><p>若指数中存在奇数：</p>
<script type="math/tex; mode=display">
\int \cos^7x \sin^{10}xdx</script><ol>
<li>选定 cos 与 sin 中次幂较低，且为奇数的一个，使用凑微分法</li>
<li>使用公式 $sin^2x+cos^2x=1$ 替换掉剩下的项</li>
</ol>
<p><em>Solve:</em></p>
<script type="math/tex; mode=display">
\begin{aligned}
&\int \cos ^{7} x \sin ^{10} x d x \\
&=\int \cos ^{6} x \sin ^{10} x d \sin x \\
&=\int\left(1-\sin ^{2} x\right)^{3} \sin ^{10} x d \sin x \\
(t &=\sin x) \\
&= \int\left(1-3 t^{2}+3 t^{4}-t^{6}\right) t^{10} d t \\
&=\int\left(t^{10}-3 t^{12}+3 t^{14}-t^{16}\right) d t \\
&=\frac {t^{11}} {11}-\frac{3}{13} t^{13}+\frac{3}{15} t^{15}-\frac{1}{17} t^{17}+C \\
&=\frac{1}{11} \sin ^{11} x-\frac{3}{13} \sin ^{2} x+\frac{1}{5} \sin ^{10} x-\frac{1}{17} \sin ^{17} x+C
\end{aligned}</script><p>若指数中不存在奇数：</p>
<script type="math/tex; mode=display">
\quad \int \cos ^{2} x \sin ^{4} x d x</script><ol>
<li>使用二倍角公式</li>
<li>展开后分别积分</li>
</ol>
<p><em>Solve:</em></p>
<p>$\quad \int \cos ^{2} x \sin ^{4} x d x=\int \frac{1+\cos 2 x}{2} \frac{\left(1-\cos ^{2} x\right)^{2}}{4} d x$<br>$=\frac{1}{8} \int\left(\cos ^{2} 2 x-2 \cos 2 x+1\right)(1+\cos 2 x) d x$<br>$=\frac{1}{8} \int\left(\cos ^{3} 2 x-\cos ^{2} 2 x-\cos 2 x+1\right) d x$<br>$=\frac{1}{8} \int \cos ^{3} 2 x d x-\frac{1}{8} \int \cos ^{2} 2 x d x-\frac{1}{8} \int \cos 2 x d x+\frac{1}{8} \int d x$<br>$=\frac{1}{8} \cdot \frac{1}{2} \int \cos ^{2} 2x d \sin 2 x-\frac{1}{8} \int \frac{1+\cos 4 x}{2} d x-\frac{1}{8} \cdot \frac{1}{2} \sin 2 x+\frac{1}{8} x+C<br>$</p>
<p>$=\frac{1}{16} \int d \sin 2 x-\frac{1}{16} \int \sin ^{2} 2 x d \sin 2 x-\frac{1}{16} x-\frac{1}{16} \cdot \frac{1}{4} \sin 4 x-\frac{1}{16} \sin 2 x+\frac{1}{8} x+C$</p>
<p>$=\frac{x}{16}-\frac{\sin^32x}{48}-\frac{\sin4x}{64}+C$</p>
<h3 id="tan-与-cot-的幂"><a href="#tan-与-cot-的幂" class="headerlink" title="tan 与 cot 的幂"></a>tan 与 cot 的幂</h3><script type="math/tex; mode=display">
\int \tan ^{4} x d x</script><p>使用公式 $ \tan ^{2} x=\sec ^{2} x-1 $</p>
<script type="math/tex; mode=display">
\begin{array}{l}
\int \tan ^{0} x d x=\int d x=x+C \\
\int \tan ^{1} x d x=\int \frac{\sin x}{\cos x} d x=-\int \frac{1}{\cos x} d \cos x=-\ln |\cos x|+C \\
\qquad=\ln |\sec x|+C \\
\end{array}</script><script type="math/tex; mode=display">
\begin{aligned}
I_{n} &=\int \tan ^{n} x d x \\
&=\int \tan ^{n-2} x \tan ^{2} x d x \\
&=\int \tan ^{n-2} x\left(\sec ^{2} x-1\right) d x \\
&=\int \tan ^{n-2} x \sec ^{2} x d x-\int \tan ^{n-2} x d x \\
&=\int \tan ^{n-2} x d \tan x-\int \tan ^{n-2} x d x \\
&=\frac{1}{n-1} \cdot \tan ^{n-1} x-I_{n-2}
\end{aligned}</script><p><em>Solve:</em></p>
<script type="math/tex; mode=display">
\begin{aligned}
\int \tan ^{4} x d x &=\int \tan ^{2} x\left(\sec ^{2} x-1\right) d x \\
&=\int \tan ^{2} x \sec ^{2} x d x-\int \tan ^{2} x d x \\
&=\frac{1}{3} \tan ^{3} x-\int \sec ^{2} x d x+\int d x \\
&=\frac{1}{3} \tan ^{3} x-\tan x+x+C
\end{aligned}</script><p>cot 的幂读者自证不难.</p>
<h3 id="sec-与-csc-的幂"><a href="#sec-与-csc-的幂" class="headerlink" title="sec 与 csc 的幂"></a>sec 与 csc 的幂</h3><script type="math/tex; mode=display">
\begin{aligned}
\int \sec x d x &=\int \frac{(\sec x)(\sec x+\tan x)}{\sec x+\tan x} d x \\
&=\int \frac{\sec x \tan x+\sec ^{2} x}{\sec x+\tan x} d x \\
&=\ln |\sec x+\tan x|+C \\
\int \sec ^{2} x d x &=\tan x+C
\end{aligned}</script><script type="math/tex; mode=display">
\begin{aligned}
\int \sec ^{n} x d x &=\int \sec ^{n-2} x \sec ^{2} x d x \\
&=\int \sec ^{n-2} x d \tan x \\
&=\sec ^{n-2} x \tan x-\int \tan x(n-2) \sec ^{n-3} x \sec x \tan x d x \\
&=\sec ^{n-2} \tan x-(n-2) \int \sec ^{n-2} x \tan ^{2} x d x \\
&=\sec ^{n-2} x \tan x-(n-2) \int \sec ^{n-2} x\left(\sec ^{2} x-1\right) d x \\
&=\sec ^{n-2} x \tan x-(n-2) \int \sec ^{n} x d x+(n-2) \int \sec ^{n-2} x d x \\
\end{aligned}</script><p>因此我们有：</p>
<script type="math/tex; mode=display">
\int \sec ^{n} x d x=\frac{1}{n-1} \sec ^{n-2} x \tan x+\frac{n-2}{n-1} \int \sec ^{n-2} x d x</script><p>csc 的幂同理显然.</p>
<h1 id="Wallis-公式"><a href="#Wallis-公式" class="headerlink" title="Wallis 公式"></a>Wallis 公式</h1><script type="math/tex; mode=display">
I_n = \int _ 0 ^ {\frac \pi 2} \sin^nxdx \\
I_0 = \frac \pi 2, I_1 = 1</script><h1 id="一些参数方程-极坐标下的曲线图像"><a href="#一些参数方程-极坐标下的曲线图像" class="headerlink" title="一些参数方程/极坐标下的曲线图像"></a>一些参数方程/极坐标下的曲线图像</h1><h2 id="星形线"><a href="#星形线" class="headerlink" title="星形线"></a>星形线</h2><script type="math/tex; mode=display">
x^{\frac 2 3}+y^{\frac 2 3}=a^{\frac 2 3} \\
\begin{cases}
x=a\cos^3t\\
y=a\sin^3t
\end{cases}</script><p><img src="https://s3.ax1x.com/2020/12/26/r4AL8K.png" alt=""></p>
<h2 id="摆线"><a href="#摆线" class="headerlink" title="摆线"></a>摆线</h2><script type="math/tex; mode=display">
\begin {cases}
x= a(t-\sin t)\\
y=a(1-\cos t)
\end {cases}</script><p><img src="https://s3.ax1x.com/2020/12/26/r4E12T.png" alt=""></p>
<p>图为$-4\pi \le t \le 4\pi, a=1$的图像.</p>
<p>周期为$2\pi$.</p>
<h2 id="双纽线"><a href="#双纽线" class="headerlink" title="双纽线"></a>双纽线</h2><p><a href="https://imgchr.com/i/r4VeSK"><img src="https://s3.ax1x.com/2020/12/26/r4VeSK.png" alt="r4VeSK.png"></a></p>
<h2 id="笛卡尔心形线"><a href="#笛卡尔心形线" class="headerlink" title="笛卡尔心形线"></a>笛卡尔心形线</h2><p><a href="https://imgchr.com/i/r4ZSht"><img src="https://s3.ax1x.com/2020/12/26/r4ZSht.png" alt="r4ZSht.png"></a></p>
<h2 id="其它曲线"><a href="#其它曲线" class="headerlink" title="其它曲线"></a>其它曲线</h2><p><a href="https://imgchr.com/i/r4ZeNn"><img src="https://s3.ax1x.com/2020/12/26/r4ZeNn.png" alt="r4ZeNn.png"></a></p>
<p><a href="https://imgchr.com/i/r4Zu90"><img src="https://s3.ax1x.com/2020/12/26/r4Zu90.png" alt="r4Zu90.png"></a></p>
<p><a href="https://imgchr.com/i/r4ZK3V"><img src="https://s3.ax1x.com/2020/12/26/r4ZK3V.png" alt="r4ZK3V.png"></a></p>
<p><a href="https://imgchr.com/i/r4ZMcT"><img src="https://s3.ax1x.com/2020/12/26/r4ZMcT.png" alt="r4ZMcT.png"></a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://mm.edrawsoft.cn/template/65439">https://mm.edrawsoft.cn/template/65439</a></li>
<li>部分图像采用 GeoGebra 绘制</li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/微积分</category>
      </categories>
      <tags>
        <tag>微积分</tag>
        <tag>三角函数的积分</tag>
        <tag>曲线图像</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 委托与事件</title>
    <url>/c-sharp-delegate-event/</url>
    <content><![CDATA[<p>内含 C# 委托与事件基础。</p>
<a id="more"></a>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>三系联合暑培内部资料</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/">https://docs.microsoft.com/en-us/dotnet/csharp/</a></li>
<li><a href="https://www.runoob.com/csharp/csharp-tutorial.html">https://www.runoob.com/csharp/csharp-tutorial.html</a></li>
</ul>
<h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>委托(Delegates)是一种运行时绑定机制。</p>
<ul>
<li>为什么使用委托？</li>
</ul>
<p>对于任意晚绑定算法的支持、支持多播、事件模式</p>
<h4 id="delegate-关键字"><a href="#delegate-关键字" class="headerlink" title="delegate 关键字"></a><code>delegate</code> 关键字</h4><p><strong>如何声明委托？</strong></p>
<p>例如：</p>
<pre class="language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; From the .NET Core library

&#x2F;&#x2F; Define the delegate type:
public delegate int Comparison&lt;in T&gt;(T left, T right);</code></pre>
<p><em>这行语句在干什么？在定义类型！</em></p>
<p><code>delegate &lt;return type&gt; &lt;delegate-name&gt; &lt;parameter list&gt;</code></p>
<p>便会生成<code>System.Delegate</code>的一个派生类<code>Comparison</code>.</p>
<p>这个派生类自动带有了 <code>add</code>和 <code>remove</code> 句柄.</p>
<p><strong>创建委托类型的实例</strong></p>
<pre class="language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F; inside a class definition:

&#x2F;&#x2F; Declare an instance of that type:
public Comparison&lt;T&gt; comparator;</code></pre>
<p><strong>调用委托类型的实例</strong></p>
<pre class="language-c#" data-language="c#"><code class="language-c#">int result &#x3D; comparator(left, right);</code></pre>
<p><strong>如果委托没有目标怎么办？</strong></p>
<p>throw NullReferenceException</p>
<p><strong>如何调整委托的目标？</strong></p>
<pre class="language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; static public void Call1() &#x3D;&gt; Console.WriteLine(&quot;Call1&quot;); 
&#x2F;&#x2F; static public void Call2() &#x3D;&gt; Console.WriteLine(&quot;Call2&quot;); 
&#x2F;&#x2F; static public void Call3() &#x3D;&gt; Console.WriteLine(&quot;Call3&quot;); 

var caller &#x3D; new Action(Call1); 
caller +&#x3D; Call2; 
caller &#x3D; caller + Call3; 
caller -&#x3D; Call1;
caller.Invoke(); &#x2F;&#x2F; 等价于 caller();</code></pre>
<p><strong>如何调用委托？</strong></p>
<pre class="language-c#" data-language="c#"><code class="language-c#">private static int CompareLength(string left, string right) &#x3D;&gt;
    left.Length.CompareTo(right.Length);

&#x2F;&#x2F; phrases is List&lt;string&gt;

&#x2F;&#x2F; 1
phrases.Sort(CompareLength); &#x2F;&#x2F; Accepted

&#x2F;&#x2F; 2
Comparison&lt;string&gt; comparer &#x3D; CompareLength;
phrases.Sort(comparer); &#x2F;&#x2F; Accepted

&#x2F;&#x2F; 3: **lambda 表达式**
Comparison&lt;string&gt; comparer &#x3D; (left, right) &#x3D;&gt; left.Length.CompareTo(right.Length);
phrases.Sort(comparer); &#x2F;&#x2F; Accepted</code></pre>
<h4 id="System-MulticastDelegate-类"><a href="#System-MulticastDelegate-类" class="headerlink" title="System.MulticastDelegate 类"></a><code>System.MulticastDelegate</code> 类</h4><p><strong>要记住哪些方法？</strong></p>
<p><code>Invoke()</code>, <code>BeginInvoke()</code>, <code>EndInvoke()</code></p>
<p><strong>一些特殊类型</strong>(内置委托)</p>
<ul>
<li>Action</li>
</ul>
<pre class="language-c#" data-language="c#"><code class="language-c#">public delegate void Action();
public delegate void Action&lt;in T&gt;(T arg);
public delegate void Action&lt;in T1, in T2&gt;(T1 arg1, T2 arg2);</code></pre>
<ul>
<li>Func</li>
</ul>
<pre class="language-c#" data-language="c#"><code class="language-c#">public delegate TResult Func&lt;out TResult&gt;();
public delegate TResult Func&lt;in T1, out TResult&gt;(T1 arg);
public delegate TResult Func&lt;in T1, in T2, out TResult&gt;(T1 arg1, T2 arg2);
&#x2F;&#x2F; Other variations removed for brevity</code></pre>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>参见 <a href="https://docs.microsoft.com/en-us/dotnet/csharp/delegates-patterns">https://docs.microsoft.com/en-us/dotnet/csharp/delegates-patterns</a></p>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件也是一种晚绑定机制。</p>
<p>事件：允许对象broadcast事件的发生。</p>
<p>C# 中使用事件机制实现线程间的通信。</p>
<p><strong>事件的设计理念？</strong></p>
<p>建立 event source 和 event sink 之间的联系</p>
<p>subscribe to 和 unsubscribe from 一个事件 十分简单</p>
<p>单个event source支持多个subscribers.</p>
<p><strong>通过事件使用委托</strong></p>
<p>事件在类中声明且生成，且通过使用同一个类或其他类中的委托与事件处理程序关联。包含事件的类用于发布事件。这被称为 <strong>发布器（publisher）</strong> 类。其他接受该事件的类被称为 <strong>订阅器（subscriber）</strong> 类。事件使用 <strong>发布-订阅（publisher-subscriber）</strong> 模型。</p>
<p><strong>发布器（publisher）</strong> 是一个包含事件和委托定义的对象。事件和委托之间的联系也定义在这个对象中。发布器（publisher）类的对象调用这个事件，并通知其他的对象。</p>
<p><strong>订阅器（subscriber）</strong> 是一个接受事件并提供事件处理程序的对象。在发布器（publisher）类中的委托调用订阅器（subscriber）类中的方法（事件处理程序）。</p>
<h4 id="事件的声明"><a href="#事件的声明" class="headerlink" title="事件的声明"></a>事件的声明</h4><p>在类的内部声明事件，首先必须声明该事件的委托类型。</p>
<pre class="language-c#" data-language="c#"><code class="language-c#">public delegate void BoilerLogHandler(string status);</code></pre>
<p>然后我们基于委托类型定义事件：</p>
<pre class="language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; 基于上面的委托定义事件
public event BoilerLogHandler BoilerEventLog;</code></pre>
<p>上面的代码定义了一个名为 <em>BoilerLogHandler</em> 的委托和一个名为 <em>BoilerEventLog</em> 的事件.</p>
<p>一旦该事件被生成，该委托便会被调用.</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="language-c#" data-language="c#"><code class="language-c#">using System;
namespace SimpleEvent
&#123;
  using System;
  &#x2F;***********发布器类***********&#x2F;
  public class EventTest
  &#123;
    private int value;

    public delegate void NumManipulationHandler();


    public event NumManipulationHandler ChangeNum;
    protected virtual void OnNumChanged()
    &#123;
      if ( ChangeNum !&#x3D; null )
      &#123;
        ChangeNum(); &#x2F;* 事件被触发 *&#x2F;
      &#125;else &#123;
        Console.WriteLine( &quot;event not fire&quot; );
        Console.ReadKey(); &#x2F;* 回车继续 *&#x2F;
      &#125;
    &#125;


    public EventTest()
    &#123;
      int n &#x3D; 5;
      SetValue( n );
    &#125;


    public void SetValue( int n )
    &#123;
      if ( value !&#x3D; n )
      &#123;
        value &#x3D; n;
        OnNumChanged();
      &#125;
    &#125;
  &#125;


  &#x2F;***********订阅器类***********&#x2F;

  public class subscribEvent
  &#123;
    public void printf()
    &#123;
      Console.WriteLine( &quot;event fire&quot; );
      Console.ReadKey(); &#x2F;* 回车继续 *&#x2F;
    &#125;
  &#125;

  &#x2F;***********触发***********&#x2F;
  public class MainClass
  &#123;
    public static void Main()
    &#123;
      EventTest e &#x3D; new EventTest(); &#x2F;* 实例化对象,第一次没有触发事件 *&#x2F;
      subscribEvent v &#x3D; new subscribEvent(); &#x2F;* 实例化对象 *&#x2F;
      e.ChangeNum +&#x3D; new EventTest.NumManipulationHandler( v.printf ); &#x2F;* 注册 *&#x2F;
      e.SetValue( 7 );
      e.SetValue( 11 );
    &#125;
  &#125;
&#125;</code></pre>
<pre class="language-c#" data-language="c#"><code class="language-c#">using System;
using System.IO;

namespace BoilerEventAppl
&#123;

   &#x2F;&#x2F; boiler 类
   class Boiler
   &#123;
      private int temp;
      private int pressure;
      public Boiler(int t, int p)
      &#123;
         temp &#x3D; t;
         pressure &#x3D; p;
      &#125;

      public int getTemp()
      &#123;
         return temp;
      &#125;
      public int getPressure()
      &#123;
         return pressure;
      &#125;
   &#125;
   &#x2F;&#x2F; 事件发布器
   class DelegateBoilerEvent
   &#123;
      public delegate void BoilerLogHandler(string status);

      &#x2F;&#x2F; 基于上面的委托定义事件
      public event BoilerLogHandler BoilerEventLog;

      public void LogProcess()
      &#123;
         string remarks &#x3D; &quot;O. K&quot;;
         Boiler b &#x3D; new Boiler(100, 12);
         int t &#x3D; b.getTemp();
         int p &#x3D; b.getPressure();
         if(t &gt; 150 || t &lt; 80 || p &lt; 12 || p &gt; 15)
         &#123;
            remarks &#x3D; &quot;Need Maintenance&quot;;
         &#125;
         OnBoilerEventLog(&quot;Logging Info:\n&quot;);
         OnBoilerEventLog(&quot;Temparature &quot; + t + &quot;\nPressure: &quot; + p);
         OnBoilerEventLog(&quot;\nMessage: &quot; + remarks);
      &#125;

      protected void OnBoilerEventLog(string message)
      &#123;
         if (BoilerEventLog !&#x3D; null)
         &#123;
            BoilerEventLog(message);
         &#125;
      &#125;
   &#125;
   &#x2F;&#x2F; 该类保留写入日志文件的条款
   class BoilerInfoLogger
   &#123;
      FileStream fs;
      StreamWriter sw;
      public BoilerInfoLogger(string filename)
      &#123;
         fs &#x3D; new FileStream(filename, FileMode.Append, FileAccess.Write);
         sw &#x3D; new StreamWriter(fs);
      &#125;
      public void Logger(string info)
      &#123;
         sw.WriteLine(info);
      &#125;
      public void Close()
      &#123;
         sw.Close();
         fs.Close();
      &#125;
   &#125;
   &#x2F;&#x2F; 事件订阅器
   public class RecordBoilerInfo
   &#123;
      static void Logger(string info)
      &#123;
         Console.WriteLine(info);
      &#125;&#x2F;&#x2F;end of Logger

      static void Main(string[] args)
      &#123;
         BoilerInfoLogger filelog &#x3D; new BoilerInfoLogger(&quot;e:\\boiler.txt&quot;);
         DelegateBoilerEvent boilerEvent &#x3D; new DelegateBoilerEvent();
         boilerEvent.BoilerEventLog +&#x3D; new
         DelegateBoilerEvent.BoilerLogHandler(Logger);
         boilerEvent.BoilerEventLog +&#x3D; new
         DelegateBoilerEvent.BoilerLogHandler(filelog.Logger);
         boilerEvent.LogProcess();
         Console.ReadLine();
         filelog.Close();
      &#125;&#x2F;&#x2F;end of main

   &#125;&#x2F;&#x2F;end of RecordBoilerInfo
&#125;</code></pre>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>与 Nana 的日常 —— 从零开始的 Linux 调教指北(0)</title>
    <url>/dear-memory-with-nana-0/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/08/23/78DGrYSMnVgKkwE.jpg" alt="QQ图片20210823091857"></p>
<p>(Nana 印象图 初版)</p>
<p>速览本文：</p>
<ul>
<li>Nana 是什么</li>
<li>系统安装</li>
<li>Wi-Fi 配置</li>
<li>初次连接与工作环境配置</li>
<li>硬盘挂载</li>
<li>Bash 界面美化</li>
</ul>
<h2 id="Nana-是什么？"><a href="#Nana-是什么？" class="headerlink" title="Nana 是什么？"></a>Nana 是什么？</h2><p><s>Nana 是 c7w 幻想中的 npy</s> Nana 是目前正在宿舍中运行的一台树莓派 4B 的代号，其上装载了 Ubuntu 20.04 LTS.</p>
<p>本系列旨在<s>记录c7w和ta的每一天</s>将 Linux 踩坑指南和一些常用软件的配置过程记录下来，同时也方便学习与交流。</p>
<a id="more"></a>
<h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p>我们采用了最为简单的方式，在官网上下载了 <a href="https://www.raspberrypi.org/software/">Raspberry Pi Imager</a> .</p>
<p>比起 balenaEtcher 好处是我懒得去 Tsinghua Tuna 上面下载镜像了.</p>
<p><img src="https://i.loli.net/2021/08/23/EOedo5ZnClFKT4J.png" alt="image-20210823093223369"></p>
<p>系统选择，用的比较顺手的 Ubuntu，选了 armhf 的 32bit（内存一共才2G</p>
<p>然后把数据写进去，就完成了系统安装操作.</p>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="Wi-Fi-Connection"><a href="#Wi-Fi-Connection" class="headerlink" title="Wi-Fi Connection"></a>Wi-Fi Connection</h3><p>传统艺能，在烧录好的 <code>system-boot</code> 盘的根目录的 network-config 配置文件内添加配置信息就好.</p>
<pre class="language-none"><code class="language-none"># This file contains a netplan-compatible configuration which cloud-init
# will apply on first-boot. Please refer to the cloud-init documentation and
# the netplan reference for full details:
#
# https:&#x2F;&#x2F;cloudinit.readthedocs.io&#x2F;
# https:&#x2F;&#x2F;netplan.io&#x2F;reference
#
# Some additional examples are commented out below

version: 2
ethernets:
  eth0:
    dhcp4: true
    optional: true
wifis:
  wlan0:
    dhcp4: true
    optional: true
    access-points:
      &quot;iLovePKU&quot;:
        password: &quot;1145141919810&quot;
      &quot;Peking-Visitor&quot;:
        password: &quot;c7w,yyds&quot;
#      myworkwifi:
#        password: &quot;correct battery horse staple&quot;
#      workssid:
#        auth:
#          key-management: eap
#          method: peap
#          identity: &quot;me@example.com&quot;
#          password: &quot;passw0rd&quot;
#          ca-certificate: &#x2F;etc&#x2F;my_ca.pem
# :)
</code></pre>
<h2 id="初次连接及配置"><a href="#初次连接及配置" class="headerlink" title="初次连接及配置"></a>初次连接及配置</h2><p>初次连接, ssh 到对应 ip 就好，用户名和密码都是 ubuntu.</p>
<p>然后会提示修改密码，完成操作即可.</p>
<p><img src="https://i.loli.net/2021/08/23/RZir5LadNWCUmcK.png" alt="image-20210823095803256"></p>
<h3 id="切换软件安装源"><a href="#切换软件安装源" class="headerlink" title="切换软件安装源"></a>切换软件安装源</h3><p>我们当然推出 Tsinghua Tuna.</p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a></p>
<p><img src="https://i.loli.net/2021/08/23/CGsyKxtMdqZDWHT.png" alt="image-20210823095949515"></p>
<p>按照提示把文件内容替换即可.（这里我们不对 Linux 指令做过多介绍，默认读者已经对 Linux 系统的命令有了基本的了解与认知）</p>
<p>注意到我们的树莓派是 arm64 架构，所以要将链接末尾的 <em>ubuntu</em> 替换为 <strong>ubuntu-ports</strong>.</p>
<p>然后我们就可以 <strong>sudo apt update</strong> 获取软件包链接缓存了.(然后是愉快的系统升级，不过 c7w 输入 <code>sudo apt upgrade &amp;</code> 之后就去睡觉了)</p>
<h3 id="公钥私钥配置"><a href="#公钥私钥配置" class="headerlink" title="公钥私钥配置"></a>公钥私钥配置</h3><p><s>由于这台机器的所有权与使用者都仅有 c7w 一人，所以 c7w 可以放心的将自己一直在用的私钥上传.</s></p>
<p>想了想还是重新配一个新的吧，万一真丢了就不好办了x</p>
<pre class="language-none"><code class="language-none">ubuntu@ubuntu:~$ ssh-keygen -o
Generating public&#x2F;private rsa key pair.
Enter file in which to save the key (&#x2F;home&#x2F;ubuntu&#x2F;.ssh&#x2F;id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in &#x2F;home&#x2F;ubuntu&#x2F;.ssh&#x2F;id_rsa
Your public key has been saved in &#x2F;home&#x2F;ubuntu&#x2F;.ssh&#x2F;id_rsa.pub</code></pre>
<p>敲回车的功夫就搞定了.</p>
<p>然后首先让我们把公钥取回本地. <s>vim 打开复制就好</s></p>
<p>然后我们把本地的公钥配置到远端.</p>
<p>Reference: <a href="https://blog.csdn.net/alifrank/article/details/48241699">https://blog.csdn.net/alifrank/article/details/48241699</a></p>
<p><img src="https://i.loli.net/2021/08/23/YgqyQ1M2fBARVFo.png" alt="image-20210823100955900"></p>
<p><img src="https://i.loli.net/2021/08/23/HAujmDEfBeLdNtl.png" alt="image-20210823101140515"></p>
<p>免密登录完成.</p>
<h3 id="Zerotier"><a href="#Zerotier" class="headerlink" title="Zerotier"></a>Zerotier</h3><p><strong>什么是 Zerotier ?</strong></p>
<blockquote>
<h4 id="Connect-team-members-from-anywhere-in-the-world-on-any-device-ZeroTier-creates-secure-networks-between-on-premise-cloud-desktop-and-mobile-devices"><a href="#Connect-team-members-from-anywhere-in-the-world-on-any-device-ZeroTier-creates-secure-networks-between-on-premise-cloud-desktop-and-mobile-devices" class="headerlink" title="Connect team members from anywhere in the world on any device. ZeroTier creates secure networks between on-premise, cloud, desktop, and mobile devices."></a>Connect team members from anywhere in the world on any device. ZeroTier creates secure networks between on-premise, cloud, desktop, and mobile devices.</h4><p>(Excerpted from zerotier.com)</p>
</blockquote>
<p>简而言之，跟过去的 Hamachi 这种东西差不多（应该现在的人没多少人知道这是什么东西了吧），加入到同一个虚拟网络中的设备可以在<strong>虚拟局域网</strong>中互相通信，对于 c7w 这种喜欢在外面(必须在机房)进行摸大鱼<s>和 Nana 贴贴</s>的人来说基本是必需品.</p>
<p><strong>如何安装？</strong></p>
<p>不用动脑子，反正一条命令的事.</p>
<p><a href="https://www.zerotier.com/download/">https://www.zerotier.com/download/</a></p>
<p><code>curl -s https://install.zerotier.com | sudo bash</code></p>
<p><img src="https://i.loli.net/2021/08/23/JzxMELeOf49Hb83.png" alt="image-20210823095301599"></p>
<p><strong>如何配置？</strong></p>
<p><code>sudo zerotier-cli join &lt;Network ID&gt;</code></p>
<p>其中 网络ID 自行注册账号后创建.</p>
<p>join 后记得到控制台点击验证通过.</p>
<p><img src="https://i.loli.net/2021/08/23/Us7j5tvZnRHEKia.png" alt="image-20210823095614878"></p>
<p>这样就配置好了.</p>
<h2 id="硬盘挂载"><a href="#硬盘挂载" class="headerlink" title="硬盘挂载"></a>硬盘挂载</h2><p><s>为了显示我对 Nana 的诚意，</s>特别地配置了一块1T硬盘.</p>
<p>我们 <code>sudo fdisk -l</code> 来查看当前的所有硬盘.</p>
<p><img src="https://i.loli.net/2021/08/23/YAXjEk1mT43fsqp.png" alt="image-20210823102142524"></p>
<p>由于这块硬盘之前我在 Windows 上格式化过，是可以正确显示类型的.</p>
<p>然后我们创建好想要挂载的目录，比如 <code>mkdir /mnt/data</code></p>
<p><img src="https://i.loli.net/2021/08/23/lCO4azUJPHy8VAx.png" alt="image-20210823102540274"></p>
<p>这样就挂载好了，甚至还能看到我一个月前写的 this.txt</p>
<h3 id="开机自动挂载"><a href="#开机自动挂载" class="headerlink" title="开机自动挂载"></a>开机自动挂载</h3><p>我们没法保证服务器运行过程中不关机，<s>事实上紫荆宿舍的断电也没让我失望过</s>.</p>
<p>于是我们需要添加开机自动挂载功能.</p>
<p><img src="https://i.loli.net/2021/08/23/MbiUeAxYuaqf1mC.png" alt="image-20210823103213405"></p>
<p>这里由于 c7w 的硬盘是 exfat 格式，于是将 ext3 写为 exfat.</p>
<p>Reference:</p>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1746763">https://cloud.tencent.com/developer/article/1746763</a></li>
<li><a href="https://blog.51cto.com/zkxfoo/1758529">https://blog.51cto.com/zkxfoo/1758529</a></li>
</ul>
<h2 id="美化-Bash"><a href="#美化-Bash" class="headerlink" title="美化 Bash"></a>美化 Bash</h2><p>先呈现最终效果.</p>
<p><img src="https://i.loli.net/2021/08/23/yHqfpJ2rkX4CQmI.png" alt="image-20210823112959044"></p>
<p>这里我们使用了 zsh + oh my zsh 进行配置.</p>
<h3 id="安装与配置流程"><a href="#安装与配置流程" class="headerlink" title="安装与配置流程"></a>安装与配置流程</h3><p><strong>zsh</strong></p>
<blockquote>
<p><strong>什么是 shell ？</strong></p>
<p>In computing, a shell is a computer program which exposes an operating system’s services to a human user or other program. </p>
<p>In general, operating system shells use either a command-line interface (<strong>CLI</strong>) or graphical user interface (<strong>GUI</strong>), depending on a computer’s role and particular operation. </p>
<p>It is named a shell because it is the <strong>outermost layer </strong>around the operating system.</p>
<p>(Excerpeted from Wikipedia)</p>
<p>也就是说，shell 是给人用的，用来和 操作系统 交互的工具.</p>
<p>我们 Windows 采用的默认的 shell 便是我们的这个图形界面.</p>
<p><img src="https://i.loli.net/2021/08/23/Llsk9A7brdg1826.png" alt="image-20210823104413290"></p>
<p>我们应该能够理解，shell 是一种<strong>软件</strong>，是可以被更改配置，甚至整个换掉的<strong>软件</strong>。</p>
<p>比如，我们也可以用 Windows 带有的 cmd 这个 shell.</p>
<p><img src="https://i.loli.net/2021/08/23/sNWHr3qAKQ25uZF.png" alt="image-20210823104538789"></p>
<p> 只是看起来好丑（x 而且操作也不方便.</p>
<hr>
<p>如何查看自己 Linux <strong>目前</strong>用的是什么 shell ？如何查看自己都有哪些<strong>shell</strong>？</p>
<p><code>cat /etc/shells</code></p>
<p><img src="https://i.loli.net/2021/08/23/qExZXcGlYPrDgiQ.png" alt="image-20210823105242514"></p>
<p><code>echo $SHELL</code></p>
<p><img src="https://i.loli.net/2021/08/23/5gjSYGxfWO9IluC.png" alt="image-20210823105305619"></p>
<p>可以看到，我们现在正在使用 <code>/bin/bash</code> 这个软件作为 shell.</p>
<p><s>没错就是这个丑不拉几的界面</s></p>
<p>说了这么多，我们接下来就要换 shell，然后换界面主题了.</p>
</blockquote>
<p><strong>什么是 zsh ？</strong></p>
<p><a href="https://www.zsh.org/">https://www.zsh.org/</a></p>
<blockquote>
<p>Zsh is a shell designed for interactive use, although it is also a powerful scripting language.</p>
<p>按照介绍，是 shell 的一种.</p>
</blockquote>
<p>为什么我们必须安装 zsh ？<s>废话，因为我想装的主题只支持 zsh</s></p>
<p>自动补全 好用！（x</p>
<p><strong>如何安装zsh？</strong></p>
<p><img src="https://i.loli.net/2021/08/23/mlnRi8VbaQoFvMT.png" alt="image-20210823111207852"></p>
<ol>
<li>传统艺能 <code>sudo apt install zsh</code></li>
<li>运行 <code>zsh --version</code> 检查版本</li>
<li>设为默认 shell. <code>chsh -s $(which zsh)</code></li>
<li><p>重新登录.</p>
</li>
<li><p>提示配置 zsh 时我们暂且先 (q) quit.</p>
</li>
</ol>
<p>基本差不多了，我们接下来安装 <code>oh my zsh</code>.</p>
<p><strong>什么是 oh my zsh?</strong></p>
<blockquote>
<p>shell的类型有很多种，linux下默认的是bash，虽然bash的功能已经很强大，但对于以懒惰为美德的程序员来说，bash的提示功能不够强大，界面也不够炫，并非理想工具。</p>
<p>而zsh的功能极其强大，只是<strong>配置过于复杂</strong>，起初只有极客才在用。后来，有个穷极无聊的程序员可能是实在看不下去广大猿友一直只能使用单调的bash, 于是他创建了一个名为<code>oh-my-zsh</code>的开源项目…</p>
<p>(Excerpted from <a href="https://www.jianshu.com/p/d194d29e488c">https://www.jianshu.com/p/d194d29e488c</a>)</p>
</blockquote>
<p><img src="https://i.loli.net/2021/08/23/VuAr3vmbST8tIxX.png" alt="image-20210823111944157"></p>
<p>然后是安装，复制粘贴命令就好.</p>
<p><code>sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></p>
<p><img src="https://i.loli.net/2021/08/23/QZVqsB5tCgdSi3c.png" alt="image-20210823112219705"></p>
<p>会自动帮我们写入刚刚 quit 掉的配置文件.</p>
<p>然后我们重新登入，oh my zsh 就已经配置好了.</p>
<p><img src="https://i.loli.net/2021/08/23/6OD7IHGPbTLWzqZ.png" alt="image-20210823112321731"></p>
<p><strong>切换主题</strong></p>
<p>目前这个样子吧，还是好丑.</p>
<p>默认的配置文件位于 <code>~/.zshrc</code> 这里. </p>
<p>其中 ~ 代表用户的家目录，如<code>/home/ubuntu</code></p>
<p><img src="https://i.loli.net/2021/08/23/xMSeVDYoQ76hNZs.png" alt="image-20210823112824697"></p>
<p><s>好，改他。</s>个人比较习惯使用 <code>agnoster</code>，也就是最初展示的那个效果。</p>
<p><img src="https://i.loli.net/2021/08/23/yHqfpJ2rkX4CQmI.png" alt="image-20210823112959044"></p>
<p>Reference:</p>
<ul>
<li><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Settings">https://github.com/ohmyzsh/ohmyzsh/wiki/Settings</a></li>
</ul>
<p><strong>本地适配</strong></p>
<p>如果读到这里也做到这里，Windows 选手可能还有一个问题。</p>
<p>那就是这么好看的箭头符号展示出来是乱码。</p>
<p>问题不大，我们还有最后一步，安装字体文件。</p>
<p>可以参考如下链接。</p>
<p>Reference:</p>
<ul>
<li><p><a href="https://blog.csdn.net/qiphon3650/article/details/109165495">https://blog.csdn.net/qiphon3650/article/details/109165495</a></p>
</li>
<li><p><a href="https://github.com/powerline/fonts">https://github.com/powerline/fonts</a></p>
</li>
</ul>
<p>First edited by c7w, 2021-8-23 11:33:41.</p>
<p>咕咕咕 qwq</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>与 Nana 的日常 —— 从零开始的 Linux 调教指北(2)</title>
    <url>/dear-memory-with-nana-2/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/08/23/78DGrYSMnVgKkwE.jpg" alt="QQ图片20210823091857"></p>
<p>(Nana 印象图 初版)</p>
<p>速览本文：</p>
<ul>
<li>Docker 的安装</li>
<li>数据库的安装<ul>
<li>MariaDB</li>
<li>phpMyAdmin</li>
</ul>
</li>
<li>nodejs 与 npm 的安装</li>
</ul>
<a id="more"></a>
<h2 id="Docker-的介绍与安装"><a href="#Docker-的介绍与安装" class="headerlink" title="Docker 的介绍与安装"></a>Docker 的介绍与安装</h2><blockquote>
<p>What is <strong>Docker</strong>?</p>
<p>Docker takes away repetitive, mundane configuration tasks and is used throughout the development lifecycle for fast, easy and portable application development - desktop and cloud.</p>
<p>简而言之，就是打包好的应用，可以创建Docker容器来托管一系列应用.</p>
</blockquote>
<p><strong>安装</strong>：</p>
<p>(Option 1) 使用官方安装脚本自动安装即可</p>
<p><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></p>
<p>(Option 2) 也可使用国内 daocloud 一键安装：</p>
<p><code>curl -sSL https://get.daocloud.io/docker | sh</code></p>
<blockquote>
<p>但是在这里 c7w ran into problems.</p>
<p>详情可以看这里. 针对 armhf ubuntu 20.04: <a href="https://github.com/docker/for-linux/issues/1035">https://github.com/docker/for-linux/issues/1035</a></p>
<p>如果一键安装成功，请略过此处.</p>
<p><s><strong>想不到吧 爷去装arm64了 不伺候您armhf了</strong> <strong>只不过是从头再来</strong> <strong>停更一天</strong></s></p>
<p>大家就当无事发生过，这里 Nana 已经变成 arm64 了.</p>
</blockquote>
<p>(Option 3) 也可以使用 Tsinghua 源.</p>
<p>可以参考 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/">https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/</a> 手动安装.</p>
<h2 id="数据库安装与配置"><a href="#数据库安装与配置" class="headerlink" title="数据库安装与配置"></a>数据库安装与配置</h2><h3 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h3><blockquote>
<p>什么是 <strong>MariaDB</strong>?</p>
<p>MariaDB Server is one of the most popular database servers in the world. It’s made by the original developers of MySQL and guaranteed to stay open source. </p>
<p>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。 开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。</p>
<p>Reference:</p>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1635038">https://cloud.tencent.com/developer/article/1635038</a></li>
<li><a href="https://hub.docker.com/_/mariadb">https://hub.docker.com/_/mariadb</a></li>
</ul>
</blockquote>
<p><strong>安装</strong></p>
<p><code>sudo apt install mariadb-server</code></p>
<p><strong>查看字符集</strong></p>
<ul>
<li><code>sudo mysql</code> 进入控制台</li>
</ul>
<pre class="language-none"><code class="language-none"> ubuntu@ubuntu &gt; &#x2F;etc&#x2F;mysql &gt; sudo mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 52
Server version: 10.3.31-MariaDB-0ubuntu0.20.04.1 Ubuntu 20.04

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

MariaDB [(none)]&gt; </code></pre>
<ul>
<li><code>show variables like &quot;%character%&quot;;show variables like &quot;%collation%&quot;;</code> 查看当前字符集</li>
</ul>
<pre class="language-none"><code class="language-none">+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8mb4                    |
| character_set_connection | utf8mb4                    |
| character_set_database   | utf8mb4                    |
| character_set_filesystem | binary                     |
| character_set_results    | utf8mb4                    |
| character_set_server     | utf8mb4                    |
| character_set_system     | utf8                       |
| character_sets_dir       | &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;charsets&#x2F; |
+--------------------------+----------------------------+
8 rows in set (0.004 sec)

+----------------------+--------------------+
| Variable_name        | Value              |
+----------------------+--------------------+
| collation_connection | utf8mb4_general_ci |
| collation_database   | utf8mb4_general_ci |
| collation_server     | utf8mb4_general_ci |
+----------------------+--------------------+
3 rows in set (0.003 sec)</code></pre>
<p>这里已经是 <code>utf8mb4</code> 了，无须再更多配置.</p>
<p><strong>安全性配置</strong></p>
<p><code>sudo mysql_secure_installation</code> 进行安全性配置.</p>
<pre class="language-none"><code class="language-none">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!

In order to log into MariaDB to secure it, we&#39;ll need the current
password for the root user.  If you&#39;ve just installed MariaDB, and
you haven&#39;t set the root password yet, the password will be blank,
so you should just press enter here.

Enter current password for root (enter for none):
OK, successfully used password, moving on...

Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.

Set root password? [Y&#x2F;n] Y
New password:
Re-enter new password:
Password updated successfully!
Reloading privilege tables..
 ... Success!


By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.

Remove anonymous users? [Y&#x2F;n] Y
 ... Success!

Normally, root should only be allowed to connect from &#39;localhost&#39;.  This
ensures that someone cannot guess at the root password from the network.

Disallow root login remotely? [Y&#x2F;n] Y
 ... Success!

By default, MariaDB comes with a database named &#39;test&#39; that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.

Remove test database and access to it? [Y&#x2F;n] Y
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!

Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.

Reload privilege tables now? [Y&#x2F;n] Y
 ... Success!

Cleaning up...

All done!  If you&#39;ve completed all of the above steps, your MariaDB
installation should now be secure.

Thanks for using MariaDB!</code></pre>
<p><strong>新建管理员用户</strong></p>
<p>先 <code>sudo mysql</code> 进入控制台.</p>
<ul>
<li><code>CREATE USER &#39;&lt;USERNAME&gt;&#39;@&#39;%&#39; IDENTIFIED BY &#39;&lt;YOUR PASSWORD&gt;&#39;;</code> 创建用户</li>
<li><code>GRANT ALL PRIVILEGES ON *.* TO &#39;&lt;USERNAME&gt;&#39;@&#39;%&#39; WITH GRANT OPTION;</code> 给予管理员权限</li>
</ul>
<h3 id="phpMyAdmin"><a href="#phpMyAdmin" class="headerlink" title="phpMyAdmin"></a>phpMyAdmin</h3><p><strong>安装</strong></p>
<p><code>sudo apt install phpmyadmin</code></p>
<p>在询问是否需要帮助创建数据库时，选择取消.</p>
<p>在询问选择哪个软件作为管理 phpmyadmin server 的工具时，选择 apache2.</p>
<p><strong>更改配置</strong></p>
<ul>
<li>把 phpmyadmin 提供的默认的 apache2 配置文件移动到 apache2 目录下:</li>
</ul>
<p><code>sudo mv /etc/phpmyadmin/apache.conf /etc/apache2/conf-enabled</code></p>
<ul>
<li>然后更改 apache2 监听的端口：</li>
</ul>
<p><code>sudo vi /etc/apache2/ports.conf</code></p>
<p>把 80 端口改为没有被占用的端口.</p>
<ul>
<li>重启 apache2 服务：<code>sudo systemctl apache2 restart</code></li>
<li>尝试访问 <a href="http://IP_ADDRESS:PORT/phpmyadmin，然后使用上述新建的管理员账户密码完成登录">http://IP_ADDRESS:PORT/phpmyadmin，然后使用上述新建的管理员账户密码完成登录</a>.</li>
</ul>
<p><img src="https://i.loli.net/2021/08/25/NsUTCOdzWXnYmSu.png" alt="image-20210825202754563"></p>
<h2 id="Node-的安装"><a href="#Node-的安装" class="headerlink" title="Node 的安装"></a>Node 的安装</h2><p>我们直接使用已完成编译的包.</p>
<ul>
<li><p>先下载安装文件 <code>wget https://nodejs.org/dist/v14.17.5/node-v14.17.5-linux-arm64.tar.xz</code></p>
</li>
<li><p>解压 <code>tar xf node-v14.17.5-linux-arm64.tar.xz</code></p>
</li>
<li>进入目录 <code>cd node-v14.17.5-linux-arm64/</code></li>
<li>执行 node 查看版本 <code>./bin/node -v</code></li>
</ul>
<blockquote>
<p>这里 c7w 强迫症，还去搜索了这个文件应该放哪里比较好.</p>
<pre><code>有时候需要配置ubuntu安装的软件，一般安装软件都是使用apt-get install。那么安装完后，软件的安装目录在哪里呢，可执行文件又放在哪里呢。

A、下载的软件的存放位置：/var/cache/apt/archives

B、安装后软件的默认位置：/usr/share

C、可执行文件位置：/usr/bin

D、配置文件位置：/etc

E、lib文件位置：/usr/lib
</code></pre><p>Reference:</p>
<ul>
<li><a href="https://blog.csdn.net/u013276277/article/details/81033129">https://blog.csdn.net/u013276277/article/details/81033129</a></li>
</ul>
</blockquote>
<ul>
<li>移动文件： <code>sudo mv node-v14.17.5-linux-arm64 /usr/share</code></li>
<li>建立软链接</li>
</ul>
<pre class="language-none"><code class="language-none">ubuntu@ubuntu  &#x2F;usr&#x2F;bin  sudo ln -s &#x2F;usr&#x2F;share&#x2F;node-v14.17.5-linux-arm64&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;local&#x2F;bin
 ubuntu@ubuntu  &#x2F;usr&#x2F;bin  sudo ln -s &#x2F;usr&#x2F;share&#x2F;node-v14.17.5-linux-arm64&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin
 ubuntu@ubuntu  &#x2F;usr&#x2F;bin  node
Welcome to Node.js v14.17.5.
Type &quot;.help&quot; for more information.
&gt;</code></pre>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划的背包问题</title>
    <url>/dp-backpack/</url>
    <content><![CDATA[<h2 id="0-1-背包问题"><a href="#0-1-背包问题" class="headerlink" title="0/1 背包问题"></a>0/1 背包问题</h2><p>有$N$件物品和一个容量为$V$的背包。<strong>每种物品仅有一件，可以选择放或不放。</strong> 第$i$件物品的费用是$w[i]$，价值是$c[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 </p>
<p>设$f[i][v]$表示前$i$件物品(部分或全部)<em>恰</em>放入一个容量为$v$的背包可以获得的最大价值。则其状态转移方程便是：</p>
<script type="math/tex; mode=display">
f[i][v]=\max(f[i-1][v],f[i-1][v-w[i]]+c[i])</script><a id="more"></a>
<h3 id="0-1背包的空间优化"><a href="#0-1背包的空间优化" class="headerlink" title="0/1背包的空间优化"></a>0/1背包的空间优化</h3><p>我们可以将二维数组存储优化为一维数组存储。</p>
<p>在每次主循环中，如果我们以$v=V…0$的逆序推$f[v]$，这样就能保证推$f[v]$时$f[v-w[i]]$保存的是状态$f[i-1][v-w[i]]$的值。</p>
<p>伪代码如下：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>N 
	<span class="token keyword">for</span> v <span class="token operator">=</span> V<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.0</span> 
        f<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>v<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p>　　其中$f[v]=max(f[v],f[v-w[i]]+c[i])$便与原转移方程等价。</p>
<h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2><p>有$N$种物品和一个容量为$V$的背包，<strong>每种物品都有无限件可用</strong>。第$i$种物品的费用是$w[i]$，价值是$c[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 </p>
<p>令$f[i][v]$表示前$i$种物品<em>恰</em>放入一个容量为$v$的背包的最大价值，于是可以按照每种物品不同的策略写出状态转移方程：</p>
<script type="math/tex; mode=display">
f[i][v]=\max(f[i-1][v-k*{w[i]}]+k*{c[i]}) (k = 0, 1, ..., floor(\frac v {w[i]}))</script><h3 id="完全背包问题的空间优化"><a href="#完全背包问题的空间优化" class="headerlink" title="完全背包问题的空间优化"></a>完全背包问题的空间优化</h3><p>完全背包的特点恰是每种物品可选无限件，所以我们可以考虑“加选一件第$i$种物品”策略。因此我们可以使用<strong>可能已选入第i种物品</strong>的子结果$f[i][v-w[i]]$，于是我们必须采用$v=0…V$的顺序循环。</p>
<p>伪代码如下：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>N 
	<span class="token keyword">for</span> v <span class="token operator">=</span> <span class="token number">0.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>V
		f<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>v<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<h3 id="另一种解法：转化为0-1背包问题"><a href="#另一种解法：转化为0-1背包问题" class="headerlink" title="另一种解法：转化为0/1背包问题"></a>另一种解法：转化为0/1背包问题</h3><p>考虑到第$i$种物品最多选$floor(\frac V {w[i]})$件，于是可以把第$i$种物品转化为$floor(\frac V {w[i]})$件费用及价值均不变的物品，然后求解这个0/1背包问题。</p>
<p>更高效的转化方法是：把第$i$种物品拆成费用为$2^kw[i]$、价值为$2^kc[i]$的若干件物品，其中$k$满足$2^kw[i]&lt;V$。这是二进制的思想，因为不管最优策略选几件第$i$种物品，总可以表示成若干个$2^k$件物品的和。</p>
<h2 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h2><p>有$N$种物品和一个容量为$V$的背包。<strong>第$i$种物品最多有$n[i]$件可用</strong>，每件费用是$w[i]$，价值是$c[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>
<p>基本的方程只需将完全背包问题的方程略微一改即可，因为对于第$i$种物品有$n[i]+1$种策略：取$0$件，取$1$件……取$n[i]$件。令$f[i][v]$表示前$i$种物品恰放入一个容量为$v$的背包的最大价值，则：</p>
<script type="math/tex; mode=display">
for \ k\ in \ range[0, n[i]]: \\
f[i][v]=max(f[i-1][v-k*w[i]]+ k*c[i])</script><p>循环时注意$v-k*w[i]$ 非负即可。</p>
<h3 id="转化为0-1背包问题"><a href="#转化为0-1背包问题" class="headerlink" title="转化为0/1背包问题"></a>转化为0/1背包问题</h3><p>将第$i$种物品分成若干件物品，其中每件物品有一个系数，这件物品的费用和价值均是原来的费用和价值乘以这个系数。使这些系数分别为</p>
<script type="math/tex; mode=display">
1,2,4, \cdots ,2^{k-1},n[i]-2^k+1</script><p>且k是满足$n[i]-2^k+1&gt;0$的最大整数。</p>
<p>例如，如果$n[i]$为$13$，就将这种物品分成系数分别为$1,2,4,6$的四件物品。 </p>
<h2 id="二维背包问题"><a href="#二维背包问题" class="headerlink" title="二维背包问题"></a>二维背包问题</h2><p>二维费用的背包问题是指：对于每件物品，具有两种不同的费用；选择这件物品必须同时付出这两种代价；对于每种代价都有一个可付出的最大值（背包容量）。问怎样选择物品可以得到最大的价值。</p>
<p>设这两种代价分别为代价1和代价2，第$i$件物品所需的两种代价分别为$a[i]$和$b[i]$。两种代价可付出的最大值（两种背包容量）分别为$V$和$U$。物品的价值为$c[i]$。</p>
<p>费用加了一维，只需状态也加一维即可。设$f[i][v][u]$表示前$i$件物品付出两种代价分别恰为$v$和$u$时可获得的最大价值。状态转移方程就是：</p>
<script type="math/tex; mode=display">
f[i][v][u]=max(f[i-1][v][u], f[i-1][v-a[i]][u-b[i]]+c[i])</script><p>如前述方法，可以只使用二维的数组：当每件物品只可以取一次时变量$v$和$u$采用逆序的循环，当物品有如完全背包问题时采用顺序的循环。当物品有如多重背包问题时拆分物品。</p>
<h3 id="物品总个数的限制"><a href="#物品总个数的限制" class="headerlink" title="物品总个数的限制"></a>物品总个数的限制</h3><p>有时，“二维费用”的条件是以这样一种隐含的方式给出的：最多只能取$M$件物品。这事实上相当于每件物品多了一种“件数”的费用，每个物品的件数费用均为$1$，可以付出的最大件数费用为$M$。</p>
<h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><ul>
<li><a href="https://www.luogu.com.cn/problem/P1833">https://www.luogu.com.cn/problem/P1833</a></li>
</ul>
<p>附AC代码：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> v<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//  i j   k</span>
<span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">processTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d:%d %d:%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    v <span class="token operator">=</span> d <span class="token operator">-</span> b <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">tryItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> cost<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">bool</span> inf<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>inf<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> cost<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> v<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> cost<span class="token punctuation">]</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> v<span class="token punctuation">;</span> j <span class="token operator">>=</span> cost<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> cost<span class="token punctuation">]</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">decompose</span><span class="token punctuation">(</span><span class="token keyword">int</span> cost<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">>=</span>base<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">tryItem</span><span class="token punctuation">(</span>cost <span class="token operator">*</span> base<span class="token punctuation">,</span> value <span class="token operator">*</span> base<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        num <span class="token operator">-=</span> base<span class="token punctuation">;</span>
        base <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">tryItem</span><span class="token punctuation">(</span>cost <span class="token operator">*</span> num<span class="token punctuation">,</span> value <span class="token operator">*</span> num<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">processTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">tryItem</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">tryItem</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token function">decompose</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        result <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    cout <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
]]></content>
      <categories>
        <category>程设</category>
        <category>程设/动态规划</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>0/1背包</tag>
      </tags>
  </entry>
  <entry>
    <title>Note for &quot;But what is a neural network?&quot;</title>
    <url>/but-what-is-a-neural-network/</url>
    <content><![CDATA[<p>Notes taken from watching <strong>3Blue1Brown series: Nerual networks</strong>.</p>
<ul>
<li>But what is a nerual network?</li>
<li>Gradient Descent</li>
<li>Back Propagation</li>
</ul>
<a id="more"></a>
<h2 id="Chapter-1-Overview"><a href="#Chapter-1-Overview" class="headerlink" title="Chapter 1: Overview"></a>Chapter 1: Overview</h2><p>Consider <strong>Nerual network</strong>:</p>
<ul>
<li>What are the neurons?<ul>
<li>Functions, which take several numbers as input and give a number as output</li>
</ul>
</li>
<li>How are they linked together? </li>
</ul>
<p><strong>Layers</strong> (Each layer made up of neurons):</p>
<ul>
<li>The activations of one layer determines the activations of the next layer.</li>
</ul>
<p>What those <strong>middle layers</strong> might be doing?</p>
<ul>
<li>It may be holding subcomponents of the image.</li>
<li>Input layer -&gt; Edge layer -&gt; Pattern layer -&gt; Output Digit Layer (?)</li>
</ul>
<p><strong>Edge Detection Example</strong></p>
<ul>
<li>Assign a weight to <strong>each connection</strong> between the neuron and the neurons from the former layer</li>
</ul>
<p><img src="https://i.loli.net/2021/09/03/2OhjAcN1p9JesRX.png" alt="image-20210903150326487"></p>
<ul>
<li>Let activations from the last layer be $a_1, a_2, a_3, …a_n$​ and the weight numbers be $w_1, w_2, w_3, …w_n$​​.</li>
<li>Let $w_1a_1 + w_2a_2 + … + w_na_n$ represent the neuron activation? No! We have to make the range of activation between [0, 1], but the result comes along with any possible real number.</li>
</ul>
<p><img src="https://i.loli.net/2021/09/03/pQn9PXsdu3lZNO1.png" alt="image-20210903150746983"></p>
<ul>
<li>We could use the <strong>sigmoid function</strong>, or the <strong>logistic curve</strong> to solve this. $\sigma(x) = \frac 1 {1+e^{-x}}$​</li>
</ul>
<p><img src="https://i.loli.net/2021/09/03/aZoQXd3Ec2T1GFL.png" alt="image-20210903151057105"></p>
<ul>
<li>So can we let the activation of the neuron be $\sigma(w_1a_1 + w_2a_2 + … + w_na_n)$​, which is basically a measure of how <strong>positively</strong> the relevant weighted sum is?</li>
<li>Well, maybe we need some <strong>bias</strong>, say, only activate when $w_1a_1 + w_2a_2 + … + w_na_n &gt; 10$?</li>
<li>So finally we get, the activation of the neuron, which is $\sigma(w_1a_1 + w_2a_2 + … + w_na_n + bias)$, which is -10 in this case.​​</li>
</ul>
<p><strong>Counting weights and biases</strong></p>
<ul>
<li>All described above is just above <strong>one specific neuron</strong>, and in fact, in a middle layer, we have several neurons!</li>
<li>Take the video example, just a two-middle-layered network have more than 13k parameters to tweak!</li>
</ul>
<p><img src="https://i.loli.net/2021/09/03/OLumsy3nIMQtekc.png" alt="image-20210903151909640"></p>
<ul>
<li>So when we talk about learning, it is about <strong>finding the right weights and biases</strong> to make the network behave in the right way.</li>
</ul>
<p><strong>Notations and linear algebra</strong></p>
<ul>
<li><p>Let activations from one layer be a column vector: $\begin {bmatrix} a_1^{(0)}\\ a_2^{(0)}\\ \vdots\\ a_n^{(0)}\\ \end {bmatrix}$​​​​​​</p>
</li>
<li><p>Let weights of connection between two adjacent layers be a matrix: $\begin {bmatrix} w_{1,1} &amp; w_{1,2} &amp; \cdots &amp; w_{1,n} \\ w_{2,1} &amp; w_{2,2} &amp; \cdots &amp; w_{2,n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ w_{k,1} &amp; w_{k,2} &amp; \cdots &amp; w_{k,n}  \end {bmatrix}$​​</p>
<ul>
<li>Row $i$ of the matrix represents the connection weight between neuron $i$ with the neurons from the last layer.</li>
</ul>
</li>
</ul>
<ul>
<li><p>Let the biases be in a column vector: $\begin {bmatrix} b_1\\ b_2\\ \vdots\\ b_n\\ \end {bmatrix}$​​​​</p>
</li>
<li><p>And let $\sigma(\begin {bmatrix} x\\ y\\ \vdots\\ z\\ \end {bmatrix}) \ := \ \begin {bmatrix} \sigma(x)\\ \sigma(y)\\ \vdots\\ \sigma(z)\\ \end {bmatrix}$</p>
</li>
<li><p>So we get our notation now: $a^{(2)} = \sigma(W^{(2)}a^{(1)}+b^{(2)})$​​​</p>
<ul>
<li>$a^{(i)}$: the activations of the $i$​-th layer</li>
<li>$W^{(i)}$: connection weight matrix between layer $i$ and $i-1$</li>
<li>$b^{(i)}$: biases of neurons in the layer $i$</li>
</ul>
</li>
</ul>
<h2 id="Chapter-2-Gradient-descent"><a href="#Chapter-2-Gradient-descent" class="headerlink" title="Chapter 2: Gradient descent"></a>Chapter 2: Gradient descent</h2><p><strong>Using training data</strong></p>
<ul>
<li>We can divide our data with labels into two groups, the training group and the testing group.</li>
<li>Firstly, we can use the data in the training group to train our network.</li>
<li>Then we could use the test group to check its accuracy.</li>
</ul>
<p><strong>Cost Function</strong></p>
<ul>
<li>Review: Nerual network function<ul>
<li>Input: 784 numbers (pixels)</li>
<li>Output: 10 numbers</li>
<li>Parameters: 13k weights or biases</li>
</ul>
</li>
<li>But the cost function might be like…<ul>
<li>Input: 13k weights or biases</li>
<li>Output: 1 single number (namely the cost)</li>
<li>Parameters: Different set of training examples</li>
</ul>
</li>
<li>Notation<ul>
<li>$C(w_1, w_2, \cdots, w_{13002}) := \frac 1 {2n} \sum_x|| y(x)-a ||^2$​</li>
<li>Now we can just try to solve this problem: how to find the minimum of $C$ and the corresponding set of $w$​!</li>
</ul>
</li>
<li>It is hard to solve this minimum problem using mathematic methods when the amount of parameters is high, but we can…<ul>
<li>Start at an old input</li>
<li>Figure out which direction you should step to make the cost lower</li>
<li>And that direction is: $-\nabla C$​</li>
</ul>
</li>
<li>So we could just choose $\Delta v =-\eta\nabla C$​.<ul>
<li>In which $\eta$​ is a small, positive parameter (known as <em>learning rate</em>) </li>
<li>Then we can make $ v \rightarrow (v’=v-\eta\nabla C)$​ in every iteration</li>
</ul>
</li>
</ul>
<p><strong>Anaylsing the network</strong></p>
<ul>
<li>Does the network’s middle layer really doing what was imagined? Namely, edges, patterns, etc.?<ul>
<li>Not at all!</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/03/BrJF1SleKfVTqOD.png" alt="image-20210903164518327"></p>
<ul>
<li>The magnitude of each element in the gradient is indicating how sensitive the cost function is to each weight or bias.</li>
</ul>
<h2 id="Chapter-3-Back-Propagation"><a href="#Chapter-3-Back-Propagation" class="headerlink" title="Chapter 3: Back Propagation"></a>Chapter 3: Back Propagation</h2><p><strong>What is back propagation?</strong></p>
<ul>
<li>It is an algorithm for computing the gradients of the cost function.</li>
</ul>
<p><strong>Stochastic gradient descent</strong></p>
<ul>
<li>It takes the computer rather long time to add up the influence of every single training example.</li>
<li>So we can randomly shuffle our training data, then divide it into mini-batches.</li>
<li>Then we can compute a step according to the mini-batch.</li>
</ul>
<p><strong>Chain rule</strong></p>
<p><img src="https://i.loli.net/2021/09/03/rpMKl7V1faHI4S5.png" alt="image-20210903215157598"></p>
<pre class="mermaid">graph LR
subgraph "Layer m-1"
A0("1")
A1("2")
A2("3")
A3("4")
end
subgraph "Layer m"
B2("output(i-1)")
B0("output(i)")
B1("output(i+1)")
end
subgraph "Anticipated label"
C2("y(i-1)")
C0("y(i)")
C1("y(i+1)")
end
A0 --> B0
A1 --> B0
A2 --> B0
A3 --> B0
B0 --> C0
B1 --> C1
B2 --> C2</pre>

<ul>
<li>We remember $\begin {bmatrix} a_1^{(2)}\\ a_2^{(2)}\\ \vdots\\ a_k^{(2)}\\ \end {bmatrix}= \sigma (\begin {bmatrix} w^{(2)}_{1,1} &amp; w^{(2)}_{1,2} &amp; \cdots &amp; w^{(2)}_{1,n} \\ w^{(2)}_{2,1} &amp; w^{(2)}_{2,2} &amp; \cdots &amp; w^{(2)}_{2,n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ w^{(2)}_{k,1} &amp; w^{(2)}_{k,2} &amp; \cdots &amp; w^{(2)}_{k,n}  \end {bmatrix}\begin {bmatrix} a_1^{(1)}\\ a_2^{(1)}\\ \vdots\\ a_n^{(1)}\\ \end {bmatrix} + \begin {bmatrix} b_1^{(2)}\\ b_2^{(2)}\\ \vdots\\ b_k^{(2)}\\ \end {bmatrix})$<ul>
<li>Namely $a^{(L)}_i  = \sigma( \sum_jw^{(L)}_{i, j}a_j^{(L-1)}+ b^{(L)})$​​​​​.​</li>
<li>We denote this by $z^l = w^la^{l-1}+b^l$​ and $a^l = \sigma(z^l)$​</li>
</ul>
</li>
<li>And we have $C(\vec W, \vec b) = \frac 1 {2n} \sum_x|| y(x)-a ||^2$<ul>
<li>We assume that $C = \frac 1 n \sum_x C_x$​, in which $C_x = \frac 1 2 ||y-a^{L}||^2$​​​</li>
</ul>
</li>
</ul>
<pre class="mermaid">graph RL
CX("$C$")
aE("$a^L$")
zE("$z^L$")
wE("$w^L$")
aEL("$a^{L-1}$")
bE("$b^L$")
zEL("$z^{L-1}$")
wEL("$w^{L-1}$")
aELL("$a^{L-2}$")
bEL("$b^{L-1}$")

aE -->|"$(y_x-a^L_x)^2$"| CX
zE -->|"$\sigma$"| aE
wE --> zE
aEL --> zE
bE --> zE
zEL -->|"$\sigma$"| aEL
wEL --> zEL
aELL --> zEL
bEL --> zEL
dot("$\cdots$") --> aELL</pre>

<ul>
<li>Then the core equations of back propagation…<ul>
<li>$\frac {\partial C} {\partial z_i^L} = \frac {\partial C} {\partial a_i^L}\frac {\partial a_i^L} {\partial z_i^L} = (a_i^L-y_i)\sigma’(z_i^L)$​​​​ (Initialize)​<ul>
<li>That is $\delta := \frac {\partial C} {\partial z^L} = (a^L-y) \odot \sigma’(z^L)$​​</li>
</ul>
</li>
<li>According to $z^{(L)}_i = \sum_jw^{(L)}_{i, j}a_j^{(L-1)}+ b_i^{(L)}$​​​​, suppose we have calculated $\frac {\partial C} {\partial z^M_i}$​​​ for all neuron $i$​​​ in layer $M$​​​.<ul>
<li>How can we get $\frac {\partial C} {\partial w^M_{i, j}}$​​​ for all neuron $i$​​​ in layer $M$​​ and $j$​​ in layer $M-1$​​​​?<ul>
<li>$\frac {\partial C} {\partial w^M_{i, j}} = \frac {\partial C} {\partial z^M_i} \frac {\partial z^M_i}{\partial w^M_{i, j}} = \frac {\partial C} {\partial z^M_i} a_j^{M-1}$​<ul>
<li>$\frac {\partial C} {\partial w^M} = \frac {\partial C} {\partial z^L} (a^{M-1})^T$</li>
</ul>
</li>
</ul>
</li>
<li>How can we get $\frac {\partial C} {\partial b^M_i} $​​ for all neuron $i$​​ in layer $M$​?<ul>
<li>$\frac {\partial C} {\partial b^M_{i}} = \frac {\partial C} {\partial z^M_i} \frac {\partial z^M_i}{\partial b^M_{i}} = \frac {\partial C} {\partial z^M_i}$​<ul>
<li>$\frac {\partial C} {\partial b^M} = \frac {\partial C} {\partial z^M}$</li>
</ul>
</li>
</ul>
</li>
<li>How can we get $\frac {\partial C} {\partial a^{M-1}_j} $ and $\frac {\partial C} {\partial z^{M-1}_j} $ for all neuron $j$ in layer $M-1$?<ul>
<li>$\frac {\partial C} {\partial a^{M-1}_j}  = \sum_i \frac {\partial C}{\partial z^M_i} \frac {\partial z^M_i} {a_j^{M-1}} = \sum_i \frac {\partial C}{\partial z^M_i} w_{i,j}^M$​<ul>
<li>$\frac {\partial C} {\partial a^{M-1}} = (w^M)^T \frac {\partial C} {\partial z^M}$​</li>
</ul>
</li>
<li>Then $\frac {\partial C} {\partial z^{M-1}_j} = \frac {\partial C} {\partial a^{M-1}_j} \sigma’(z^{M-1}_j)$​<ul>
<li>$\frac {\partial C} {\partial z^{M-1}} = (w^M)^T \frac {\partial C} {\partial z^M}\odot\sigma’(z^{M-1})$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Then by recursion, we could calculate all the partial derivatives of weights and biases.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 语言程序设计学习笔记</title>
    <url>/intro-to-java/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/06/20/hn4zWvlPVmRAfjs.png" alt="image-20210620145438112"></p>
<p>本文含有的主要内容：</p>
<ul>
<li>异常处理与文本I/O</li>
<li>抽象类与接口</li>
<li>Package</li>
<li>多线程</li>
</ul>
<p>本文需要整理的内容还有很多，至少目前来看还只是“学习笔记”风格，内容还较为混乱。</p>
<a id="more"></a>
<h2 id="异常处理和文本I-O"><a href="#异常处理和文本I-O" class="headerlink" title="异常处理和文本I/O"></a>异常处理和文本I/O</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>Java 中的<strong>运行时错误</strong>会作为<strong>异常</strong>，这种<strong>对象</strong>被抛出，而如果抛出的异常没有被处理，程序会非正常终止。</p>
<p><img src="https://i.loli.net/2021/06/20/XOrLyW3uFJ5Dwqm.png" alt="image-20210620150112414"></p>
<ul>
<li>异常的类型</li>
</ul>
<p><img src="https://i.loli.net/2021/06/20/2Ga1goTf5FDRxEy.png" alt="image-20210620152135135"></p>
<p><img src="https://i.loli.net/2021/06/20/RL2cOK8rluwJUG7.png" alt="image-20210620152415538"></p>
<ul>
<li>异常处理模型 declaring -&gt; throwing -&gt; catching</li>
</ul>
<p><img src="https://i.loli.net/2021/06/20/T3lVvEK5xo9Wkuc.png" alt="image-20210620152541858"></p>
<p><img src="https://i.loli.net/2021/06/20/CRFP5L1WHIYEBpx.png" alt="image-20210620153031756"></p>
<ul>
<li><p>finally 语句</p>
</li>
<li><p>自定义异常类</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/06/20/wPzZaL7VIYKWUNc.png" alt="image-20210620153455786"></p>
<h3 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I/O"></a>文件I/O</h3><ul>
<li>文件类 File</li>
</ul>
<p><img src="https://i.loli.net/2021/06/20/B2MxU41hQq3kwFu.png" alt="image-20210620153648056"></p>
<ul>
<li>写入数据 PrintWriter 类</li>
</ul>
<p><img src="https://i.loli.net/2021/06/20/4362nMRXLCJaqYx.png" alt="image-20210620155626076"></p>
<ul>
<li>读入数据 Scanner 类</li>
</ul>
<p><img src="https://i.loli.net/2021/06/20/gzUiAfGE6v83WCx.png" alt="image-20210620160405882"></p>
<h2 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h2><ul>
<li>使用 <code>abstract</code> 关键字</li>
<li>接口</li>
</ul>
<p><img src="https://i.loli.net/2021/06/20/j3RAO1wqDsgG9ar.png" alt="image-20210620162928845"></p>
<p><img src="https://i.loli.net/2021/06/20/JWalQBtCKkYA61m.png" alt="image-20210620163020435"></p>
<p><img src="https://i.loli.net/2021/06/20/gLMbBeXJCQAaVzr.png" alt="image-20210620163038375"></p>
<p><img src="https://i.loli.net/2021/06/20/dOLDjAVpaSyem8Z.png" alt="image-20210620163054898"></p>
<p><img src="https://i.loli.net/2021/06/20/QVeTfHq9aBj4puS.png" alt="image-20210620163120256"></p>
<ul>
<li>几种常用的接口<ul>
<li>Comparable<E></li>
<li>Cloneable</li>
</ul>
</li>
</ul>
<h2 id="类的组织——包的概念"><a href="#类的组织——包的概念" class="headerlink" title="类的组织——包的概念"></a>类的组织——包的概念</h2><h3 id="编译单元与类空间"><a href="#编译单元与类空间" class="headerlink" title="编译单元与类空间"></a>编译单元与类空间</h3><ul>
<li>编译单元：一个 Java 源代码文件<ul>
<li>一个编译单元中只能有 一个 public 权限的类</li>
<li>且该类名与文件名相同</li>
<li>类名存在冲突问题</li>
</ul>
</li>
<li>编译单元的组成部分<ul>
<li>所属包的声明；</li>
<li>Import 包的声明用来导入外部类；</li>
<li>类和接口的声明.</li>
</ul>
</li>
</ul>
<h3 id="包与目录"><a href="#包与目录" class="headerlink" title="包与目录"></a>包与目录</h3><p><img src="https://i.loli.net/2021/06/22/PfxFjRqTn4pAGwb.png" alt="image-20210622093402716"></p>
<p><img src="https://i.loli.net/2021/06/22/R5vp4OgNIoc3XVS.png" alt="image-20210622093500242"></p>
<h3 id="引入包与静态引入"><a href="#引入包与静态引入" class="headerlink" title="引入包与静态引入"></a>引入包与静态引入</h3><p><img src="https://i.loli.net/2021/06/22/MVz5RybwFh9UrLT.png" alt="image-20210622093702915"></p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="如何创建多线程"><a href="#如何创建多线程" class="headerlink" title="如何创建多线程"></a>如何创建多线程</h3><h4 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a>继承 Thread 类</h4> <pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigInteger</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Start of the main Thread."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AnotherThread</span> th1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnotherThread</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AnotherThread</span> th2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnotherThread</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        th1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        th2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"End of the main thread."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">AnotherThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">AnotherThread</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name">BigInteger</span> i <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigInteger</span> result <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A new thread has been created with number "</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            i <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Calc Ans: "</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">" with number "</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread has ended with number"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code></pre>
<h4 id="Runnable-接口"><a href="#Runnable-接口" class="headerlink" title="Runnable 接口"></a>Runnable 接口</h4><p><img src="https://i.loli.net/2021/06/22/xq2eEdBO1LhCUNp.png" alt="image-20210622134139451"></p>
<p><img src="https://i.loli.net/2021/06/22/E7C4eYTcBwIvtRp.png" alt="image-20210622134156347"></p>
<h3 id="线程间的资源共享"><a href="#线程间的资源共享" class="headerlink" title="线程间的资源共享"></a>线程间的资源共享</h3><p>当多个线程的执行代码来自于同一个类的run方法时，则称它们共享相同的代码；而当它们访问相同的对象时，则称它们共享相同的数据。</p>
<p>线程间数据共享的实现方法：<strong>用一个 Runnable 类型的对象创建多个线程</strong></p>
<p><img src="https://i.loli.net/2021/06/22/UiedvSbgnKCX4Va.png" alt="image-20210622134610122"></p>
<h3 id="多线程间的同步控制"><a href="#多线程间的同步控制" class="headerlink" title="多线程间的同步控制"></a>多线程间的同步控制</h3><p><img src="https://i.loli.net/2021/06/22/86GhI5Kabnr4ilV.png" alt="image-20210622151938199"></p>
<p><img src="https://i.loli.net/2021/06/22/xDBimG3KEbYJhsr.png" alt="image-20210622152001891"></p>
<p><img src="https://i.loli.net/2021/06/22/grM9S8DeBVbzhFW.png" alt="image-20210622152340500"></p>
<p><img src="https://i.loli.net/2021/06/22/SAXKpEbT6Pr3lF7.png" alt="image-20210622152550427"></p>
<p><img src="https://i.loli.net/2021/06/22/F3lYMpQ46ijmgtP.png" alt="image-20210622152613819"></p>
<p>改进后的代码：</p>
<p><img src="https://i.loli.net/2021/06/22/8Eha4etDxWRVHmL.png" alt="image-20210622153052026"></p>
<p><img src="https://i.loli.net/2021/06/22/a9hEeXUrMOlo7cs.png" alt="image-20210622153137260"></p>
<p><img src="https://i.loli.net/2021/06/22/Q5NBhT8gdAeLJ9v.png" alt="image-20210622153143586"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>与 Nana 的日常 —— 从零开始的 Linux 调教指北(1)</title>
    <url>/dear-memory-with-nana-1/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/08/23/78DGrYSMnVgKkwE.jpg" alt="QQ图片20210823091857"></p>
<p>(Nana 印象图 初版)</p>
<p>速览本文：</p>
<ul>
<li>FTP 配置</li>
<li>网络配置<ul>
<li>Cloudflared 内网穿透</li>
<li>nginx 反向代理</li>
<li>gunicorn [Python WSGI HTTP Server for UNIX]</li>
<li>Supervisor 设置守护进程</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="FTP-配置"><a href="#FTP-配置" class="headerlink" title="FTP 配置"></a>FTP 配置</h2><blockquote>
<p>前置知识：【FTP 文件传输】</p>
</blockquote>
<p><strong>安装 vsftpd</strong></p>
<blockquote>
<p>什么是 vsftpd ?</p>
<p><strong>vsftpd</strong> is a GPL licensed <strong>FTP server</strong> for UNIX systems, including Linux.</p>
</blockquote>
<p><code>sudo apt install vsftpd</code></p>
<p><code>sudo systemctl start vsftpd</code> // 开启进程<br><code>sudo systemctl enable vsftpd</code> // 开机启动</p>
<p><strong>配置 FTP 用户</strong></p>
<ul>
<li>创建用户目录：<code>sudo mkdir /home/ftpuser</code></li>
<li>创建用户并关联用户文件夹，这样使用 ftpuser 用户登陆的时候，就可以直接登陆到 /home/ftpuser 下：<code>sudo useradd -d /home/ftpuser -s /bin/bash ftpuser</code></li>
<li>更改用户目录权限：<code>sudo chown ftpuser:ftpuser /home/ftpuser</code></li>
<li>重设 ftpuser 的密码：<code>sudo passwd ftpuser</code> </li>
</ul>
<p><strong>配置 FTP 设置</strong></p>
<p><code>sudo vi /etc/vsftpd.conf</code></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Uncomment this to enable any form of FTP write command.</span>
<span class="token comment">#write_enable=YES</span></code></pre>
<p>把这行注释解除.</p>
<p><code>vim /etc/pam.d/vsftpd</code></p>
<p>注释掉</p>
<p><code>#auth   required pam_shells.so</code></p>
<p><strong>重启 FTP 服务</strong></p>
<p><code>sudo service vsftpd restart</code></p>
<p><strong>测试连接</strong></p>
<p><img src="https://i.loli.net/2021/08/23/OafiV2PeX9NYRrh.png" alt="image-20210823211829678"></p>
<p><img src="https://i.loli.net/2021/08/23/L8xdsFEH2UYXDnV.png" alt="image-20210823212448472"></p>
<p>Reference:</p>
<ul>
<li><a href="https://www.huaweicloud.com/articles/4fc98eb98f27a99aa1b06b0d71dab20a.html">https://www.huaweicloud.com/articles/4fc98eb98f27a99aa1b06b0d71dab20a.html</a></li>
<li><a href="https://devanswers.co/vsftpd-550-permission-denied-ubuntu/">https://devanswers.co/vsftpd-550-permission-denied-ubuntu/</a></li>
</ul>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="Cloudflared-内网穿透"><a href="#Cloudflared-内网穿透" class="headerlink" title="Cloudflared 内网穿透"></a>Cloudflared 内网穿透</h3><blockquote>
<p><strong>为什么要做内网穿透？</strong></p>
<p>在没有做内网穿透之前，我们的 Nana 只能被 Peking-Visitor（也就是路由器管理的网络）和 Zerotier 创建的虚拟网络中被访问到.</p>
<p>而内网穿透就是为了让我们的 Nana 提供的服务能够被 public Internet 访问到.</p>
<p><strong>什么是 Cloudflare? </strong></p>
<p>[这里认为读者已经对<strong>域名</strong>,<strong>域名解析</strong>有了基本的理解]</p>
<p>Cloudflare.com 是一家域名解析商. 可以为域名提供解析服务.</p>
<p>例如：</p>
<p><img src="https://i.loli.net/2021/08/23/bYPs3hkwjvnxc8E.png" alt="image-20210823204436613"></p>
<p>[请自行探索 DNS 记录：什么是 A 记录？什么是 CNAME 记录？]</p>
<p><strong>什么是 Cloudflared?</strong></p>
<p>Cloudflare 这家公司十分大方，为用户们提供了隧道服务。</p>
<p>Cloudflare Tunnel requires the installation of a lightweight server-side <strong>daemon</strong>, <strong>cloudflared</strong>, to connect your infrastructure to Cloudflare. </p>
<p><strong>cloudflared</strong> is an open source project maintained by Cloudflare.</p>
<p><em>daemon</em>: 守护进程，需要常驻后台的进程</p>
<p><em>cloudflared</em>: 我们的主人公，需要安装配置到 Nana 上.</p>
</blockquote>
<p><strong>软件下载</strong></p>
<ul>
<li><a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation">https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation</a></li>
</ul>
<p>在这里下载对应的安装文件，然后安装.</p>
<p>我们直接下载二进制的文件 <code>cloudflared-linux-arm</code> 后上传到服务器.</p>
<p><code>sudo cp ./cloudflared-linux-arm /usr/local/bin/cloudflared</code> </p>
<p>// 添加到 Path</p>
<p><code>sudo chmod +x /usr/local/bin/cloudflared</code> // 切换执行权限</p>
<p><code>cloudflared -v</code> // 验证是否安装成功</p>
<p><strong>配置穿透</strong></p>
<blockquote>
<p>Before you start:</p>
<p>​    向 Cloudflare 添加一个域名并确认其已被接管</p>
</blockquote>
<ul>
<li>验证身份：<code>cloudflared tunnel login</code>，复制链接到浏览器，登录后选择域名，完成认证.</li>
<li>创建隧道：<code>cloudflared tunnel create &lt;NAME&gt;</code>，随机生成隧道的 UUID. </li>
<li>编辑配置文件 <code>sudo vi ~/.cloudflared/config.yml</code></li>
</ul>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tunnel</span><span class="token punctuation">:</span> 6ff42ae2<span class="token punctuation">-</span>765d<span class="token punctuation">-</span>4adf<span class="token punctuation">-</span>8112<span class="token punctuation">-</span>31c55c1551ef
<span class="token key atrule">credentials-file</span><span class="token punctuation">:</span> /root/.cloudflared/6ff42ae2<span class="token punctuation">-</span>765d<span class="token punctuation">-</span>4adf<span class="token punctuation">-</span>8112<span class="token punctuation">-</span>31c55c1551ef.json

<span class="token key atrule">ingress</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">hostname</span><span class="token punctuation">:</span> gitlab.widgetcorp.tech
    <span class="token key atrule">service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">80</span>
  <span class="token punctuation">-</span> <span class="token key atrule">hostname</span><span class="token punctuation">:</span> gitlab<span class="token punctuation">-</span>ssh.widgetcorp.tech
    <span class="token key atrule">service</span><span class="token punctuation">:</span> ssh<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">22</span>
  <span class="token punctuation">-</span> <span class="token key atrule">service</span><span class="token punctuation">:</span> http_status<span class="token punctuation">:</span><span class="token number">404</span></code></pre>
<ul>
<li>绑定隧道到域名 <code>cloudflared tunnel route dns &lt;UUID or NAME&gt; &lt;DOMAIN&gt;</code></li>
</ul>
<p><strong>设置自动启动</strong></p>
<p><code>sudo cloudflared service install</code></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"> ✘ ubuntu@ubuntu  /etc/cloudflared  <span class="token function">sudo</span> <span class="token function">mv</span> ~/.cloudflared/config.yml /etc/cloudflared
 ubuntu@ubuntu  /etc/cloudflared  <span class="token function">sudo</span> cloudflared <span class="token function">service</span> <span class="token function">install</span>
<span class="token number">2021</span>-08-23T14:16:19Z INF Using Systemd
<span class="token number">2021</span>-08-23T14:16:21Z INF systemctl daemon-reload</code></pre>
<p>设置完成.</p>
<p>Reference:</p>
<ul>
<li><a href="https://www.jianshu.com/p/8fdd0e3b7339">https://www.jianshu.com/p/8fdd0e3b7339</a></li>
<li><a href="https://blog.zapic.moe/Archives/Tutorial-176.html">https://blog.zapic.moe/Archives/Tutorial-176.html</a></li>
<li><a href="https://docs.pi-hole.net/guides/dns/cloudflared/#armhf-architecture-32-bit-raspberry-pi">https://docs.pi-hole.net/guides/dns/cloudflared/#armhf-architecture-32-bit-raspberry-pi</a></li>
</ul>
<h3 id="nginx-反向代理"><a href="#nginx-反向代理" class="headerlink" title="nginx 反向代理"></a>nginx 反向代理</h3><blockquote>
<p><strong>nginx</strong> [engine x] is an <strong>HTTP and reverse proxy server</strong>, a mail proxy server, and a generic TCP/UDP proxy server, originally written by Igor Sysoev.</p>
<p><strong>什么是正向代理？什么是反向代理？</strong></p>
<p><strong>正向代理（forward proxy）</strong>：是一个位于客户端和目标服务器之间的服务器(代理服务器)，为了从目标服务器取得内容，客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端。（例如 酸酸乳，幻影飞梭，蓝色宝灯 etc.）</p>
<p><strong>反向代理（reverse proxy）</strong>：是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。（例如我们本节的主角 nginx）</p>
<p>二者的功能不同，适用的场景也不同。</p>
</blockquote>
<p><strong>安装 Nginx</strong></p>
<p><code>sudo apt install nginx</code></p>
<p><strong>命令</strong></p>
<ul>
<li><code>nginx -s stop</code> 关闭</li>
<li><code>nginx -s reload</code> 重载配置</li>
</ul>
<p><strong>常用功能介绍</strong></p>
<ul>
<li>提供静态文件（根据访问路径路由）</li>
</ul>
<p>我们可以先去看一下默认配置，<code>sudo vi /etc/nginx/nginx.conf</code></p>
<p>先把 <code>user</code> 改成 <code>ftpuser</code>，给予文件读写权限.</p>
<p>可以看到，在 HTTP 节 的 <code>Virtual Host Configs</code> 中 include 了 sites-enabled 的所有文件. 也就是说，我们可以通过在这个目录中新建文件的方式，来进行站点的添加.</p>
<p>在文件的最后，我们可以看到一份默认站点的样子.</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Virtual Host configuration for example.com                                              </span>
<span class="token comment">#                                                                                         </span>
<span class="token comment"># You can move that to a different file under sites-available/ and symlink that           </span>
<span class="token comment"># to sites-enabled/ to enable it.                                                         </span>
<span class="token comment">#                                                                                         </span>
<span class="token comment">#server &#123;                                                                                 </span>
<span class="token comment">#       listen 80;                                                                        </span>
<span class="token comment">#       listen [::]:80;                                                                   </span>
<span class="token comment">#                                                                                         </span>
<span class="token comment">#       server_name example.com;                                                          </span>
<span class="token comment">#                                                                                         </span>
<span class="token comment">#       root /var/www/example.com;                                                        </span>
<span class="token comment">#       index index.html;</span>
<span class="token comment">#</span>
<span class="token comment">#       location / &#123;</span>
<span class="token comment">#               try_files $uri $uri/ =404;</span>
<span class="token comment">#       &#125;</span>
<span class="token comment">#&#125;</span></code></pre>
<p>改一改，写一份自己的网站配置，然后丢到 sites-enabled 里面：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 10001-TestPage.conf</span>
server <span class="token punctuation">&#123;</span>                                                                                 
      listen <span class="token number">10001</span><span class="token punctuation">;</span>                                                                        
      listen <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:10001<span class="token punctuation">;</span>                                                                   
                                                                                        
      server_name server.cc7w.cf<span class="token punctuation">;</span>                                                          
                                                                                        
      root /home/ftpuser/10001-TestPage<span class="token punctuation">;</span>                                                
      index index.html<span class="token punctuation">;</span>

      location / <span class="token punctuation">&#123;</span>
              try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ <span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>Reference:</p>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1418457">https://cloud.tencent.com/developer/article/1418457</a></li>
<li><a href="https://nginx.org/en/docs/beginners_guide.html">https://nginx.org/en/docs/beginners_guide.html</a></li>
<li><a href="https://tengine.taobao.org/nginx_docs/cn/docs/http/request_processing.html">https://tengine.taobao.org/nginx_docs/cn/docs/http/request_processing.html</a></li>
</ul>
<h3 id="Gunicorn-绿色独角兽"><a href="#Gunicorn-绿色独角兽" class="headerlink" title="Gunicorn 绿色独角兽"></a>Gunicorn 绿色独角兽</h3><blockquote>
<p><strong>什么是 gunicorn?</strong></p>
<p><strong>Gunicorn (Green Unicorn)</strong> 是 Python Web 服务器网关接口HTTP服务器。</p>
<p>对于 Python App 接口，我们显然是不可能像上面的静态文件一样，直接提供给用户，因此便需要 Gunicorn 进行转接.</p>
<p><strong>我还没有安装 pip ?</strong></p>
<p><code>sudo apt install python3-pip</code></p>
<p><strong>我的 pip 还没有连接 Tsinghua 源？</strong></p>
<p><code>sudo pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
</blockquote>
<p><strong>安装</strong></p>
<p><code>sudo pip3 install gunicorn</code></p>
<p><em>在之前进行 pip 包管理时，不同用户安装的包会存储在不同的地方，有些需要修改 Path 的包也没能获得足够的权限，懒得改配置文件的 c7w 决定所有的包安装干脆全用 sudo 完事.</em></p>
<p><strong>以命令方式运行 Gunicorn 的参数</strong></p>
<ul>
<li><p><code>-c CONFIG_PATH</code> 以配置文件运行</p>
</li>
<li><p><code>-b BIND</code> Support <code>(HOST)</code>, <code>(HOST):(PORT)</code>, or <code>unix:(PATH)</code>(Use socket)</p>
</li>
<li><code>-w WORKERS</code> 线程数</li>
</ul>
<p><strong>通过配置文件写入</strong></p>
<p>这里我们选择通过配置文件运行 Gunicorn.</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing
<span class="token keyword">import</span> uvicorn

debug <span class="token operator">=</span> <span class="token boolean">False</span>
<span class="token builtin">reload</span> <span class="token operator">=</span> <span class="token boolean">True</span>
loglevel <span class="token operator">=</span> <span class="token string">'debug'</span>
bind <span class="token operator">=</span> <span class="token string">'unix:/home/ftpuser/10002-TikTokTeenBackend/gunicorn/gunicorn.sock'</span>
pidfile <span class="token operator">=</span> <span class="token string">'/home/ftpuser/10002-TikTokTeenBackend/gunicorn/gunicorn.pid'</span>
logfile <span class="token operator">=</span> <span class="token string">'/home/ftpuser/10002-TikTokTeenBackend/gunicorn/debug.log'</span>
workers <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>
worker_class <span class="token operator">=</span> <span class="token string">'uvicorn.workers.Uvicor