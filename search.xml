<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Note for &quot;But what is a neural network?&quot;</title>
    <url>/but-what-is-a-neural-network/</url>
    <content><![CDATA[<p>Notes taken from watching <strong>3Blue1Brown series: Nerual networks</strong>.</p>
<ul>
<li>But what is a nerual network?</li>
<li>Gradient Descent</li>
<li>Back Propagation</li>
</ul>
<a id="more"></a>
<h2 id="Chapter-1-Overview"><a href="#Chapter-1-Overview" class="headerlink" title="Chapter 1: Overview"></a>Chapter 1: Overview</h2><p>Consider <strong>Nerual network</strong>:</p>
<ul>
<li>What are the neurons?<ul>
<li>Functions, which take several numbers as input and give a number as output</li>
</ul>
</li>
<li>How are they linked together? </li>
</ul>
<p><strong>Layers</strong> (Each layer made up of neurons):</p>
<ul>
<li>The activations of one layer determines the activations of the next layer.</li>
</ul>
<p>What those <strong>middle layers</strong> might be doing?</p>
<ul>
<li>It may be holding subcomponents of the image.</li>
<li>Input layer -&gt; Edge layer -&gt; Pattern layer -&gt; Output Digit Layer (?)</li>
</ul>
<p><strong>Edge Detection Example</strong></p>
<ul>
<li>Assign a weight to <strong>each connection</strong> between the neuron and the neurons from the former layer</li>
</ul>
<p><img src="https://i.loli.net/2021/09/03/2OhjAcN1p9JesRX.png" alt="image-20210903150326487"></p>
<ul>
<li>Let activations from the last layer be $a_1, a_2, a_3, …a_n$​ and the weight numbers be $w_1, w_2, w_3, …w_n$​​.</li>
<li>Let $w_1a_1 + w_2a_2 + … + w_na_n$ represent the neuron activation? No! We have to make the range of activation between [0, 1], but the result comes along with any possible real number.</li>
</ul>
<p><img src="https://i.loli.net/2021/09/03/pQn9PXsdu3lZNO1.png" alt="image-20210903150746983"></p>
<ul>
<li>We could use the <strong>sigmoid function</strong>, or the <strong>logistic curve</strong> to solve this. $\sigma(x) = \frac 1 {1+e^{-x}}$​</li>
</ul>
<p><img src="https://i.loli.net/2021/09/03/aZoQXd3Ec2T1GFL.png" alt="image-20210903151057105"></p>
<ul>
<li>So can we let the activation of the neuron be $\sigma(w_1a_1 + w_2a_2 + … + w_na_n)$​, which is basically a measure of how <strong>positively</strong> the relevant weighted sum is?</li>
<li>Well, maybe we need some <strong>bias</strong>, say, only activate when $w_1a_1 + w_2a_2 + … + w_na_n &gt; 10$?</li>
<li>So finally we get, the activation of the neuron, which is $\sigma(w_1a_1 + w_2a_2 + … + w_na_n + bias)$, which is -10 in this case.​​</li>
</ul>
<p><strong>Counting weights and biases</strong></p>
<ul>
<li>All described above is just above <strong>one specific neuron</strong>, and in fact, in a middle layer, we have several neurons!</li>
<li>Take the video example, just a two-middle-layered network have more than 13k parameters to tweak!</li>
</ul>
<p><img src="https://i.loli.net/2021/09/03/OLumsy3nIMQtekc.png" alt="image-20210903151909640"></p>
<ul>
<li>So when we talk about learning, it is about <strong>finding the right weights and biases</strong> to make the network behave in the right way.</li>
</ul>
<p><strong>Notations and linear algebra</strong></p>
<ul>
<li><p>Let activations from one layer be a column vector: $\begin {bmatrix} a_1^{(0)}\\ a_2^{(0)}\\ \vdots\\ a_n^{(0)}\\ \end {bmatrix}$​​​​​​</p>
</li>
<li><p>Let weights of connection between two adjacent layers be a matrix: $\begin {bmatrix} w_{1,1} &amp; w_{1,2} &amp; \cdots &amp; w_{1,n} \\ w_{2,1} &amp; w_{2,2} &amp; \cdots &amp; w_{2,n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ w_{k,1} &amp; w_{k,2} &amp; \cdots &amp; w_{k,n}  \end {bmatrix}$​​</p>
<ul>
<li>Row $i$ of the matrix represents the connection weight between neuron $i$ with the neurons from the last layer.</li>
</ul>
</li>
</ul>
<ul>
<li><p>Let the biases be in a column vector: $\begin {bmatrix} b_1\\ b_2\\ \vdots\\ b_n\\ \end {bmatrix}$​​​​</p>
</li>
<li><p>And let $\sigma(\begin {bmatrix} x\\ y\\ \vdots\\ z\\ \end {bmatrix}) \ := \ \begin {bmatrix} \sigma(x)\\ \sigma(y)\\ \vdots\\ \sigma(z)\\ \end {bmatrix}$</p>
</li>
<li><p>So we get our notation now: $a^{(2)} = \sigma(W^{(2)}a^{(1)}+b^{(2)})$​​​</p>
<ul>
<li>$a^{(i)}$: the activations of the $i$​-th layer</li>
<li>$W^{(i)}$: connection weight matrix between layer $i$ and $i-1$</li>
<li>$b^{(i)}$: biases of neurons in the layer $i$</li>
</ul>
</li>
</ul>
<h2 id="Chapter-2-Gradient-descent"><a href="#Chapter-2-Gradient-descent" class="headerlink" title="Chapter 2: Gradient descent"></a>Chapter 2: Gradient descent</h2><p><strong>Using training data</strong></p>
<ul>
<li>We can divide our data with labels into two groups, the training group and the testing group.</li>
<li>Firstly, we can use the data in the training group to train our network.</li>
<li>Then we could use the test group to check its accuracy.</li>
</ul>
<p><strong>Cost Function</strong></p>
<ul>
<li>Review: Nerual network function<ul>
<li>Input: 784 numbers (pixels)</li>
<li>Output: 10 numbers</li>
<li>Parameters: 13k weights or biases</li>
</ul>
</li>
<li>But the cost function might be like…<ul>
<li>Input: 13k weights or biases</li>
<li>Output: 1 single number (namely the cost)</li>
<li>Parameters: Different set of training examples</li>
</ul>
</li>
<li>Notation<ul>
<li>$C(w_1, w_2, \cdots, w_{13002}) := \frac 1 {2n} \sum_x|| y(x)-a ||^2$​</li>
<li>Now we can just try to solve this problem: how to find the minimum of $C$ and the corresponding set of $w$​!</li>
</ul>
</li>
<li>It is hard to solve this minimum problem using mathematic methods when the amount of parameters is high, but we can…<ul>
<li>Start at an old input</li>
<li>Figure out which direction you should step to make the cost lower</li>
<li>And that direction is: $-\nabla C$​</li>
</ul>
</li>
<li>So we could just choose $\Delta v =-\eta\nabla C$​.<ul>
<li>In which $\eta$​ is a small, positive parameter (known as <em>learning rate</em>) </li>
<li>Then we can make $ v \rightarrow (v’=v-\eta\nabla C)$​ in every iteration</li>
</ul>
</li>
</ul>
<p><strong>Anaylsing the network</strong></p>
<ul>
<li>Does the network’s middle layer really doing what was imagined? Namely, edges, patterns, etc.?<ul>
<li>Not at all!</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/03/BrJF1SleKfVTqOD.png" alt="image-20210903164518327"></p>
<ul>
<li>The magnitude of each element in the gradient is indicating how sensitive the cost function is to each weight or bias.</li>
</ul>
<h2 id="Chapter-3-Back-Propagation"><a href="#Chapter-3-Back-Propagation" class="headerlink" title="Chapter 3: Back Propagation"></a>Chapter 3: Back Propagation</h2><p><strong>What is back propagation?</strong></p>
<ul>
<li>It is an algorithm for computing the gradients of the cost function.</li>
</ul>
<p><strong>Stochastic gradient descent</strong></p>
<ul>
<li>It takes the computer rather long time to add up the influence of every single training example.</li>
<li>So we can randomly shuffle our training data, then divide it into mini-batches.</li>
<li>Then we can compute a step according to the mini-batch.</li>
</ul>
<p><strong>Chain rule</strong></p>
<p><img src="https://i.loli.net/2021/09/03/rpMKl7V1faHI4S5.png" alt="image-20210903215157598"></p>
<pre class="mermaid">graph LR
subgraph "Layer m-1"
A0("1")
A1("2")
A2("3")
A3("4")
end
subgraph "Layer m"
B2("output(i-1)")
B0("output(i)")
B1("output(i+1)")
end
subgraph "Anticipated label"
C2("y(i-1)")
C0("y(i)")
C1("y(i+1)")
end
A0 --> B0
A1 --> B0
A2 --> B0
A3 --> B0
B0 --> C0
B1 --> C1
B2 --> C2</pre>

<ul>
<li>We remember $\begin {bmatrix} a_1^{(2)}\\ a_2^{(2)}\\ \vdots\\ a_k^{(2)}\\ \end {bmatrix}= \sigma (\begin {bmatrix} w^{(2)}_{1,1} &amp; w^{(2)}_{1,2} &amp; \cdots &amp; w^{(2)}_{1,n} \\ w^{(2)}_{2,1} &amp; w^{(2)}_{2,2} &amp; \cdots &amp; w^{(2)}_{2,n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ w^{(2)}_{k,1} &amp; w^{(2)}_{k,2} &amp; \cdots &amp; w^{(2)}_{k,n}  \end {bmatrix}\begin {bmatrix} a_1^{(1)}\\ a_2^{(1)}\\ \vdots\\ a_n^{(1)}\\ \end {bmatrix} + \begin {bmatrix} b_1^{(2)}\\ b_2^{(2)}\\ \vdots\\ b_k^{(2)}\\ \end {bmatrix})$<ul>
<li>Namely $a^{(L)}_i  = \sigma( \sum_jw^{(L)}_{i, j}a_j^{(L-1)}+ b^{(L)})$​​​​​.​</li>
<li>We denote this by $z^l = w^la^{l-1}+b^l$​ and $a^l = \sigma(z^l)$​</li>
</ul>
</li>
<li>And we have $C(\vec W, \vec b) = \frac 1 {2n} \sum_x|| y(x)-a ||^2$<ul>
<li>We assume that $C = \frac 1 n \sum_x C_x$​, in which $C_x = \frac 1 2 ||y-a^{L}||^2$​​​</li>
</ul>
</li>
</ul>
<pre class="mermaid">graph RL
CX("$C$")
aE("$a^L$")
zE("$z^L$")
wE("$w^L$")
aEL("$a^{L-1}$")
bE("$b^L$")
zEL("$z^{L-1}$")
wEL("$w^{L-1}$")
aELL("$a^{L-2}$")
bEL("$b^{L-1}$")

aE -->|"$(y_x-a^L_x)^2$"| CX
zE -->|"$\sigma$"| aE
wE --> zE
aEL --> zE
bE --> zE
zEL -->|"$\sigma$"| aEL
wEL --> zEL
aELL --> zEL
bEL --> zEL
dot("$\cdots$") --> aELL</pre>

<ul>
<li>Then the core equations of back propagation…<ul>
<li>$\frac {\partial C} {\partial z_i^L} = \frac {\partial C} {\partial a_i^L}\frac {\partial a_i^L} {\partial z_i^L} = (a_i^L-y_i)\sigma’(z_i^L)$​​​​ (Initialize)​<ul>
<li>That is $\delta := \frac {\partial C} {\partial z^L} = (a^L-y) \odot \sigma’(z^L)$​​</li>
</ul>
</li>
<li>According to $z^{(L)}_i = \sum_jw^{(L)}_{i, j}a_j^{(L-1)}+ b_i^{(L)}$​​​​, suppose we have calculated $\frac {\partial C} {\partial z^M_i}$​​​ for all neuron $i$​​​ in layer $M$​​​.<ul>
<li>How can we get $\frac {\partial C} {\partial w^M_{i, j}}$​​​ for all neuron $i$​​​ in layer $M$​​ and $j$​​ in layer $M-1$​​​​?<ul>
<li>$\frac {\partial C} {\partial w^M_{i, j}} = \frac {\partial C} {\partial z^M_i} \frac {\partial z^M_i}{\partial w^M_{i, j}} = \frac {\partial C} {\partial z^M_i} a_j^{M-1}$​<ul>
<li>$\frac {\partial C} {\partial w^M} = \frac {\partial C} {\partial z^L} (a^{M-1})^T$</li>
</ul>
</li>
</ul>
</li>
<li>How can we get $\frac {\partial C} {\partial b^M_i} $​​ for all neuron $i$​​ in layer $M$​?<ul>
<li>$\frac {\partial C} {\partial b^M_{i}} = \frac {\partial C} {\partial z^M_i} \frac {\partial z^M_i}{\partial b^M_{i}} = \frac {\partial C} {\partial z^M_i}$​<ul>
<li>$\frac {\partial C} {\partial b^M} = \frac {\partial C} {\partial z^M}$</li>
</ul>
</li>
</ul>
</li>
<li>How can we get $\frac {\partial C} {\partial a^{M-1}_j} $ and $\frac {\partial C} {\partial z^{M-1}_j} $ for all neuron $j$ in layer $M-1$?<ul>
<li>$\frac {\partial C} {\partial a^{M-1}_j}  = \sum_i \frac {\partial C}{\partial z^M_i} \frac {\partial z^M_i} {a_j^{M-1}} = \sum_i \frac {\partial C}{\partial z^M_i} w_{i,j}^M$​<ul>
<li>$\frac {\partial C} {\partial a^{M-1}} = (w^M)^T \frac {\partial C} {\partial z^M}$​</li>
</ul>
</li>
<li>Then $\frac {\partial C} {\partial z^{M-1}_j} = \frac {\partial C} {\partial a^{M-1}_j} \sigma’(z^{M-1}_j)$​<ul>
<li>$\frac {\partial C} {\partial z^{M-1}} = (w^M)^T \frac {\partial C} {\partial z^M}\odot\sigma’(z^{M-1})$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Then by recursion, we could calculate all the partial derivatives of weights and biases.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>与 Nana 的日常 —— 从零开始的 Linux 调教指北(2)</title>
    <url>/dear-memory-with-nana-2/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/08/23/78DGrYSMnVgKkwE.jpg" alt="QQ图片20210823091857"></p>
<p>(Nana 印象图 初版)</p>
<p>速览本文：</p>
<ul>
<li>Docker 的安装</li>
<li>数据库的安装<ul>
<li>MariaDB</li>
<li>phpMyAdmin</li>
</ul>
</li>
<li>nodejs 与 npm 的安装</li>
</ul>
<a id="more"></a>
<h2 id="Docker-的介绍与安装"><a href="#Docker-的介绍与安装" class="headerlink" title="Docker 的介绍与安装"></a>Docker 的介绍与安装</h2><blockquote>
<p>What is <strong>Docker</strong>?</p>
<p>Docker takes away repetitive, mundane configuration tasks and is used throughout the development lifecycle for fast, easy and portable application development - desktop and cloud.</p>
<p>简而言之，就是打包好的应用，可以创建Docker容器来托管一系列应用.</p>
</blockquote>
<p><strong>安装</strong>：</p>
<p>(Option 1) 使用官方安装脚本自动安装即可</p>
<p><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></p>
<p>(Option 2) 也可使用国内 daocloud 一键安装：</p>
<p><code>curl -sSL https://get.daocloud.io/docker | sh</code></p>
<blockquote>
<p>但是在这里 c7w ran into problems.</p>
<p>详情可以看这里. 针对 armhf ubuntu 20.04: <a href="https://github.com/docker/for-linux/issues/1035">https://github.com/docker/for-linux/issues/1035</a></p>
<p>如果一键安装成功，请略过此处.</p>
<p><s><strong>想不到吧 爷去装arm64了 不伺候您armhf了</strong> <strong>只不过是从头再来</strong> <strong>停更一天</strong></s></p>
<p>大家就当无事发生过，这里 Nana 已经变成 arm64 了.</p>
</blockquote>
<p>(Option 3) 也可以使用 Tsinghua 源.</p>
<p>可以参考 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/">https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/</a> 手动安装.</p>
<h2 id="数据库安装与配置"><a href="#数据库安装与配置" class="headerlink" title="数据库安装与配置"></a>数据库安装与配置</h2><h3 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h3><blockquote>
<p>什么是 <strong>MariaDB</strong>?</p>
<p>MariaDB Server is one of the most popular database servers in the world. It’s made by the original developers of MySQL and guaranteed to stay open source. </p>
<p>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。 开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。</p>
<p>Reference:</p>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1635038">https://cloud.tencent.com/developer/article/1635038</a></li>
<li><a href="https://hub.docker.com/_/mariadb">https://hub.docker.com/_/mariadb</a></li>
</ul>
</blockquote>
<p><strong>安装</strong></p>
<p><code>sudo apt install mariadb-server</code></p>
<p><strong>查看字符集</strong></p>
<ul>
<li><code>sudo mysql</code> 进入控制台</li>
</ul>
<pre class="language-none"><code class="language-none"> ubuntu@ubuntu &gt; &#x2F;etc&#x2F;mysql &gt; sudo mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 52
Server version: 10.3.31-MariaDB-0ubuntu0.20.04.1 Ubuntu 20.04

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

MariaDB [(none)]&gt; </code></pre>
<ul>
<li><code>show variables like &quot;%character%&quot;;show variables like &quot;%collation%&quot;;</code> 查看当前字符集</li>
</ul>
<pre class="language-none"><code class="language-none">+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8mb4                    |
| character_set_connection | utf8mb4                    |
| character_set_database   | utf8mb4                    |
| character_set_filesystem | binary                     |
| character_set_results    | utf8mb4                    |
| character_set_server     | utf8mb4                    |
| character_set_system     | utf8                       |
| character_sets_dir       | &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;charsets&#x2F; |
+--------------------------+----------------------------+
8 rows in set (0.004 sec)

+----------------------+--------------------+
| Variable_name        | Value              |
+----------------------+--------------------+
| collation_connection | utf8mb4_general_ci |
| collation_database   | utf8mb4_general_ci |
| collation_server     | utf8mb4_general_ci |
+----------------------+--------------------+
3 rows in set (0.003 sec)</code></pre>
<p>这里已经是 <code>utf8mb4</code> 了，无须再更多配置.</p>
<p><strong>安全性配置</strong></p>
<p><code>sudo mysql_secure_installation</code> 进行安全性配置.</p>
<pre class="language-none"><code class="language-none">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!

In order to log into MariaDB to secure it, we&#39;ll need the current
password for the root user.  If you&#39;ve just installed MariaDB, and
you haven&#39;t set the root password yet, the password will be blank,
so you should just press enter here.

Enter current password for root (enter for none):
OK, successfully used password, moving on...

Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.

Set root password? [Y&#x2F;n] Y
New password:
Re-enter new password:
Password updated successfully!
Reloading privilege tables..
 ... Success!


By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.

Remove anonymous users? [Y&#x2F;n] Y
 ... Success!

Normally, root should only be allowed to connect from &#39;localhost&#39;.  This
ensures that someone cannot guess at the root password from the network.

Disallow root login remotely? [Y&#x2F;n] Y
 ... Success!

By default, MariaDB comes with a database named &#39;test&#39; that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.

Remove test database and access to it? [Y&#x2F;n] Y
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!

Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.

Reload privilege tables now? [Y&#x2F;n] Y
 ... Success!

Cleaning up...

All done!  If you&#39;ve completed all of the above steps, your MariaDB
installation should now be secure.

Thanks for using MariaDB!</code></pre>
<p><strong>新建管理员用户</strong></p>
<p>先 <code>sudo mysql</code> 进入控制台.</p>
<ul>
<li><code>CREATE USER &#39;&lt;USERNAME&gt;&#39;@&#39;%&#39; IDENTIFIED BY &#39;&lt;YOUR PASSWORD&gt;&#39;;</code> 创建用户</li>
<li><code>GRANT ALL PRIVILEGES ON *.* TO &#39;&lt;USERNAME&gt;&#39;@&#39;%&#39; WITH GRANT OPTION;</code> 给予管理员权限</li>
</ul>
<h3 id="phpMyAdmin"><a href="#phpMyAdmin" class="headerlink" title="phpMyAdmin"></a>phpMyAdmin</h3><p><strong>安装</strong></p>
<p><code>sudo apt install phpmyadmin</code></p>
<p>在询问是否需要帮助创建数据库时，选择取消.</p>
<p>在询问选择哪个软件作为管理 phpmyadmin server 的工具时，选择 apache2.</p>
<p><strong>更改配置</strong></p>
<ul>
<li>把 phpmyadmin 提供的默认的 apache2 配置文件移动到 apache2 目录下:</li>
</ul>
<p><code>sudo mv /etc/phpmyadmin/apache.conf /etc/apache2/conf-enabled</code></p>
<ul>
<li>然后更改 apache2 监听的端口：</li>
</ul>
<p><code>sudo vi /etc/apache2/ports.conf</code></p>
<p>把 80 端口改为没有被占用的端口.</p>
<ul>
<li>重启 apache2 服务：<code>sudo systemctl apache2 restart</code></li>
<li>尝试访问 <a href="http://IP_ADDRESS:PORT/phpmyadmin，然后使用上述新建的管理员账户密码完成登录">http://IP_ADDRESS:PORT/phpmyadmin，然后使用上述新建的管理员账户密码完成登录</a>.</li>
</ul>
<p><img src="https://i.loli.net/2021/08/25/NsUTCOdzWXnYmSu.png" alt="image-20210825202754563"></p>
<h2 id="Node-的安装"><a href="#Node-的安装" class="headerlink" title="Node 的安装"></a>Node 的安装</h2><p>我们直接使用已完成编译的包.</p>
<ul>
<li><p>先下载安装文件 <code>wget https://nodejs.org/dist/v14.17.5/node-v14.17.5-linux-arm64.tar.xz</code></p>
</li>
<li><p>解压 <code>tar xf node-v14.17.5-linux-arm64.tar.xz</code></p>
</li>
<li>进入目录 <code>cd node-v14.17.5-linux-arm64/</code></li>
<li>执行 node 查看版本 <code>./bin/node -v</code></li>
</ul>
<blockquote>
<p>这里 c7w 强迫症，还去搜索了这个文件应该放哪里比较好.</p>
<pre><code>有时候需要配置ubuntu安装的软件，一般安装软件都是使用apt-get install。那么安装完后，软件的安装目录在哪里呢，可执行文件又放在哪里呢。

A、下载的软件的存放位置：/var/cache/apt/archives

B、安装后软件的默认位置：/usr/share

C、可执行文件位置：/usr/bin

D、配置文件位置：/etc

E、lib文件位置：/usr/lib
</code></pre><p>Reference:</p>
<ul>
<li><a href="https://blog.csdn.net/u013276277/article/details/81033129">https://blog.csdn.net/u013276277/article/details/81033129</a></li>
</ul>
</blockquote>
<ul>
<li>移动文件： <code>sudo mv node-v14.17.5-linux-arm64 /usr/share</code></li>
<li>建立软链接</li>
</ul>
<pre class="language-none"><code class="language-none">ubuntu@ubuntu  &#x2F;usr&#x2F;bin  sudo ln -s &#x2F;usr&#x2F;share&#x2F;node-v14.17.5-linux-arm64&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;local&#x2F;bin
 ubuntu@ubuntu  &#x2F;usr&#x2F;bin  sudo ln -s &#x2F;usr&#x2F;share&#x2F;node-v14.17.5-linux-arm64&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin
 ubuntu@ubuntu  &#x2F;usr&#x2F;bin  node
Welcome to Node.js v14.17.5.
Type &quot;.help&quot; for more information.
&gt;</code></pre>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>微积分课程的一些补充内容</title>
    <url>/calculus-complement/</url>
    <content><![CDATA[<p>这里记录了一些 c7w 在学习微积分的过程中认为比较重要的补充内容。本文首先介绍了三角函数的任意整数幂次的不定积分的求法，然后给出了三角函数定积分的 Wallis 公式，最后给出了在多元微积分中常见的一些参数曲线的图像。</p>
<a id="more"></a>
<h1 id="三角函数的正整数幂的不定积分"><a href="#三角函数的正整数幂的不定积分" class="headerlink" title="三角函数的正整数幂的不定积分"></a>三角函数的正整数幂的不定积分</h1><h2 id="Knowledge-Base"><a href="#Knowledge-Base" class="headerlink" title="Knowledge Base"></a>Knowledge Base</h2><ul>
<li>换元法（凑微分法）</li>
</ul>
<script type="math/tex; mode=display">
\int f'(\phi(x))\phi'(x)dx = \int f'(\phi(x))d\phi(x) = f(\phi(x))+C</script><script type="math/tex; mode=display">
\int f'(u)du = \int f'(\phi(x)) \phi'(x)dx = g(x)+C = g(\phi^{-1} (x))+C</script><ul>
<li>分部积分法</li>
</ul>
<h2 id="关于三角函数的幂的积分"><a href="#关于三角函数的幂的积分" class="headerlink" title="关于三角函数的幂的积分"></a>关于三角函数的幂的积分</h2><h3 id="sin-或-cos-的幂"><a href="#sin-或-cos-的幂" class="headerlink" title="sin 或 cos 的幂"></a>sin 或 cos 的幂</h3><p>若指数中存在奇数：</p>
<script type="math/tex; mode=display">
\int \cos^7x \sin^{10}xdx</script><ol>
<li>选定 cos 与 sin 中次幂较低，且为奇数的一个，使用凑微分法</li>
<li>使用公式 $sin^2x+cos^2x=1$ 替换掉剩下的项</li>
</ol>
<p><em>Solve:</em></p>
<script type="math/tex; mode=display">
\begin{aligned}
&\int \cos ^{7} x \sin ^{10} x d x \\
&=\int \cos ^{6} x \sin ^{10} x d \sin x \\
&=\int\left(1-\sin ^{2} x\right)^{3} \sin ^{10} x d \sin x \\
(t &=\sin x) \\
&= \int\left(1-3 t^{2}+3 t^{4}-t^{6}\right) t^{10} d t \\
&=\int\left(t^{10}-3 t^{12}+3 t^{14}-t^{16}\right) d t \\
&=\frac {t^{11}} {11}-\frac{3}{13} t^{13}+\frac{3}{15} t^{15}-\frac{1}{17} t^{17}+C \\
&=\frac{1}{11} \sin ^{11} x-\frac{3}{13} \sin ^{2} x+\frac{1}{5} \sin ^{10} x-\frac{1}{17} \sin ^{17} x+C
\end{aligned}</script><p>若指数中不存在奇数：</p>
<script type="math/tex; mode=display">
\quad \int \cos ^{2} x \sin ^{4} x d x</script><ol>
<li>使用二倍角公式</li>
<li>展开后分别积分</li>
</ol>
<p><em>Solve:</em></p>
<p>$\quad \int \cos ^{2} x \sin ^{4} x d x=\int \frac{1+\cos 2 x}{2} \frac{\left(1-\cos ^{2} x\right)^{2}}{4} d x$<br>$=\frac{1}{8} \int\left(\cos ^{2} 2 x-2 \cos 2 x+1\right)(1+\cos 2 x) d x$<br>$=\frac{1}{8} \int\left(\cos ^{3} 2 x-\cos ^{2} 2 x-\cos 2 x+1\right) d x$<br>$=\frac{1}{8} \int \cos ^{3} 2 x d x-\frac{1}{8} \int \cos ^{2} 2 x d x-\frac{1}{8} \int \cos 2 x d x+\frac{1}{8} \int d x$<br>$=\frac{1}{8} \cdot \frac{1}{2} \int \cos ^{2} 2x d \sin 2 x-\frac{1}{8} \int \frac{1+\cos 4 x}{2} d x-\frac{1}{8} \cdot \frac{1}{2} \sin 2 x+\frac{1}{8} x+C<br>$</p>
<p>$=\frac{1}{16} \int d \sin 2 x-\frac{1}{16} \int \sin ^{2} 2 x d \sin 2 x-\frac{1}{16} x-\frac{1}{16} \cdot \frac{1}{4} \sin 4 x-\frac{1}{16} \sin 2 x+\frac{1}{8} x+C$</p>
<p>$=\frac{x}{16}-\frac{\sin^32x}{48}-\frac{\sin4x}{64}+C$</p>
<h3 id="tan-与-cot-的幂"><a href="#tan-与-cot-的幂" class="headerlink" title="tan 与 cot 的幂"></a>tan 与 cot 的幂</h3><script type="math/tex; mode=display">
\int \tan ^{4} x d x</script><p>使用公式 $ \tan ^{2} x=\sec ^{2} x-1 $</p>
<script type="math/tex; mode=display">
\begin{array}{l}
\int \tan ^{0} x d x=\int d x=x+C \\
\int \tan ^{1} x d x=\int \frac{\sin x}{\cos x} d x=-\int \frac{1}{\cos x} d \cos x=-\ln |\cos x|+C \\
\qquad=\ln |\sec x|+C \\
\end{array}</script><script type="math/tex; mode=display">
\begin{aligned}
I_{n} &=\int \tan ^{n} x d x \\
&=\int \tan ^{n-2} x \tan ^{2} x d x \\
&=\int \tan ^{n-2} x\left(\sec ^{2} x-1\right) d x \\
&=\int \tan ^{n-2} x \sec ^{2} x d x-\int \tan ^{n-2} x d x \\
&=\int \tan ^{n-2} x d \tan x-\int \tan ^{n-2} x d x \\
&=\frac{1}{n-1} \cdot \tan ^{n-1} x-I_{n-2}
\end{aligned}</script><p><em>Solve:</em></p>
<script type="math/tex; mode=display">
\begin{aligned}
\int \tan ^{4} x d x &=\int \tan ^{2} x\left(\sec ^{2} x-1\right) d x \\
&=\int \tan ^{2} x \sec ^{2} x d x-\int \tan ^{2} x d x \\
&=\frac{1}{3} \tan ^{3} x-\int \sec ^{2} x d x+\int d x \\
&=\frac{1}{3} \tan ^{3} x-\tan x+x+C
\end{aligned}</script><p>cot 的幂读者自证不难.</p>
<h3 id="sec-与-csc-的幂"><a href="#sec-与-csc-的幂" class="headerlink" title="sec 与 csc 的幂"></a>sec 与 csc 的幂</h3><script type="math/tex; mode=display">
\begin{aligned}
\int \sec x d x &=\int \frac{(\sec x)(\sec x+\tan x)}{\sec x+\tan x} d x \\
&=\int \frac{\sec x \tan x+\sec ^{2} x}{\sec x+\tan x} d x \\
&=\ln |\sec x+\tan x|+C \\
\int \sec ^{2} x d x &=\tan x+C
\end{aligned}</script><script type="math/tex; mode=display">
\begin{aligned}
\int \sec ^{n} x d x &=\int \sec ^{n-2} x \sec ^{2} x d x \\
&=\int \sec ^{n-2} x d \tan x \\
&=\sec ^{n-2} x \tan x-\int \tan x(n-2) \sec ^{n-3} x \sec x \tan x d x \\
&=\sec ^{n-2} \tan x-(n-2) \int \sec ^{n-2} x \tan ^{2} x d x \\
&=\sec ^{n-2} x \tan x-(n-2) \int \sec ^{n-2} x\left(\sec ^{2} x-1\right) d x \\
&=\sec ^{n-2} x \tan x-(n-2) \int \sec ^{n} x d x+(n-2) \int \sec ^{n-2} x d x \\
\end{aligned}</script><p>因此我们有：</p>
<script type="math/tex; mode=display">
\int \sec ^{n} x d x=\frac{1}{n-1} \sec ^{n-2} x \tan x+\frac{n-2}{n-1} \int \sec ^{n-2} x d x</script><p>csc 的幂同理显然.</p>
<h1 id="Wallis-公式"><a href="#Wallis-公式" class="headerlink" title="Wallis 公式"></a>Wallis 公式</h1><script type="math/tex; mode=display">
I_n = \int _ 0 ^ {\frac \pi 2} \sin^nxdx \\
I_0 = \frac \pi 2, I_1 = 1</script><h1 id="一些参数方程-极坐标下的曲线图像"><a href="#一些参数方程-极坐标下的曲线图像" class="headerlink" title="一些参数方程/极坐标下的曲线图像"></a>一些参数方程/极坐标下的曲线图像</h1><h2 id="星形线"><a href="#星形线" class="headerlink" title="星形线"></a>星形线</h2><script type="math/tex; mode=display">
x^{\frac 2 3}+y^{\frac 2 3}=a^{\frac 2 3} \\
\begin{cases}
x=a\cos^3t\\
y=a\sin^3t
\end{cases}</script><p><img src="https://s3.ax1x.com/2020/12/26/r4AL8K.png" alt=""></p>
<h2 id="摆线"><a href="#摆线" class="headerlink" title="摆线"></a>摆线</h2><script type="math/tex; mode=display">
\begin {cases}
x= a(t-\sin t)\\
y=a(1-\cos t)
\end {cases}</script><p><img src="https://s3.ax1x.com/2020/12/26/r4E12T.png" alt=""></p>
<p>图为$-4\pi \le t \le 4\pi, a=1$的图像.</p>
<p>周期为$2\pi$.</p>
<h2 id="双纽线"><a href="#双纽线" class="headerlink" title="双纽线"></a>双纽线</h2><p><a href="https://imgchr.com/i/r4VeSK"><img src="https://s3.ax1x.com/2020/12/26/r4VeSK.png" alt="r4VeSK.png"></a></p>
<h2 id="笛卡尔心形线"><a href="#笛卡尔心形线" class="headerlink" title="笛卡尔心形线"></a>笛卡尔心形线</h2><p><a href="https://imgchr.com/i/r4ZSht"><img src="https://s3.ax1x.com/2020/12/26/r4ZSht.png" alt="r4ZSht.png"></a></p>
<h2 id="其它曲线"><a href="#其它曲线" class="headerlink" title="其它曲线"></a>其它曲线</h2><p><a href="https://imgchr.com/i/r4ZeNn"><img src="https://s3.ax1x.com/2020/12/26/r4ZeNn.png" alt="r4ZeNn.png"></a></p>
<p><a href="https://imgchr.com/i/r4Zu90"><img src="https://s3.ax1x.com/2020/12/26/r4Zu90.png" alt="r4Zu90.png"></a></p>
<p><a href="https://imgchr.com/i/r4ZK3V"><img src="https://s3.ax1x.com/2020/12/26/r4ZK3V.png" alt="r4ZK3V.png"></a></p>
<p><a href="https://imgchr.com/i/r4ZMcT"><img src="https://s3.ax1x.com/2020/12/26/r4ZMcT.png" alt="r4ZMcT.png"></a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://mm.edrawsoft.cn/template/65439">https://mm.edrawsoft.cn/template/65439</a></li>
<li>部分图像采用 GeoGebra 绘制</li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/微积分</category>
      </categories>
      <tags>
        <tag>微积分</tag>
        <tag>三角函数的积分</tag>
        <tag>曲线图像</tag>
      </tags>
  </entry>
  <entry>
    <title>与 Nana 的日常 —— 从零开始的 Linux 调教指北(1)</title>
    <url>/dear-memory-with-nana-1/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/08/23/78DGrYSMnVgKkwE.jpg" alt="QQ图片20210823091857"></p>
<p>(Nana 印象图 初版)</p>
<p>速览本文：</p>
<ul>
<li>FTP 配置</li>
<li>网络配置<ul>
<li>Cloudflared 内网穿透</li>
<li>nginx 反向代理</li>
<li>gunicorn [Python WSGI HTTP Server for UNIX]</li>
<li>Supervisor 设置守护进程</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="FTP-配置"><a href="#FTP-配置" class="headerlink" title="FTP 配置"></a>FTP 配置</h2><blockquote>
<p>前置知识：【FTP 文件传输】</p>
</blockquote>
<p><strong>安装 vsftpd</strong></p>
<blockquote>
<p>什么是 vsftpd ?</p>
<p><strong>vsftpd</strong> is a GPL licensed <strong>FTP server</strong> for UNIX systems, including Linux.</p>
</blockquote>
<p><code>sudo apt install vsftpd</code></p>
<p><code>sudo systemctl start vsftpd</code> // 开启进程<br><code>sudo systemctl enable vsftpd</code> // 开机启动</p>
<p><strong>配置 FTP 用户</strong></p>
<ul>
<li>创建用户目录：<code>sudo mkdir /home/ftpuser</code></li>
<li>创建用户并关联用户文件夹，这样使用 ftpuser 用户登陆的时候，就可以直接登陆到 /home/ftpuser 下：<code>sudo useradd -d /home/ftpuser -s /bin/bash ftpuser</code></li>
<li>更改用户目录权限：<code>sudo chown ftpuser:ftpuser /home/ftpuser</code></li>
<li>重设 ftpuser 的密码：<code>sudo passwd ftpuser</code> </li>
</ul>
<p><strong>配置 FTP 设置</strong></p>
<p><code>sudo vi /etc/vsftpd.conf</code></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Uncomment this to enable any form of FTP write command.</span>
<span class="token comment">#write_enable=YES</span></code></pre>
<p>把这行注释解除.</p>
<p><code>vim /etc/pam.d/vsftpd</code></p>
<p>注释掉</p>
<p><code>#auth   required pam_shells.so</code></p>
<p><strong>重启 FTP 服务</strong></p>
<p><code>sudo service vsftpd restart</code></p>
<p><strong>测试连接</strong></p>
<p><img src="https://i.loli.net/2021/08/23/OafiV2PeX9NYRrh.png" alt="image-20210823211829678"></p>
<p><img src="https://i.loli.net/2021/08/23/L8xdsFEH2UYXDnV.png" alt="image-20210823212448472"></p>
<p>Reference:</p>
<ul>
<li><a href="https://www.huaweicloud.com/articles/4fc98eb98f27a99aa1b06b0d71dab20a.html">https://www.huaweicloud.com/articles/4fc98eb98f27a99aa1b06b0d71dab20a.html</a></li>
<li><a href="https://devanswers.co/vsftpd-550-permission-denied-ubuntu/">https://devanswers.co/vsftpd-550-permission-denied-ubuntu/</a></li>
</ul>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="Cloudflared-内网穿透"><a href="#Cloudflared-内网穿透" class="headerlink" title="Cloudflared 内网穿透"></a>Cloudflared 内网穿透</h3><blockquote>
<p><strong>为什么要做内网穿透？</strong></p>
<p>在没有做内网穿透之前，我们的 Nana 只能被 Peking-Visitor（也就是路由器管理的网络）和 Zerotier 创建的虚拟网络中被访问到.</p>
<p>而内网穿透就是为了让我们的 Nana 提供的服务能够被 public Internet 访问到.</p>
<p><strong>什么是 Cloudflare? </strong></p>
<p>[这里认为读者已经对<strong>域名</strong>,<strong>域名解析</strong>有了基本的理解]</p>
<p>Cloudflare.com 是一家域名解析商. 可以为域名提供解析服务.</p>
<p>例如：</p>
<p><img src="https://i.loli.net/2021/08/23/bYPs3hkwjvnxc8E.png" alt="image-20210823204436613"></p>
<p>[请自行探索 DNS 记录：什么是 A 记录？什么是 CNAME 记录？]</p>
<p><strong>什么是 Cloudflared?</strong></p>
<p>Cloudflare 这家公司十分大方，为用户们提供了隧道服务。</p>
<p>Cloudflare Tunnel requires the installation of a lightweight server-side <strong>daemon</strong>, <strong>cloudflared</strong>, to connect your infrastructure to Cloudflare. </p>
<p><strong>cloudflared</strong> is an open source project maintained by Cloudflare.</p>
<p><em>daemon</em>: 守护进程，需要常驻后台的进程</p>
<p><em>cloudflared</em>: 我们的主人公，需要安装配置到 Nana 上.</p>
</blockquote>
<p><strong>软件下载</strong></p>
<ul>
<li><a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation">https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation</a></li>
</ul>
<p>在这里下载对应的安装文件，然后安装.</p>
<p>我们直接下载二进制的文件 <code>cloudflared-linux-arm</code> 后上传到服务器.</p>
<p><code>sudo cp ./cloudflared-linux-arm /usr/local/bin/cloudflared</code> </p>
<p>// 添加到 Path</p>
<p><code>sudo chmod +x /usr/local/bin/cloudflared</code> // 切换执行权限</p>
<p><code>cloudflared -v</code> // 验证是否安装成功</p>
<p><strong>配置穿透</strong></p>
<blockquote>
<p>Before you start:</p>
<p>​    向 Cloudflare 添加一个域名并确认其已被接管</p>
</blockquote>
<ul>
<li>验证身份：<code>cloudflared tunnel login</code>，复制链接到浏览器，登录后选择域名，完成认证.</li>
<li>创建隧道：<code>cloudflared tunnel create &lt;NAME&gt;</code>，随机生成隧道的 UUID. </li>
<li>编辑配置文件 <code>sudo vi ~/.cloudflared/config.yml</code></li>
</ul>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tunnel</span><span class="token punctuation">:</span> 6ff42ae2<span class="token punctuation">-</span>765d<span class="token punctuation">-</span>4adf<span class="token punctuation">-</span>8112<span class="token punctuation">-</span>31c55c1551ef
<span class="token key atrule">credentials-file</span><span class="token punctuation">:</span> /root/.cloudflared/6ff42ae2<span class="token punctuation">-</span>765d<span class="token punctuation">-</span>4adf<span class="token punctuation">-</span>8112<span class="token punctuation">-</span>31c55c1551ef.json

<span class="token key atrule">ingress</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">hostname</span><span class="token punctuation">:</span> gitlab.widgetcorp.tech
    <span class="token key atrule">service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">80</span>
  <span class="token punctuation">-</span> <span class="token key atrule">hostname</span><span class="token punctuation">:</span> gitlab<span class="token punctuation">-</span>ssh.widgetcorp.tech
    <span class="token key atrule">service</span><span class="token punctuation">:</span> ssh<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">22</span>
  <span class="token punctuation">-</span> <span class="token key atrule">service</span><span class="token punctuation">:</span> http_status<span class="token punctuation">:</span><span class="token number">404</span></code></pre>
<ul>
<li>绑定隧道到域名 <code>cloudflared tunnel route dns &lt;UUID or NAME&gt; &lt;DOMAIN&gt;</code></li>
</ul>
<p><strong>设置自动启动</strong></p>
<p><code>sudo cloudflared service install</code></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"> ✘ ubuntu@ubuntu  /etc/cloudflared  <span class="token function">sudo</span> <span class="token function">mv</span> ~/.cloudflared/config.yml /etc/cloudflared
 ubuntu@ubuntu  /etc/cloudflared  <span class="token function">sudo</span> cloudflared <span class="token function">service</span> <span class="token function">install</span>
<span class="token number">2021</span>-08-23T14:16:19Z INF Using Systemd
<span class="token number">2021</span>-08-23T14:16:21Z INF systemctl daemon-reload</code></pre>
<p>设置完成.</p>
<p>Reference:</p>
<ul>
<li><a href="https://www.jianshu.com/p/8fdd0e3b7339">https://www.jianshu.com/p/8fdd0e3b7339</a></li>
<li><a href="https://blog.zapic.moe/Archives/Tutorial-176.html">https://blog.zapic.moe/Archives/Tutorial-176.html</a></li>
<li><a href="https://docs.pi-hole.net/guides/dns/cloudflared/#armhf-architecture-32-bit-raspberry-pi">https://docs.pi-hole.net/guides/dns/cloudflared/#armhf-architecture-32-bit-raspberry-pi</a></li>
</ul>
<h3 id="nginx-反向代理"><a href="#nginx-反向代理" class="headerlink" title="nginx 反向代理"></a>nginx 反向代理</h3><blockquote>
<p><strong>nginx</strong> [engine x] is an <strong>HTTP and reverse proxy server</strong>, a mail proxy server, and a generic TCP/UDP proxy server, originally written by Igor Sysoev.</p>
<p><strong>什么是正向代理？什么是反向代理？</strong></p>
<p><strong>正向代理（forward proxy）</strong>：是一个位于客户端和目标服务器之间的服务器(代理服务器)，为了从目标服务器取得内容，客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端。（例如 酸酸乳，幻影飞梭，蓝色宝灯 etc.）</p>
<p><strong>反向代理（reverse proxy）</strong>：是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。（例如我们本节的主角 nginx）</p>
<p>二者的功能不同，适用的场景也不同。</p>
</blockquote>
<p><strong>安装 Nginx</strong></p>
<p><code>sudo apt install nginx</code></p>
<p><strong>命令</strong></p>
<ul>
<li><code>nginx -s stop</code> 关闭</li>
<li><code>nginx -s reload</code> 重载配置</li>
</ul>
<p><strong>常用功能介绍</strong></p>
<ul>
<li>提供静态文件（根据访问路径路由）</li>
</ul>
<p>我们可以先去看一下默认配置，<code>sudo vi /etc/nginx/nginx.conf</code></p>
<p>先把 <code>user</code> 改成 <code>ftpuser</code>，给予文件读写权限.</p>
<p>可以看到，在 HTTP 节 的 <code>Virtual Host Configs</code> 中 include 了 sites-enabled 的所有文件. 也就是说，我们可以通过在这个目录中新建文件的方式，来进行站点的添加.</p>
<p>在文件的最后，我们可以看到一份默认站点的样子.</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Virtual Host configuration for example.com                                              </span>
<span class="token comment">#                                                                                         </span>
<span class="token comment"># You can move that to a different file under sites-available/ and symlink that           </span>
<span class="token comment"># to sites-enabled/ to enable it.                                                         </span>
<span class="token comment">#                                                                                         </span>
<span class="token comment">#server &#123;                                                                                 </span>
<span class="token comment">#       listen 80;                                                                        </span>
<span class="token comment">#       listen [::]:80;                                                                   </span>
<span class="token comment">#                                                                                         </span>
<span class="token comment">#       server_name example.com;                                                          </span>
<span class="token comment">#                                                                                         </span>
<span class="token comment">#       root /var/www/example.com;                                                        </span>
<span class="token comment">#       index index.html;</span>
<span class="token comment">#</span>
<span class="token comment">#       location / &#123;</span>
<span class="token comment">#               try_files $uri $uri/ =404;</span>
<span class="token comment">#       &#125;</span>
<span class="token comment">#&#125;</span></code></pre>
<p>改一改，写一份自己的网站配置，然后丢到 sites-enabled 里面：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 10001-TestPage.conf</span>
server <span class="token punctuation">&#123;</span>                                                                                 
      listen <span class="token number">10001</span><span class="token punctuation">;</span>                                                                        
      listen <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:10001<span class="token punctuation">;</span>                                                                   
                                                                                        
      server_name server.cc7w.cf<span class="token punctuation">;</span>                                                          
                                                                                        
      root /home/ftpuser/10001-TestPage<span class="token punctuation">;</span>                                                
      index index.html<span class="token punctuation">;</span>

      location / <span class="token punctuation">&#123;</span>
              try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ <span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>Reference:</p>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1418457">https://cloud.tencent.com/developer/article/1418457</a></li>
<li><a href="https://nginx.org/en/docs/beginners_guide.html">https://nginx.org/en/docs/beginners_guide.html</a></li>
<li><a href="https://tengine.taobao.org/nginx_docs/cn/docs/http/request_processing.html">https://tengine.taobao.org/nginx_docs/cn/docs/http/request_processing.html</a></li>
</ul>
<h3 id="Gunicorn-绿色独角兽"><a href="#Gunicorn-绿色独角兽" class="headerlink" title="Gunicorn 绿色独角兽"></a>Gunicorn 绿色独角兽</h3><blockquote>
<p><strong>什么是 gunicorn?</strong></p>
<p><strong>Gunicorn (Green Unicorn)</strong> 是 Python Web 服务器网关接口HTTP服务器。</p>
<p>对于 Python App 接口，我们显然是不可能像上面的静态文件一样，直接提供给用户，因此便需要 Gunicorn 进行转接.</p>
<p><strong>我还没有安装 pip ?</strong></p>
<p><code>sudo apt install python3-pip</code></p>
<p><strong>我的 pip 还没有连接 Tsinghua 源？</strong></p>
<p><code>sudo pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
</blockquote>
<p><strong>安装</strong></p>
<p><code>sudo pip3 install gunicorn</code></p>
<p><em>在之前进行 pip 包管理时，不同用户安装的包会存储在不同的地方，有些需要修改 Path 的包也没能获得足够的权限，懒得改配置文件的 c7w 决定所有的包安装干脆全用 sudo 完事.</em></p>
<p><strong>以命令方式运行 Gunicorn 的参数</strong></p>
<ul>
<li><p><code>-c CONFIG_PATH</code> 以配置文件运行</p>
</li>
<li><p><code>-b BIND</code> Support <code>(HOST)</code>, <code>(HOST):(PORT)</code>, or <code>unix:(PATH)</code>(Use socket)</p>
</li>
<li><code>-w WORKERS</code> 线程数</li>
</ul>
<p><strong>通过配置文件写入</strong></p>
<p>这里我们选择通过配置文件运行 Gunicorn.</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing
<span class="token keyword">import</span> uvicorn

debug <span class="token operator">=</span> <span class="token boolean">False</span>
<span class="token builtin">reload</span> <span class="token operator">=</span> <span class="token boolean">True</span>
loglevel <span class="token operator">=</span> <span class="token string">'debug'</span>
bind <span class="token operator">=</span> <span class="token string">'unix:/home/ftpuser/10002-TikTokTeenBackend/gunicorn/gunicorn.sock'</span>
pidfile <span class="token operator">=</span> <span class="token string">'/home/ftpuser/10002-TikTokTeenBackend/gunicorn/gunicorn.pid'</span>
logfile <span class="token operator">=</span> <span class="token string">'/home/ftpuser/10002-TikTokTeenBackend/gunicorn/debug.log'</span>
workers <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>
worker_class <span class="token operator">=</span> <span class="token string">'uvicorn.workers.UvicornWorker'</span> <span class="token comment"># 这里一般用 sync</span>
<span class="token comment"># 但因为我要部署 FastAPI 项目，所以就用了 uvicorn</span></code></pre>
<p>注意到，我们的 bind 填写了本地 socket，这样可以让 nginx 与 gunicorn 通过本地 socket 通信.</p>
<p>然后在 nginx 里新建一个站点.</p>
<pre class="language-none"><code class="language-none">server &#123;
    listen 10002;
    root &#x2F;home&#x2F;ftpuser&#x2F;10002-TikTokTeenBackend&#x2F;Backend;
    server_name server.cc7w.cf;
    location &#x2F; &#123;
        proxy_set_header x-Real-IP $remote_addr;                                                  
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;                                                         
        proxy_pass unix:&#x2F;home&#x2F;ftpuser&#x2F;10002-TiktokTeenBackend&#x2F;gunicorn&#x2F;gunicorn.sock
    &#125;                                                                                 
&#125;</code></pre>
<h3 id="Supervisor-设置守护进程"><a href="#Supervisor-设置守护进程" class="headerlink" title="Supervisor 设置守护进程"></a>Supervisor 设置守护进程</h3><blockquote>
<p><strong>什么是 Supervisor?</strong></p>
<p>Supervisor是用Python开发的一套通用的<strong>进程管理程序</strong>，能将一个普通的命令行进程变为后台daemon（守护进程，一直在运行的进程），并监控进程状态，异常退出时能自动重启。</p>
</blockquote>
<p><strong>安装</strong></p>
<p><code>sudo apt install supervisor</code></p>
<blockquote>
<p>这里真的很坑，c7w 查资料发现是 Python 开发的后，没动脑子直接 <code>pip3 install supervisor</code>，发现配置无效后<code>sudo pip3 install supervisor</code>，发现还是没有默认配置后去 stackoverflow 了一波甚至补全了配置文件，但是还是没有成功运行. 仔细阅读安装方式后才发现应该用 apt 装.</p>
</blockquote>
<p><strong>配置</strong></p>
<pre class="language-conf" data-language="conf"><code class="language-conf">[program:10002-TikTokTeenBackend]
command&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;gunicorn -c gunicorn_config.py main:app
directory&#x3D;&#x2F;home&#x2F;ftpuser&#x2F;10002-TikTokTeenBackend&#x2F;backend
user&#x3D;root
autorestart&#x3D;true
startretires&#x3D;3</code></pre>
<p>这样我们的 App 应该至少是能够跑起来了.</p>
<p><img src="https://i.loli.net/2021/08/24/gpVzlniWst5jYmJ.png" alt="image-20210824114820839"></p>
<p>Reference:</p>
<ul>
<li><p><a href="https://docs.gunicorn.org/en/stable/deploy.html">https://docs.gunicorn.org/en/stable/deploy.html</a></p>
</li>
<li><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</a></p>
</li>
<li><a href="https://www.jianshu.com/p/be2b587a900e">https://www.jianshu.com/p/be2b587a900e</a></li>
</ul>
<p><em>TO BE CONTINUED</em></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 委托与事件</title>
    <url>/c-sharp-delegate-event/</url>
    <content><![CDATA[<p>内含 C# 委托与事件基础。</p>
<a id="more"></a>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>三系联合暑培内部资料</li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/">https://docs.microsoft.com/en-us/dotnet/csharp/</a></li>
<li><a href="https://www.runoob.com/csharp/csharp-tutorial.html">https://www.runoob.com/csharp/csharp-tutorial.html</a></li>
</ul>
<h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>委托(Delegates)是一种运行时绑定机制。</p>
<ul>
<li>为什么使用委托？</li>
</ul>
<p>对于任意晚绑定算法的支持、支持多播、事件模式</p>
<h4 id="delegate-关键字"><a href="#delegate-关键字" class="headerlink" title="delegate 关键字"></a><code>delegate</code> 关键字</h4><p><strong>如何声明委托？</strong></p>
<p>例如：</p>
<pre class="language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; From the .NET Core library

&#x2F;&#x2F; Define the delegate type:
public delegate int Comparison&lt;in T&gt;(T left, T right);</code></pre>
<p><em>这行语句在干什么？在定义类型！</em></p>
<p><code>delegate &lt;return type&gt; &lt;delegate-name&gt; &lt;parameter list&gt;</code></p>
<p>便会生成<code>System.Delegate</code>的一个派生类<code>Comparison</code>.</p>
<p>这个派生类自动带有了 <code>add</code>和 <code>remove</code> 句柄.</p>
<p><strong>创建委托类型的实例</strong></p>
<pre class="language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F; inside a class definition:

&#x2F;&#x2F; Declare an instance of that type:
public Comparison&lt;T&gt; comparator;</code></pre>
<p><strong>调用委托类型的实例</strong></p>
<pre class="language-c#" data-language="c#"><code class="language-c#">int result &#x3D; comparator(left, right);</code></pre>
<p><strong>如果委托没有目标怎么办？</strong></p>
<p>throw NullReferenceException</p>
<p><strong>如何调整委托的目标？</strong></p>
<pre class="language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; static public void Call1() &#x3D;&gt; Console.WriteLine(&quot;Call1&quot;); 
&#x2F;&#x2F; static public void Call2() &#x3D;&gt; Console.WriteLine(&quot;Call2&quot;); 
&#x2F;&#x2F; static public void Call3() &#x3D;&gt; Console.WriteLine(&quot;Call3&quot;); 

var caller &#x3D; new Action(Call1); 
caller +&#x3D; Call2; 
caller &#x3D; caller + Call3; 
caller -&#x3D; Call1;
caller.Invoke(); &#x2F;&#x2F; 等价于 caller();</code></pre>
<p><strong>如何调用委托？</strong></p>
<pre class="language-c#" data-language="c#"><code class="language-c#">private static int CompareLength(string left, string right) &#x3D;&gt;
    left.Length.CompareTo(right.Length);

&#x2F;&#x2F; phrases is List&lt;string&gt;

&#x2F;&#x2F; 1
phrases.Sort(CompareLength); &#x2F;&#x2F; Accepted

&#x2F;&#x2F; 2
Comparison&lt;string&gt; comparer &#x3D; CompareLength;
phrases.Sort(comparer); &#x2F;&#x2F; Accepted

&#x2F;&#x2F; 3: **lambda 表达式**
Comparison&lt;string&gt; comparer &#x3D; (left, right) &#x3D;&gt; left.Length.CompareTo(right.Length);
phrases.Sort(comparer); &#x2F;&#x2F; Accepted</code></pre>
<h4 id="System-MulticastDelegate-类"><a href="#System-MulticastDelegate-类" class="headerlink" title="System.MulticastDelegate 类"></a><code>System.MulticastDelegate</code> 类</h4><p><strong>要记住哪些方法？</strong></p>
<p><code>Invoke()</code>, <code>BeginInvoke()</code>, <code>EndInvoke()</code></p>
<p><strong>一些特殊类型</strong>(内置委托)</p>
<ul>
<li>Action</li>
</ul>
<pre class="language-c#" data-language="c#"><code class="language-c#">public delegate void Action();
public delegate void Action&lt;in T&gt;(T arg);
public delegate void Action&lt;in T1, in T2&gt;(T1 arg1, T2 arg2);</code></pre>
<ul>
<li>Func</li>
</ul>
<pre class="language-c#" data-language="c#"><code class="language-c#">public delegate TResult Func&lt;out TResult&gt;();
public delegate TResult Func&lt;in T1, out TResult&gt;(T1 arg);
public delegate TResult Func&lt;in T1, in T2, out TResult&gt;(T1 arg1, T2 arg2);
&#x2F;&#x2F; Other variations removed for brevity</code></pre>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>参见 <a href="https://docs.microsoft.com/en-us/dotnet/csharp/delegates-patterns">https://docs.microsoft.com/en-us/dotnet/csharp/delegates-patterns</a></p>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件也是一种晚绑定机制。</p>
<p>事件：允许对象broadcast事件的发生。</p>
<p>C# 中使用事件机制实现线程间的通信。</p>
<p><strong>事件的设计理念？</strong></p>
<p>建立 event source 和 event sink 之间的联系</p>
<p>subscribe to 和 unsubscribe from 一个事件 十分简单</p>
<p>单个event source支持多个subscribers.</p>
<p><strong>通过事件使用委托</strong></p>
<p>事件在类中声明且生成，且通过使用同一个类或其他类中的委托与事件处理程序关联。包含事件的类用于发布事件。这被称为 <strong>发布器（publisher）</strong> 类。其他接受该事件的类被称为 <strong>订阅器（subscriber）</strong> 类。事件使用 <strong>发布-订阅（publisher-subscriber）</strong> 模型。</p>
<p><strong>发布器（publisher）</strong> 是一个包含事件和委托定义的对象。事件和委托之间的联系也定义在这个对象中。发布器（publisher）类的对象调用这个事件，并通知其他的对象。</p>
<p><strong>订阅器（subscriber）</strong> 是一个接受事件并提供事件处理程序的对象。在发布器（publisher）类中的委托调用订阅器（subscriber）类中的方法（事件处理程序）。</p>
<h4 id="事件的声明"><a href="#事件的声明" class="headerlink" title="事件的声明"></a>事件的声明</h4><p>在类的内部声明事件，首先必须声明该事件的委托类型。</p>
<pre class="language-c#" data-language="c#"><code class="language-c#">public delegate void BoilerLogHandler(string status);</code></pre>
<p>然后我们基于委托类型定义事件：</p>
<pre class="language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; 基于上面的委托定义事件
public event BoilerLogHandler BoilerEventLog;</code></pre>
<p>上面的代码定义了一个名为 <em>BoilerLogHandler</em> 的委托和一个名为 <em>BoilerEventLog</em> 的事件.</p>
<p>一旦该事件被生成，该委托便会被调用.</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="language-c#" data-language="c#"><code class="language-c#">using System;
namespace SimpleEvent
&#123;
  using System;
  &#x2F;***********发布器类***********&#x2F;
  public class EventTest
  &#123;
    private int value;

    public delegate void NumManipulationHandler();


    public event NumManipulationHandler ChangeNum;
    protected virtual void OnNumChanged()
    &#123;
      if ( ChangeNum !&#x3D; null )
      &#123;
        ChangeNum(); &#x2F;* 事件被触发 *&#x2F;
      &#125;else &#123;
        Console.WriteLine( &quot;event not fire&quot; );
        Console.ReadKey(); &#x2F;* 回车继续 *&#x2F;
      &#125;
    &#125;


    public EventTest()
    &#123;
      int n &#x3D; 5;
      SetValue( n );
    &#125;


    public void SetValue( int n )
    &#123;
      if ( value !&#x3D; n )
      &#123;
        value &#x3D; n;
        OnNumChanged();
      &#125;
    &#125;
  &#125;


  &#x2F;***********订阅器类***********&#x2F;

  public class subscribEvent
  &#123;
    public void printf()
    &#123;
      Console.WriteLine( &quot;event fire&quot; );
      Console.ReadKey(); &#x2F;* 回车继续 *&#x2F;
    &#125;
  &#125;

  &#x2F;***********触发***********&#x2F;
  public class MainClass
  &#123;
    public static void Main()
    &#123;
      EventTest e &#x3D; new EventTest(); &#x2F;* 实例化对象,第一次没有触发事件 *&#x2F;
      subscribEvent v &#x3D; new subscribEvent(); &#x2F;* 实例化对象 *&#x2F;
      e.ChangeNum +&#x3D; new EventTest.NumManipulationHandler( v.printf ); &#x2F;* 注册 *&#x2F;
      e.SetValue( 7 );
      e.SetValue( 11 );
    &#125;
  &#125;
&#125;</code></pre>
<pre class="language-c#" data-language="c#"><code class="language-c#">using System;
using System.IO;

namespace BoilerEventAppl
&#123;

   &#x2F;&#x2F; boiler 类
   class Boiler
   &#123;
      private int temp;
      private int pressure;
      public Boiler(int t, int p)
      &#123;
         temp &#x3D; t;
         pressure &#x3D; p;
      &#125;

      public int getTemp()
      &#123;
         return temp;
      &#125;
      public int getPressure()
      &#123;
         return pressure;
      &#125;
   &#125;
   &#x2F;&#x2F; 事件发布器
   class DelegateBoilerEvent
   &#123;
      public delegate void BoilerLogHandler(string status);

      &#x2F;&#x2F; 基于上面的委托定义事件
      public event BoilerLogHandler BoilerEventLog;

      public void LogProcess()
      &#123;
         string remarks &#x3D; &quot;O. K&quot;;
         Boiler b &#x3D; new Boiler(100, 12);
         int t &#x3D; b.getTemp();
         int p &#x3D; b.getPressure();
         if(t &gt; 150 || t &lt; 80 || p &lt; 12 || p &gt; 15)
         &#123;
            remarks &#x3D; &quot;Need Maintenance&quot;;
         &#125;
         OnBoilerEventLog(&quot;Logging Info:\n&quot;);
         OnBoilerEventLog(&quot;Temparature &quot; + t + &quot;\nPressure: &quot; + p);
         OnBoilerEventLog(&quot;\nMessage: &quot; + remarks);
      &#125;

      protected void OnBoilerEventLog(string message)
      &#123;
         if (BoilerEventLog !&#x3D; null)
         &#123;
            BoilerEventLog(message);
         &#125;
      &#125;
   &#125;
   &#x2F;&#x2F; 该类保留写入日志文件的条款
   class BoilerInfoLogger
   &#123;
      FileStream fs;
      StreamWriter sw;
      public BoilerInfoLogger(string filename)
      &#123;
         fs &#x3D; new FileStream(filename, FileMode.Append, FileAccess.Write);
         sw &#x3D; new StreamWriter(fs);
      &#125;
      public void Logger(string info)
      &#123;
         sw.WriteLine(info);
      &#125;
      public void Close()
      &#123;
         sw.Close();
         fs.Close();
      &#125;
   &#125;
   &#x2F;&#x2F; 事件订阅器
   public class RecordBoilerInfo
   &#123;
      static void Logger(string info)
      &#123;
         Console.WriteLine(info);
      &#125;&#x2F;&#x2F;end of Logger

      static void Main(string[] args)
      &#123;
         BoilerInfoLogger filelog &#x3D; new BoilerInfoLogger(&quot;e:\\boiler.txt&quot;);
         DelegateBoilerEvent boilerEvent &#x3D; new DelegateBoilerEvent();
         boilerEvent.BoilerEventLog +&#x3D; new
         DelegateBoilerEvent.BoilerLogHandler(Logger);
         boilerEvent.BoilerEventLog +&#x3D; new
         DelegateBoilerEvent.BoilerLogHandler(filelog.Logger);
         boilerEvent.LogProcess();
         Console.ReadLine();
         filelog.Close();
      &#125;&#x2F;&#x2F;end of main

   &#125;&#x2F;&#x2F;end of RecordBoilerInfo
&#125;</code></pre>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>与 Nana 的日常 —— 从零开始的 Linux 调教指北(0)</title>
    <url>/dear-memory-with-nana-0/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/08/23/78DGrYSMnVgKkwE.jpg" alt="QQ图片20210823091857"></p>
<p>(Nana 印象图 初版)</p>
<p>速览本文：</p>
<ul>
<li>Nana 是什么</li>
<li>系统安装</li>
<li>Wi-Fi 配置</li>
<li>初次连接与工作环境配置</li>
<li>硬盘挂载</li>
<li>Bash 界面美化</li>
</ul>
<h2 id="Nana-是什么？"><a href="#Nana-是什么？" class="headerlink" title="Nana 是什么？"></a>Nana 是什么？</h2><p><s>Nana 是 c7w 幻想中的 npy</s> Nana 是目前正在宿舍中运行的一台树莓派 4B 的代号，其上装载了 Ubuntu 20.04 LTS.</p>
<p>本系列旨在<s>记录c7w和ta的每一天</s>将 Linux 踩坑指南和一些常用软件的配置过程记录下来，同时也方便学习与交流。</p>
<a id="more"></a>
<h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p>我们采用了最为简单的方式，在官网上下载了 <a href="https://www.raspberrypi.org/software/">Raspberry Pi Imager</a> .</p>
<p>比起 balenaEtcher 好处是我懒得去 Tsinghua Tuna 上面下载镜像了.</p>
<p><img src="https://i.loli.net/2021/08/23/EOedo5ZnClFKT4J.png" alt="image-20210823093223369"></p>
<p>系统选择，用的比较顺手的 Ubuntu，选了 armhf 的 32bit（内存一共才2G</p>
<p>然后把数据写进去，就完成了系统安装操作.</p>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="Wi-Fi-Connection"><a href="#Wi-Fi-Connection" class="headerlink" title="Wi-Fi Connection"></a>Wi-Fi Connection</h3><p>传统艺能，在烧录好的 <code>system-boot</code> 盘的根目录的 network-config 配置文件内添加配置信息就好.</p>
<pre class="language-none"><code class="language-none"># This file contains a netplan-compatible configuration which cloud-init
# will apply on first-boot. Please refer to the cloud-init documentation and
# the netplan reference for full details:
#
# https:&#x2F;&#x2F;cloudinit.readthedocs.io&#x2F;
# https:&#x2F;&#x2F;netplan.io&#x2F;reference
#
# Some additional examples are commented out below

version: 2
ethernets:
  eth0:
    dhcp4: true
    optional: true
wifis:
  wlan0:
    dhcp4: true
    optional: true
    access-points:
      &quot;iLovePKU&quot;:
        password: &quot;1145141919810&quot;
      &quot;Peking-Visitor&quot;:
        password: &quot;c7w,yyds&quot;
#      myworkwifi:
#        password: &quot;correct battery horse staple&quot;
#      workssid:
#        auth:
#          key-management: eap
#          method: peap
#          identity: &quot;me@example.com&quot;
#          password: &quot;passw0rd&quot;
#          ca-certificate: &#x2F;etc&#x2F;my_ca.pem
# :)
</code></pre>
<h2 id="初次连接及配置"><a href="#初次连接及配置" class="headerlink" title="初次连接及配置"></a>初次连接及配置</h2><p>初次连接, ssh 到对应 ip 就好，用户名和密码都是 ubuntu.</p>
<p>然后会提示修改密码，完成操作即可.</p>
<p><img src="https://i.loli.net/2021/08/23/RZir5LadNWCUmcK.png" alt="image-20210823095803256"></p>
<h3 id="切换软件安装源"><a href="#切换软件安装源" class="headerlink" title="切换软件安装源"></a>切换软件安装源</h3><p>我们当然推出 Tsinghua Tuna.</p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a></p>
<p><img src="https://i.loli.net/2021/08/23/CGsyKxtMdqZDWHT.png" alt="image-20210823095949515"></p>
<p>按照提示把文件内容替换即可.（这里我们不对 Linux 指令做过多介绍，默认读者已经对 Linux 系统的命令有了基本的了解与认知）</p>
<p>注意到我们的树莓派是 arm64 架构，所以要将链接末尾的 <em>ubuntu</em> 替换为 <strong>ubuntu-ports</strong>.</p>
<p>然后我们就可以 <strong>sudo apt update</strong> 获取软件包链接缓存了.(然后是愉快的系统升级，不过 c7w 输入 <code>sudo apt upgrade &amp;</code> 之后就去睡觉了)</p>
<h3 id="公钥私钥配置"><a href="#公钥私钥配置" class="headerlink" title="公钥私钥配置"></a>公钥私钥配置</h3><p><s>由于这台机器的所有权与使用者都仅有 c7w 一人，所以 c7w 可以放心的将自己一直在用的私钥上传.</s></p>
<p>想了想还是重新配一个新的吧，万一真丢了就不好办了x</p>
<pre class="language-none"><code class="language-none">ubuntu@ubuntu:~$ ssh-keygen -o
Generating public&#x2F;private rsa key pair.
Enter file in which to save the key (&#x2F;home&#x2F;ubuntu&#x2F;.ssh&#x2F;id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in &#x2F;home&#x2F;ubuntu&#x2F;.ssh&#x2F;id_rsa
Your public key has been saved in &#x2F;home&#x2F;ubuntu&#x2F;.ssh&#x2F;id_rsa.pub</code></pre>
<p>敲回车的功夫就搞定了.</p>
<p>然后首先让我们把公钥取回本地. <s>vim 打开复制就好</s></p>
<p>然后我们把本地的公钥配置到远端.</p>
<p>Reference: <a href="https://blog.csdn.net/alifrank/article/details/48241699">https://blog.csdn.net/alifrank/article/details/48241699</a></p>
<p><img src="https://i.loli.net/2021/08/23/YgqyQ1M2fBARVFo.png" alt="image-20210823100955900"></p>
<p><img src="https://i.loli.net/2021/08/23/HAujmDEfBeLdNtl.png" alt="image-20210823101140515"></p>
<p>免密登录完成.</p>
<h3 id="Zerotier"><a href="#Zerotier" class="headerlink" title="Zerotier"></a>Zerotier</h3><p><strong>什么是 Zerotier ?</strong></p>
<blockquote>
<h4 id="Connect-team-members-from-anywhere-in-the-world-on-any-device-ZeroTier-creates-secure-networks-between-on-premise-cloud-desktop-and-mobile-devices"><a href="#Connect-team-members-from-anywhere-in-the-world-on-any-device-ZeroTier-creates-secure-networks-between-on-premise-cloud-desktop-and-mobile-devices" class="headerlink" title="Connect team members from anywhere in the world on any device. ZeroTier creates secure networks between on-premise, cloud, desktop, and mobile devices."></a>Connect team members from anywhere in the world on any device. ZeroTier creates secure networks between on-premise, cloud, desktop, and mobile devices.</h4><p>(Excerpted from zerotier.com)</p>
</blockquote>
<p>简而言之，跟过去的 Hamachi 这种东西差不多（应该现在的人没多少人知道这是什么东西了吧），加入到同一个虚拟网络中的设备可以在<strong>虚拟局域网</strong>中互相通信，对于 c7w 这种喜欢在外面(必须在机房)进行摸大鱼<s>和 Nana 贴贴</s>的人来说基本是必需品.</p>
<p><strong>如何安装？</strong></p>
<p>不用动脑子，反正一条命令的事.</p>
<p><a href="https://www.zerotier.com/download/">https://www.zerotier.com/download/</a></p>
<p><code>curl -s https://install.zerotier.com | sudo bash</code></p>
<p><img src="https://i.loli.net/2021/08/23/JzxMELeOf49Hb83.png" alt="image-20210823095301599"></p>
<p><strong>如何配置？</strong></p>
<p><code>sudo zerotier-cli join &lt;Network ID&gt;</code></p>
<p>其中 网络ID 自行注册账号后创建.</p>
<p>join 后记得到控制台点击验证通过.</p>
<p><img src="https://i.loli.net/2021/08/23/Us7j5tvZnRHEKia.png" alt="image-20210823095614878"></p>
<p>这样就配置好了.</p>
<h2 id="硬盘挂载"><a href="#硬盘挂载" class="headerlink" title="硬盘挂载"></a>硬盘挂载</h2><p><s>为了显示我对 Nana 的诚意，</s>特别地配置了一块1T硬盘.</p>
<p>我们 <code>sudo fdisk -l</code> 来查看当前的所有硬盘.</p>
<p><img src="https://i.loli.net/2021/08/23/YAXjEk1mT43fsqp.png" alt="image-20210823102142524"></p>
<p>由于这块硬盘之前我在 Windows 上格式化过，是可以正确显示类型的.</p>
<p>然后我们创建好想要挂载的目录，比如 <code>mkdir /mnt/data</code></p>
<p><img src="https://i.loli.net/2021/08/23/lCO4azUJPHy8VAx.png" alt="image-20210823102540274"></p>
<p>这样就挂载好了，甚至还能看到我一个月前写的 this.txt</p>
<h3 id="开机自动挂载"><a href="#开机自动挂载" class="headerlink" title="开机自动挂载"></a>开机自动挂载</h3><p>我们没法保证服务器运行过程中不关机，<s>事实上紫荆宿舍的断电也没让我失望过</s>.</p>
<p>于是我们需要添加开机自动挂载功能.</p>
<p><img src="https://i.loli.net/2021/08/23/MbiUeAxYuaqf1mC.png" alt="image-20210823103213405"></p>
<p>这里由于 c7w 的硬盘是 exfat 格式，于是将 ext3 写为 exfat.</p>
<p>Reference:</p>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1746763">https://cloud.tencent.com/developer/article/1746763</a></li>
<li><a href="https://blog.51cto.com/zkxfoo/1758529">https://blog.51cto.com/zkxfoo/1758529</a></li>
</ul>
<h2 id="美化-Bash"><a href="#美化-Bash" class="headerlink" title="美化 Bash"></a>美化 Bash</h2><p>先呈现最终效果.</p>
<p><img src="https://i.loli.net/2021/08/23/yHqfpJ2rkX4CQmI.png" alt="image-20210823112959044"></p>
<p>这里我们使用了 zsh + oh my zsh 进行配置.</p>
<h3 id="安装与配置流程"><a href="#安装与配置流程" class="headerlink" title="安装与配置流程"></a>安装与配置流程</h3><p><strong>zsh</strong></p>
<blockquote>
<p><strong>什么是 shell ？</strong></p>
<p>In computing, a shell is a computer program which exposes an operating system’s services to a human user or other program. </p>
<p>In general, operating system shells use either a command-line interface (<strong>CLI</strong>) or graphical user interface (<strong>GUI</strong>), depending on a computer’s role and particular operation. </p>
<p>It is named a shell because it is the <strong>outermost layer </strong>around the operating system.</p>
<p>(Excerpeted from Wikipedia)</p>
<p>也就是说，shell 是给人用的，用来和 操作系统 交互的工具.</p>
<p>我们 Windows 采用的默认的 shell 便是我们的这个图形界面.</p>
<p><img src="https://i.loli.net/2021/08/23/Llsk9A7brdg1826.png" alt="image-20210823104413290"></p>
<p>我们应该能够理解，shell 是一种<strong>软件</strong>，是可以被更改配置，甚至整个换掉的<strong>软件</strong>。</p>
<p>比如，我们也可以用 Windows 带有的 cmd 这个 shell.</p>
<p><img src="https://i.loli.net/2021/08/23/sNWHr3qAKQ25uZF.png" alt="image-20210823104538789"></p>
<p> 只是看起来好丑（x 而且操作也不方便.</p>
<hr>
<p>如何查看自己 Linux <strong>目前</strong>用的是什么 shell ？如何查看自己都有哪些<strong>shell</strong>？</p>
<p><code>cat /etc/shells</code></p>
<p><img src="https://i.loli.net/2021/08/23/qExZXcGlYPrDgiQ.png" alt="image-20210823105242514"></p>
<p><code>echo $SHELL</code></p>
<p><img src="https://i.loli.net/2021/08/23/5gjSYGxfWO9IluC.png" alt="image-20210823105305619"></p>
<p>可以看到，我们现在正在使用 <code>/bin/bash</code> 这个软件作为 shell.</p>
<p><s>没错就是这个丑不拉几的界面</s></p>
<p>说了这么多，我们接下来就要换 shell，然后换界面主题了.</p>
</blockquote>
<p><strong>什么是 zsh ？</strong></p>
<p><a href="https://www.zsh.org/">https://www.zsh.org/</a></p>
<blockquote>
<p>Zsh is a shell designed for interactive use, although it is also a powerful scripting language.</p>
<p>按照介绍，是 shell 的一种.</p>
</blockquote>
<p>为什么我们必须安装 zsh ？<s>废话，因为我想装的主题只支持 zsh</s></p>
<p>自动补全 好用！（x</p>
<p><strong>如何安装zsh？</strong></p>
<p><img src="https://i.loli.net/2021/08/23/mlnRi8VbaQoFvMT.png" alt="image-20210823111207852"></p>
<ol>
<li>传统艺能 <code>sudo apt install zsh</code></li>
<li>运行 <code>zsh --version</code> 检查版本</li>
<li>设为默认 shell. <code>chsh -s $(which zsh)</code></li>
<li><p>重新登录.</p>
</li>
<li><p>提示配置 zsh 时我们暂且先 (q) quit.</p>
</li>
</ol>
<p>基本差不多了，我们接下来安装 <code>oh my zsh</code>.</p>
<p><strong>什么是 oh my zsh?</strong></p>
<blockquote>
<p>shell的类型有很多种，linux下默认的是bash，虽然bash的功能已经很强大，但对于以懒惰为美德的程序员来说，bash的提示功能不够强大，界面也不够炫，并非理想工具。</p>
<p>而zsh的功能极其强大，只是<strong>配置过于复杂</strong>，起初只有极客才在用。后来，有个穷极无聊的程序员可能是实在看不下去广大猿友一直只能使用单调的bash, 于是他创建了一个名为<code>oh-my-zsh</code>的开源项目…</p>
<p>(Excerpted from <a href="https://www.jianshu.com/p/d194d29e488c">https://www.jianshu.com/p/d194d29e488c</a>)</p>
</blockquote>
<p><img src="https://i.loli.net/2021/08/23/VuAr3vmbST8tIxX.png" alt="image-20210823111944157"></p>
<p>然后是安装，复制粘贴命令就好.</p>
<p><code>sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></p>
<p><img src="https://i.loli.net/2021/08/23/QZVqsB5tCgdSi3c.png" alt="image-20210823112219705"></p>
<p>会自动帮我们写入刚刚 quit 掉的配置文件.</p>
<p>然后我们重新登入，oh my zsh 就已经配置好了.</p>
<p><img src="https://i.loli.net/2021/08/23/6OD7IHGPbTLWzqZ.png" alt="image-20210823112321731"></p>
<p><strong>切换主题</strong></p>
<p>目前这个样子吧，还是好丑.</p>
<p>默认的配置文件位于 <code>~/.zshrc</code> 这里. </p>
<p>其中 ~ 代表用户的家目录，如<code>/home/ubuntu</code></p>
<p><img src="https://i.loli.net/2021/08/23/xMSeVDYoQ76hNZs.png" alt="image-20210823112824697"></p>
<p><s>好，改他。</s>个人比较习惯使用 <code>agnoster</code>，也就是最初展示的那个效果。</p>
<p><img src="https://i.loli.net/2021/08/23/yHqfpJ2rkX4CQmI.png" alt="image-20210823112959044"></p>
<p>Reference:</p>
<ul>
<li><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Settings">https://github.com/ohmyzsh/ohmyzsh/wiki/Settings</a></li>
</ul>
<p><strong>本地适配</strong></p>
<p>如果读到这里也做到这里，Windows 选手可能还有一个问题。</p>
<p>那就是这么好看的箭头符号展示出来是乱码。</p>
<p>问题不大，我们还有最后一步，安装字体文件。</p>
<p>可以参考如下链接。</p>
<p>Reference:</p>
<ul>
<li><p><a href="https://blog.csdn.net/qiphon3650/article/details/109165495">https://blog.csdn.net/qiphon3650/article/details/109165495</a></p>
</li>
<li><p><a href="https://github.com/powerline/fonts">https://github.com/powerline/fonts</a></p>
</li>
</ul>
<p>First edited by c7w, 2021-8-23 11:33:41.</p>
<p>咕咕咕 qwq</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 使用指北</title>
    <url>/docker/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/02/11/MbaA67dgptL9YBc.png" alt="img"></p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境不同，可能导致软件在开发环境中能运行，而到了生产环境无法运行的情况。</p>
<p>用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。</p>
<p>环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，<strong>安装的时候，把原始环境一模一样地复制过来</strong>。</p>
<p>这个问题的一种解决方式是使用<strong>虚拟机</strong>，比如我们常用的 WSL，就是在 Windows 系统中运行 Linux 虚拟系统的例子。但是，这样做的资源占用多，要重新配置一个全新操作系统的冗余步骤多，启动起来也十分缓慢。于是，Linux 发展出了另一种虚拟化技术：<strong>虚拟容器</strong>。</p>
<p><strong>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。</strong>或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p>
<p><strong>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。</strong>它是目前最流行的 Linux 容器解决方案。</p>
<p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p>
<p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>
<a id="more"></a>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ul>
<li>Windows <a href="https://docs.docker.com/desktop/windows/install/">https://docs.docker.com/desktop/windows/install/</a></li>
<li>Linux <a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></li>
</ul>
<h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><ol>
<li>镜像（Image）：类似于虚拟机中的镜像，是一个包含有文件系统的面向 Docker 引擎的只读模板。任何应用程序运行都需要环境，而镜像就是用来提供这种运行环境的。例如一个 Ubuntu 镜像就是一个包含 Ubuntu 操作系统环境的模板，同理在该镜像上装上 Apache 软件，就可以称为 Apache 镜像。</li>
<li>容器（Container）：类似于一个轻量级的沙盒，可以将其看作一个极简的 Linux 系统环境（包括 root 权限、进程空间、用户空间和网络空间等），以及运行在其中的应用程序。Docker 引擎利用容器来运行、隔离各个应用。容器是镜像创建的应用实例，可以创建、启动、停止、删除容器，各个容器之间是是相互隔离的，互不影响。注意：<strong>镜像本身是只读的，容器从镜像启动时，Docker 在镜像的上层创建一个可写层，镜像本身不变。</strong></li>
<li>仓库（Repository）：类似于代码仓库，这里是镜像仓库，是 Docker 用来集中存放镜像文件的地方。注意与注册服务器（Registry）的区别：注册服务器是存放仓库的地方，一般会有多个仓库；而仓库是存放镜像的地方，一般每个仓库存放一类镜像，每个镜像利用 tag 进行区分，比如 Ubuntu 仓库存放有多个版本（12.04、14.04 等）的 Ubuntu 镜像。</li>
</ol>
<h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><p>对镜像的基本操作总结：</p>
<ul>
<li>官方注册服务器（Registry）：<a href="https://hub.docker.com/">https://hub.docker.com/</a></li>
<li>搜索某个镜像：<code>docker search &lt;image&gt;</code></li>
<li>将某个镜像下载到本地：<ul>
<li><code>docker pull &lt;image&gt;</code>// 如果不加 tag 默认使用 latest 镜像</li>
<li><code>docker pull &lt;image&gt;:&lt;tag&gt;</code></li>
</ul>
</li>
<li>查看当前下载的镜像信息：<code>docker images</code></li>
<li>新建自定义镜像的方法</li>
</ul>
<p><strong>方法 1：利用镜像启动一个容器后修改，再进行 commit</strong></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker run -it centos:latest /bin/bash    # 启动一个容器</span>
<span class="token punctuation">[</span>root@72f1a8a0e394 /<span class="token punctuation">]</span><span class="token comment">#    # 这里命令行形式变了，表示已经进入了一个新环境</span>
<span class="token punctuation">[</span>root@72f1a8a0e394 /<span class="token punctuation">]</span><span class="token comment"># git --version    # 此时的容器中没有 git</span>
bash: git: <span class="token builtin class-name">command</span> not found
<span class="token punctuation">[</span>root@72f1a8a0e394 /<span class="token punctuation">]</span><span class="token comment"># yum install git    # 利用 yum 安装 git</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token punctuation">[</span>root@72f1a8a0e394 /<span class="token punctuation">]</span><span class="token comment"># git --version   # 此时的容器中已经装有 git 了</span>
<span class="token function">git</span> version <span class="token number">1.8</span>.3.1</code></pre>
<p>然后按下 Ctrl+D 或者输入 exit 退出容器，然后查看当前所有容器：<code>docker ps -a</code>。这里将容器转化为一个镜像，即执行 commit 操作，完成后可使用 docker images 查看：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker ps -a</span>
CONTAINER ID  IMAGE    COMMAND      CREATED   STATUS   PORTS    NAMES
72f1a8a0e394  centos:latest <span class="token string">"/bin/bash"</span>  <span class="token number">9</span> minutes ago   Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">3</span> minutes ago      angry_hodgkin

<span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker commit -m "Commit Message" -a "UserInfo" &lt;Container ID> &lt;user>/&lt;repo>:&lt;tag></span>

<span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker images</span>
REPOSITORY       TAG    IMAGE ID         CREATED             SIZE
<span class="token operator">&lt;</span>user<span class="token operator">></span>/<span class="token operator">&lt;</span>repo<span class="token operator">></span>    <span class="token function">git</span>    52166e4475ed     <span class="token number">5</span> seconds ago       <span class="token number">358.1</span> MB
centos           latest 0584b3d2cf6d     <span class="token number">9</span> days ago          <span class="token number">196.5</span> MB</code></pre>
<p>此时 Docker 引擎中就有了我们新建的镜像 <code>&lt;user&gt;/&lt;repo&gt;:&lt;tag&gt;</code>，此镜像和原有的 CentOS 镜像区别在于多了个 Git 工具。此时我们利用新镜像创建的容器，本身就自带 Git 了。</p>
<p><strong>方法 2：使用 <code>Dockerfile</code></strong></p>
<p>Dockerfile 可以理解为一种配置文件，用来告诉 <code>docker build</code> 命令应该执行哪些操作。一个简易的 <code>Dockerfile</code> 文件如下所示：</p>
<pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile"># 说明该镜像以哪个镜像为基础
FROM centos:latest

# 构建者的基本信息
MAINTAINER &lt;user&gt;

# 在 build 这个镜像时执行的操作 
RUN yum update
RUN yum install -y git

# 拷贝本地文件到镜像中
COPY .&#x2F;* &#x2F;usr&#x2F;share&#x2F;gitdir&#x2F;

# Expose 对应端口，允许外部连接
EXPOSE 3000</code></pre>
<p>官方教程链接：<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p>
<p>有了 <code>Dockerfile</code> 之后，就可以利用 <code>build</code> 命令<strong>构建镜像</strong>了：</p>
<pre class="language-text" data-language="text"><code class="language-text">[root@xxx ~]# docker build -t="&lt;user>/&lt;repo>:&lt;tag>" .</code></pre>
<p>其中 -t 用来指定新镜像的用户信息、tag 等。最后的点表示在当前目录寻找 <code>Dockerfile</code>。</p>
<ul>
<li><p>删除容器或镜像</p>
<ul>
<li>删除容器：<code>docker rm container_name/container_id</code></li>
<li>删除镜像：<code>docker rmi image_name/image_id</code></li>
<li>删除镜像前必须先删除以此镜像为基础的容器。</li>
</ul>
</li>
<li><p>镜像的保存与加载</p>
<ul>
<li>保存镜像：<code>docker save -o centos.tar &lt;user&gt;/&lt;repo&gt;:&lt;tag&gt;</code></li>
<li>加载镜像：<code>docker load -i centos.tar</code></li>
</ul>
</li>
</ul>
<h2 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h2><ul>
<li>启动容器：<code>docker run [Options] &lt;Image&gt; [Command]</code><ul>
<li><code>-d</code>：Run container in background and print container ID</li>
<li><code>-e</code>：Set environment variables</li>
<li><code>-i</code>：Keep STDIN open even if not attached</li>
<li><code>-p &lt;host&gt;:&lt;container&gt;</code>：Publish a container’s port to the host</li>
<li><code>-t</code>：Allocate a pseudo-TTY</li>
<li><code>--name</code>：Assign a name to the container</li>
<li><code>-v &lt;host&gt;:&lt;container&gt;</code>：Mount host_path to container_path </li>
<li>常用命令：<code>docker run -itd centos:latest /bin/bash</code></li>
<li>如果想让容器一直运行，而不是停止，可以使用快捷键 Ctrl+P Ctrl+Q 退出，此时容器的状态为 Up。</li>
</ul>
</li>
<li>启动容器：<code>docker start &lt;container&gt;</code></li>
<li>停止容器：<code>docker stop container&gt;</code></li>
<li>重启容器：<code>docker restart &lt;container&gt;</code></li>
<li>进入已启动的容器：<code>docker attach &lt;container&gt;</code></li>
<li>复制文件：<code>docker cp &lt;container&gt;:&lt;path&gt; &lt;host_path&gt;</code></li>
</ul>
<h2 id="Repositories"><a href="#Repositories" class="headerlink" title="Repositories"></a>Repositories</h2><ul>
<li>官方镜像服务器：<a href="https://hub.docker.com">https://hub.docker.com</a></li>
<li>登录 DockerHub：<code>docker login</code></li>
<li>推送本地镜像：<code>docker push &lt;username&gt;/&lt;repo&gt;:&lt;tag&gt;</code><ul>
<li><code>username</code> 必须与你 Docker Hub 中的用户名一致</li>
</ul>
</li>
<li>拉取远端镜像：<code>docker pull &lt;username&gt;/&lt;repo&gt;:&lt;tag&gt;</code></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23599229">https://zhuanlan.zhihu.com/p/23599229</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/后端</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Nana Chat —— QQ Bot 模块</title>
    <url>/NanaChat/</url>
    <content><![CDATA[<p>服务器基本的配置已经完成，我们可以使用她来做有趣的事了。</p>
<p>接下来和 Nana 的日常，主要是从“实现项目”这个角度来展开。</p>
<p>所以，我们这次还是祭出我们的传统艺能，QQ Bot.</p>
<p>不过这次要在项目管理方面做好一点，不能再是 if-else 的大杂烩了.</p>
<h1 id="Current-Status-咕了"><a href="#Current-Status-咕了" class="headerlink" title="Current Status: 咕了"></a>Current Status: 咕了</h1><a id="more"></a>
<h2 id="Dependencies-前期调研"><a href="#Dependencies-前期调研" class="headerlink" title="Dependencies 前期调研"></a>Dependencies 前期调研</h2><h3 id="mirai-amp-mirai-api-http"><a href="#mirai-amp-mirai-api-http" class="headerlink" title="mirai &amp; mirai-api-http"></a>mirai &amp; mirai-api-http</h3><p>Mirai 是一个在全平台下运行，提供 QQ Android 和 TIM PC 协议支持的高效率机器人框架.</p>
<p><a href="https://github.com/project-mirai/mirai-api-http">https://github.com/project-mirai/mirai-api-http</a></p>
<h4 id="下载与设置守护进程"><a href="#下载与设置守护进程" class="headerlink" title="下载与设置守护进程"></a>下载与设置守护进程</h4><ul>
<li>安装 Java 运行时 <code>sudo apt install openjdk-11-jre</code></li>
<li>下载 MCL，安装 mirai-api-http</li>
<li>登录 Bot（使用 QQ 浏览器验证？使用 QQ 打开链接即可）<ul>
<li>如果有需要的话可以安装验证码库</li>
</ul>
</li>
<li><p>设置为自动登录</p>
</li>
<li><p>配置 supervisor</p>
</li>
</ul>
<pre class="language-conf" data-language="conf"><code class="language-conf">[program:mcl]
command&#x3D;&#x2F;home&#x2F;ftpuser&#x2F;5050-mcl&#x2F;mcl-1.2.2&#x2F;mcl
autostart&#x3D;true
autorestart&#x3D;true
user&#x3D;root</code></pre>
<h3 id="Brainstorming-项目构思"><a href="#Brainstorming-项目构思" class="headerlink" title="Brainstorming 项目构思"></a>Brainstorming 项目构思</h3><p>我们可以考虑采用 websocket 这种 adapter，可以同时处理主动发信和消息上报事件.</p>
<pre class="mermaid">graph TB
    subgraph "NanaChat (Daemon)"
        nCore["NanaChat-Core (Port 5051)"]
        nPlugin[NanaChat-Plugins]
    end

    subgraph "Mirai-api-http (Daemon)"
        ws["WebSocket Server (Port 5050)"]
    end

    wa-->|"收信 [1]"|nCore
    nCore -->|"主动发信"| ws
    ws -->|"消息上报"| nCore
    nCore --> nPlugin
    nPlugin --> nCore</pre>

<pre class="mermaid">graph TD;
ncore[NanaChat-Core]
s[Scheduler<br/>定时事件]
d[Dispatcher<br/>消息发送处理]
l[Listener<br/>创建 Socket 连接<br/>监听事件]
pm[PluginManager<br/>管理插件<br/>协助注册监听器与调度器]
ncore --> l
ncore --> s
ncore --> d
ncore --> pm</pre>

<h2 id="Docs"><a href="#Docs" class="headerlink" title="Docs"></a>Docs</h2><h3 id="Nana-Core"><a href="#Nana-Core" class="headerlink" title="Nana-Core"></a>Nana-Core</h3><h3 id="Nana-Plugins"><a href="#Nana-Plugins" class="headerlink" title="Nana-Plugins"></a>Nana-Plugins</h3><p>注册 Nana-Core::Listener…</p>
<p>使用 Nana-Core::Dispatcher…</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/综合</category>
      </categories>
      <tags>
        <tag>QQ Bot</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划的背包问题</title>
    <url>/dp-backpack/</url>
    <content><![CDATA[<h2 id="0-1-背包问题"><a href="#0-1-背包问题" class="headerlink" title="0/1 背包问题"></a>0/1 背包问题</h2><p>有$N$件物品和一个容量为$V$的背包。<strong>每种物品仅有一件，可以选择放或不放。</strong> 第$i$件物品的费用是$w[i]$，价值是$c[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 </p>
<p>设$f[i][v]$表示前$i$件物品(部分或全部)<em>恰</em>放入一个容量为$v$的背包可以获得的最大价值。则其状态转移方程便是：</p>
<script type="math/tex; mode=display">
f[i][v]=\max(f[i-1][v],f[i-1][v-w[i]]+c[i])</script><a id="more"></a>
<h3 id="0-1背包的空间优化"><a href="#0-1背包的空间优化" class="headerlink" title="0/1背包的空间优化"></a>0/1背包的空间优化</h3><p>我们可以将二维数组存储优化为一维数组存储。</p>
<p>在每次主循环中，如果我们以$v=V…0$的逆序推$f[v]$，这样就能保证推$f[v]$时$f[v-w[i]]$保存的是状态$f[i-1][v-w[i]]$的值。</p>
<p>伪代码如下：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>N 
	<span class="token keyword">for</span> v <span class="token operator">=</span> V<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.0</span> 
        f<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>v<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p>　　其中$f[v]=max(f[v],f[v-w[i]]+c[i])$便与原转移方程等价。</p>
<h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2><p>有$N$种物品和一个容量为$V$的背包，<strong>每种物品都有无限件可用</strong>。第$i$种物品的费用是$w[i]$，价值是$c[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。 </p>
<p>令$f[i][v]$表示前$i$种物品<em>恰</em>放入一个容量为$v$的背包的最大价值，于是可以按照每种物品不同的策略写出状态转移方程：</p>
<script type="math/tex; mode=display">
f[i][v]=\max(f[i-1][v-k*{w[i]}]+k*{c[i]}) (k = 0, 1, ..., floor(\frac v {w[i]}))</script><h3 id="完全背包问题的空间优化"><a href="#完全背包问题的空间优化" class="headerlink" title="完全背包问题的空间优化"></a>完全背包问题的空间优化</h3><p>完全背包的特点恰是每种物品可选无限件，所以我们可以考虑“加选一件第$i$种物品”策略。因此我们可以使用<strong>可能已选入第i种物品</strong>的子结果$f[i][v-w[i]]$，于是我们必须采用$v=0…V$的顺序循环。</p>
<p>伪代码如下：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>N 
	<span class="token keyword">for</span> v <span class="token operator">=</span> <span class="token number">0.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>V
		f<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>v<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<h3 id="另一种解法：转化为0-1背包问题"><a href="#另一种解法：转化为0-1背包问题" class="headerlink" title="另一种解法：转化为0/1背包问题"></a>另一种解法：转化为0/1背包问题</h3><p>考虑到第$i$种物品最多选$floor(\frac V {w[i]})$件，于是可以把第$i$种物品转化为$floor(\frac V {w[i]})$件费用及价值均不变的物品，然后求解这个0/1背包问题。</p>
<p>更高效的转化方法是：把第$i$种物品拆成费用为$2^kw[i]$、价值为$2^kc[i]$的若干件物品，其中$k$满足$2^kw[i]&lt;V$。这是二进制的思想，因为不管最优策略选几件第$i$种物品，总可以表示成若干个$2^k$件物品的和。</p>
<h2 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h2><p>有$N$种物品和一个容量为$V$的背包。<strong>第$i$种物品最多有$n[i]$件可用</strong>，每件费用是$w[i]$，价值是$c[i]$。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>
<p>基本的方程只需将完全背包问题的方程略微一改即可，因为对于第$i$种物品有$n[i]+1$种策略：取$0$件，取$1$件……取$n[i]$件。令$f[i][v]$表示前$i$种物品恰放入一个容量为$v$的背包的最大价值，则：</p>
<script type="math/tex; mode=display">
for \ k\ in \ range[0, n[i]]: \\
f[i][v]=max(f[i-1][v-k*w[i]]+ k*c[i])</script><p>循环时注意$v-k*w[i]$ 非负即可。</p>
<h3 id="转化为0-1背包问题"><a href="#转化为0-1背包问题" class="headerlink" title="转化为0/1背包问题"></a>转化为0/1背包问题</h3><p>将第$i$种物品分成若干件物品，其中每件物品有一个系数，这件物品的费用和价值均是原来的费用和价值乘以这个系数。使这些系数分别为</p>
<script type="math/tex; mode=display">
1,2,4, \cdots ,2^{k-1},n[i]-2^k+1</script><p>且k是满足$n[i]-2^k+1&gt;0$的最大整数。</p>
<p>例如，如果$n[i]$为$13$，就将这种物品分成系数分别为$1,2,4,6$的四件物品。 </p>
<h2 id="二维背包问题"><a href="#二维背包问题" class="headerlink" title="二维背包问题"></a>二维背包问题</h2><p>二维费用的背包问题是指：对于每件物品，具有两种不同的费用；选择这件物品必须同时付出这两种代价；对于每种代价都有一个可付出的最大值（背包容量）。问怎样选择物品可以得到最大的价值。</p>
<p>设这两种代价分别为代价1和代价2，第$i$件物品所需的两种代价分别为$a[i]$和$b[i]$。两种代价可付出的最大值（两种背包容量）分别为$V$和$U$。物品的价值为$c[i]$。</p>
<p>费用加了一维，只需状态也加一维即可。设$f[i][v][u]$表示前$i$件物品付出两种代价分别恰为$v$和$u$时可获得的最大价值。状态转移方程就是：</p>
<script type="math/tex; mode=display">
f[i][v][u]=max(f[i-1][v][u], f[i-1][v-a[i]][u-b[i]]+c[i])</script><p>如前述方法，可以只使用二维的数组：当每件物品只可以取一次时变量$v$和$u$采用逆序的循环，当物品有如完全背包问题时采用顺序的循环。当物品有如多重背包问题时拆分物品。</p>
<h3 id="物品总个数的限制"><a href="#物品总个数的限制" class="headerlink" title="物品总个数的限制"></a>物品总个数的限制</h3><p>有时，“二维费用”的条件是以这样一种隐含的方式给出的：最多只能取$M$件物品。这事实上相当于每件物品多了一种“件数”的费用，每个物品的件数费用均为$1$，可以付出的最大件数费用为$M$。</p>
<h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><ul>
<li><a href="https://www.luogu.com.cn/problem/P1833">https://www.luogu.com.cn/problem/P1833</a></li>
</ul>
<p>附AC代码：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> v<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//  i j   k</span>
<span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">processTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d:%d %d:%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    v <span class="token operator">=</span> d <span class="token operator">-</span> b <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">tryItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> cost<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">bool</span> inf<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>inf<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> cost<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> v<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> cost<span class="token punctuation">]</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> v<span class="token punctuation">;</span> j <span class="token operator">>=</span> cost<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> cost<span class="token punctuation">]</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">decompose</span><span class="token punctuation">(</span><span class="token keyword">int</span> cost<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">>=</span>base<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">tryItem</span><span class="token punctuation">(</span>cost <span class="token operator">*</span> base<span class="token punctuation">,</span> value <span class="token operator">*</span> base<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        num <span class="token operator">-=</span> base<span class="token punctuation">;</span>
        base <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">tryItem</span><span class="token punctuation">(</span>cost <span class="token operator">*</span> num<span class="token punctuation">,</span> value <span class="token operator">*</span> num<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">processTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">tryItem</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">tryItem</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token function">decompose</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        result <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    cout <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
]]></content>
      <categories>
        <category>程设</category>
        <category>程设/动态规划</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>0/1背包</tag>
      </tags>
  </entry>
  <entry>
    <title>《数据结构》课程期末 CheatSheet</title>
    <url>/dsa-cheatsheet/</url>
    <content><![CDATA[<p>期末考试可以自带的一张 CheatSheet Made by c7w.</p>
<p>仅供参考，对于任何可能影响您课程成绩的行为，请您后果自负！</p>
<a id="more"></a>
<p>会的不整 CheatSheet 还是会，不会的整上去还是不会w</p>
<p>反正是 Page Fault 了，带了这一整页判断题还是不会做 TaT</p>
<p><img src="https://s2.loli.net/2022/01/29/hxij9gYq1DuZ3ST.jpg" alt="cheatSheet"></p>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch 实现搜索网站纪实</title>
    <url>/elasticsearch/</url>
    <content><![CDATA[<p>事实上是挑战杯要搭一个文书搜索网站…暂时需要用 BM25 算法顶一下。</p>
<p>Elasticsearch 的默认相似度算法就是 BM25，嘛嘛，大胜利。</p>
<p>搜索的对象是…数目约在 $10^8$ 规模左右的文档…</p>
<p>嘛嘛，反正都是大调库。缝合就完事了。</p>
<p>// WIP: 应该不会咕</p>
<a id="more"></a>
<h2 id="索引算法"><a href="#索引算法" class="headerlink" title="索引算法"></a>索引算法</h2><p>我们首先介绍下 Sparse Retrieval 的主要算法，TF-IDF 算法和 BM25 算法。</p>
<h3 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h3><p>TF 是指归一化的词频，IDF 是指逆文档频率。给定文档集合 $D$，有 $d_i \in D, 1 \le i \le n$. </p>
<p>文档集合总共包含 $m$​ 个词，去除一些十分常见的词作为停用词（Stop Words），有 $w_i \in W, 1 \le i \le m$​.</p>
<p>定义 TF 如下，即一篇文档中某个词出现的频率：</p>
<script type="math/tex; mode=display">
\text{TF}(q_i, d_j) = \dfrac {f_{i, d_j}}{ |d_j| }</script><p>TF 只能描述词在文档中的频率，但假设现在有个词为“我们”，这个词可能在文档集 $D$ 中每篇文档中都会出现，并且有较高的频率。那么这一类词就不具有很好的区分文档的能力，为了降低这种通用词的作用，引入了 IDF：</p>
<script type="math/tex; mode=display">
\text{IDF}(q_i) = \ln \dfrac {|D|}{|\{d_i  : q_i \in d_i \}|}</script><p>于是我们综合这两部分， 便可以得到 TF-IDF：</p>
<script type="math/tex; mode=display">
\text{TF-IDF} = \text{TF} * \text{IDF}</script><p>TF 可以计算在一篇文档中词出现的频率，而 IDF 可以降低一些通用词的作用。因此对于一篇文档我们可以用文档中每个词的 TF−IDF 组成的向量来表示该文档，再根据余弦相似度这类的方法来计算文档之间的相关性。</p>
<h3 id="BM25"><a href="#BM25" class="headerlink" title="BM25"></a>BM25</h3><p>BM25 是信息索引领域用来计算 query 与文档相似度得分的经典算法。</p>
<p>不同于 TF-IDF，BM25 的公式主要由三个部分组成：</p>
<ol>
<li>query 中每个单词 $q_i$ 与文档 $d$ 之间的相关性</li>
<li>单词 $q_i$ 与 query 之间的相似性</li>
<li>每个单词的权重</li>
</ol>
<p>BM25 算法的一般公式：</p>
<script type="math/tex; mode=display">
score(Q,d) = \sum_i^n W_i R(q_i, d)</script><p>其中 $Q$ 表示 query，$q_i \in Q$，$d$​ 表示 document.</p>
<p>下展开介绍各部分公式：</p>
<ul>
<li><strong>$W_i$</strong></li>
</ul>
<script type="math/tex; mode=display">
W_i = IDF(q_i) = \ln \dfrac {N-df_i+0.5}{df_i+0.5}</script><p>其中 $N$​​ 是 document 总数，$df_i$​ 表示含有 $q_i$​ 的文档总数。</p>
<p>依据 IDF 的作用，对于某个 $q_i$​ ，包含 $q_i$ 的文档数越多，说明 $q_i$ 重要性越小，或者区分度越低，IDF 越小，因此 IDF 可以用来刻画 $q_i$ 与文档的相似性。</p>
<ul>
<li><strong>$R(q_i, d)$​</strong></li>
</ul>
<p>BM25 的设计依据一个重要的发现：<strong>词频和相关性之间的关系是非线性的</strong>，也就是说，每个词对于文档的相关性分数不会超过一个特定的阈值，当词出现的次数达到一个阈值后，其影响就不在线性增加了，而这个阈值会跟文档本身有关。</p>
<script type="math/tex; mode=display">
R(q_i, d) = \dfrac {f_i \cdot (k_1+1)}{f_i+K} \cdot \dfrac {qf_i \cdot(k_2+1)}{qf_i+k_2}</script><p>我们可以分成两部分来看待上述公式，其中 $f_i$​ 为 $q_i$​ 在 $d$​ 中出现的次数，$k_1, k_2, K$​ 是常数。</p>
<p>后一部分 $\dfrac {qf_i \cdot(k_2+1)}{qf_i+k_2}$ 在控制 $q_i$​ 和 Query 的相似度。</p>
<p>前一部分在计算 $q_i$ 与 $d$​ 的相似度，其中 $K = k_1 \cdot (1-b+b\cdot \dfrac {|d|}{AVG_n(|d|)})$，参数 $b$ 在调节文本长度对相关性的影响。</p>
<p>不失一般性地我们可以取 $k_1 = 2, k_2 = 0, b = 0.75$​.</p>
<p>反正在接下来的运用也是大调库，调参数可以通过更改配置文件来进行。</p>
<h2 id="网站搭建纪实：Elasticsearch"><a href="#网站搭建纪实：Elasticsearch" class="headerlink" title="网站搭建纪实：Elasticsearch"></a>网站搭建纪实：Elasticsearch</h2><blockquote>
<p><strong>Elasticsearch</strong> is the distributed <strong>search and analytics engine</strong> at the heart of the Elastic Stack. <em>Logstash</em> and <em>Beats</em> facilitate collecting, aggregating, and enriching your data and storing it in Elasticsearch. <em>Kibana</em> enables you to interactively explore, visualize, and share insights into your data and manage and monitor the stack. <strong>Elasticsearch is where the indexing, search, and analysis magic happens.</strong></p>
<p>Elasticsearch 是一个开源的搜索引擎，建立在一个全文搜索引擎库 Apache Lucene™ 基础之上。</p>
<p>那 Lucene 又是什么？Lucene 可能是目前存在的，不论开源还是私有的，拥有最先进，高性能和全功能搜索引擎功能的库，但也仅仅只是一个库。</p>
<p>要用上 Lucene，我们需要编写 Java 并引用 Lucene 包才可以，而且我们需要对信息检索有一定程度的理解才能明白 Lucene 是怎么工作的，反正用起来没那么简单。</p>
<p>那么为了解决这个问题，Elasticsearch 就诞生了。Elasticsearch 也是使用 Java 编写的，它的内部使用 Lucene 做索引与搜索，但是它的目标是使全文检索变得简单，相当于 Lucene 的一层封装，它提供了一套简单一致的 RESTful API 来帮助我们实现存储和检索。</p>
<p>所以 Elasticsearch 仅仅就是一个简易版的 Lucene 封装吗？那就大错特错了，Elasticsearch 不仅仅是 Lucene，并且也不仅仅只是一个全文搜索引擎。它可以被下面这样准确的形容：</p>
<ul>
<li>一个分布式的实时文档存储，每个字段可以被索引与搜索</li>
<li>一个分布式实时分析搜索引擎</li>
<li>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</li>
</ul>
<p>总之，是一个相当牛逼的搜索引擎，维基百科、Stack Overflow、GitHub 都纷纷采用它来做搜索。</p>
</blockquote>
<p>总之我们先来到了下载网站看看：<a href="https://www.elastic.co/cn/downloads/elasticsearch。然后选择了适用">https://www.elastic.co/cn/downloads/elasticsearch。然后选择了适用</a> Linux 的安装方式：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html。然后就是把">https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html。然后就是把</a> <code>./config/elasticsearch.yml</code> 的关于安全的设定全部设置成 <code>false</code>（毕竟还要过一层 Django 转接）。然后执行 <code>curl localhost:9200</code>，返回：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"thunlp-3"</span><span class="token punctuation">,</span>
  <span class="token property">"cluster_name"</span> <span class="token operator">:</span> <span class="token string">"elasticsearch"</span><span class="token punctuation">,</span>
  <span class="token property">"cluster_uuid"</span> <span class="token operator">:</span> <span class="token string">"7O7KbQ6hQGOUieAXeKm10g"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"number"</span> <span class="token operator">:</span> <span class="token string">"8.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"build_flavor"</span> <span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>
    <span class="token property">"build_type"</span> <span class="token operator">:</span> <span class="token string">"tar"</span><span class="token punctuation">,</span>
    <span class="token property">"build_hash"</span> <span class="token operator">:</span> <span class="token string">"1b6a7ece17463df5ff54a3e1302d825889aa1161"</span><span class="token punctuation">,</span>
    <span class="token property">"build_date"</span> <span class="token operator">:</span> <span class="token string">"2022-02-03T16:47:57.507843096Z"</span><span class="token punctuation">,</span>
    <span class="token property">"build_snapshot"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">"lucene_version"</span> <span class="token operator">:</span> <span class="token string">"9.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"minimum_wire_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"7.17.0"</span><span class="token punctuation">,</span>
    <span class="token property">"minimum_index_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"7.0.0"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"tagline"</span> <span class="token operator">:</span> <span class="token string">"You Know, for Search"</span>
<span class="token punctuation">&#125;</span></code></pre>
<blockquote>
<p>观前提示：官方的中文 Doc 已经过时了，不少接口和格式都已经改了，请阅读最新版的文档。<s>好大的坑</s></p>
<p>2022-2-17 00:23:38：姑且是把后端调通了，不过这份学习笔记我觉得可以近似作废了，找时间再改吧。下面的教程并不适用 ES 最新版本，虽然大多数思想是相同的，比较便于迁移学习。</p>
</blockquote>
<h3 id="Node-与-Cluster"><a href="#Node-与-Cluster" class="headerlink" title="Node 与 Cluster"></a>Node 与 Cluster</h3><p>Elastic 本质上是一个<strong>分布式</strong>数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。</p>
<p>单个 Elastic 实例称为一个<strong>节点</strong>（node）。一组节点构成一个<strong>集群</strong>（cluster）。</p>
<h4 id="集群与分布式"><a href="#集群与分布式" class="headerlink" title="集群与分布式"></a>集群与分布式</h4><p>（只是趁着这次机会顺便就把 Elasticsearch 上手学一遍，这次毕竟只有单节点（x）</p>
<blockquote>
<p>事实上，Elasticsearch 被设计出来就是以集群运作为基础的。</p>
<p>ElasticSearch 的主旨是随时可用和按需扩容。 而扩容可以通过购买性能更强大（垂直扩容，或纵向扩容）或者数量更多的服务器（水平扩容，或横向扩容）来实现。虽然 Elasticsearch 可以获益于更强大的硬件设备，但是垂直扩容是有极限的。 真正的扩容能力是来自于水平扩容—为集群添加更多的节点，并且将负载压力和稳定性分散到这些节点中。</p>
</blockquote>
<ul>
<li>结点与集群：一个运行中的 Elasticsearch 实例称为一个节点，而集群是由一个或者多个拥有相同 <code>cluster.name</code> 配置的节点组成， 它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。</li>
<li>主节点：管理集群范围内的所有变更，例如增加、删除索引，或者增加、删除节点等。用户可以将请求发送到任意结点，每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。</li>
<li>集群健康状态：通过 <code>[GET] /_cluster/health</code> 可以查询当前节点所在集群的状态。其中返回值的 <code>status</code> 字段如果为 <code>green</code>，代表所有主分片和副本分片都在正常运行；如果为 <code>yellow</code>，代表所有主分片都在正常运行，副本分片并不是都在正常运行；如果为 <code>red</code>，说明有主分片没能正常运行。</li>
<li>主分片与副本分片：<ul>
<li>分片：索引实际上是指向一个或者多个物理<strong>分片</strong>的逻辑命名空间。一个分片是一个底层的工作单元，它保存了全部数据中的一部分。现在我们只需知道一个分片是一个 Lucene 的实例，以及它本身就是一个完整的搜索引擎。 我们的文档被存储和索引到分片内，但是应用程序是直接与索引而不是与分片进行交互。</li>
<li>主分片：索引内任意一个文档都归属于一个主分片，所以主分片的数目决定着索引能够保存的最大数据量。</li>
<li>副本分片：一个副本分片只是一个主分片的拷贝。副本分片作为硬件故障时保护数据不丢失的冗余备份，并为搜索和返回文档等读操作提供服务。副本分片的存在目的是为了在故障的情况下不至于丢失数据。如在下图这个具有三个节点的集群中，$P_i$ 代表主分片，$R_i$ 代表副本分片，每个主分片拥有 2 个其对应的副本分片。</li>
</ul>
</li>
</ul>
<p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_0205.png" alt="拥有2份副本分片3个节点的集群"></p>
<h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><p>Index 里面单条的记录称为 Document（<strong>文档</strong>）。许多条 Document 构成了一个 Index。</p>
<p>Document 使用 JSON 格式表示，下面是一个例子。</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>
  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"工程师"</span><span class="token punctuation">,</span>
  <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"数据库管理"</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>同一个 Index 里面的 Document，<strong>不要求有相同的结构</strong>（scheme），但是最好保持相同，这样有利于提高搜索效率。</p>
<p>文档的元数据：</p>
<ul>
<li><p><strong><code>_id</code></strong>：文档的 ID 字符串</p>
</li>
<li><p><strong><code>_type</code></strong>：文档的类型名</p>
</li>
<li><p><strong><code>_index</code></strong>：文档所在的索引</p>
</li>
<li><p><strong><code>_uid</code></strong>：<code>_type</code> 和 <code>_id</code> 连接在一起构造成 <code>type#id</code></p>
</li>
<li><strong><code>_source</code></strong>：原模原样的 JSON 文件</li>
<li><strong><code>_all</code></strong>：全文拼接</li>
</ul>
<p>文档路由到分片中的方式为：<code>shard = hash(routing) % number_of_primary_shards</code>，其中默认 <code>routing</code> 是一个可变值，默认是文档的 <code>_id</code>。所有的文档 API（<code>get</code>、<code>index</code>、<code>delete</code>、<code>bulk</code>、<code>update</code> 以及 <code>mget</code>）都接受一个叫做 <code>routing</code> 的路由参数 ，通过这个参数我们可以自定义文档到分片的映射。</p>
<h3 id="Indexing"><a href="#Indexing" class="headerlink" title="Indexing"></a>Indexing</h3><p>Elastic 会索引所有字段，经过处理后写入一个<strong>倒排索引</strong>（Inverted Index）。查找数据的时候，直接查找该索引。</p>
<p>所以，Elastic 数据管理的顶层单位就叫做<strong>索引</strong>（Index）。它是单个数据库的同义词。每个 Index （即数据库）的名字必须是小写。</p>
<h4 id="索引与中文分析器"><a href="#索引与中文分析器" class="headerlink" title="索引与中文分析器"></a>索引与中文分析器</h4><ul>
<li>索引的创建</li>
</ul>
<pre class="language-json" data-language="json"><code class="language-json">PUT /my_index
<span class="token punctuation">&#123;</span>
    <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"number_of_shards"</span> <span class="token operator">:</span>   <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 主分片数</span>
        <span class="token property">"number_of_replicas"</span> <span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"type_one"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> ... any mappings ... <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token property">"type_two"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> ... any mappings ... <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        ...
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>索引的删除：<code>[DELETE] /my_index</code></li>
</ul>
<h5 id="分析器-Analysis"><a href="#分析器-Analysis" class="headerlink" title="分析器 Analysis"></a>分析器 Analysis</h5><ul>
<li><p>索引的设置：分析器（<code>analysis</code>），用于将全文字符串转换为适合搜索的倒排索引的工具。</p>
</li>
<li><p>何为<strong>分析</strong>？</p>
</li>
</ul>
<p><strong>Exact Values 与 Full Text</strong></p>
<p>Elasticsearch 中的数据可以分为两类：精确值（Exact Values）和全文本（Full Text）。</p>
<p>精确值是指一些精确的数据，比如日期或者用户 ID。相比较起来，精确值类型的数据很容易查询。结果是二进制的：要么匹配查询，要么不匹配。</p>
<p>全文本数据指的是长文本数据，比如一个推文的内容或者一封邮件的内容。查询全文数据要微妙的多。我们问的不只是“这个文档匹配查询吗”，而是“该文档匹配查询的程度有多大？”换句话说，该文档与给定查询的相关性如何？</p>
<p>为了促进这类在全文本域中的查询，Elasticsearch 首先 <strong>分析</strong> 文档，之后根据结果创建 <strong>倒排索引</strong> 。在接下来的两节，我们会讨论倒排索引和分析过程。</p>
<p><strong>倒排索引</strong></p>
<p>Elasticsearch 使用一种称为 <strong>倒排索引</strong> 的结构，它适用于快速的全文搜索。一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，有一个包含它的文档列表。</p>
<p>例如，假设我们有两个文档，每个文档的 <code>content</code> 域包含如下内容：</p>
<ol>
<li>The quick brown fox jumped over the lazy dog</li>
<li>Quick brown foxes leap over lazy dogs in summer</li>
</ol>
<p>为了创建倒排索引，我们首先将每个文档的 <code>content</code> 域拆分成单独的词（我们称它为 <code>词条</code> 或 <code>tokens</code> ），创建一个包含所有不重复词条的排序列表，然后列出每个词条出现在哪个文档。结果如下所示：</p>
<pre class="language-none"><code class="language-none">Term      Doc_1  Doc_2
-------------------------
Quick   |       |  X
The     |   X   |
brown   |   X   |  X
dog     |   X   |
dogs    |       |  X
fox     |   X   |
foxes   |       |  X
in      |       |  X
jumped  |   X   |
lazy    |   X   |  X
leap    |       |  X
over    |   X   |  X
quick   |   X   |
summer  |       |  X
the     |   X   |
------------------------</code></pre>
<p>现在，如果我们想搜索 <code>quick brown</code> ，我们只需要查找包含每个词条的文档：</p>
<pre class="language-none"><code class="language-none">Term      Doc_1  Doc_2
-------------------------
brown   |   X   |  X
quick   |   X   |
------------------------
Total   |   2   |  1</code></pre>
<p>但是，我们目前的倒排索引有一些问题：</p>
<ul>
<li><code>Quick</code> 和 <code>quick</code> 以独立的词条出现，然而用户可能认为它们是相同的词。</li>
<li><code>fox</code> 和 <code>foxes</code> 非常相似, 就像 <code>dog</code> 和 <code>dogs</code> ；他们有相同的词根。</li>
<li><code>jumped</code> 和 <code>leap</code>, 尽管没有相同的词根，但他们的意思很相近。他们是同义词。</li>
</ul>
<p>如果我们将词条和用户查询都规范为标准模式，那么我们可以找到与用户搜索的词条不完全一致，但具有足够相关性的文档。</p>
<p>这种<strong>分词</strong>和<strong>标准化</strong>的过程就称为是<strong>分析</strong>。</p>
<p><strong>分析和分析器</strong></p>
<p><strong>分析</strong>包含下面的过程：</p>
<ul>
<li>首先，将一块文本分成适合于倒排索引的独立的 <strong>Tokens</strong></li>
<li>之后，将这些词条统一化为标准格式以提高它们的“可搜索性”</li>
</ul>
<p><strong>分析器</strong>执行上面的工作。 <strong>分析器</strong> 实际上是将三个功能封装到了一个包里：</p>
<ul>
<li><p><strong>字符过滤器</strong></p>
<p>首先，字符串按顺序通过每个 <strong>字符过滤器</strong> 。他们的任务是在分词前整理字符串。一个字符过滤器可以用来去掉 HTML，或者将 <code>&amp;</code> 转化成 <code>and</code>。</p>
</li>
<li><p><strong>分词器</strong></p>
<p>其次，字符串被 <strong>分词器</strong> 分为单个的词条。一个简单的分词器遇到空格和标点的时候，可能会将文本拆分成词条。</p>
</li>
<li><p><strong>Token 过滤器</strong></p>
<p>最后，词条按顺序通过每个 <strong>token 过滤器</strong> 。这个过程可能会改变词条（例如，小写化 <code>Quick</code> ），删除词条（例如， 像 <code>a</code>， <code>and</code>， <code>the</code> 等无用词，我们一般称为停用词，Stop Word），或者增加词条（例如，像 <code>jump</code> 和 <code>leap</code> 这种同义词）。</p>
</li>
</ul>
<p><strong>内置的分析器</strong></p>
<ul>
<li>Standard analyzer：对于西方语种表现较好，标准分析器</li>
<li>Simple analyzer：在任何不是字母的地方分隔文本，将词条小写</li>
<li>Whitespace analyzer：在空格的地方划分文本</li>
<li>Language analyzers：考虑指定语言的特点的分析器</li>
</ul>
<p><strong>测试分析器</strong></p>
<pre class="language-json" data-language="json"><code class="language-json">GET /_analyze
<span class="token punctuation">&#123;</span>
  <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"standard"</span><span class="token punctuation">,</span>
  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Text to analyze"</span>
<span class="token punctuation">&#125;</span></code></pre>
<p><strong>中文分析器</strong></p>
<p>在本节的最后会介绍一个中文分析器插件 IK Analysis for Elasticsearch：</p>
<ul>
<li><a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></li>
</ul>
<p>提供的分析器：</p>
<ul>
<li><code>ik_smart</code>：将需要分词的文本做最大粒度的拆分。</li>
<li><code>ik_max_word</code>：将需要分词的文本做最小粒度的拆分，尽量分更多的词。</li>
</ul>
<p>安装：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">./elasticsearch-plugin -v <span class="token function">install</span> https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v8.0.0/elasticsearch-analysis-ik-8.0.0.zip</code></pre>
<h4 id="Type-amp-Mappings"><a href="#Type-amp-Mappings" class="headerlink" title="Type &amp; Mappings"></a>Type &amp; Mappings</h4><p>Document 可以分组，比如 <code>weather</code> 这个 Index 里面，可以按城市分组（北京和上海），也可以按气候分组（晴天和雨天）。这种分组就叫做 Type，它是虚拟的逻辑分组，用来过滤 Document。</p>
<p>不同的 Type 应该有相似的结构（schema），举例来说，<code>id</code> 字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的<a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/mapping.html">一个区别</a>。性质完全不同的数据（比如 <code>products</code> 和 <code>logs</code>）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。</p>
<p>类型（Type）由名称（Name）和映射（Mapping）组成。<strong>映射</strong>，就像数据库中的 schema，描述了文档可能具有的字段或属性以及每个字段的数据类型 —— 比如 <code>string</code>，<code>integer</code> 或 <code>date</code> —— 以及 Lucene 是如何索引和存储这些字段的。</p>
<h5 id="映射-Mappings"><a href="#映射-Mappings" class="headerlink" title="映射 Mappings"></a>映射 Mappings</h5><p>为了能够将时间域视为时间，数字域视为数字，字符串域视为全文本或精确值字符串， Elasticsearch 需要知道每个域中数据的类型。这个信息包含在映射中。</p>
<p>索引中每个文档都有 <strong>类型</strong>，每种类型都有它自己的 <strong>映射</strong>。映射定义了类型中的域，每个域的数据类型，以及 Elasticsearch 如何处理这些域。映射也用于配置与类型有关的元数据。</p>
<p>所有可用的域类型枚举如下：</p>
<ul>
<li>字符串: <code>string</code></li>
<li>整数: <code>byte</code>, <code>short</code>, <code>integer</code>, <code>long</code></li>
<li>浮点数: <code>float</code>, <code>double</code></li>
<li>布尔型: <code>boolean</code></li>
<li>日期: <code>date</code></li>
<li>多层级对象: <code>object</code></li>
</ul>
<p><strong>自定义域映射</strong></p>
<p>针对于简单域类型：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"number_of_clicks"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">,</span> <span class="token comment">// 指定类型</span>
        
        <span class="token comment">// analyzed 作为全文本域索引; </span>
        <span class="token comment">// not_analyzed 作为精确值索引;</span>
        <span class="token comment">// no 不索引.</span>
        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"not_analyzed"</span><span class="token punctuation">,</span> 
        
        <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"whitespace"</span> <span class="token comment">// 分析器 默认为 standard</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>针对于多层级对象：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"gb"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"tweet"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> 
      <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"tweet"</span><span class="token operator">:</span>            <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token property">"user"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> 
          <span class="token property">"type"</span><span class="token operator">:</span>             <span class="token string">"object"</span><span class="token punctuation">,</span>
          <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span>           <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token property">"gender"</span><span class="token operator">:</span>       <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token property">"age"</span><span class="token operator">:</span>          <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token property">"name"</span><span class="token operator">:</span>   <span class="token punctuation">&#123;</span> 
              <span class="token property">"type"</span><span class="token operator">:</span>         <span class="token string">"object"</span><span class="token punctuation">,</span>
              <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token property">"full"</span><span class="token operator">:</span>     <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                <span class="token property">"first"</span><span class="token operator">:</span>    <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                <span class="token property">"last"</span><span class="token operator">:</span>     <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">&#125;</span>
              <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>事实上这将被索引为：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"tweet"</span><span class="token operator">:</span>            <span class="token punctuation">[</span>elasticsearch<span class="token punctuation">,</span> flexible<span class="token punctuation">,</span> very<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"user.id"</span><span class="token operator">:</span>          <span class="token punctuation">[</span>@johnsmith<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"user.gender"</span><span class="token operator">:</span>      <span class="token punctuation">[</span>male<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"user.age"</span><span class="token operator">:</span>         <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"user.name.full"</span><span class="token operator">:</span>   <span class="token punctuation">[</span>john<span class="token punctuation">,</span> smith<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"user.name.first"</span><span class="token operator">:</span>  <span class="token punctuation">[</span>john<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"user.name.last"</span><span class="token operator">:</span>   <span class="token punctuation">[</span>smith<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>总结起来，我们可以在 <code>[PUT] /my_index</code> 时使用：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"tweet"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 类型名</span>
      <span class="token property">"properties"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"tweet"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token property">"type"</span> <span class="token operator">:</span>    <span class="token string">"string"</span><span class="token punctuation">,</span>
          <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"english"</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token property">"date"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token property">"type"</span> <span class="token operator">:</span>   <span class="token string">"date"</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token property">"type"</span> <span class="token operator">:</span>   <span class="token string">"string"</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token property">"user_id"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token property">"type"</span> <span class="token operator">:</span>   <span class="token string">"long"</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><h4 id="新增记录"><a href="#新增记录" class="headerlink" title="新增记录"></a>新增记录</h4><ul>
<li><code>[PUT] /Index/Type/Id</code></li>
</ul>
<p>比如，向<code>/accounts/person</code>发送请求，就可以新增一条人员记录。服务器返回的 JSON 对象，会给出 Index、Type、Id、Version 等信息。</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"accounts"</span><span class="token punctuation">,</span>
  <span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"person"</span><span class="token punctuation">,</span>
  <span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>
  <span class="token property">"_version"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">"result"</span><span class="token operator">:</span><span class="token string">"created"</span><span class="token punctuation">,</span>
  <span class="token property">"_shards"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"total"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"successful"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"failed"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"created"</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li><code>[POST] /Index/Type</code></li>
</ul>
<p>新增记录的时候，也可以不指定 Id，这时要改成 POST 请求。这时，服务器返回的 JSON 对象里面，<code>_id</code>字段就是一个随机字符串。</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"accounts"</span><span class="token punctuation">,</span>
  <span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"person"</span><span class="token punctuation">,</span>
  <span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"AV3qGfrC6jMbsbXb6k1p"</span><span class="token punctuation">,</span>
  <span class="token property">"_version"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">"result"</span><span class="token operator">:</span><span class="token string">"created"</span><span class="token punctuation">,</span>
  <span class="token property">"_shards"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"total"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"successful"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"failed"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"created"</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>注意，如果没有先创建 Index（这个例子是<code>accounts</code>），直接执行上面的命令，Elastic 也不会报错，而是直接生成指定的 Index。</p>
<h4 id="查看记录"><a href="#查看记录" class="headerlink" title="查看记录"></a>查看记录</h4><ul>
<li><code>[GET] /Index/Type/Id</code></li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token string">'localhost:9200/accounts/person/1?pretty=true'</span></code></pre>
<p>上面代码请求查看<code>/accounts/person/1</code>这条记录，URL 的参数<code>pretty=true</code>表示以易读的格式返回。</p>
<p>返回的数据中，<code>found</code>字段表示查询成功，<code>_source</code>字段返回原始记录。</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"accounts"</span><span class="token punctuation">,</span>
  <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"person"</span><span class="token punctuation">,</span>
  <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>
  <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">"found"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"user"</span> <span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>
    <span class="token property">"title"</span> <span class="token operator">:</span> <span class="token string">"工程师"</span><span class="token punctuation">,</span>
    <span class="token property">"desc"</span> <span class="token operator">:</span> <span class="token string">"数据库管理"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>如果 Id 不正确，就查不到数据，<code>found</code>字段就是<code>false</code>。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token string">'localhost:9200/weather/beijing/abc?pretty=true'</span>

<span class="token punctuation">&#123;</span>
  <span class="token string">"_index"</span> <span class="token builtin class-name">:</span> <span class="token string">"accounts"</span>,
  <span class="token string">"_type"</span> <span class="token builtin class-name">:</span> <span class="token string">"person"</span>,
  <span class="token string">"_id"</span> <span class="token builtin class-name">:</span> <span class="token string">"abc"</span>,
  <span class="token string">"found"</span> <span class="token builtin class-name">:</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span></code></pre>
<h4 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h4><ul>
<li><code>[PUT] /Index/Type/Id</code></li>
</ul>
<p>更新记录就是使用 PUT 请求，重新发送一次数据。比如我们将原始数据从”数据库管理”改成”数据库管理，软件开发”。 返回结果里面，有几个字段发生了变化。</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"updated"</span><span class="token punctuation">,</span>
<span class="token property">"created"</span> <span class="token operator">:</span> <span class="token boolean">false</span></code></pre>
<p>可以看到，记录的 Id 没变，但是版本（version）从 <code>1</code> 变成 <code>2</code>，操作类型（result）从 <code>created</code> 变成 <code>updated</code>，<code>created</code> 字段变成 <code>false</code>，因为这次不是新建记录。</p>
<h4 id="部分更新记录"><a href="#部分更新记录" class="headerlink" title="部分更新记录"></a>部分更新记录</h4><p>使用 <code>update</code> API 我们还可以部分更新文档，例如在某个请求时对计数器进行累加。</p>
<ul>
<li><code>[POST] /Index/Type/Id/_update</code></li>
</ul>
<p><code>update</code> 请求最简单的一种形式是接收文档的一部分作为 <code>doc</code> 的参数， 它只是与现有的文档进行合并。对象被合并到一起，覆盖现有的字段，增加新的字段。 例如，我们增加字段 <code>tags</code> 和 <code>views</code> 到我们的博客文章：</p>
<pre class="language-json" data-language="json"><code class="language-json">POST /website/blog/<span class="token number">1</span>/_update
<span class="token punctuation">&#123;</span>
   <span class="token property">"doc"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"tags"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"testing"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">"views"</span><span class="token operator">:</span> <span class="token number">0</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>如果请求成功，我们看到类似于 <code>index</code> 请求的响应：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
   <span class="token property">"_index"</span> <span class="token operator">:</span>   <span class="token string">"website"</span><span class="token punctuation">,</span>
   <span class="token property">"_id"</span> <span class="token operator">:</span>      <span class="token string">"1"</span><span class="token punctuation">,</span>
   <span class="token property">"_type"</span> <span class="token operator">:</span>    <span class="token string">"blog"</span><span class="token punctuation">,</span>
   <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">&#125;</span></code></pre>
<h4 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h4><ul>
<li><code>[DELETE] /Index/Type/Id</code></li>
</ul>
<h4 id="取回多个文档"><a href="#取回多个文档" class="headerlink" title="取回多个文档"></a>取回多个文档</h4><p>将多个请求合并成一个，避免单独处理每个请求花费的网络延时和开销。如果你需要从 Elasticsearch 检索很多文档，那么使用 <code>mget</code> API 来将这些检索请求放在一个请求中，将比逐个文档请求更快地检索到全部文档。<strong>每个文档都是单独检索和报告的。</strong>要想知道请求数组中某个请求是否确实找到，检查 <code>found</code> 字段。</p>
<pre class="language-json" data-language="json"><code class="language-json">GET /_mget
<span class="token punctuation">&#123;</span>
   <span class="token property">"docs"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
         <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span>
         <span class="token property">"_type"</span> <span class="token operator">:</span>  <span class="token string">"blog"</span><span class="token punctuation">,</span>
         <span class="token property">"_id"</span> <span class="token operator">:</span>    <span class="token number">2</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
         <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span>
         <span class="token property">"_type"</span> <span class="token operator">:</span>  <span class="token string">"pageviews"</span><span class="token punctuation">,</span>
         <span class="token property">"_id"</span> <span class="token operator">:</span>    <span class="token number">1</span><span class="token punctuation">,</span>
         <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token string">"views"</span>
      <span class="token punctuation">&#125;</span>
   <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>返回值：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
   <span class="token property">"docs"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
         <span class="token property">"_index"</span> <span class="token operator">:</span>   <span class="token string">"website"</span><span class="token punctuation">,</span>
         <span class="token property">"_id"</span> <span class="token operator">:</span>      <span class="token string">"2"</span><span class="token punctuation">,</span>
         <span class="token property">"_type"</span> <span class="token operator">:</span>    <span class="token string">"blog"</span><span class="token punctuation">,</span>
         <span class="token property">"found"</span> <span class="token operator">:</span>    <span class="token boolean">true</span><span class="token punctuation">,</span>
         <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"text"</span> <span class="token operator">:</span>  <span class="token string">"This is a piece of cake..."</span><span class="token punctuation">,</span>
            <span class="token property">"title"</span> <span class="token operator">:</span> <span class="token string">"My first external blog entry"</span>
         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
         <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">10</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
         <span class="token property">"_index"</span> <span class="token operator">:</span>   <span class="token string">"website"</span><span class="token punctuation">,</span>
         <span class="token property">"_id"</span> <span class="token operator">:</span>      <span class="token string">"1"</span><span class="token punctuation">,</span>
         <span class="token property">"_type"</span> <span class="token operator">:</span>    <span class="token string">"pageviews"</span><span class="token punctuation">,</span>
         <span class="token property">"found"</span> <span class="token operator">:</span>    <span class="token boolean">true</span><span class="token punctuation">,</span>
         <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
         <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"views"</span> <span class="token operator">:</span> <span class="token number">2</span>
         <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
   <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>
<h4 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h4><p>与 <code>mget</code> 可以使我们一次取回多个文档同样的方式， <code>bulk</code> API 允许在单个步骤中进行多次 <code>create</code> 、 <code>index</code> 、 <code>update</code> 或 <code>delete</code> 请求。 如果你需要索引一个数据流比如日志事件，它可以排队和索引数百或数千批次。</p>
<p><code>bulk</code> 与其他的请求体格式稍有不同，如下所示：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> action<span class="token operator">:</span> <span class="token punctuation">&#123;</span> metadata <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>\n
<span class="token punctuation">&#123;</span> request body1        <span class="token punctuation">&#125;</span>\n
<span class="token punctuation">&#123;</span> action<span class="token operator">:</span> <span class="token punctuation">&#123;</span> metadata <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>\n
<span class="token punctuation">&#123;</span> request body2        <span class="token punctuation">&#125;</span>\n
...</code></pre>
<p>这种格式就是每行写一个 JSON 格式的数据，通过换行符(<code>\n</code>)连接到一起。注意两个要点：</p>
<ul>
<li>每行一定要以换行符(<code>\n</code>)结尾，<strong>包括最后一行</strong>。这些换行符被用作一个标记，可以有效分隔行。</li>
<li>这些行不能包含未转义的换行符，因为他们将会对解析造成干扰。这意味着这个 JSON不能使用 pretty 参数打印。</li>
</ul>
<p><code>action</code> 必须是以下选项之一:</p>
<ul>
<li><strong><code>create</code></strong>：如果文档不存在，那么就创建它。</li>
<li><strong><code>index</code></strong>：创建一个新文档或者替换一个现有的文档。</li>
<li><strong><code>update</code></strong>：部分更新一个文档。</li>
<li><strong><code>delete</code></strong>：删除一个文档。不需要再另附一行请求体。</li>
</ul>
<p><code>metadata</code> 应该指定被索引、创建、更新或者删除的文档的 <code>_index</code> 、 <code>_type</code> 和 <code>_id</code> 。</p>
<p>举个例子：</p>
<pre class="language-json" data-language="json"><code class="language-json">POST /_bulk
<span class="token punctuation">&#123;</span> <span class="token property">"delete"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span> <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span> <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"123"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#123;</span> <span class="token property">"create"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span> <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span> <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"123"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span> <span class="token property">"title"</span><span class="token operator">:</span>    <span class="token string">"My first blog post"</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span> <span class="token property">"index"</span><span class="token operator">:</span>  <span class="token punctuation">&#123;</span> <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span> <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"blog"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span> <span class="token property">"title"</span><span class="token operator">:</span>    <span class="token string">"My second blog post"</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span> <span class="token property">"update"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span> <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span> <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token property">"_retry_on_conflict"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span> <span class="token property">"doc"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"title"</span> <span class="token operator">:</span> <span class="token string">"My updated blog post"</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> </code></pre>
<p>返回值：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
   <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
   <span class="token property">"errors"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> 
   <span class="token property">"items"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>  <span class="token property">"delete"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"_index"</span><span class="token operator">:</span>   <span class="token string">"website"</span><span class="token punctuation">,</span>
            <span class="token property">"_type"</span><span class="token operator">:</span>    <span class="token string">"blog"</span><span class="token punctuation">,</span>
            <span class="token property">"_id"</span><span class="token operator">:</span>      <span class="token string">"123"</span><span class="token punctuation">,</span>
            <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
            <span class="token property">"status"</span><span class="token operator">:</span>   <span class="token number">200</span><span class="token punctuation">,</span>
            <span class="token property">"found"</span><span class="token operator">:</span>    <span class="token boolean">true</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>  <span class="token property">"create"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"_index"</span><span class="token operator">:</span>   <span class="token string">"website"</span><span class="token punctuation">,</span>
            <span class="token property">"_type"</span><span class="token operator">:</span>    <span class="token string">"blog"</span><span class="token punctuation">,</span>
            <span class="token property">"_id"</span><span class="token operator">:</span>      <span class="token string">"123"</span><span class="token punctuation">,</span>
            <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
            <span class="token property">"status"</span><span class="token operator">:</span>   <span class="token number">201</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>  <span class="token property">"create"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"_index"</span><span class="token operator">:</span>   <span class="token string">"website"</span><span class="token punctuation">,</span>
            <span class="token property">"_type"</span><span class="token operator">:</span>    <span class="token string">"blog"</span><span class="token punctuation">,</span>
            <span class="token property">"_id"</span><span class="token operator">:</span>      <span class="token string">"EiwfApScQiiy7TIKFxRCTw"</span><span class="token punctuation">,</span>
            <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token property">"status"</span><span class="token operator">:</span>   <span class="token number">201</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>  <span class="token property">"update"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"_index"</span><span class="token operator">:</span>   <span class="token string">"website"</span><span class="token punctuation">,</span>
            <span class="token property">"_type"</span><span class="token operator">:</span>    <span class="token string">"blog"</span><span class="token punctuation">,</span>
            <span class="token property">"_id"</span><span class="token operator">:</span>      <span class="token string">"123"</span><span class="token punctuation">,</span>
            <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
            <span class="token property">"status"</span><span class="token operator">:</span>   <span class="token number">200</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
   <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>批量大小选择：一个好的办法是开始时将 1,000 到 5,000 个文档作为一个批次, 如果你的文档非常大，那么就减少批量的文档个数。一个好的批量大小在开始处理后所占用的物理大小约为 <strong>5-15 MB</strong>。</p>
<h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><h4 id="返回所有记录"><a href="#返回所有记录" class="headerlink" title="返回所有记录"></a>返回所有记录</h4><ul>
<li><code>[GET] /Index/Type/_search</code></li>
</ul>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"took"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token property">"timed_out"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">"_shards"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"total"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"successful"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"failed"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"hits"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token property">"total"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token property">"max_score"</span><span class="token operator">:</span><span class="token number">1.0</span><span class="token punctuation">,</span>
    <span class="token property">"hits"</span><span class="token operator">:</span><span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        <span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"accounts"</span><span class="token punctuation">,</span>
        <span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"person"</span><span class="token punctuation">,</span>
        <span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"AV3qGfrC6jMbsbXb6k1p"</span><span class="token punctuation">,</span>
        <span class="token property">"_score"</span><span class="token operator">:</span><span class="token number">1.0</span><span class="token punctuation">,</span>
        <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>
          <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"工程师"</span><span class="token punctuation">,</span>
          <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"系统管理"</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"accounts"</span><span class="token punctuation">,</span>
        <span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"person"</span><span class="token punctuation">,</span>
        <span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>
        <span class="token property">"_score"</span><span class="token operator">:</span><span class="token number">1.0</span><span class="token punctuation">,</span>
        <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token property">"user"</span> <span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>
          <span class="token property">"title"</span> <span class="token operator">:</span> <span class="token string">"工程师"</span><span class="token punctuation">,</span>
          <span class="token property">"desc"</span> <span class="token operator">:</span> <span class="token string">"数据库管理，软件开发"</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>上面代码中，返回结果的 <code>took</code> 字段表示该操作的耗时（单位为毫秒），<code>timed_out</code> 字段表示是否超时，<code>hits</code> 字段表示命中的记录，里面子字段的含义如下。</p>
<ul>
<li><code>total</code>：返回记录数，本例是 2 条。</li>
<li><code>max_score</code>：最高的匹配程度，本例是 <code>1.0</code>。</li>
<li><code>hits</code>：返回的记录组成的数组。</li>
</ul>
<p>返回的记录中，每条记录都有一个<code>_score</code>字段，表示匹配的程序，默认是按照这个字段降序排列。</p>
<h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><ul>
<li><code>[GET] /Index/Type?size=10&amp;from=10</code></li>
</ul>
<p>分页实现的逻辑：</p>
<p>当我们请求结果的第一页（结果从 1 到 10），每一个分片产生前 10 的结果，并且返回给 <strong>协调节点</strong> ，协调节点对 50 个结果排序得到全部结果的前 10 个。</p>
<p>现在假设我们请求第 1000 页 —— 结果从 10001 到 10010。所有都以相同的方式工作除了每个分片不得不产生前 10010 个结果以外。然后协调节点对全部 50050 个结果排序最后丢弃掉这些结果中的 50040 个结果。</p>
<p>可以看到，在分布式系统中，对结果排序的成本随分页的深度成指数上升。这就是 Web 搜索引擎对任何查询都不要返回超过 1000 个结果的原因。</p>
<h4 id="搜索-API：轻量版"><a href="#搜索-API：轻量版" class="headerlink" title="搜索 API：轻量版"></a>搜索 API：轻量版</h4><p>有两种形式的 <code>搜索</code> API：一种是 “轻量的” <strong>查询字符串</strong> 版本，要求在查询字符串中传递所有的参数，另一种是更完整的 <strong>请求体</strong> 版本，要求使用 JSON 格式和更丰富的查询表达式作为搜索语言。</p>
<p>在 <code>name</code> 字段中包含 <code>john</code> 并且在 <code>tweet</code> 字段中包含 <code>mary</code> 的文档。实际的查询就是这样：</p>
<pre class="language-none"><code class="language-none">+name:john +tweet:mary</code></pre>
<p>但是查询字符串参数所需要的 URL 编码实际上更加难懂：</p>
<p><code>[GET] /_search?q=%2Bname%3Ajohn+%2Btweet%3Amary</code></p>
<p>下面的查询使用以下的条件：</p>
<ul>
<li><code>name</code> 字段中包含 <code>mary</code> 或者 <code>john</code></li>
<li><code>date</code> 值大于 <code>2014-09-10</code></li>
<li><code>_all</code> 字段包含 <code>aggregations</code> 或者 <code>geo</code>（除非设置特定字段，否则查询字符串就使用 <code>_all</code> 字段进行搜索）</li>
</ul>
<pre class="language-sense" data-language="sense"><code class="language-sense">+name:(mary john) +date:&gt;2014-09-10 +(aggregations geo)</code></pre>
<p>从之前的例子中可以看出，这种 <strong>轻量</strong> 的查询字符串搜索效果还是挺让人惊喜的。 它的查询语法在相关参考文档中有详细解释，以便简洁的表达很复杂的查询。对于通过命令做一次性查询，或者是在开发阶段，都非常方便。</p>
<p>但同时也可以看到，这种精简让调试更加晦涩和困难。而且很脆弱，一些查询字符串中很小的语法错误，像 <code>-</code>，<code>:</code>，<code>/</code> 或者 <code>&quot;</code> 不匹配等，将会返回错误而不是搜索结果。</p>
<p>最后，查询字符串搜索允许任何用户在索引的任意字段上执行可能较慢且重量级的查询，这可能会暴露隐私信息，甚至将集群拖垮。</p>
<p>相反，我们经常在生产环境中更多地使用功能全面的 <strong>request body</strong> 查询 API，除了能完成以上所有功能，还有一些附加功能。</p>
<h4 id="搜索-API：请求体"><a href="#搜索-API：请求体" class="headerlink" title="搜索 API：请求体"></a>搜索 API：请求体</h4><h5 id="返回所有记录与分页"><a href="#返回所有记录与分页" class="headerlink" title="返回所有记录与分页"></a>返回所有记录与分页</h5><p><code>[GET/POST] /Index/Type/_search</code></p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"from"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">&#125;</span></code></pre>
<h5 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h5><p><strong>查询语句（Query clauses）</strong>就像一些简单的组合块，这些组合块可以彼此之间合并组成更复杂的查询。这些语句可以是如下形式：</p>
<ul>
<li><strong>叶子语句（Leaf clauses）</strong>(比如 <code>match</code> 语句) 被用于将查询字符串和一个字段（或者多个字段）对比。</li>
<li><strong>复合(Compound)</strong> 语句主要用于合并其它查询语句。 比如，一个 <code>bool</code> 语句允许在你需要的时候组合其它语句，无论是 <code>must</code> 匹配、 <code>must_not</code> 匹配还是 <code>should</code> 匹配，同时它可以包含不评分的过滤器（filters）：</li>
</ul>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"must"</span><span class="token operator">:</span>     <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"tweet"</span><span class="token operator">:</span> <span class="token string">"elasticsearch"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token property">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span>  <span class="token string">"mary"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token property">"should"</span><span class="token operator">:</span>   <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"tweet"</span><span class="token operator">:</span> <span class="token string">"full text"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token property">"filter"</span><span class="token operator">:</span>   <span class="token punctuation">&#123;</span> <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"gt"</span> <span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h5 id="查询与过滤"><a href="#查询与过滤" class="headerlink" title="查询与过滤"></a>查询与过滤</h5><p>我们的搜索一般有以下两种情况：过滤情况（filtering context）和查询情况（query context）。</p>
<p>当使用于 <strong>过滤情况</strong> 时，查询被设置成一个“不评分”或者“过滤”查询。即，这个查询只是简单的问一个问题：“这篇文档是否匹配？”。回答也是非常的简单，yes 或者 no ，二者必居其一。</p>
<p>当使用于 <strong>查询情况</strong> 时，查询就变成了一个“评分”的查询。和不评分的查询类似，也要去判断这个文档是否匹配，同时它还需要判断这个文档匹配的有 <strong>多好</strong>（匹配程度如何）。一个评分查询计算每一个文档与此查询的 <strong>相关程度</strong>，同时将这个相关程度分配给表示相关性的字段 <code>_score</code>，并且按照相关性对匹配到的文档进行排序。这种相关性的概念是非常适合全文搜索的情况，因为全文搜索几乎没有完全 “正确” 的答案。</p>
<p>在一般情况下，一个 filter 会比一个 query 性能更优异，并且每次都表现的很稳定。</p>
<p>通常的规则是，使用查询（query）语句来进行 <strong>全文</strong> 搜索或者其它任何需要影响 <strong>相关性得分</strong> 的搜索。除此以外的情况都使用过滤（filters)。</p>
<h5 id="Leaf-Clauses"><a href="#Leaf-Clauses" class="headerlink" title="Leaf Clauses"></a>Leaf Clauses</h5><ul>
<li><code>match_all</code></li>
</ul>
<p><code>match_all</code> 查询简单的匹配所有文档。在没有指定查询方式时，它是默认的查询：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>
<p>它经常与 filter 结合使用—例如，检索收件箱里的所有邮件。所有邮件被认为具有相同的相关性，所以都将获得分值为 <code>1</code> 的中性 <code>_score</code>。</p>
<ul>
<li><code>match</code></li>
</ul>
<p>无论你在任何字段上进行的是全文搜索还是精确查询，<code>match</code> 查询是你可用的标准查询。如果你在一个全文字段上使用 <code>match</code> 查询，<strong>在执行查询前，它将用正确的分析器去分析查询字符串</strong>。也就是说，如果在一个精确值的字段上使用它，例如数字、日期、布尔或者一个 <code>not_analyzed</code> 字符串字段，那么它将会精确匹配给定的值。</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"tweet"</span><span class="token operator">:</span> <span class="token string">"About Search"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>
<ul>
<li><code>multi_match</code></li>
</ul>
<p><code>multi_match</code> 查询可以在多个字段上执行相同的 <code>match</code> 查询：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"query"</span><span class="token operator">:</span>    <span class="token string">"full text search"</span><span class="token punctuation">,</span>
        <span class="token property">"fields"</span><span class="token operator">:</span>   <span class="token punctuation">[</span> <span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"body"</span> <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li><code>range</code></li>
</ul>
<p><code>range</code> 查询找出那些落在指定区间内的数字或者时间：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"gte"</span><span class="token operator">:</span>  <span class="token number">20</span><span class="token punctuation">,</span>
            <span class="token property">"lt"</span><span class="token operator">:</span>   <span class="token number">30</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>被允许的操作符如下：</p>
<ul>
<li><strong><code>gt</code></strong>：大于</li>
<li><strong><code>gte</code></strong>：大于等于</li>
<li><strong><code>lt</code></strong>：小于</li>
<li><strong><code>lte</code></strong>：小于等于</li>
</ul>
<ul>
<li><code>term</code></li>
</ul>
<p><code>term</code> 查询被用于精确值匹配，这些精确值可能是数字、时间、布尔或者那些 <code>not_analyzed</code> 的字符串：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"age"</span><span class="token operator">:</span>    <span class="token number">26</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span> <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"date"</span><span class="token operator">:</span>   <span class="token string">"2014-09-01"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span> <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"public"</span><span class="token operator">:</span> <span class="token boolean">true</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span> <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"tag"</span><span class="token operator">:</span>    <span class="token string">"full_text"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>
<p><code>term</code> 查询对于输入的文本不分析，所以它将给定的值进行精确查询。</p>
<ul>
<li><code>terms</code></li>
</ul>
<p><code>terms</code> 查询和 <code>term</code> 查询一样，但它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"search"</span><span class="token punctuation">,</span> <span class="token string">"full_text"</span><span class="token punctuation">,</span> <span class="token string">"nosql"</span> <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>
<ul>
<li><code>exists / missing</code></li>
</ul>
<p><code>exists</code> 查询和 <code>missing</code> 查询被用于查找那些指定字段中有值 (<code>exists</code>) 或无值 (<code>missing</code>) 的文档。这与SQL中的 <code>IS_NULL</code> (<code>missing</code>) 和 <code>NOT IS_NULL</code> (<code>exists</code>) 在本质上具有共性：</p>
<pre class="language-sense" data-language="sense"><code class="language-sense">&#123;
    &quot;exists&quot;:   &#123;
        &quot;field&quot;:    &quot;title&quot;
    &#125;
&#125;</code></pre>
<h5 id="Compound-Clauses"><a href="#Compound-Clauses" class="headerlink" title="Compound Clauses"></a>Compound Clauses</h5><p>现实的查询需求从来都没有那么简单；它们需要在多个字段上查询多种多样的文本，并且根据一系列的标准来过滤。为了构建类似的高级查询，你需要一种能够将多查询组合成单一查询的查询方法。</p>
<p>你可以用 <code>bool</code> 查询来实现你的需求。这种查询将多查询组合在一起，成为用户自己想要的布尔查询。它接收以下参数：</p>
<ul>
<li><strong><code>must</code></strong>：文档 <strong>必须</strong> 匹配这些条件才能被包含进来。</li>
<li><strong><code>must_not</code></strong>：文档 <strong>必须不</strong> 匹配这些条件才能被包含进来。</li>
<li><strong><code>should</code></strong>：如果满足这些语句中的任意语句，将增加 <code>_score</code> ，否则，无任何影响。它们主要用于修正每个文档的相关性得分。</li>
<li><strong><code>filter</code></strong>：<strong>必须</strong> 匹配，但它以不评分、过滤模式来进行。这些语句对评分没有贡献，只是根据过滤标准来排除或包含文档。</li>
</ul>
<p>例子：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"must"</span><span class="token operator">:</span>     <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"how to make millions"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token property">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"tag"</span><span class="token operator">:</span>   <span class="token string">"spam"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token property">"should"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"starred"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> 
              <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                  <span class="token punctuation">&#123;</span> <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"date"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token string">"2014-01-01"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                  <span class="token punctuation">&#123;</span> <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"price"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">29.99</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
              <span class="token punctuation">]</span><span class="token punctuation">,</span>
              <span class="token property">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                  <span class="token punctuation">&#123;</span> <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"ebooks"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
              <span class="token punctuation">]</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"软件"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"系统"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h2 id="网站搭建纪实：前端"><a href="#网站搭建纪实：前端" class="headerlink" title="网站搭建纪实：前端"></a>网站搭建纪实：前端</h2><p>没啥好讲的，用的是自己最熟悉的 React+Redux 框架半天肝了个 Prototype…</p>
<p>嘛嘛，反正前端不是主要部分啦x</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.cnblogs.com/jiangxinyang/p/10516302.html">https://www.cnblogs.com/jiangxinyang/p/10516302.html</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/79202151">https://zhuanlan.zhihu.com/p/79202151</a></li>
<li><a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></li>
<li><a href="https://cuiqingcai.com/6214.html">https://cuiqingcai.com/6214.html</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2017/08/elasticsearch.html">https://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/后端</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ExpressJS 项目开发指北</title>
    <url>/express-js/</url>
    <content><![CDATA[<p>Express 是一个简洁而灵活的 Node.js Web 应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。</p>
<p>使用 Express 可以快速地搭建一个完整功能的网站，但是，我们一般更倾向于使用 Express 来快速搭建<strong>网站后端</strong>。</p>
<p>注意，这里我们将网站分为前端和后端，事实上与我们在《程序设计训练》课程中对于使用 Django 来搭建网站的方式不同。Django 的页面渲染是<strong>服务器端渲染</strong>（Server-side Rendering），也就是说，在收到用户发来的请求后，服务器端按照设计的逻辑读取相应的页面模板，在完成页面渲染（也就是在页面模板的对应处填充对应字段）后，将渲染后的 HTML 页面直接发给用户。</p>
<p>而这里我们将网站分为“前端”和“后端”，这种设计模式和上述服务器端渲染有本质的区别，我们一般称为<strong>客户端渲染</strong>（Client-side Rendering）。其运作模式是，网站提供服务器直接将未渲染的 HTML 模板（我们称为“前端代码”）发送给用户，而这模板中包含了类似于 <code>fetch</code> 的函数，可以在浏览器将其渲染时向我们的“后端”发送请求。“后端”在收到请求后，一般以 Json 格式返回所请求的数据，前端再通过 Javascript 脚本将收到的数据渲染在页面上。</p>
<p>在《软件工程》课程中我们推荐使用后者这种设计模式，即进行前后端分离。虽然我们也可以继续利用 Django 来作为后端，但是我们这里给大家提供一种业界也很常用的选项 —— Express。其优点在于，相比于 Django 而言，其编写起来更加方便，也更加快捷。<s>而且，后端更加靠近 <code>npm</code> 这个轮子工厂，对于我们进行大调库也更加的方便。当然，因为 Javascript 令人**的设计，也会收获更加酸爽的 Debug 体验。</s></p>
<p>本文我们侧重介绍如何配置一个 Express 项目，并完成一个最基本的与后端数据库通信的增删查改功能.</p>
<a id="more"></a>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul>
<li>JavaScript 语言</li>
<li>RESTful API 的有关知识（事实上后文也有介绍） <a href="https://www.runoob.com/nodejs/nodejs-restful-api.html">https://www.runoob.com/nodejs/nodejs-restful-api.html</a></li>
<li>（至少一种）数据库的使用操作<ul>
<li>可以是直接使用 SQL 语句操作</li>
<li>可以是使用 ORM 来操作</li>
</ul>
</li>
</ul>
<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>搜索结果可以找到的大多数编写教程均是基于 <code>CommonJS</code> 规范（以 <code>require</code> 和 <code>define</code> 为特点），而 <code>Node.js</code> 则推出了基于语言层面支持的 <code>ES6 Module</code> 规范（以 <code>import</code> 和 <code>export</code> 为特点）。后者必将成为今后较为常用的编写规范。如果想了解更多关于 Javascript 模块化开发的有关知识，可以参考本文初稿作者的<a href="https://c7w.tech/javascript-module-dev/">这篇博客</a>。</p>
<p>同样，这里我们采用更为广泛使用的 <code>yarn</code> 来进行包管理。其安装在 Node.js 简介及 npm 的介绍中已给出，这里我们不再赘述。</p>
<p>首先我们先新建一个项目。（这里采用 Windows 的 CMD 进行操作，Linux 的操作类似，下同）</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">D:<span class="token punctuation">\</span>Coding<span class="token operator">></span>cd D:<span class="token punctuation">\</span>Coding<span class="token punctuation">\</span>MyDashBoardBackend

D:<span class="token punctuation">\</span>Coding<span class="token punctuation">\</span>MyDashBoardBackend<span class="token operator">></span>yarn init
<span class="token function">yarn</span> init v1.22.17
question name <span class="token punctuation">(</span>MyDashBoardBackend<span class="token punctuation">)</span>:
question version <span class="token punctuation">(</span><span class="token number">1.0</span>.0<span class="token punctuation">)</span>:
question description: A sample backend project.
question entry point <span class="token punctuation">(</span>index.js<span class="token punctuation">)</span>:
question repository url:
question author:
question license <span class="token punctuation">(</span>MIT<span class="token punctuation">)</span>:
question private:
success Saved package.json
Done <span class="token keyword">in</span> <span class="token number">20</span>.93s.</code></pre>
<p>然后我们安装 express 模块：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> express</code></pre>
<p>为了使用 <code>ES6 Module</code> 规范，我们配置 <code>package.json</code>，在其中加入 <code>&quot;type&quot;: &quot;module&quot;</code> 字段：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"MyDashBoardBackend"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>
  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"A sample backend project."</span><span class="token punctuation">,</span>
  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>
  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>
  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"^4.17.2"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>然后，我们在根目录新建 <code>index.js</code>，写入如下内容：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">"express"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello, baka c7w!'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>然后我们就可以运行 <code>node index.js</code>，然后前往浏览器访问 <code>http://localhost:3000/</code>，便可以看到我们输出的欢迎信息。</p>
<p>若是感觉如此逼格还不够高，不要紧，我们可以继续进行一些配置：</p>
<p>我们可以继续修改 <code>package.json</code>，向其中加入使用 <code>yarn start</code> 开启服务端的配置：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"MyDashBoardBackend"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"node index.js"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"A sample backend project."</span><span class="token punctuation">,</span>
  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>
  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>
  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"^4.17.2"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>之后我们就可以使用 <code>yarn start</code> 来开启服务端了。</p>
<h2 id="路由-Routing"><a href="#路由-Routing" class="headerlink" title="路由 Routing"></a>路由 Routing</h2><p>没错，相信你已经猜到了，我们后端网站的路由便是主要通过 <code>app.get</code> 和 <code>app.post</code> 两个方法来定义。事实上，如果你对 HTTP 请求方法了解的更多些的话，我们可以使用以下方法：</p>
<ul>
<li><code>app.get()</code></li>
<li><code>app.post()</code></li>
<li><code>app.put()</code></li>
<li><code>app.delete()</code></li>
</ul>
<p>事实上还有更多，这里我们不再一一列出，如欲了解可以借助<a href="https://expressjs.com/en/4x/api.html#app.METHOD">官方的 Docs</a>。</p>
<p>我们这里给出一些示例写法：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">"express"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello, baka c7w!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/item'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'GET method to /item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/item'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'POST method to /item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// Regular Expression!</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/item/*'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `/item/1`</span>
    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Item/*"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>


<span class="token comment">// Variables!</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/item2/:item/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `/item2/1`</span>
    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; item: '1' &#125;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Item/*"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// Even ReExp + Variables!</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/item3/:item(\\d+)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `/item3/1`</span>
    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; item: '1' &#125;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Item/*"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="Route-Handler"><a href="#Route-Handler" class="headerlink" title="Route Handler"></a>Route Handler</h3><p>我们可以尝试考虑以下情景：我们要根据用户身份（这里做简要简化，假设用户身份通过 Routing 传入），分别展示不同的页面。事实上这种情景很常见，比如一个网站的管理员登入博客看到的应该是管理页面，而登录作者看到的应该是写作页面，普通用户看到的就是浏览页面。但是这些页面中又会有一些耦合的元素。于是，我们能不能采用 OOP 课程中策略模式的思想来解决这个问题呢？</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">logger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// Logger 部件，记录用</span>
    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>user <span class="token operator">+</span> <span class="token string">' tried to visit...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>user <span class="token operator">==</span> <span class="token string">"c7w"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">"Welcome!&lt;br />"</span><span class="token punctuation">;</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Permission Denied"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token function-variable function">footer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span>result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token string">'&lt;br />&lt;br />'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>result<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>


app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/:user"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>logger<span class="token punctuation">,</span> main<span class="token punctuation">,</span> footer<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>事实上我们可以利用这种 Handler “数组”来定义处理一个请求的先后顺序。如果在前面的某个 Handler 调用了 <code>next()</code>，那么便会执行下一个 <code>Handler</code>。</p>
<h2 id="req-与-res"><a href="#req-与-res" class="headerlink" title="req 与 res"></a>req 与 res</h2><p>这里我们介绍下 <code>req</code> 和 <code>res</code> 两个参数的主要属性和方法。</p>
<h3 id="req"><a href="#req" class="headerlink" title="req"></a><code>req</code></h3><div class="table-container">
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>req.query</td>
<td>在请求后以 <code>?</code> 和 <code>&amp;</code> 连接的键值对</td>
</tr>
<tr>
<td>req.body</td>
<td>请求体的内容</td>
</tr>
<tr>
<td>req.cookies</td>
<td>Cookies 中的内容</td>
</tr>
</tbody>
</table>
</div>
<p>更多详见：<a href="https://expressjs.com/en/4x/api.html#req">https://expressjs.com/en/4x/api.html#req</a></p>
<h3 id="res"><a href="#res" class="headerlink" title="res"></a><code>res</code></h3><div class="table-container">
<table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://expressjs.com/en/4x/api.html#res.download">res.download()</a></td>
<td>Prompt a file to be downloaded.</td>
</tr>
<tr>
<td><a href="https://expressjs.com/en/4x/api.html#res.end">res.end()</a></td>
<td>End the response process.</td>
</tr>
<tr>
<td><a href="https://expressjs.com/en/4x/api.html#res.json">res.json()</a></td>
<td>Send a JSON response.</td>
</tr>
<tr>
<td><a href="https://expressjs.com/en/4x/api.html#res.redirect">res.redirect()</a></td>
<td>Redirect a request.</td>
</tr>
<tr>
<td><a href="https://expressjs.com/en/4x/api.html#res.render">res.render()</a></td>
<td>Render a view template.</td>
</tr>
<tr>
<td><a href="https://expressjs.com/en/4x/api.html#res.send">res.send()</a></td>
<td>Send a response of various types.</td>
</tr>
<tr>
<td><a href="https://expressjs.com/en/4x/api.html#res.sendFile">res.sendFile()</a></td>
<td>Send a file as an octet stream.</td>
</tr>
<tr>
<td><a href="https://expressjs.com/en/4x/api.html#res.sendStatus">res.sendStatus()</a></td>
<td>Set the response status code and send its string representation as the response body.</td>
</tr>
</tbody>
</table>
</div>
<p>更多详见：<a href="https://expressjs.com/en/4x/api.html#res">https://expressjs.com/en/4x/api.html#res</a></p>
<h2 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h2><p>Middleware（中间件函数）的概念其实很好理解。就像是我们上面举的那个例子，<code>logger</code> 和 <code>main</code> 就可以理解成是 Middleware functions。中间件函数是带有了 <code>req, res, next</code> 为签名的函数，在 Express 处理请求的时候，事实上会将某个地址对应的路由的所有中间件组织成一个类似链表的结构，随着 <code>next()</code> 的调用在中间件间顺序执行。而且，中间件都是有修改 <code>req</code> 和 <code>res</code> 的所有属性的能力的。</p>
<p>一个需要注意的点是，如果中间件函数没有使用类似于 <code>res.send()</code> 的方法将一个请求返回的话，必须要调用 <code>next()</code> 函数，不然即使这个中间件函数执行到末尾，也不会自动跳转。这就会导致请求“假死”的现象。</p>
<h3 id="全局-Middleware"><a href="#全局-Middleware" class="headerlink" title="全局 Middleware"></a>全局 Middleware</h3><p>使用 <code>app.use([path], &lt;middleware function&gt;)</code> 我们可以添加供全局使用的 Middleware 函数（Application-level middleware），示例如下：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">"express"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">logger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// Logger 部件，记录用</span>
    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>req<span class="token punctuation">.</span>originalUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>



app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello, baka c7w!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/item'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'GET method to /item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/item'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'POST method to /item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/item/*'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `/item/1`</span>
    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Item/*"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/item2/:item/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `/item2/1`</span>
    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; item: '1' &#125;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Item/*"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/item3/:item(\\d+)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `/item3/1`</span>
    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; item: '1' &#125;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Item/*"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Tue Feb 08 <span class="token number">2022</span> <span class="token number">22</span>:16:18 GMT+0800 <span class="token punctuation">(</span>China Standard Time<span class="token punctuation">)</span><span class="token punctuation">]</span> GET /user/123
<span class="token punctuation">[</span>Tue Feb 08 <span class="token number">2022</span> <span class="token number">22</span>:16:20 GMT+0800 <span class="token punctuation">(</span>China Standard Time<span class="token punctuation">)</span><span class="token punctuation">]</span> GET /user/123
<span class="token punctuation">[</span>Tue Feb 08 <span class="token number">2022</span> <span class="token number">22</span>:16:22 GMT+0800 <span class="token punctuation">(</span>China Standard Time<span class="token punctuation">)</span><span class="token punctuation">]</span> GET /user/123/123</code></pre>
<h3 id="异常处理-Middleware"><a href="#异常处理-Middleware" class="headerlink" title="异常处理 Middleware"></a>异常处理 Middleware</h3><p>我们可以定义处理异常的中间件函数，方法如下：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Sorry, but fatal error occurred meanwhile.'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>
<h3 id="内置-Middleware"><a href="#内置-Middleware" class="headerlink" title="内置 Middleware"></a>内置 Middleware</h3><p>Express 内置了以下中间件：</p>
<ul>
<li><a href="https://expressjs.com/en/4x/api.html#express.static">express.static</a> 用于提供静态文件，比如图片，文件等等</li>
<li><a href="https://expressjs.com/en/4x/api.html#express.json">express.json</a> 将 req.body 处理为 json (Available with Express 4.16.0+)</li>
<li><a href="https://expressjs.com/en/4x/api.html#express.urlencoded">express.urlencoded</a></li>
</ul>
<p>对于 POST 请求，我们推荐使用后两个中间件。</p>
<h2 id="CRUD-的实现"><a href="#CRUD-的实现" class="headerlink" title="CRUD 的实现"></a>CRUD 的实现</h2><p>首先我们先简单地介绍一下 RESTful API 是什么。</p>
<p>RESTful API 是目前比较成熟的一套互联网应用程序的 API 设计理论。可以参考 <a href="https://www.ruanyifeng.com/blog/2014/05/restful_api.html。">https://www.ruanyifeng.com/blog/2014/05/restful_api.html。</a></p>
<p>TL; DR: 按照一定约定俗成的设计，对于我们所关心的涉及的资源，进行增删查改的操作。RESTful API 更多的是关注在“设计”这一层面。</p>
<p>作为今天的教程，我们只要理解，我们设计出一个后端，能让它和我们的数据库连接，完成增删查改（Create, Read, Update, Delete）就可以了。</p>
<p>作为轮子工厂，我们经过简单的搜索就能找到 JavaScript 与 mysql 连接的工具，其使用教程可以<a href="https://www.runoob.com/nodejs/nodejs-mysql.html">见此</a>。</p>
<p>直接撰写 SQL 语句固然在应用上是高效的，但是切换编程语言或者找一些自动生成 SQL 查询语句的工具也会降低我们的编程效率。在我们<strong>并不是很在意查询效率的前提下</strong>，我们不禁回忆起 Django 中用类撰写 Model 的模式，当时可是十分节省我们的力气。</p>
<p>事实上，这也是一种十分常见的设计模式，叫做 ORM（Object–relational mapping）。之前我们可以将关系型数据库中的一个表看做是一张 Excel 表，而表头规定了这个表的每行记录所应该有的属性。而如果我们把这张表中的表头，视为是一个类在规定它应该具有的属性的话，那么这张表的每行记录，事实上就是这个类所实例化出来的对象。这正是 Django 的 db.models 所采用的设计模式。</p>
<p>再一次，作为轮子工厂，只需要简单的搜索，我们便能找到实现与数据库之间 ORM 设计的库，这里我们以 <a href="https://sequelize.org/v7/">Sequelize</a> 为例。这里我们采用便携的 <code>sqlite3</code> 作为我们的数据库。</p>
<p>实现后的简单项目归档于：<a href="https://github.com/c7w/MyDashboardBackend">https://github.com/c7w/MyDashboardBackend</a></p>
<h2 id="后续拓展"><a href="#后续拓展" class="headerlink" title="后续拓展"></a>后续拓展</h2><ul>
<li>了解更多 ExpressJS 的中间件</li>
<li>了解 ExpressJS 的模板渲染机制</li>
<li>换用其他数据库尝试，包括 fs（本地存储），MySQL，以及非关系型数据库 PostgreSQL</li>
</ul>
<p>可以应用 ExpressJS 的课程：</p>
<ul>
<li>《软件工程》</li>
</ul>
<h2 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h2><ul>
<li>ExpressJS 官网 <a href="https://expressjs.com/">https://expressjs.com/</a></li>
<li>ExpressJS 中文网 <a href="https://expressjs.com/zh-cn/">https://expressjs.com/zh-cn/</a></li>
<li>菜鸟教程 <a href="https://www.runoob.com/nodejs/nodejs-express-framework.html">https://www.runoob.com/nodejs/nodejs-express-framework.html</a></li>
<li>MDN 教程 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website">https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/后端</category>
      </categories>
      <tags>
        <tag>ExpressJS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello, World.</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>没钱结款只得把自己博客搬家的屑</p>
<h2 id="c7w-的破站-ver-2-0"><a href="#c7w-的破站-ver-2-0" class="headerlink" title="c7w 的破站 ver 2.0"></a>c7w 的破站 ver 2.0</h2><p>之前用 WordPress 搭的小站快要到期了，现在也不好找免费的虚拟主机薅羊毛，遂借用 github.io + Hexo 搭建本“静态博客”，来记录今后的点滴。</p>
<p>然后强行安利了贵班的文艺委员也用上了这种方法建的博客，甚至还组建了班级的github organisation.</p>
<p>等有空了就写博文，咕咕咕</p>
<a id="more"></a>]]></content>
      <categories>
        <category>日志</category>
        <category>日志/杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 模块化进化论</title>
    <url>/javascript-module-dev/</url>
    <content><![CDATA[<p>什么是模块化开发？我们可以类比 C++ 中的面向对象和 Java 中的类，我们的做法是，为了避免因为项目过大而导致变量名发生冲突，同时为了便于解耦合的实现，我们将具有某个特定功能的一些属性和方法组织为一个类，单独放在一个文件之中。</p>
<p>事实上，在前端开发中，我们的习惯是，要么将用到的模块全部打包，要么通过 CDN 引入。前者通过 Node.js 实现，而后者则直接将导出的模块挂在在 <code>window</code> 下，也即成为全局变量，这也就是早期 JavaScript 的问题，通过全局变量解决一切问题。</p>
<p>本文我们梳理 JavaScript 对于项目模块化的范式的历史发展进程，以此我们在今后编写项目时提出以下建议：使用最新的 <code>ES6</code> 标准，使用 <code>Babel</code> 向前兼容。</p>
<a id="more"></a>
<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><h3 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a><code>window</code> 对象</h3><p>最初的时候，JavaScript 脚本之间的通信完全依靠 <code>window</code> 对象：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config.js</span>
<span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token string">'https://github.com/ronffy'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  api<span class="token operator">:</span> api<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// utils.js</span>
<span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>config<span class="token punctuation">.</span>api<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js</span>
window<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 所有 script 标签必须保证顺序正确，否则会依赖报错 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/config.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/utils.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<h3 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h3><p><strong>IIFE</strong>（立即调用函数表达式）是一个在定义时就会立即执行的 JavaScript 函数。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    statements
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token string">'https://github.com/ronffy'</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    api<span class="token operator">:</span> api<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>IIFE 的出现，使全局变量的声明数量得到了有效的控制。</p>
<h2 id="AMD-CMD"><a href="#AMD-CMD" class="headerlink" title="AMD / CMD"></a>AMD / CMD</h2><p>随着前端业务增重，代码越来越复杂，靠全局变量通信的方式开始捉襟见肘，前端急需一种更清晰、更简单的处理代码依赖的方式，将 JS 模块化的实现及规范陆续出现，其中被应用较广的模块规范有 AMD 和 CMD。</p>
<p>面对一种模块化方案，我们首先要了解的是：1. 如何导出接口；2. 如何导入接口。</p>
<h3 id="AMD-RequireJS"><a href="#AMD-RequireJS" class="headerlink" title="AMD + RequireJS"></a>AMD + RequireJS</h3><p><code>AMD</code>(<code>Asynchronous Module Definition</code>，异步加载模块定义)规范，一个单独的文件就是一个模块。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。</p>
<p>这里异步指的是不堵塞浏览器其他任务（<code>dom</code> 构建，<code>css</code> 渲染等），而加载内部是同步的（加载完模块后立即执行回调）。</p>
<p>AMD 是一种异步模块规范，<code>RequireJS</code> 是 AMD 规范的实现。官网介绍 <code>RequireJS</code>是一个 <code>js</code> 文件和模块的加载器，提供了加载和定义模块的 <code>api</code>，当在页面中引入了 <code>RequireJS</code> 之后，我们便能够在全局调用 <strong><code>define</code> 和 <code>require</code></strong>。</p>
<h4 id="require"><a href="#require" class="headerlink" title="require"></a><code>require</code></h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>第一个参数 [module]，是一个数组，里面的成员是要加载的模块，<code>callback</code>是加载完成后的回调函数，回调函数中参数对应数组中的成员（模块）。</p>
<p><code>AMD</code> 的标准中，引入模块需要用到方法 <code>require</code>，由于 <code>window</code> 对象上没定义 <code>require</code> 方法，RequireJS 这个库将其具体实现。</p>
<h4 id="define"><a href="#define" class="headerlink" title="define"></a><code>define</code></h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span>id<span class="token operator">?</span><span class="token punctuation">,</span> dependencies<span class="token operator">?</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>id：模块的名字，如果没有提供该参数，模块的名字应该默认为模块加载器请求的指定脚本的名字</li>
<li>dependencies：模块的依赖，已被模块定义的模块标识的数组字面量。依赖参数是可选的，如果忽略此参数，它应该默认为 <code>[&quot;require&quot;, &quot;exports&quot;, &quot;module&quot;]</code>。然而，如果工厂方法的长度属性小于 3，加载器会选择以函数的长度属性指定的参数个数调用工厂方法。</li>
<li>factory：模块的工厂函数，模块初始化要执行的函数或对象。<strong>如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值。</strong></li>
</ul>
<p>接下来，我们用 <code>RequireJS</code> 重构上面的项目。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config.js</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token string">'https://github.com/ronffy'</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    api<span class="token operator">:</span> api<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> config<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// utils.js</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./config'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>api<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> utils<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// main.js</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./utils'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">utils</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  utils<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- index.html  --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/main<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/require.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>CMD 和 AMD 一样，都是 JS 的模块化规范，也主要应用于浏览器端。</p>
<p>AMD 是 RequireJS 在的推广和普及过程中被创造出来。</p>
<p>CMD 是 SeaJS 在的推广和普及过程中被创造出来。</p>
<p>二者的的主要区别是 CMD 推崇依赖就近，AMD 推崇依赖前置：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// AMD</span>
<span class="token comment">// 依赖必须一开始就写好</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./utils'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">utils</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  utils<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// CMD</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 依赖可以就近书写</span>
  <span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  utils<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>AMD 也支持依赖就近，但 RequireJS 作者和官方文档都是优先推荐依赖前置写法。</p>
<p><strong>考虑到目前主流项目中对 AMD 和 CMD 的使用越来越少，大家对 AMD 和 CMD 有大致的认识就好，此处不再过多赘述。</strong></p>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p><code>CommonJS</code> 是一个更<strong>偏向于服务器端</strong>的规范。<code>NodeJS</code> 采用了这个规范。<code>CommonJS</code> 的一个模块就是一个脚本文件。</p>
<h3 id="exports-与-module-exports"><a href="#exports-与-module-exports" class="headerlink" title="exports 与 module.exports"></a><code>exports</code> 与 <code>module.exports</code></h3><p>定义一个模块导出通过 <code>exports</code> 或者 <code>module.exports</code> 挂载即可。</p>
<h3 id="require-1"><a href="#require-1" class="headerlink" title="require"></a><code>require</code></h3><p><code>require</code> 命令<strong>第一次加载该脚本时就会执行整个脚本，然后在内存中生成一个对象</strong>：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
  id<span class="token operator">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span>
  exports<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  loaded<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token punctuation">&#125;</span></code></pre>
<p><code>id</code> 是模块名，<code>exports</code>是该模块导出的接口，<code>loaded</code> 表示模块是否加载完毕。</p>
<p>以后需要用到这个模块时，就会到 <code>exports</code> 属性上取值。<strong>即使再次执行 <code>require</code> 命令，也不会再次执行该模块，而是到缓存中取值</strong>。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config.js</span>
<span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token string">'https://github.com/ronffy'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  api<span class="token operator">:</span> api<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span>

<span class="token comment">// utils.js</span>
<span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>api<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> utils<span class="token punctuation">;</span>

<span class="token comment">// main.js</span>
<span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
utils<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>api<span class="token punctuation">)</span></code></pre>
<p>执行<code>node main.js</code>，<code>https://github.com/ronffy</code> 被打印了出来。</p>
<p>在 main.js 中打印 <code>global.api</code>，打印结果是 <code>undefined</code>。</p>
<p>node 用 <code>global</code> 管理全局变量，与浏览器的 <code>window</code> 类似。与浏览器不同的是，浏览器中顶层作用域是全局作用域，在顶层作用域中声明的变量都是全局变量，而 node 中顶层作用域不是全局作用域，所以在顶层作用域中声明的变量非全局变量。</p>
<p>注意：</p>
<ul>
<li><code>CommonJS</code> 是同步导入模块</li>
<li><code>CommonJS</code> 导入时，它会给你一个导入对象的副本</li>
<li><code>CommonJS</code> 模块不能直接在浏览器中运行，需要进行转换、打包</li>
</ul>
<p>由于 <code>CommonJS</code> 是同步加载模块，这对于服务器端不是一个问题，因为所有的模块都放在本地硬盘。等待模块时间就是硬盘读取文件时间，很小。但是，对于浏览器而言，它需要从服务器加载模块，涉及到网速，代理等原因，一旦等待时间过长，浏览器处于”假死”状态。所以在浏览器端，不适合于 <code>CommonJS</code> 规范。</p>
<h3 id="CommonJS-与-AMD-的对比"><a href="#CommonJS-与-AMD-的对比" class="headerlink" title="CommonJS 与 AMD 的对比"></a>CommonJS 与 AMD 的对比</h3><ol>
<li>CommonJS 是服务器端模块规范，AMD 是浏览器端模块规范。</li>
<li>CommonJS 加载模块是同步的，即执行<code>var a = require(&#39;./a.js&#39;);</code> 时，在 a.js 文件加载完成后，才执行后面的代码。AMD 加载模块是异步的，所有依赖加载完成后以回调函数的形式执行代码。</li>
<li>如下代码中，<code>fs</code> 和 <code>chalk</code> 都是模块，不同的是，<code>fs</code> 是 node 内置模块，<code>chalk</code> 是一个 npm 包。这两种情况在 CommonJS 中才有，AMD 不支持。</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> chalk <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'chalk'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><p><code>UMD</code> 代表通用模块定义（<code>Universal Module Definition</code>）。所谓的通用，就是兼容了 <code>CommonJS</code> 和 <code>AMD</code> 规范，这意味着无论是在 <code>CommonJS</code> 规范的项目中，还是 <code>AMD</code> 规范的项目中，都可以直接引用 <code>UMD</code> 规范的模块使用。</p>
<p>原理其实就是在模块中去判断全局是否存在 <code>exports</code> 和 <code>define</code>，如果存在 <code>exports</code>，那么以 <code>CommonJS</code> 的方式暴露模块，如果存在 <code>define</code> 那么以 <code>AMD</code> 的方式暴露模块:</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"jquery"</span><span class="token punctuation">,</span> <span class="token string">"underscore"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jquery"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"underscore"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    root<span class="token punctuation">.</span>Requester <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>$<span class="token punctuation">,</span> root<span class="token punctuation">.</span>_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$<span class="token punctuation">,</span> _</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// this is where I defined my module implementation</span>
  <span class="token keyword">const</span> Requester <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ... &#125;;</span>
  <span class="token keyword">return</span> Requester<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="ES6-Module"><a href="#ES6-Module" class="headerlink" title="ES6 Module"></a>ES6 Module</h2><p>AMD、CMD 等都是在原有 JS 语法的基础上<strong>二次封装</strong>的一些方法来解决模块化的方案，<strong>ES6 module</strong>（在很多地方被简写为 ESM）是<strong>语言层面的规范</strong>，ES6 module 旨在<strong>为浏览器和服务器提供通用的模块解决方案</strong>。</p>
<p><strong>长远来看，未来无论是基于 JS 的 Web 端，还是基于 node 的服务器端或桌面应用，模块规范都会统一使用 ES6 module。因此，使用 ES6 Module 规范是我们今后的开发首选。</strong></p>
<p><code>ES6</code> 模块是前端开发同学更为熟悉的方式，使用 <code>import</code>, <code>export</code> 关键字来进行模块输入输出。<code>ES6</code> 不再是使用闭包和函数封装的方式进行模块化，而是从语法层面提供了模块化的功能。</p>
<p>使用 <code>Node</code> 原生 <code>ES6</code> 模块需要将 <code>js</code> 文件后缀改成 <code>mjs</code>，或者 <code>package.json</code> “type” 字段改为 “module”，通过这种形式告知 <code>Node</code> 使用 <code>ES Module</code> 的形式加载模块。（这里我们推荐使用后者）</p>
<h3 id="export"><a href="#export" class="headerlink" title="export"></a><code>export</code></h3><p>方式 1：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> prefix <span class="token operator">=</span> <span class="token string">'https://github.com'</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/ronffy</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>
<p>方式 2：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> prefix <span class="token operator">=</span> <span class="token string">'https://github.com'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/ronffy</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span>
  prefix<span class="token punctuation">,</span>
  api<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>方式 1 和方式 2 只是写法不同，结果是一样的，都是把 prefix 和 api 分别导出。</p>
<p>方式 3（默认导出）：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// foo.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">// 等同于：</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span>
  foo <span class="token keyword">as</span> <span class="token keyword">default</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>方式 4（先导入再导出）：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> api <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span>

<span class="token comment">// 等同于：</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> api <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span>
  api
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="import"><a href="#import" class="headerlink" title="import"></a><code>import</code></h3><p>假设我们以方式 1 和方式 2 导出了 <code>&#123;prefix: prefix, api: api&#125;</code>，那么我们可以以如下方式导入：</p>
<p>方式 1：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> api <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span>

<span class="token comment">// or</span>
<span class="token comment">// 配合 import 使用的 as 关键字用来为导入的接口重命名。</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> api <span class="token keyword">as</span> myApi <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span></code></pre>
<p>方式 2（整体导入）：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> config <span class="token keyword">from</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> api <span class="token operator">=</span> config<span class="token punctuation">.</span>api<span class="token punctuation">;</span></code></pre>
<p>方式 3（默认导出的导入）：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// foo.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> conut <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">myFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">// index.js</span>
<span class="token comment">// 默认导入的接口此处刻意命名为 cusFoo，旨在说明该命名可完全自定义。</span>
<span class="token keyword">import</span> cusFoo<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./foo.js'</span><span class="token punctuation">;</span>

<span class="token comment">// 等同于：</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token keyword">default</span> <span class="token keyword">as</span> cusFoo<span class="token punctuation">,</span> count <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./foo.js'</span><span class="token punctuation">;</span></code></pre>
<p><code>export default</code> 导出的接口，可以使用 <code>import name from &#39;module&#39;</code> 导入。这种方式，使导入默认接口很便捷。</p>
<p>方式 4（整体加载）：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span></code></pre>
<p>这样会加载整个 config.js 模块，但未导入该模块的任何接口。</p>
<p>方式 5（动态加载模块）：</p>
<p>上面介绍了 ES6 module 各种导入接口的方式，但有一种场景未被涵盖：动态加载模块。比如用户点击某个按钮后才弹出弹窗，弹窗里功能涉及的模块的代码量比较重，所以这些相关模块如果在页面初始化时就加载，实在浪费资源，<code>import()</code> 可以解决这个问题，从语言层面实现模块代码的按需加载。</p>
<p>ES6 module 在处理以上几种导入模块接口的方式时都是编译时处理，所以 <code>import</code> 和 <code>export</code> 命令只能用在模块的顶层，以下方式都会报错：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 报错</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> api <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token comment">// 报错</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> api <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token comment">// 报错</span>
<span class="token keyword">const</span> modulePath <span class="token operator">=</span> <span class="token string">'./utils'</span> <span class="token operator">+</span> <span class="token string">'/api.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> modulePath<span class="token punctuation">;</span></code></pre>
<p>使用 <code>import()</code> 实现按需加载：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./config.js'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> api <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> modulePath <span class="token operator">=</span> <span class="token string">'./utils'</span> <span class="token operator">+</span> <span class="token string">'/api.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>注意，在浏览器中加载 ES6 模块的时候，我们需要使用：</p>
<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>但是，对于加载外部模块，需要注意：</p>
<ul>
<li>代码是在模块作用域之中运行，而不是在全局作用域运行。<strong>模块内部的顶层变量，外部不可见</strong></li>
<li>模块脚本自动采用严格模式，不管有没有声明 <code>use strict</code></li>
<li>模块之中，可以使用 <code>import</code> 命令加载其他模块（.js 后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用 <code>export</code> 命令输出对外接口</li>
<li><strong>模块之中，顶层的 <code>this</code> 关键字返回 <code>undefined</code>，而不是指向 <code>window</code></strong>。也就是说，在模块顶层使用 <code>this</code> 关键字，是无意义的</li>
<li><strong>同一个模块如果加载多次，将只执行一次</strong></li>
</ul>
<h3 id="ES6-Module-与-CommonJS-的区别"><a href="#ES6-Module-与-CommonJS-的区别" class="headerlink" title="ES6 Module 与 CommonJS 的区别"></a>ES6 Module 与 CommonJS 的区别</h3><ul>
<li><code>CommonJS</code> 输出的是一个<strong>值的拷贝</strong>，ES6 模块输出的是<strong>值的引用</strong>,加载的时候会做静态优化</li>
<li><code>CommonJS</code> 模块是<strong>运行时加载</strong>确定输出接口，ES6 模块是<strong>编译时</strong>确定输出接口</li>
</ul>
<h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>目前，无论是浏览器端还是 node，<strong>都没有完全原生支持 ES6 module</strong>，如果想使用 ES6 module ，可借助 <a href="https://link.segmentfault.com/?enc=NPnBue71LLC14ip6TZXbng%3D%3D.bbpSMgal9YqIDxlkVk1c1BQhJYiGJYf2ZYbUth7aOkE%3D">babel</a> 等编译器。</p>
<blockquote>
<p> Babel 是一个 JavaScript 编译器。</p>
<p>今天就开始使用下一代的 JavaScript 语法编程吧！</p>
<p><img src="https://s2.loli.net/2022/02/07/lm5dWXcRirIC8JH.png" alt="image-20220207214422726"></p>
<p><img src="https://s2.loli.net/2022/02/07/uSzJEKP8rBGV24T.png" alt="image-20220207214437008"></p>
<p>简单来说，可以理解成是编译时替换的一种 polyfill.</p>
</blockquote>
<p>Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. </p>
<p>Here are the main things Babel can do for you:</p>
<ul>
<li>Transform syntax</li>
<li>Polyfill features that are missing in your target environment (through a third-party polyfill such as core-js)</li>
<li>Source code transformations (codemods)</li>
<li>And more! (check out these videos for inspiration)</li>
</ul>
<p>配置方法：<a href="https://babeljs.io/setup#installation">https://babeljs.io/setup#installation</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://segmentfault.com/a/1190000023711059">https://segmentfault.com/a/1190000023711059</a></li>
<li><a href="https://segmentfault.com/a/1190000039375332">https://segmentfault.com/a/1190000039375332</a></li>
<li><a href="https://juejin.cn/post/6844904080955932680">https://juejin.cn/post/6844904080955932680</a></li>
<li><a href="http://nodejs.cn/api/modules.html">http://nodejs.cn/api/modules.html</a></li>
<li><a href="http://nodejs.cn/api/esm.html">http://nodejs.cn/api/esm.html</a></li>
<li><a href="https://docs.net9.org/languages/node.js/">https://docs.net9.org/languages/node.js/</a></li>
<li><a href="https://babeljs.io/docs/en/index.html">https://babeljs.io/docs/en/index.html</a></li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 语言程序设计学习笔记</title>
    <url>/intro-to-java/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/06/20/hn4zWvlPVmRAfjs.png" alt="image-20210620145438112"></p>
<p>本文含有的主要内容：</p>
<ul>
<li>异常处理与文本I/O</li>
<li>抽象类与接口</li>
<li>Package</li>
<li>多线程</li>
</ul>
<p>本文需要整理的内容还有很多，至少目前来看还只是“学习笔记”风格，内容还较为混乱。</p>
<a id="more"></a>
<h2 id="异常处理和文本I-O"><a href="#异常处理和文本I-O" class="headerlink" title="异常处理和文本I/O"></a>异常处理和文本I/O</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>Java 中的<strong>运行时错误</strong>会作为<strong>异常</strong>，这种<strong>对象</strong>被抛出，而如果抛出的异常没有被处理，程序会非正常终止。</p>
<p><img src="https://i.loli.net/2021/06/20/XOrLyW3uFJ5Dwqm.png" alt="image-20210620150112414"></p>
<ul>
<li>异常的类型</li>
</ul>
<p><img src="https://i.loli.net/2021/06/20/2Ga1goTf5FDRxEy.png" alt="image-20210620152135135"></p>
<p><img src="https://i.loli.net/2021/06/20/RL2cOK8rluwJUG7.png" alt="image-20210620152415538"></p>
<ul>
<li>异常处理模型 declaring -&gt; throwing -&gt; catching</li>
</ul>
<p><img src="https://i.loli.net/2021/06/20/T3lVvEK5xo9Wkuc.png" alt="image-20210620152541858"></p>
<p><img src="https://i.loli.net/2021/06/20/CRFP5L1WHIYEBpx.png" alt="image-20210620153031756"></p>
<ul>
<li><p>finally 语句</p>
</li>
<li><p>自定义异常类</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/06/20/wPzZaL7VIYKWUNc.png" alt="image-20210620153455786"></p>
<h3 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I/O"></a>文件I/O</h3><ul>
<li>文件类 File</li>
</ul>
<p><img src="https://i.loli.net/2021/06/20/B2MxU41hQq3kwFu.png" alt="image-20210620153648056"></p>
<ul>
<li>写入数据 PrintWriter 类</li>
</ul>
<p><img src="https://i.loli.net/2021/06/20/4362nMRXLCJaqYx.png" alt="image-20210620155626076"></p>
<ul>
<li>读入数据 Scanner 类</li>
</ul>
<p><img src="https://i.loli.net/2021/06/20/gzUiAfGE6v83WCx.png" alt="image-20210620160405882"></p>
<h2 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h2><ul>
<li>使用 <code>abstract</code> 关键字</li>
<li>接口</li>
</ul>
<p><img src="https://i.loli.net/2021/06/20/j3RAO1wqDsgG9ar.png" alt="image-20210620162928845"></p>
<p><img src="https://i.loli.net/2021/06/20/JWalQBtCKkYA61m.png" alt="image-20210620163020435"></p>
<p><img src="https://i.loli.net/2021/06/20/gLMbBeXJCQAaVzr.png" alt="image-20210620163038375"></p>
<p><img src="https://i.loli.net/2021/06/20/dOLDjAVpaSyem8Z.png" alt="image-20210620163054898"></p>
<p><img src="https://i.loli.net/2021/06/20/QVeTfHq9aBj4puS.png" alt="image-20210620163120256"></p>
<ul>
<li>几种常用的接口<ul>
<li>Comparable<E></li>
<li>Cloneable</li>
</ul>
</li>
</ul>
<h2 id="类的组织——包的概念"><a href="#类的组织——包的概念" class="headerlink" title="类的组织——包的概念"></a>类的组织——包的概念</h2><h3 id="编译单元与类空间"><a href="#编译单元与类空间" class="headerlink" title="编译单元与类空间"></a>编译单元与类空间</h3><ul>
<li>编译单元：一个 Java 源代码文件<ul>
<li>一个编译单元中只能有 一个 public 权限的类</li>
<li>且该类名与文件名相同</li>
<li>类名存在冲突问题</li>
</ul>
</li>
<li>编译单元的组成部分<ul>
<li>所属包的声明；</li>
<li>Import 包的声明用来导入外部类；</li>
<li>类和接口的声明.</li>
</ul>
</li>
</ul>
<h3 id="包与目录"><a href="#包与目录" class="headerlink" title="包与目录"></a>包与目录</h3><p><img src="https://i.loli.net/2021/06/22/PfxFjRqTn4pAGwb.png" alt="image-20210622093402716"></p>
<p><img src="https://i.loli.net/2021/06/22/R5vp4OgNIoc3XVS.png" alt="image-20210622093500242"></p>
<h3 id="引入包与静态引入"><a href="#引入包与静态引入" class="headerlink" title="引入包与静态引入"></a>引入包与静态引入</h3><p><img src="https://i.loli.net/2021/06/22/MVz5RybwFh9UrLT.png" alt="image-20210622093702915"></p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="如何创建多线程"><a href="#如何创建多线程" class="headerlink" title="如何创建多线程"></a>如何创建多线程</h3><h4 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a>继承 Thread 类</h4> <pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigInteger</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Start of the main Thread."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AnotherThread</span> th1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnotherThread</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AnotherThread</span> th2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnotherThread</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        th1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        th2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"End of the main thread."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">AnotherThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">AnotherThread</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name">BigInteger</span> i <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigInteger</span> result <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A new thread has been created with number "</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            i <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Calc Ans: "</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">" with number "</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread has ended with number"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code></pre>
<h4 id="Runnable-接口"><a href="#Runnable-接口" class="headerlink" title="Runnable 接口"></a>Runnable 接口</h4><p><img src="https://i.loli.net/2021/06/22/xq2eEdBO1LhCUNp.png" alt="image-20210622134139451"></p>
<p><img src="https://i.loli.net/2021/06/22/E7C4eYTcBwIvtRp.png" alt="image-20210622134156347"></p>
<h3 id="线程间的资源共享"><a href="#线程间的资源共享" class="headerlink" title="线程间的资源共享"></a>线程间的资源共享</h3><p>当多个线程的执行代码来自于同一个类的run方法时，则称它们共享相同的代码；而当它们访问相同的对象时，则称它们共享相同的数据。</p>
<p>线程间数据共享的实现方法：<strong>用一个 Runnable 类型的对象创建多个线程</strong></p>
<p><img src="https://i.loli.net/2021/06/22/UiedvSbgnKCX4Va.png" alt="image-20210622134610122"></p>
<h3 id="多线程间的同步控制"><a href="#多线程间的同步控制" class="headerlink" title="多线程间的同步控制"></a>多线程间的同步控制</h3><p><img src="https://i.loli.net/2021/06/22/86GhI5Kabnr4ilV.png" alt="image-20210622151938199"></p>
<p><img src="https://i.loli.net/2021/06/22/xDBimG3KEbYJhsr.png" alt="image-20210622152001891"></p>
<p><img src="https://i.loli.net/2021/06/22/grM9S8DeBVbzhFW.png" alt="image-20210622152340500"></p>
<p><img src="https://i.loli.net/2021/06/22/SAXKpEbT6Pr3lF7.png" alt="image-20210622152550427"></p>
<p><img src="https://i.loli.net/2021/06/22/F3lYMpQ46ijmgtP.png" alt="image-20210622152613819"></p>
<p>改进后的代码：</p>
<p><img src="https://i.loli.net/2021/06/22/8Eha4etDxWRVHmL.png" alt="image-20210622153052026"></p>
<p><img src="https://i.loli.net/2021/06/22/a9hEeXUrMOlo7cs.png" alt="image-20210622153137260"></p>
<p><img src="https://i.loli.net/2021/06/22/Q5NBhT8gdAeLJ9v.png" alt="image-20210622153143586"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>实现 MNIST 鉴别手写数字过程手记</title>
    <url>/implementing-MNIST-classifier/</url>
    <content><![CDATA[<p>在学习了相关的<a href="https://cc7w.cf/but-what-is-a-neural-network/">理论基础</a>之后，我们自然是要投入到实践之中，完成这项机器学习领域的 Hello World 任务.</p>
<p>本篇文章会用来记录 c7w 操作的全过程，以及他试图使用 python3 来拟合一篇 python2 教程的痛苦.</p>
<a id="more"></a>
<h1 id="MNIST-Classifier-Implemention"><a href="#MNIST-Classifier-Implemention" class="headerlink" title="MNIST Classifier Implemention"></a>MNIST Classifier Implemention</h1><h2 id="Fetch-dataset"><a href="#Fetch-dataset" class="headerlink" title="Fetch dataset"></a>Fetch dataset</h2><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><p>下载数据包，前往 <a href="http://yann.lecun.com/exdb/mnist/">MNIST 官方网站</a>，把 Trainset 和 Testset 的两组数据全部下载。<s>然后去摸鱼</s></p>
<p><img src="https://i.loli.net/2021/09/03/yRuLJvqO2eEI9MX.png" alt="image-20210903235728102"></p>
<p><strong>数据格式</strong></p>
<blockquote>
<h3 id="TRAINING-SET-LABEL-FILE-train-labels-idx1-ubyte"><a href="#TRAINING-SET-LABEL-FILE-train-labels-idx1-ubyte" class="headerlink" title="TRAINING SET LABEL FILE (train-labels-idx1-ubyte):"></a>TRAINING SET LABEL FILE (train-labels-idx1-ubyte):</h3><pre class="language-none"><code class="language-none">&gt;[offset] [type]     [value]     [description]&#96;
&gt;&#96;0000   32 bit integer 0x00000801(2049) magic number (MSB first)&#96;
&gt;&#96;0004   32 bit integer 60000      number of items&#96;
&gt;&#96;0008   unsigned byte  ??        label&#96;
&gt;&#96;0009   unsigned byte  ??        label&#96;
&gt;&#96;........&#96;
&gt;&#96;xxxx   unsigned byte  ??        label
&gt;The labels values are 0 to 9.</code></pre>
<h3 id="TRAINING-SET-IMAGE-FILE-train-images-idx3-ubyte"><a href="#TRAINING-SET-IMAGE-FILE-train-images-idx3-ubyte" class="headerlink" title="TRAINING SET IMAGE FILE (train-images-idx3-ubyte):"></a>TRAINING SET IMAGE FILE (train-images-idx3-ubyte):</h3><pre class="language-none"><code class="language-none">&gt;[offset] [type]     [value]     [description]&#96;
&gt;&#96;0000   32 bit integer 0x00000803(2051) magic number&#96;
&gt;&#96;0004   32 bit integer 60000      number of images&#96;
&gt;&#96;0008   32 bit integer 28        number of rows&#96;
&gt;&#96;0012   32 bit integer 28        number of columns&#96;
&gt;&#96;0016   unsigned byte  ??        pixel&#96;
&gt;&#96;0017   unsigned byte  ??        pixel&#96;
&gt;&#96;........&#96;
&gt;&#96;xxxx   unsigned byte  ??        pixel</code></pre>
</blockquote>
<h3 id="Use-Pickle-to-load-dataset"><a href="#Use-Pickle-to-load-dataset" class="headerlink" title="Use Pickle to load dataset"></a>Use <strong>Pickle</strong> to load dataset</h3><h2 id="Define-network"><a href="#Define-network" class="headerlink" title="Define network"></a>Define network</h2><h3 id="Init-function"><a href="#Init-function" class="headerlink" title="Init function"></a>Init function</h3><p><strong><code>np.random.randn(d0, d1, ...)</code> 生成随机初值</strong></p>
<p>生成均值为 0，标准差为 1 的正态分布</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">0.5868205495246934</span>
<span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">1.0092581568418932</span>
<span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">0.056108818546049016</span>
<span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.19376191</span><span class="token punctuation">,</span>  <span class="token number">0.28157974</span><span class="token punctuation">,</span>  <span class="token number">0.77366971</span><span class="token punctuation">,</span>  <span class="token number">0.06783304</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.8541143</span> <span class="token punctuation">,</span>  <span class="token number">0.75650134</span><span class="token punctuation">,</span>  <span class="token number">0.59333362</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.65325825</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p><strong><code>zip(a, b)</code> 生成矩阵大小元组</strong></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token builtin">zip</span> <span class="token builtin">object</span> at <span class="token number">0x7f48aac07140</span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">1</span> <span class="token number">5</span>
<span class="token number">2</span> <span class="token number">6</span>
<span class="token number">3</span> <span class="token number">7</span>
<span class="token number">4</span> <span class="token number">8</span>

<span class="token comment"># If their size does not match ?</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token builtin">zip</span> <span class="token builtin">object</span> at <span class="token number">0x7f48a93bfb00</span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>
<p><strong>Network 类的构造</strong></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np


<span class="token keyword">class</span> <span class="token class-name">Network</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sizes<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>num_layers <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sizes<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>sizes <span class="token operator">=</span> sizes
        self<span class="token punctuation">.</span>biases <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> sizes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>weights <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
                        <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>sizes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sizes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre>
<p>对构造函数进行测试…</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Test</span>
network <span class="token operator">=</span> Network<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>network<span class="token punctuation">.</span>biases<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>network<span class="token punctuation">.</span>weights<span class="token punctuation">)</span></code></pre>
<pre class="language-none"><code class="language-none">[array([[-0.69137659],
       [ 0.38159818],
       [ 1.99258114],
       [-0.21144943]]), array([[1.71569818]])]
# Biases: [&lt;Array 4x1&gt;, &lt;Array 1x1&gt;]

[array([[-1.23719403,  1.53304051,  1.33083345,  0.57793759,  1.64201695,
        -1.09019958, -1.72304327, -1.37257551],
       [ 1.55140653, -0.66066249,  0.24355521, -0.06090572,  0.7280547 ,    
        -0.09691786, -1.06502271, -0.39097928],
       [-0.37874956,  0.71162084,  0.23456423, -0.34639554, -1.13344851,    
         0.89943267,  0.44945541, -0.59622082],
       [ 1.90930694,  0.4098545 ,  1.7352552 ,  1.04517198, -0.2241232 ,    
         0.14171245,  0.07186716,  2.50271226]]), array([[ 0.58568595, -1.9973499 ,  0.36131549, -0.07790474]])]
# Weights: [&lt;Array 4x8&gt;, &lt;Array 1x4&gt;]</code></pre>
<p>为什么要这么构造？我们回忆…</p>
<ul>
<li>Our notations are: $a^{(2)} = \sigma(W^{(2)}a^{(1)}+b^{(2)})$</li>
<li>Namely $\begin {bmatrix} a_1^{(2)}\\ a_2^{(2)}\\ \vdots\\ a_k^{(2)}\\ \end {bmatrix}= \sigma( \begin {bmatrix} w^{(2)}_{1,1} &amp; w^{(2)}_{1,2} &amp; \cdots &amp; w^{(2)}_{1,n} \\ w^{(2)}_{2,1} &amp; w^{(2)}_{2,2} &amp; \cdots &amp; w^{(2)}_{2,n} \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ w^{(2)}_{k,1} &amp; w^{(2)}_{k,2} &amp; \cdots &amp; w^{(2)}_{k,n}  \end {bmatrix}\begin {bmatrix} a_1^{(1)}\\ a_2^{(1)}\\ \vdots\\ a_n^{(1)}\\ \end {bmatrix} + \begin {bmatrix} b_1^{(2)}\\ b_2^{(2)}\\ \vdots\\ b_k^{(2)}\\ \end {bmatrix})$</li>
<li>Suppose Layer $m-1$​ has $n$​​ neurons and layer $m$ has $k$ neurons.<ul>
<li>Layer $m$ has $k$​ biases because each neuron in layer $m$ has its own bias.</li>
<li>Each neuron in layer $m$​ has $n$ related weights in layer $m-1$​, namely neuron $i$ in layer $m$ has its weights $w_{i, 1}, w_{i, 2}, \cdots, w_{1, n}$</li>
</ul>
</li>
</ul>
<pre class="mermaid">graph LR
subgraph "Layer m-1"
A0("1")
A1("2")
A2("3")
A3("4")
end
subgraph "Layer m"
B2("m(i-1)")
B0("m(i)")
B1("m(i+1)")
end
A0 --> B0
A1 --> B0
A2 --> B0
A3 --> B0</pre>

<p>也就是说，layer $m-1$ 与 layer $m$​​ 之间的权矩阵大小应该是 <code>len(m) * len(m-1)</code>, namely 构造函数中的 <code>y * x</code>.</p>
<h3 id="Sigmoid-function-and-its-deriative"><a href="#Sigmoid-function-and-its-deriative" class="headerlink" title="Sigmoid function and its deriative"></a>Sigmoid function and its deriative</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">sigmoid_deriative</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> sigmoid<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>sigmoid<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<script type="math/tex; mode=display">
\begin{align*}
\sigma'(x) & =  (\frac 1 {1+e^{-x}})' \\
& = \frac {e^{-x}} {({1+e^{-x}})^2} \\
& = (\frac 1 {1+e^{-x}})*(\frac {e^{-x}} {1+e^{-x}}) \\ 
& = (\frac 1 {1+e^{-x}})*(1 -\frac {1} {1+e^{-x}}) \\
& = \sigma(x)*(1-\sigma(x))
\end{align*}</script><h3 id="Stochastic-gradient-descent"><a href="#Stochastic-gradient-descent" class="headerlink" title="Stochastic gradient descent"></a>Stochastic gradient descent</h3><h4 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h4><p>我们回忆，在理论学习中，我们学到的 SGD 内容。</p>
<p><strong>Batch_size? Epoch? Iteration?</strong></p>
<p>比如你有1000个数据，这个数据集可能太大了，全部跑一次再调参很慢，于是可以分成100个为一个数据集，这样有10份。<strong>batch_size=100</strong></p>
<p>这100个数据组成的数据集叫 <strong>batch</strong>，每跑完一个 <strong>batch</strong> 都要更新参数，这个过程叫一个<strong>iteration</strong>.</p>
<p><strong>epoch</strong> 指的就是跑完这 10 个 <strong>batch</strong> （ 10 个 <strong>iteration</strong> ）的这个过程.</p>
<h4 id="Implemention"><a href="#Implemention" class="headerlink" title="Implemention"></a>Implemention</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Stochastic gradient descent</span>
<span class="token keyword">def</span> <span class="token function">SGD</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> training_data<span class="token punctuation">,</span> epochs<span class="token punctuation">,</span> mini_batch_size<span class="token punctuation">,</span> eta<span class="token punctuation">,</span> test_data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> test_data<span class="token punctuation">:</span>
        n_test <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_data<span class="token punctuation">)</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>training_data<span class="token punctuation">)</span>

    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>training_data<span class="token punctuation">)</span>
        <span class="token comment"># Divide training data into lists</span>
        mini_batches <span class="token operator">=</span> <span class="token punctuation">[</span>training_data<span class="token punctuation">[</span>mini_batch_size<span class="token operator">*</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span> mini_batch_size<span class="token operator">*</span><span class="token punctuation">(</span>
            k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token operator">+</span>mini_batch_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>mini_batch_size<span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> mini_batch <span class="token keyword">in</span> mini_batches<span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>update_mini_batch<span class="token punctuation">(</span>mini_batch<span class="token punctuation">,</span> eta<span class="token punctuation">)</span>

    <span class="token keyword">if</span> test_data<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>
            <span class="token string-interpolation"><span class="token string">f'''Epoch </span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string"> finished, with an accuracy of </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>test_data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n_test<span class="token punctuation">&#125;</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>test_data<span class="token punctuation">)</span><span class="token operator">/</span>n_test<span class="token punctuation">&#125;</span></span><span class="token string">)'''</span></span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Epoch </span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string"> finished."</span></span><span class="token punctuation">)</span></code></pre>
<h4 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h4><ul>
<li>training_data: list of tuples, where each tuple is (DATA, LABEL)</li>
<li>epochs: determines the training data would be used how many times</li>
<li>mini_batch_size: determines the size of every small batch</li>
<li>eta: learning rate, in $ v \rightarrow (v’=v-\eta\nabla C)$</li>
<li>test_data: for verifying accuracy after each epoch</li>
</ul>
<h4 id="Update-mini-batches"><a href="#Update-mini-batches" class="headerlink" title="Update mini-batches"></a>Update mini-batches</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_mini_batch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mini_batch<span class="token punctuation">,</span> eta<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Init nabla matrices</span>
    nabla_b <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> self<span class="token punctuation">.</span>biases<span class="token punctuation">]</span>
    nabla_w <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>w<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token keyword">for</span> w <span class="token keyword">in</span> self<span class="token punctuation">.</span>weights<span class="token punctuation">]</span>

    <span class="token comment"># Accumulate to calc nablas</span>
    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> mini_batch<span class="token punctuation">:</span>
        delta_nabla_b<span class="token punctuation">,</span> delta_nabla_w <span class="token operator">=</span> self<span class="token punctuation">.</span>backprop<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
        nabla_b <span class="token operator">=</span> <span class="token punctuation">[</span>nb<span class="token operator">+</span>dnb <span class="token keyword">for</span> nb<span class="token punctuation">,</span> dnb <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>nabla_b<span class="token punctuation">,</span> delta_nabla_b<span class="token punctuation">)</span><span class="token punctuation">]</span>
        nabla_w <span class="token operator">=</span> <span class="token punctuation">[</span>nw<span class="token operator">+</span>dnw <span class="token keyword">for</span> nw<span class="token punctuation">,</span> dnw <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>nabla_w<span class="token punctuation">,</span> delta_nabla_w<span class="token punctuation">)</span><span class="token punctuation">]</span>
    
    <span class="token comment"># Update weights and biases</span>
    self<span class="token punctuation">.</span>biases <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token operator">-</span>nb<span class="token operator">/</span><span class="token builtin">len</span><span class="token punctuation">(</span>mini_batch<span class="token punctuation">)</span><span class="token operator">*</span>eta <span class="token keyword">for</span> b<span class="token punctuation">,</span>
                   nb <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>biases<span class="token punctuation">,</span> nabla_b<span class="token punctuation">)</span><span class="token punctuation">]</span>
    self<span class="token punctuation">.</span>weights <span class="token operator">=</span> <span class="token punctuation">[</span>w<span class="token operator">-</span>nw<span class="token operator">/</span><span class="token builtin">len</span><span class="token punctuation">(</span>mini_batch<span class="token punctuation">)</span><span class="token operator">*</span>eta <span class="token keyword">for</span> w<span class="token punctuation">,</span>
                    nw <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>weights<span class="token punctuation">,</span> nabla_w<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>
<h3 id="Back-propagation"><a href="#Back-propagation" class="headerlink" title="Back propagation"></a>Back propagation</h3><pre class="mermaid">graph LR
subgraph "Layer m-1"
A0("1")
A1("2")
A2("3")
A3("4")
end
subgraph "Layer m"
B2("output(i-1)")
B0("output(i)")
B1("output(i+1)")
end
subgraph "Anticipated<br/>Label"
C2("y(i-1)")
C0("y(i)")
C1("y(i+1)")
end
A0 --> B0
A1 --> B0
A2 --> B0
A3 --> B0
B0 --> C0
B1 --> C1
B2 --> C2</pre>

<p>考虑计算过程…</p>
<pre class="mermaid">graph RL
CX("$C$")
aE("$a^L$")
zE("$z^L$")
wE("$w^L$")
aEL("$a^{L-1}$")
bE("$b^L$")
zEL("$z^{L-1}$")
wEL("$w^{L-1}$")
aELL("$a^{L-2}$")
bEL("$b^{L-1}$")

aE -->|"$(y_x-a^L_x)^2$"| CX
zE -->|"$\sigma$"| aE
wE --> zE
aEL --> zE
bE --> zE
zEL -->|"$\sigma$"| aEL
wEL --> zEL
aELL --> zEL
bEL --> zEL
dot("$\cdots$") --> aELL</pre>

<ul>
<li>Then the core equations of back propagation…<ul>
<li>$\frac {\partial C} {\partial z_i^L} = \frac {\partial C} {\partial a_i^L}\frac {\partial a_i^L} {\partial z_i^L} = (a_i^L-y)\sigma’(z_i^L)$​​ (Initialize)​</li>
<li>According to $z^{(L)}_i = \sum_jw^{(L)}_{i, j}a_j^{(L-1)}+ b_i^{(L)}$​​​​, suppose we have calculated $\frac {\partial C} {\partial z^M_i}$​​​ for all neuron $i$​​​ in layer $M$​​​.<ul>
<li>How can we get $\frac {\partial C} {\partial w^M_{i, j}}$​​​ for all neuron $i$​​​ in layer $M$​​ and $j$​​ in layer $M-1$​​​​?<ul>
<li>$\frac {\partial C} {\partial w^M_{i, j}} = \frac {\partial C} {\partial z^M_i} \frac {\partial z^M_i}{\partial w^M_{i, j}} = \frac {\partial C} {\partial z^M_i} a_j^{M-1}$​​</li>
</ul>
</li>
<li>How can we get $\frac {\partial C} {\partial b^M_i} $​​ for all neuron $i$​​ in layer $M$​?<ul>
<li>$\frac {\partial C} {\partial b^M_{i}} = \frac {\partial C} {\partial z^M_i} \frac {\partial z^M_i}{\partial b^M_{i}} = \frac {\partial C} {\partial z^M_i}$​​​</li>
</ul>
</li>
<li>How can we get $\frac {\partial C} {\partial a^{M-1}_j} $ and $\frac {\partial C} {\partial z^{M-1}_j} $ for all neuron $j$ in layer $M-1$?<ul>
<li>$\frac {\partial C} {\partial a^{M-1}_j}  = \sum_i \frac {\partial C}{\partial z^M_i} \frac {\partial z^M_i} {a_j^{M-1}} = \sum_i \frac {\partial C}{\partial z^M_i} w_{i,j}^M$</li>
<li>Then $\frac {\partial C} {\partial z^{M-1}_j} = \frac {\partial C} {\partial a^{M-1}_j} \sigma’(z^{M-1}_j)$</li>
</ul>
</li>
</ul>
</li>
<li>Then by recursion, we could calculate all the partial derivatives of weights and biases.</li>
</ul>
</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">backprop</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">'''Return (nabla_b, nabla_w) representing the
    gradient for the cost function C.
    Each of the return value are layer-by-layer lists of numpy arrays.'''</span>
    
    nabla_b <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> self<span class="token punctuation">.</span>biases<span class="token punctuation">]</span>
    nabla_w <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>w<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token keyword">for</span> w <span class="token keyword">in</span> self<span class="token punctuation">.</span>weights<span class="token punctuation">]</span>
    
    <span class="token comment"># Feed forward</span>
    activation <span class="token operator">=</span> x
    activations <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span>
    zs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># Store all Z vectors. z = w*a + b</span>
    
    <span class="token keyword">for</span> b<span class="token punctuation">,</span> w <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>biases<span class="token punctuation">,</span> self<span class="token punctuation">.</span>weights<span class="token punctuation">)</span><span class="token punctuation">:</span>
        z <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w<span class="token punctuation">,</span> activation<span class="token punctuation">)</span> <span class="token operator">+</span> b
        zs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>z<span class="token punctuation">)</span>
        activation <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>z<span class="token punctuation">)</span>
        activations<span class="token punctuation">.</span>append<span class="token punctuation">(</span>activation<span class="token punctuation">)</span>
    
    <span class="token triple-quoted-string string">'''After feeding forward in a M-layer network, 
    Zs have M-1 elements while Activations have M elements'''</span>
    <span class="token comment"># Preparations for recursion</span>
    delta <span class="token operator">=</span> <span class="token punctuation">(</span>activations<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">*</span> sigmoid_deriative<span class="token punctuation">(</span>z<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    nabla_b<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> delta
    nabla_w<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>delta<span class="token punctuation">,</span> activations<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_layers<span class="token punctuation">)</span><span class="token punctuation">:</span>
        delta <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>weights<span class="token punctuation">[</span><span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> delta<span class="token punctuation">)</span> <span class="token operator">*</span> sigmoid_deriative<span class="token punctuation">(</span>zs<span class="token punctuation">[</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        nabla_b<span class="token punctuation">[</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> delta
        nabla_w<span class="token punctuation">[</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>delta<span class="token punctuation">,</span> activations<span class="token punctuation">[</span><span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">(</span>nabla_b<span class="token punctuation">,</span> nabla_w<span class="token punctuation">)</span></code></pre>
<h3 id="Evaluate"><a href="#Evaluate" class="headerlink" title="Evaluate"></a>Evaluate</h3><p><strong>Use <code>np.argmax()</code> to find the predicted label</strong></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token number">7</span></code></pre>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> test_data<span class="token punctuation">,</span> see<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># for x, y in test_data:</span>
    <span class="token comment">#     print(self.feedforward(x))</span>
    test_results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>self<span class="token punctuation">.</span>feedforward<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> test_data<span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> test_results<span class="token punctuation">)</span></code></pre>
<h2 id="Test-our-network"><a href="#Test-our-network" class="headerlink" title="Test our network"></a>Test our network</h2><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><p><a href="http://neuralnetworksanddeeplearning.com/chap1.html#implementing_our_network_to_classify_digits">http://neuralnetworksanddeeplearning.com/chap1.html#implementing_our_network_to_classify_digits</a></p>
</li>
<li><p><a href="https://www.zhihu.com/question/43673341/answer/341556216">https://www.zhihu.com/question/43673341/answer/341556216</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/机器学习实现</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数课程的一些补充内容</title>
    <url>/linear-algebra-complement/</url>
    <content><![CDATA[<p>本文为 c7w 在学习《线性代数》课程中时遇到的一些补充内容。具体来说，本文介绍了合同矩阵与相似矩阵的定义。</p>
<a id="more"></a>
<h2 id="合同矩阵"><a href="#合同矩阵" class="headerlink" title="合同矩阵"></a>合同矩阵</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>称两矩阵$A,B$合同，当且仅当存在可逆矩阵$C$，使得</p>
<script type="math/tex; mode=display">
A=C^TBC</script><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ol>
<li>合同关系是等价关系.</li>
</ol>
<ul>
<li>自反性: $A$与$A$本身合同</li>
<li>对称性: $A$合同于$B$, 则$B$合同于$A$</li>
<li>传递性: $A$合同于$B$, $B$合同于$C$, 则$A$合同于$C$.</li>
</ul>
<ol>
<li>合同矩阵的<strong>秩</strong>相同。</li>
</ol>
<h2 id="相似矩阵"><a href="#相似矩阵" class="headerlink" title="相似矩阵"></a>相似矩阵</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>称两矩阵$A,B$相似，当且仅当存在可逆矩阵$C$，使得</p>
<script type="math/tex; mode=display">
A=C^{-1}BC</script><h3 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h3><ol>
<li>相似关系是等价关系.</li>
</ol>
<ul>
<li>自反性: $A$与$A$本身相似</li>
<li>对称性: $A$相似于$B$, 则$B$相似于$A$</li>
<li>传递性: $A$相似于$B$, $B$相似于$C$, 则$A$相似于$C$.</li>
</ul>
<ol>
<li>相似矩阵具有一系列相同的特点.</li>
</ol>
<ul>
<li>两者的秩相等；</li>
<li>两者的行列式值相等；</li>
<li>两者的迹相等；</li>
<li>两者拥有同样的特征值，但相应的特征向量一般不同；</li>
<li>两者拥有同样的特征多项式；<br>（我们可以利用这些必要条件来判断两个矩阵是否相似）</li>
</ul>
<ol>
<li>相似矩阵具有相同的可逆性，当它们可逆时，则它们的逆矩阵也相似。</li>
</ol>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/线性代数</category>
      </categories>
      <tags>
        <tag>线性代数</tag>
        <tag>合同矩阵</tag>
        <tag>相似矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程与并发</title>
    <url>/multi-thread-and-concurrent/</url>
    <content><![CDATA[<p>多线程思想。内含临界区，信号量，死锁以及读者写者问题。</p>
<p><img src="https://i.loli.net/2021/07/15/MlNJHgWGeiE1ADk.png" alt="1024px-An_illustration_of_the_dining_philosophers_problem"></p>
<a id="more"></a>
<h2 id="多线程与并发"><a href="#多线程与并发" class="headerlink" title="多线程与并发"></a>多线程与并发</h2><h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><p>多个进程在访问<strong>共享数据</strong>的时候，为防止对资源的竞争，我们提出<strong>临界区</strong>的概念。</p>
<p><strong>临界区</strong>这一概念满足，对于任意的两个进程，不能同时进入临界区，即达到一种进程间“互斥”的效果。</p>
<p>具体来说，临界区的设计需要满足：（摘自讲义）</p>
<ul>
<li><p>任何两个进程不能同时处于临界区 </p>
</li>
<li><p>对 CPU 的速度和数量没有要求 </p>
</li>
<li><p>临界区外运行的进程不能阻塞到其他进程 </p>
</li>
<li><p>不能让一个进程无限期等待进入临界区 </p>
</li>
</ul>
<h4 id="需要被舍弃的做法"><a href="#需要被舍弃的做法" class="headerlink" title="需要被舍弃的做法"></a>需要被舍弃的做法</h4><p><strong>锁变量</strong></p>
<pre class="language-c#" data-language="c#"><code class="language-c#">int lock;

void Process1()
&#123;
	while (lock &#x3D;&#x3D; 1);  &#x2F;&#x2F; (2)
    lock &#x3D; 1;   &#x2F;&#x2F; (5)
    &#x2F;&#x2F; 临界区   &#x2F;&#x2F; (5)
    lock &#x3D; 0; 
    &#x2F;&#x2F; 非临界区
&#125;

void Process2()
&#123;
	while (lock &#x3D;&#x3D; 1); &#x2F;&#x2F; (3)
    lock &#x3D; 1;   &#x2F;&#x2F; (4)
    &#x2F;&#x2F; 临界区   &#x2F;&#x2F; (5)
    lock &#x3D; 0;  &#x2F;&#x2F; (1)
    &#x2F;&#x2F; 非临界区
&#125;</code></pre>
<p>错误原因：</p>
<p><code>Process1</code>在 <code>lock == 1</code> 判断为False后的瞬间，进行了进程调度；</p>
<p>而此时<code>Process2</code>从(1)处继续运行，跨过非临界区，判断 <code>lock==1</code> 为 False 后，进入了临界区；</p>
<p>而此时再发生一次进程调度，<code>Process1</code>也进入了临界区。</p>
<p><strong>严格轮换法</strong></p>
<pre class="language-c#" data-language="c#"><code class="language-c#">int turn &#x3D; 0;

void Process1()
&#123;
	while (turn &#x3D;&#x3D; 0);  
    &#x2F;&#x2F; 临界区   
    turn &#x3D; 0;
    &#x2F;&#x2F; 非临界区
&#125;

void Process2()
&#123;
	while (turn &#x3D;&#x3D; 1);  
    &#x2F;&#x2F; 临界区   
    turn &#x3D; 1;
    &#x2F;&#x2F; 非临界区
&#125;</code></pre>
<p>舍弃原因：</p>
<p>(1) 自旋锁（用于忙等待的锁），过于浪费资源</p>
<p>(2) 优先级翻转问题：当某个进程的优先级高…</p>
<p><strong>休眠与唤醒</strong></p>
<pre class="language-c#" data-language="c#"><code class="language-c#">int cnt &#x3D; 0;

void Process1()
&#123;
	while (1)
	&#123;
		if (cnt &#x3D;&#x3D; 1) sleep();
		&#x2F;&#x2F; 临界区
		cnt &#x3D; 1;
		wakeup(Process2);
		&#x2F;&#x2F; 非临界区
	&#125;
&#125;

void Process2()
&#123;
	while (1)
	&#123;
		if(cnt &#x3D;&#x3D; 0) sleep();
		cnt &#x3D; 0;
		wakeup(1);
	&#125;
&#125;</code></pre>
<p>存在的问题：</p>
<p><code>Process1</code>判断<code>cnt==1</code>时进入条件结构体，此时发生了一次进程调度；</p>
<p><code>Process2</code>此时将<code>cnt</code>置为0，并且尝试唤醒<code>Process1</code>，而<code>Process1</code>此时还没有休眠.</p>
<p>然后<code>Process2</code>判断<code>cnt==0</code>为True，进入休眠.</p>
<p>此时再发生一次进程调度，<code>Process1</code>也进入休眠,</p>
<h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>上述做法均存在一定的问题，而能够解决这个临界区问题的一个很好的概念便是Dijkstra提出的<code>信号量</code>.</p>
<p>信号量(Semaphore)，有时被称为信号灯，是在多线程环境下使用的一种设施，是可以用来保证两个或多个关键代码段不被并发调用。<strong>在进入一个关键代码段之前，线程必须获取一个信号量；一旦该关键代码段完成了，那么该线程必须释放信号量。</strong></p>
<p>计数讯号量具备两种操作动作，称为V（<code>signal()</code>）与P（<code>wait()</code>）（即部分参考书常称的“PV操作”）。V操作会增加信号标S的数值，P操作会减少它。</p>
<p>计数讯号量具备两种操作动作，称为V（signal()）与P（wait()）（即部分参考书常称的“PV操作”）。V操作会增加信号标S的数值，P操作会减少它。</p>
<p>运作方式：</p>
<ol>
<li>初始化，给与它一个非负数的整数值。</li>
<li>执行P（wait()），信号标S的值将被减少。企图进入临界区段的行程，需要先执行P（wait()）。当信号标S减为负值时，行程会被挡住，不能继续；当信号标S不为负值时，行程可以获准进入临界区段。</li>
<li>执行V（signal()），信号标S的值会被增加。结束离开临界区段的行程，将会执行V（signal()）。当信号标S不为负值时，先前被挡住的其他行程，将可获准进入临界区段。</li>
</ol>
<pre class="language-c#" data-language="c#"><code class="language-c#">int sem &#x3D; 1; 

void Process1()
&#123;
	while (1)
	&#123;
		P(sem);
		&#x2F;&#x2F; 临界区
		V(sem);
	&#125;
&#125;

void Process2()
&#123;
	while (1)
	&#123;
		P(sem);
		&#x2F;&#x2F; 临界区
		V(sem);
	&#125;
&#125;</code></pre>
<h4 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h4><p>我们的sem变量满足以下要求：<br>信号量的初始值是 1，且 P、V 操作在一个线程中成对出现，先有 P，后有 V，两个操作之间是互斥的临界区。</p>
<p>这意味着同时只能有一个进程进入两个 P、V 操作之间。</p>
<p>因此我们对这种特殊的情况进行单独处理，对信号量进行简化，得到“互斥量（mutex）”。 </p>
<p>一个互斥量包含两个操作：<strong>加锁</strong>（lock，对应于 P 操作）和<strong>解锁</strong>（unlock，对应于 V 操作）。</p>
<h4 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h4><p>条件变量（condition variable）是与互斥量配合使用的。在互斥量<strong>已经加锁</strong>的条件下，条件变量的基本操作有三个：</p>
<ul>
<li><p>将互斥量解锁并进入休眠状态（被唤醒时会重新加锁互斥量） </p>
</li>
<li><p>唤醒一个被休眠的进程 </p>
</li>
<li><p>唤醒所有休眠的进程</p>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3></li>
</ul>
<p>死锁产生的条件：</p>
<ul>
<li><p>互斥条件：资源要么分配给了某个进程，要么就是可用的 </p>
</li>
<li><p>占有和等待条件：已经得到了某个资源的进程可以再请求新的资源（即一层锁不会导致死锁） </p>
</li>
<li><p>不可抢占条件：已经分配给一个进程的资源不能强制抢占，只能由占有它的进程自己释放 </p>
</li>
<li><p>环路等待条件：死锁发生时，进程一定可以形成一个环路，环路中每一个进程都等待着下一个进程占有的资源 </p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/07/16/uVrpkj4i7xFKOX2.png" alt="image-20210716122611212"></p>
<h4 id="经典例子：DiningPhilosophers"><a href="#经典例子：DiningPhilosophers" class="headerlink" title="经典例子：DiningPhilosophers"></a>经典例子：DiningPhilosophers</h4><p><a href="https://leetcode-cn.com/problems/the-dining-philosophers/">https://leetcode-cn.com/problems/the-dining-philosophers/</a></p>
<p>5 个沉默寡言的哲学家围坐在圆桌前，每人面前一盘意面。叉子放在哲学家之间的桌面上。（5 个哲学家，5 根叉子）</p>
<p>所有的哲学家都只会在思考和进餐两种行为间交替。哲学家只有同时拿到左边和右边的叉子才能吃到面，而同一根叉子在同一时间只能被一个哲学家使用。每个哲学家吃完面后都需要把叉子放回桌面以供其他哲学家吃面。只要条件允许，哲学家可以拿起左边或者右边的叉子，但在没有同时拿到左右叉子时不能进食。</p>
<p>假设面的数量没有限制，哲学家也能随便吃，不需要考虑吃不吃得下。</p>
<p>设计一个进餐规则（并行算法）使得每个哲学家都不会挨饿；也就是说，在没有人知道别人什么时候想吃东西或思考的情况下，每个哲学家都可以在吃饭和思考之间一直交替下去。</p>
<p>哲学家从 0 到 4 按 顺时针 编号。请实现函数 <code>void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork);</code></p>
<p>philosopher 哲学家的编号。<br>pickLeftFork 和 pickRightFork 表示拿起左边或右边的叉子。<br>eat 表示吃面。<br>putLeftFork 和 putRightFork 表示放下左边或右边的叉子。<br>由于哲学家不是在吃面就是在想着啥时候吃面，所以思考这个方法没有对应的回调。<br>给你 5 个线程，每个都代表一个哲学家，请你使用类的同一个对象来模拟这个过程。在最后一次调用结束之前，可能会为同一个哲学家多次调用该函数。</p>
<p>解题思路：</p>
<ul>
<li>使用C++ std::lock实现多锁原子锁定</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">DiningPhilosophers</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>mutex mutexs<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">DiningPhilosophers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">wantsToEat</span><span class="token punctuation">(</span><span class="token keyword">int</span> philosopher<span class="token punctuation">,</span>
                    function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> pickLeftFork<span class="token punctuation">,</span>
                    function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> pickRightFork<span class="token punctuation">,</span>
                    function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> eat<span class="token punctuation">,</span>
                    function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> putLeftFork<span class="token punctuation">,</span>
                    function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> putRightFork<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> lhs <span class="token operator">=</span> philosopher<span class="token punctuation">;</span>
        <span class="token keyword">int</span> rhs <span class="token operator">=</span> <span class="token punctuation">(</span>philosopher<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">;</span>

        std<span class="token double-colon punctuation">::</span><span class="token function">lock</span><span class="token punctuation">(</span>mutexs<span class="token punctuation">[</span>lhs<span class="token punctuation">]</span><span class="token punctuation">,</span> mutexs<span class="token punctuation">[</span>rhs<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lock_a</span><span class="token punctuation">(</span>mutexs<span class="token punctuation">[</span>lhs<span class="token punctuation">]</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>adopt_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lock_b</span><span class="token punctuation">(</span>mutexs<span class="token punctuation">[</span>rhs<span class="token punctuation">]</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>adopt_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token function">pickLeftFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pickRightFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">putLeftFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">putRightFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在临界区内，其实左边右边顺序无关紧要</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>随意指定一个人和其他人拿筷子的顺序不一样，这样也可以破坏闭环结构。<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">DiningPhilosophers</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>mutex forks<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">DiningPhilosophers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">wantsToEat</span><span class="token punctuation">(</span><span class="token keyword">int</span> philosopher<span class="token punctuation">,</span>
                    function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> pickLeftFork<span class="token punctuation">,</span>
                    function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> pickRightFork<span class="token punctuation">,</span>
                    function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> eat<span class="token punctuation">,</span>
                    function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> putLeftFork<span class="token punctuation">,</span>
                    function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> putRightFork<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>philosopher <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            forks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            forks<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">pickLeftFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">pickRightFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">putRightFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">putLeftFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            forks<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            forks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        forks<span class="token punctuation">[</span>philosopher<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        forks<span class="token punctuation">[</span>philosopher<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pickLeftFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pickRightFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">putRightFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">putLeftFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        forks<span class="token punctuation">[</span>philosopher<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        forks<span class="token punctuation">[</span>philosopher<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
</li>
</ul>
<h3 id="读者写者问题"><a href="#读者写者问题" class="headerlink" title="读者写者问题"></a>读者写者问题</h3><p>一个资源，我们可以需要对它进行读写。</p>
<p>读操作是不对资源进行更改的，而写操作对资源进行更改。</p>
<p>这对我们提出了要求：可以多个进程同时读，但是读的过程中不允许写；只能有一个进程对它写入，写的过程不允许任何其他进程同时写或读。</p>
<p>即我们要求：</p>
<ol>
<li>允许多个读者可同时对文件执行读操作</li>
<li>只允许一个写者往文件中写信息</li>
<li>任一写者在完成写操作之前不允许其他读者或写者工作</li>
<li>写者执行写操作前，应让已有的写者和读者全部退出</li>
</ol>
<h4 id="读者优先的操作模式"><a href="#读者优先的操作模式" class="headerlink" title="读者优先的操作模式"></a>读者优先的操作模式</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp">semaphore rmutex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 读进程互斥信号量</span>
semaphore wmutex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 写进程互斥信号量</span>
<span class="token keyword">int</span> readcount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 读进程计数</span>

process <span class="token function">reader_i</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 读进程</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">P</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        readcount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>readcount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        	<span class="token function">P</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">V</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#123;</span>读文件<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token function">P</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        readcount<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>readcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        	<span class="token function">V</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">V</span><span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

process <span class="token function">writer_i</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 写进程</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">P</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#123;</span>写文件<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token function">V</span><span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>要点：<strong>读者优先</strong>，读者可以抢占写者的资源。</p>
<p>参考链接：<a href="https://liuwynn.github.io/2018/11/28/%E8%AF%BB%E8%80%85-%E5%86%99%E8%80%85%E9%97%AE%E9%A2%98/">https://liuwynn.github.io/2018/11/28/%E8%AF%BB%E8%80%85-%E5%86%99%E8%80%85%E9%97%AE%E9%A2%98/</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>三系联合暑培 内部讲义</li>
<li><a href="https://baike.baidu.com/item/%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6">https://baike.baidu.com/item/%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6</a></li>
<li><a href="https://zh.wikipedia.org/zh-hans/%E4%BF%A1%E5%8F%B7%E9%87%8F">https://zh.wikipedia.org/zh-hans/%E4%BF%A1%E5%8F%B7%E9%87%8F</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/高性能</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Python BeautifulSoup4 库的基本操作</title>
    <url>/python-bs4/</url>
    <content><![CDATA[<p><strong>Beautiful Soup 4 是什么？</strong></p>
<p>是一个 Python 库，协助解析 HTML 和 XML 的内容的 Python 库。</p>
<p>可以协助开发者在文档中准确定位到想要寻找的元素。</p>
<a id="more"></a>
<h2 id="Basic-usage"><a href="#Basic-usage" class="headerlink" title="Basic usage"></a>Basic usage</h2><h3 id="Installing-and-importing"><a href="#Installing-and-importing" class="headerlink" title="Installing and importing"></a>Installing and importing</h3><p><strong>Installing</strong></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> beautifulsoup4</code></pre>
<p>Very easy.</p>
<p><strong>Importing</strong></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup</code></pre>
<h3 id="Create-a-BeautifulSoup-Object"><a href="#Create-a-BeautifulSoup-Object" class="headerlink" title="Create a BeautifulSoup Object"></a>Create a <code>BeautifulSoup</code> Object</h3><pre class="language-python" data-language="python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>markup<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>soup<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># &lt;class 'bs4.BeautifulSoup'></span></code></pre>
<p>接下来我们会详细介绍这个 <code>BeautifulSoup</code> 对象。</p>
<h2 id="Objects-可能用到的对象类型"><a href="#Objects-可能用到的对象类型" class="headerlink" title="Objects 可能用到的对象类型"></a>Objects 可能用到的对象类型</h2><p>BeautifulSoup 会将一个复杂的 HTML 文档转化成一颗树，但我们真正需要处理的只有四种对象：</p>
<ul>
<li>Tag</li>
<li>NavigableString</li>
<li>BeautifulSoup</li>
<li>Comment</li>
</ul>
<p>下面我们将一一介绍。</p>
<h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h3><pre class="language-python" data-language="python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token string">'&lt;b class="boldest">Extremely bold&lt;/b>'</span><span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>
tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>b
<span class="token builtin">type</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>
<span class="token comment"># &lt;class 'bs4.element.Tag'></span></code></pre>
<blockquote>
<p>Tag 的基本属性：</p>
<p><code>&lt;b class=&quot;boldest&quot;&gt;Extremely bold&lt;/b&gt;</code> 中：</p>
<ul>
<li>Name: <code>b</code>  # <code>tag.name</code> == b</li>
<li>Attributes:<ul>
<li>class # <code>tag[&#39;class&#39;]</code> == “boldest”</li>
<li>// Use <code>tag.attrs</code> to get all attributes</li>
</ul>
</li>
</ul>
<p>特别说明：对于多值属性，查询时会返回列表.</p>
</blockquote>
<h3 id="NavigableString"><a href="#NavigableString" class="headerlink" title="NavigableString"></a>NavigableString</h3><p><code>NavigableString</code>类存储了 HTML 中可以被划分出来的 Tag 中的<code>文本内容</code>，如<code>&lt;div&gt;bulabula&lt;/div&gt;</code>.</p>
<pre class="language-python" data-language="python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token string">'&lt;b class="boldest">Extremely bold&lt;/b>'</span><span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>
tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>b
tag<span class="token punctuation">.</span>string
<span class="token comment"># 'Extremely bold'</span>
<span class="token builtin">type</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>string<span class="token punctuation">)</span>
<span class="token comment"># &lt;class 'bs4.element.NavigableString'></span></code></pre>
<p><code>NavigableString</code> 对象大可当做普通的 <code>str</code> 来使用，只是在其上又实现了在文档中定位和搜索的功能而已。</p>
<ul>
<li>要想把<code>NavigableString</code>转换成<code>str</code>，自然可以使用<code>str()</code>强制类型转换。</li>
<li>要想修改<code>NavigableString</code>内存储的文本内容的话，可以使用<code>replace_with()</code> 函数</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python">tag<span class="token punctuation">.</span>string<span class="token punctuation">.</span>replace_with<span class="token punctuation">(</span><span class="token string">"No longer bold"</span><span class="token punctuation">)</span>
tag
<span class="token comment"># &lt;b class="boldest">No longer bold&lt;/b></span></code></pre>
<h3 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h3><p><code>BeautifulSoup</code> 对象将整个文档解析成了一个整体。</p>
<p>大多数情况下，我们可以把 <code>BeautifulSoup</code> 对象看作是 <code>Tag</code> 对象。</p>
<p>它的 <code>.name</code> 字段返回 <code>[document]</code>，无其它附加属性<code>attrs</code>.</p>
<h3 id="Comments-and-other-special-strings"><a href="#Comments-and-other-special-strings" class="headerlink" title="Comments and other special strings"></a>Comments and other special strings</h3><p><code>Comment</code> 对象是一种特殊的 <code>NavigableString</code> 对象。</p>
<pre class="language-python" data-language="python"><code class="language-python">markup <span class="token operator">=</span> <span class="token string">"&lt;b>&lt;!--Hey, buddy. Want to buy a used parser?-->&lt;/b>"</span>
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>markup<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>
comment <span class="token operator">=</span> soup<span class="token punctuation">.</span>b<span class="token punctuation">.</span>string
<span class="token builtin">type</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span>
<span class="token comment"># &lt;class 'bs4.element.Comment'></span></code></pre>
<p>除了<code>Comment</code>之外，<code>BS4</code>还提供了<code>Stylesheet</code>, <code>Script</code>, <code>TemplateString</code> 等类。</p>
<h2 id="Navigating-the-tree-逐级导航"><a href="#Navigating-the-tree-逐级导航" class="headerlink" title="Navigating the tree 逐级导航"></a>Navigating the tree 逐级导航</h2><pre class="language-python" data-language="python"><code class="language-python">html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""
&lt;html>
&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>
&lt;body>
&lt;p class="title">&lt;b>The Dormouse's story&lt;/b>&lt;/p>

&lt;p class="story">Once upon a time there were three little sisters; and their names were
&lt;a href="http://example.com/elsie" class="sister" id="link1">Elsie&lt;/a>,
&lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a> and
&lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>;
and they lived at the bottom of a well.&lt;/p>

&lt;p class="story">...&lt;/p>
&lt;/body>
&lt;/html>
"""</span>

<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span></code></pre>
<p>示例 HTML 文件如上。</p>
<h3 id="Going-down-向下一级"><a href="#Going-down-向下一级" class="headerlink" title="Going down 向下一级"></a>Going down 向下一级</h3><p>一个 <code>Tag</code> 的子元素可能包括 <code>string</code> 和其他 <code>Tag</code>.</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> soup<span class="token punctuation">.</span>head
<span class="token comment"># &lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head></span>
<span class="token operator">>></span><span class="token operator">></span> soup<span class="token punctuation">.</span>title
<span class="token comment"># &lt;title>The Dormouse's story&lt;/title></span>
<span class="token operator">>></span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> soup<span class="token punctuation">.</span>body
<span class="token comment">#&lt;body></span>
<span class="token comment">#&lt;p class="title">&lt;b>The Dormouse's story&lt;/b>&lt;/p></span>
<span class="token comment">#&lt;p class="story">Once upon a time there were three little sisters; and their names were</span>
<span class="token comment">#&lt;a class="sister" href="http://example.com/elsie" id="link1">Elsie&lt;/a>,</span>
<span class="token comment">#&lt;a class="sister" href="http://example.com/lacie" id="link2">Lacie&lt;/a> and</span>
<span class="token comment">#&lt;a class="sister" href="http://example.com/tillie" id="link3">Tillie&lt;/a>;</span>
<span class="token comment">#and they lived at the bottom of a well.&lt;/p></span>
<span class="token comment">#&lt;p class="story">...&lt;/p></span>
<span class="token comment">#&lt;/body></span>
<span class="token operator">>></span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> soup<span class="token punctuation">.</span>body<span class="token punctuation">.</span>b
<span class="token comment">#&lt;b>The Dormouse's story&lt;/b></span>
<span class="token operator">>></span><span class="token operator">></span> soup<span class="token punctuation">.</span>a
<span class="token comment">#&lt;a class="sister" href="http://example.com/elsie" id="link1">Elsie&lt;/a></span>
<span class="token comment"># Only returns the first matched tag.</span>
<span class="token operator">>></span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>
<span class="token comment">#[&lt;a class="sister" href="http://example.com/elsie" id="link1">Elsie&lt;/a>, &lt;a class="sister" href="http://example.com/lacie" id="link2">Lacie&lt;/a>, &lt;a class="sister" href="http://example.com/tillie" id="link3">Tillie&lt;/a>]</span>
<span class="token comment"># Use find_all() if you need all matched tags.</span></code></pre>
<h4 id="contents-and-children"><a href="#contents-and-children" class="headerlink" title=".contents and .children"></a><code>.contents</code> and <code>.children</code></h4><ul>
<li><p><code>tag.contents</code> 返回一个tag下的所有子元素 List.</p>
</li>
<li><p><code>tag.children</code> 返回一个tag下的所有子元素的集合的迭代器.</p>
</li>
</ul>
<h4 id="descendants"><a href="#descendants" class="headerlink" title=".descendants"></a>.descendants</h4><p><code>.contents</code> 和 <code>.children</code> 只能用于获取某个 tag 下<strong>一级</strong>的子元素。而 <code>.descendants</code> 可以返回某个 tag 下属的所有子元素的迭代器。</p>
<h4 id="string"><a href="#string" class="headerlink" title=".string"></a>.string</h4><p>返回某个只有一个 <code>NavigableString</code> 作为子元素的元素的该子元素的文本内容。</p>
<h4 id="strings-and-stripped-strings"><a href="#strings-and-stripped-strings" class="headerlink" title=".strings and stripped_strings"></a>.strings and stripped_strings</h4><p>返回所有子元素中字符的迭代器。</p>
<h3 id="Going-up-向上一级"><a href="#Going-up-向上一级" class="headerlink" title="Going up 向上一级"></a>Going up 向上一级</h3><h4 id="parent"><a href="#parent" class="headerlink" title=".parent"></a>.parent</h4><p>返回上层元素.</p>
<h4 id="parents"><a href="#parents" class="headerlink" title=".parents"></a>.parents</h4><p>返回上层元素的迭代器.</p>
<h3 id="Going-sideways-找同级别"><a href="#Going-sideways-找同级别" class="headerlink" title="Going sideways 找同级别"></a>Going sideways 找同级别</h3><h4 id="next-sibling-and-previous-sibling"><a href="#next-sibling-and-previous-sibling" class="headerlink" title=".next_sibling and .previous_sibling"></a>.next_sibling and .previous_sibling</h4><h4 id="next-siblings-and-previous-siblings"><a href="#next-siblings-and-previous-siblings" class="headerlink" title=".next_siblings and .previous_siblings"></a>.next_siblings and .previous_siblings</h4><h2 id="Searching-the-tree-查询搜索"><a href="#Searching-the-tree-查询搜索" class="headerlink" title="Searching the tree 查询搜索"></a>Searching the tree 查询搜索</h2><p>本节主要介绍两个主要方法：</p>
<ul>
<li>find()</li>
<li>find_all()</li>
</ul>
<h3 id="Filters-过滤器类型"><a href="#Filters-过滤器类型" class="headerlink" title="Filters 过滤器类型"></a>Filters 过滤器类型</h3><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>过滤出所有 <code>tag.name == (Input)</code> 的 tag.</p>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>过滤出满足 <code>tag.name</code> matches <code>pattern</code> 的tag.</p>
<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>List 是上述两个项目的组合，过滤结果是并集。</p>
<h4 id="True"><a href="#True" class="headerlink" title="True"></a>True</h4><p>返回所有内容.</p>
<h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><p>回调函数，接受一个参数 tag，如果返回True则过滤出来.</p>
<h3 id="find-all-name-attrs-recursive-True-string-kwargs"><a href="#find-all-name-attrs-recursive-True-string-kwargs" class="headerlink" title="find_all(name, attrs, recursive=True, string, **kwargs)"></a>find_all(name, attrs, recursive=True, string, **kwargs)</h3><p>注意：keyword arguments 也可以帮助 attrs 查找.</p>
<pre class="language-python" data-language="python"><code class="language-python">soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>href<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"elsie"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'link1'</span><span class="token punctuation">)</span>
<span class="token comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1">Elsie&lt;/a>]</span></code></pre>
<h3 id="Searching-by-CSS-class"><a href="#Searching-by-CSS-class" class="headerlink" title="Searching by CSS class"></a>Searching by CSS class</h3><p>Usage:  <code>soup.find_ll(&quot;p&quot;, class_=&quot;body&quot;)</code></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">https://www.crummy.com/software/BeautifulSoup/bs4/doc/</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/Python应用</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python asyncio, thread 与 websocket 库初探</title>
    <url>/python-asyncio-websocket/</url>
    <content><![CDATA[<p>在写 Nanachat-core 的时候打算写事件循环，还要使用到 websocket，于是想参考下相关的设计模式。</p>
<a id="more"></a>
<h2 id="异步-I-O"><a href="#异步-I-O" class="headerlink" title="异步 I/O"></a>异步 I/O</h2><p>异步IO模型需要一个消息循环，在消息循环中，主线程不断地重复“读取消息-处理消息”这一过程，我们称其为<strong>消息模型</strong>：</p>
<pre class="language-python" data-language="python"><code class="language-python">loop <span class="token operator">=</span> get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    event <span class="token operator">=</span> loop<span class="token punctuation">.</span>get_event<span class="token punctuation">(</span><span class="token punctuation">)</span>
    process_event<span class="token punctuation">(</span>event<span class="token punctuation">)</span></code></pre>
<p>消息模型是如何解决同步IO必须等待IO操作这一问题的呢？</p>
<ul>
<li><p>当遇到IO操作时，代码只负责发出IO请求，不等待IO结果，然后直接结束本轮消息处理，进入下一轮消息处理过程。</p>
</li>
<li><p>当IO操作完成后，将收到一条“IO完成”的消息，处理该消息时就可以直接获取IO操作结果。</p>
</li>
</ul>
<h3 id="Coroutine-协程"><a href="#Coroutine-协程" class="headerlink" title="Coroutine 协程"></a>Coroutine 协程</h3><p>协程看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。</p>
<p>注意，在一个子程序中中断，去执行其他子程序，不是函数调用，有点类似CPU的中断。比如子程序A、B：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span></code></pre>
<p>And we may get…</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token number">1</span>
<span class="token number">2</span>
x
y
<span class="token number">3</span>
z</code></pre>
<p>协程的执行效率比线程切换高，减少了线程切换的开销；同时，我们也不需要考虑锁机制的问题。</p>
<h4 id="Python-generator"><a href="#Python-generator" class="headerlink" title="Python generator"></a>Python generator</h4><p>Python对协程的支持是通过generator实现的。</p>
<p>在generator中，我们不但可以通过<code>for</code>循环来迭代，还可以不断调用<code>next()</code>函数获取由<code>yield</code>语句返回的下一个值。</p>
<p>但是Python的<code>yield</code>不但可以返回一个值，它还可以接收调用者发出的参数。</p>
<p>我们写一个简单的程序来输出 yield 关键字的执行顺序.</p>
<blockquote>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[CONSUMER] Entering function..."</span><span class="token punctuation">)</span>
    r <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[CONSUMER] Entering while loop..."</span><span class="token punctuation">)</span>
        n <span class="token operator">=</span> <span class="token keyword">yield</span> r
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[CONSUMER] Fetched n..."</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> n<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[CONSUMER] Before returning..."</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[CONSUMER] Consuming </span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
        r <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'Consumed </span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string">!'</span></span>
        
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[MAIN] Entering main..."</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> consumer<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Get the generator</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[MAIN] Generating generator object..."</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[MAIN] Starting first send..."</span><span class="token punctuation">)</span>
r <span class="token operator">=</span> c<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[MAIN] Ending first send..."</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[MAIN] First send end with result '</span><span class="token interpolation"><span class="token punctuation">&#123;</span>r<span class="token punctuation">&#125;</span></span><span class="token string">'..."</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[MAIN] Starting second send..."</span><span class="token punctuation">)</span>
r <span class="token operator">=</span> c<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[MAIN] Ending second send..."</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[MAIN] Second send end with result '</span><span class="token interpolation"><span class="token punctuation">&#123;</span>r<span class="token punctuation">&#125;</span></span><span class="token string">'..."</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[MAIN] Starting last send..."</span><span class="token punctuation">)</span>
r <span class="token operator">=</span> c<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[MAIN] Ending last send..."</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[MAIN] Last send end with result '</span><span class="token interpolation"><span class="token punctuation">&#123;</span>r<span class="token punctuation">&#125;</span></span><span class="token string">'..."</span></span><span class="token punctuation">)</span></code></pre>
</blockquote>
<p>输出结果为：</p>
<blockquote>
<pre class="language-none"><code class="language-none">[MAIN] Entering main...
[MAIN] Generating generator object...       
[MAIN] Starting first send...
[CONSUMER] Entering function...
[CONSUMER] Entering while loop...
[MAIN] Ending first send...
[MAIN] First send end with result &#39;&#39;...     
[MAIN] Starting second send...
[CONSUMER] Fetched n...
[CONSUMER] Consuming 2
[CONSUMER] Entering while loop...
[MAIN] Ending second send...
[MAIN] Second send end with result &#39;Consumed 2!&#39;...
[MAIN] Starting last send...
[CONSUMER] Fetched n...
[CONSUMER] Before returning...
Traceback (most recent call last):
  File &quot;coroutine.py&quot;, line 26, in &lt;module&gt; 
    r &#x3D; c.send(None)
StopIteration</code></pre>
</blockquote>
<p>可以看到，在第一次执行 <code>generator.send()</code> 的时候，generator 会从头开始执行.</p>
<p>之后每次便从 yield 处开始执行，先完成赋值操作，再继续执行到下一次 yield 或者 return.</p>
<p><code>yield r</code> 会把 r 作为 <code>send()</code> 函数的返回值返回给 MAIN 函数.</p>
<h3 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h3><p>An <strong>event loop</strong> runs in a thread (typically the main thread) and executes all callbacks and Tasks in its thread. </p>
<p>While a <strong>Task</strong> is running in the <strong>event loop</strong>, no other Tasks can run in the same thread. </p>
<p>When a <strong>Task</strong> executes an <code>await</code> expression, the running <strong>Task</strong> gets suspended, and the event loop executes the next Task.</p>
<p><code>asyncio</code>的编程模型就是一个消息循环。</p>
<p>我们从<code>asyncio</code>模块中直接获取一个<code>EventLoop</code>的引用，然后把需要执行的协程扔到<code>EventLoop</code>中执行，就实现了异步IO。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime
<span class="token keyword">import</span> asyncio


<span class="token decorator annotation punctuation">@asyncio<span class="token punctuation">.</span>coroutine</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Hello world! </span><span class="token interpolation"><span class="token punctuation">&#123;</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
    <span class="token comment"># 异步调用asyncio.sleep(1):</span>
    r <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token keyword">from</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Hello again! </span><span class="token interpolation"><span class="token punctuation">&#123;</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>


<span class="token comment"># 获取EventLoop:</span>
loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 执行coroutine</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<pre class="language-none"><code class="language-none">coroutine.py:6: DeprecationWarning: &quot;@coroutine&quot; decorator is deprecated since Python 3.8, use &quot;async def&quot; instead
  def hello():
&lt;generator object hello at 0x7f05bea44cf0&gt;
Hello world! 2021-09-06 11:20:07.045310   
Hello again! 2021-09-06 11:20:08.047006</code></pre>
<p><code>yield from</code>语法可以让我们方便地调用另一个<code>generator</code>.</p>
<h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><p>为了简化并更好地标识异步IO，从Python 3.5开始引入了新的语法<code>async</code>和<code>await</code>，可以让coroutine的代码更简洁易读。</p>
<p>请注意，<code>async</code>和<code>await</code>是针对coroutine的新语法，要使用新的语法，只需要做两步简单的替换：</p>
<ol>
<li>把<code>@asyncio.coroutine</code>替换为<code>async</code>；</li>
<li>把<code>yield from</code>替换为<code>await</code>。</li>
</ol>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime
<span class="token keyword">import</span> asyncio


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Hello world! </span><span class="token interpolation"><span class="token punctuation">&#123;</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
    <span class="token comment"># 异步调用asyncio.sleep(1):</span>
    r <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Hello again! </span><span class="token interpolation"><span class="token punctuation">&#123;</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>


<span class="token comment"># 获取EventLoop:</span>
loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 执行coroutine</span>
loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<pre class="language-none"><code class="language-none">Hello world! 2021-09-06 11:23:14.967038
Hello again! 2021-09-06 11:23:15.968643</code></pre>
<h2 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h2><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># WS server example</span>

<span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> websockets

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>websocket<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token keyword">await</span> websocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"&lt; </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

    greeting <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"Hello </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">!"</span></span>

    <span class="token keyword">await</span> websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>greeting<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>greeting<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

start_server <span class="token operator">=</span> websockets<span class="token punctuation">.</span>serve<span class="token punctuation">(</span>hello<span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">8765</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>start_server<span class="token punctuation">)</span>
asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><pre class="language-Client" data-language="Client"><code class="language-Client"># WS client example

import asyncio
import websockets

async def hello():
    uri &#x3D; &quot;ws:&#x2F;&#x2F;localhost:8765&quot;
    async with websockets.connect(uri) as websocket:
        name &#x3D; input(&quot;What&#39;s your name? &quot;)

        await websocket.send(name)
        print(f&quot;&gt; &#123;name&#125;&quot;)

        greeting &#x3D; await websocket.recv()
        print(f&quot;&lt; &#123;greeting&#125;&quot;)

asyncio.get_event_loop().run_until_complete(hello())</code></pre>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>我们要实现具有以下功能的 websocket 结构.</p>
<ul>
<li>Server<ul>
<li>每 3s 向 Client 发一条消息.</li>
<li>收到消息立刻 Prompt.</li>
</ul>
</li>
<li>Client<ul>
<li>每 1s 向 Server 发一条消息.</li>
<li>收到消息立刻 Prompt.</li>
</ul>
</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Server.py</span>
<span class="token comment">#!/usr/bin/env python</span>

<span class="token comment"># WS server example</span>
<span class="token keyword">import</span> datetime
<span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> websockets


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">recv</span><span class="token punctuation">(</span>websocket<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        name <span class="token operator">=</span> <span class="token keyword">await</span> websocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"&lt; </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>websocket<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token comment"># Send</span>
        msg <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"!Server Send! </span><span class="token interpolation"><span class="token punctuation">&#123;</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>
        <span class="token keyword">await</span> websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">socket</span><span class="token punctuation">(</span>websocket<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>recv<span class="token punctuation">(</span>websocket<span class="token punctuation">)</span><span class="token punctuation">,</span> send<span class="token punctuation">(</span>websocket<span class="token punctuation">)</span><span class="token punctuation">)</span>
        

start_server <span class="token operator">=</span> websockets<span class="token punctuation">.</span>serve<span class="token punctuation">(</span>socket<span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">8765</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>start_server<span class="token punctuation">)</span>
asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Client.py</span>
<span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> datetime
<span class="token keyword">import</span> websockets

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">recv</span><span class="token punctuation">(</span>websocket<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        name <span class="token operator">=</span> <span class="token keyword">await</span> websocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"&lt; </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>websocket<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token comment"># Send</span>
        msg <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"!Client Send! </span><span class="token interpolation"><span class="token punctuation">&#123;</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>
        <span class="token keyword">await</span> websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    uri <span class="token operator">=</span> <span class="token string">"ws://localhost:8765"</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> websockets<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>uri<span class="token punctuation">)</span> <span class="token keyword">as</span> websocket<span class="token punctuation">:</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>recv<span class="token punctuation">(</span>websocket<span class="token punctuation">)</span><span class="token punctuation">,</span> send<span class="token punctuation">(</span>websocket<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">sayhello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"INTER BREAK"</span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sayhello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.python.org/3/library/asyncio-dev.html">https://docs.python.org/3/library/asyncio-dev.html</a></li>
<li><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017970488768640">https://www.liaoxuefeng.com/wiki/1016959663602400/1017970488768640</a></p>
</li>
<li><p><a href="https://realpython.com/async-io-python/">https://realpython.com/async-io-python/</a></p>
</li>
<li><a href="https://websockets.readthedocs.io/en/stable/intro.html">https://websockets.readthedocs.io/en/stable/intro.html</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/Python应用</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>Websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 函数装饰器</title>
    <url>/python-func-decorators/</url>
    <content><![CDATA[<p>Python 函数的装饰器是<strong>修改其他函数功能的函数</strong>。</p>
<a id="more"></a>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>首先，我们需要将 Python 中的<code>函数</code>作为函数对象来理解。</p>
<p><strong>函数名只是引用标识名</strong></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"yasoob"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">"hi "</span> <span class="token operator">+</span> name
 
<span class="token keyword">print</span><span class="token punctuation">(</span>hi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># output: 'hi yasoob'</span>
 
<span class="token comment"># 我们甚至可以将一个函数赋值给一个变量，比如</span>
greet <span class="token operator">=</span> hi
<span class="token comment"># 我们这里没有在使用小括号，因为我们并不是在调用hi函数</span>
<span class="token comment"># 而是在将它放在greet变量里头。我们尝试运行下这个</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># output: 'hi yasoob'</span>
 
<span class="token comment"># 如果我们删掉旧的hi函数，看看会发生什么！</span>
<span class="token keyword">del</span> hi
<span class="token keyword">print</span><span class="token punctuation">(</span>hi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#outputs: NameError</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#outputs: 'hi yasoob'</span></code></pre>
<p><strong>函数的返回值可以是函数对象</strong></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"yasoob"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">"now you are in the greet() function"</span>
    
	<span class="token keyword">def</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">"now you are in the welcome() function"</span>
    
    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"yasoob"</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> greet
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> welcome
    
a <span class="token operator">=</span> hi<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment">#outputs: &lt;function greet at 0x7f2143c01500></span>
 
<span class="token comment">#上面清晰地展示了`a`现在指向到hi()函数中的greet()函数</span>
<span class="token comment">#现在试试这个</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#outputs: now you are in the greet() function</span></code></pre>
<p><strong>函数的参数可以是函数对象</strong></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">"hi yasoob!"</span>
 
<span class="token keyword">def</span> <span class="token function">doSomethingBeforeHi</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am doing some boring work before executing hi()"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

doSomethingBeforeHi<span class="token punctuation">(</span>hi<span class="token punctuation">)</span>
<span class="token comment">#outputs:I am doing some boring work before executing hi()</span>
<span class="token comment">#        hi yasoob!</span></code></pre>
<h2 id="So-what-is-a-decorator"><a href="#So-what-is-a-decorator" class="headerlink" title="So what is a decorator?"></a>So what is a decorator?</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">a_new_decorator</span><span class="token punctuation">(</span>a_func<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">wrapTheFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am doing some boring work before executing a_func()"</span><span class="token punctuation">)</span>

        a_func<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am doing some boring work after executing a_func()"</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> wrapTheFunction
 
<span class="token keyword">def</span> <span class="token function">a_function_requiring_decoration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am the function which needs some decoration to remove my foul smell"</span><span class="token punctuation">)</span>

a_function_requiring_decoration<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#outputs: "I am the function which needs some decoration to remove my foul smell"</span>
 
a_function_requiring_decoration <span class="token operator">=</span> a_new_decorator<span class="token punctuation">(</span>a_function_requiring_decoration<span class="token punctuation">)</span>
<span class="token comment">#now a_function_requiring_decoration is wrapped by wrapTheFunction()</span>
 
a_function_requiring_decoration<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#outputs:I am doing some boring work before executing a_func()</span>
<span class="token comment">#        I am the function which needs some decoration to remove my foul smell</span>
<span class="token comment">#        I am doing some boring work after executing a_func()</span></code></pre>
<p>这段代码等价于…</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@a_new_decorator</span>
<span class="token keyword">def</span> <span class="token function">a_function_requiring_decoration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Hey you! Decorate me!"""</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am the function which needs some decoration to "</span>
          <span class="token string">"remove my foul smell"</span><span class="token punctuation">)</span>

a_function_requiring_decoration<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#outputs: I am doing some boring work before executing a_func()</span>
<span class="token comment">#         I am the function which needs some decoration to remove my foul smell</span>
<span class="token comment">#         I am doing some boring work after executing a_func()</span>
 
<span class="token comment">#the @a_new_decorator is just a short way of saying:</span>
a_function_requiring_decoration <span class="token operator">=</span> a_new_decorator<span class="token punctuation">(</span>a_function_requiring_decoration<span class="token punctuation">)</span></code></pre>
<p>但是，这样的代码存在的问题有，比如，<code>__name__</code>获取不到正确的函数名。</p>
<p>于是稍加修改，我们有了以下解释器函数的编写模板：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps
 
<span class="token keyword">def</span> <span class="token function">a_new_decorator</span><span class="token punctuation">(</span>a_func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>a_func<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">wrapTheFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am doing some boring work before executing a_func()"</span><span class="token punctuation">)</span>
        a_func<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am doing some boring work after executing a_func()"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> wrapTheFunction
 
<span class="token decorator annotation punctuation">@a_new_decorator</span>
<span class="token keyword">def</span> <span class="token function">a_function_requiring_decoration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Hey yo! Decorate me!"""</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am the function which needs some decoration to "</span>
          <span class="token string">"remove my foul smell"</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a_function_requiring_decoration<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>
<span class="token comment"># Output: a_function_requiring_decoration</span></code></pre>
<h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps
 
<span class="token keyword">def</span> <span class="token function">logit</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">with_logging</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>__name__ <span class="token operator">+</span> <span class="token string">" was called"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    <span class="token keyword">return</span> with_logging
 
<span class="token decorator annotation punctuation">@logit</span>
<span class="token keyword">def</span> <span class="token function">addition_func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Do some math."""</span>
   	<span class="token keyword">return</span> x <span class="token operator">+</span> x
 

result <span class="token operator">=</span> addition_func<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token comment"># Output: addition_func was called</span></code></pre>
<h2 id="Decorators-with-parameters"><a href="#Decorators-with-parameters" class="headerlink" title="Decorators with parameters"></a>Decorators with parameters</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps
 
<span class="token keyword">def</span> <span class="token function">logit</span><span class="token punctuation">(</span>logfile<span class="token operator">=</span><span class="token string">'out.log'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">logging_decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>
        <span class="token keyword">def</span> <span class="token function">wrapped_function</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            log_string <span class="token operator">=</span> func<span class="token punctuation">.</span>__name__ <span class="token operator">+</span> <span class="token string">" was called"</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>log_string<span class="token punctuation">)</span>
            <span class="token comment"># 打开logfile，并写入内容</span>
            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>logfile<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> opened_file<span class="token punctuation">:</span>
                <span class="token comment"># 现在将日志打到指定的logfile</span>
                opened_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>log_string <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        <span class="token keyword">return</span> wrapped_function
    <span class="token keyword">return</span> logging_decorator
 
<span class="token decorator annotation punctuation">@logit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">myfunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
 
myfunc1<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># Output: myfunc1 was called</span>
<span class="token comment"># 现在一个叫做 out.log 的文件出现了，里面的内容就是上面的字符串</span>
 
<span class="token decorator annotation punctuation">@logit</span><span class="token punctuation">(</span>logfile<span class="token operator">=</span><span class="token string">'func2.log'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">myfunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
 
myfunc2<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># Output: myfunc2 was called</span>
<span class="token comment"># 现在一个叫做 func2.log 的文件出现了，里面的内容就是上面的字符串</span></code></pre>
<h2 id="Class-of-Decorator"><a href="#Class-of-Decorator" class="headerlink" title="Class of Decorator"></a>Class of Decorator</h2><p>By means of class inheritance, we could implement effects of different kinds of decorations.</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps
 
<span class="token keyword">class</span> <span class="token class-name">logit</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> logfile<span class="token operator">=</span><span class="token string">'out.log'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>logfile <span class="token operator">=</span> logfile

    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>
            <span class="token keyword">def</span> <span class="token function">wrapped_function</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
                log_string <span class="token operator">=</span> func<span class="token punctuation">.</span>__name__ <span class="token operator">+</span> <span class="token string">" was called"</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>log_string<span class="token punctuation">)</span>
                <span class="token comment"># 打开logfile并写入</span>
                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>logfile<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> opened_file<span class="token punctuation">:</span>
                    <span class="token comment"># 现在将日志打到指定的文件</span>
                    opened_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>log_string <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
                <span class="token comment"># 现在，发送一个通知</span>
                self<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
            <span class="token keyword">return</span> wrapped_function

    <span class="token keyword">def</span> <span class="token function">notify</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># logit只打日志，不做别的</span>
            <span class="token keyword">pass</span>
    
<span class="token keyword">class</span> <span class="token class-name">email_logit</span><span class="token punctuation">(</span>logit<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">'''
    一个logit的实现版本，可以在函数调用时发送email给管理员
    '''</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token string">'admin@myproject.com'</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email
        <span class="token builtin">super</span><span class="token punctuation">(</span>email_logit<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">notify</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 发送一封email到self.email</span>
        <span class="token comment"># 这里就不做实现了</span>
        <span class="token keyword">pass</span>

<span class="token decorator annotation punctuation">@logit</span>
<span class="token keyword">def</span> <span class="token function">myfunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token decorator annotation punctuation">@email_logit</span>
<span class="token keyword">def</span> <span class="token function">myfunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span></code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.runoob.com/w3cnote/python-func-decorators.html">https://www.runoob.com/w3cnote/python-func-decorators.html</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/Python</category>
      </categories>
      <tags>
        <tag>函数装饰器</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Numpy + Matplotlib 再探</title>
    <url>/python-numpy-matplotlib/</url>
    <content><![CDATA[<p>为什么是再探？因为之前咕了不知道多少次了，看了忘忘了看.</p>
<a id="more"></a>
<h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><h3 id="ndarray"><a href="#ndarray" class="headerlink" title="ndarray"></a>ndarray</h3><ul>
<li>NumPy’s array class is called <code>ndarray</code>. It is also known by the alias <code>array</code>. </li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

li <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<pre class="language-none"><code class="language-none">[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]]
2
int64
20
&lt;class &#39;numpy.ndarray&#39;&gt;</code></pre>
<ul>
<li><code>arange(lower_bound, upper_bound, step)</code>, <code>zeros</code>, <code>ones</code>, <code>linspace(lo,hi,count)</code></li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>pi<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre>
<pre class="language-none"><code class="language-none">[0.         0.6981317  1.3962634  2.0943951  2.7925268  3.4906585
 4.1887902  4.88692191 5.58505361 6.28318531]
 
[ 0.00000000e+00  6.42787610e-01  9.84807753e-01  8.66025404e-01      
  3.42020143e-01 -3.42020143e-01 -8.66025404e-01 -9.84807753e-01
 -6.42787610e-01 -2.44929360e-16]</code></pre>
<ul>
<li><code>reshape()</code></li>
</ul>
<h3 id="Basic-operations"><a href="#Basic-operations" class="headerlink" title="Basic operations"></a>Basic operations</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>

c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
d <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c@d<span class="token punctuation">)</span></code></pre>
<pre class="language-none"><code class="language-none">[10 20 30 40 50]
[1 2 3 4 5]
[11 22 33 44 55]
[10. 10. 10. 10. 10.]
[ 1  4  9 16 25]
[ True  True False False False]
[ 10  40  90 160 250]
550
[[19 22]
 [43 50]]</code></pre>
<ul>
<li><code>exp()</code> …</li>
</ul>
<h3 id="Indexing-and-Slicing"><a href="#Indexing-and-Slicing" class="headerlink" title="Indexing and Slicing"></a>Indexing and Slicing</h3><ul>
<li><strong>One-dimensional</strong> arrays can be indexed, sliced and iterated over, much like <a href="https://docs.python.org/tutorial/introduction.html#lists">lists</a> and other Python sequences.</li>
<li><strong>Multidimensional</strong> arrays can have one index per axis. These indices are given in a tuple separated by commas.</li>
<li>The <strong>dots</strong> (<code>...</code>) represent as many colons as needed to produce a complete indexing tuple. For example, if <code>x</code> is an array with 5 axes, then<ul>
<li><code>x[1, 2, ...]</code> is equivalent to <code>x[1, 2, :, :, :]</code>,</li>
<li><code>x[..., 3]</code> to <code>x[:, :, :, :, 3]</code> and</li>
<li><code>x[4, ..., 5, :]</code> to <code>x[4, :, :, 5, :]</code>.</li>
</ul>
</li>
</ul>
<h3 id="Iterating"><a href="#Iterating" class="headerlink" title="Iterating"></a>Iterating</h3><ul>
<li><strong>Iterating</strong> over multidimensional arrays is done with respect to the first axis.</li>
<li>But you can use <code>.flat</code> attribute which could serve as an iterator to iterate over all the elements over the array.</li>
</ul>
<h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><h3 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h3><ul>
<li><p>画不同图像</p>
<ul>
<li>散点图、折线图</li>
<li>饼图 </li>
<li>柱状图 </li>
</ul>
</li>
<li><p>更改表格的 style</p>
</li>
<li>子图</li>
</ul>
<h3 id="图像的绘制"><a href="#图像的绘制" class="headerlink" title="图像的绘制"></a>图像的绘制</h3><h4 id="散点图与折线图"><a href="#散点图与折线图" class="headerlink" title="散点图与折线图"></a>散点图与折线图</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> math

x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">"1.png"</span><span class="token punctuation">)</span></code></pre>
<p><img src="https://i.loli.net/2021/08/30/T8Pj3ICZ64o1NQx.png" alt="1"></p>
<p>And when we changed 5 points to 500…</p>
<p><img src="https://i.loli.net/2021/08/30/FJ5qG7nApHutmET.png" alt="1"></p>
<h5 id="Markers-and-line-styles"><a href="#Markers-and-line-styles" class="headerlink" title="Markers and line styles"></a>Markers and line styles</h5><p><strong>Markers</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>character</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&#39;.&#39;</code></td>
<td>point marker</td>
</tr>
<tr>
<td><code>&#39;,&#39;</code></td>
<td>pixel marker</td>
</tr>
<tr>
<td><code>&#39;o&#39;</code></td>
<td>circle marker</td>
</tr>
<tr>
<td><code>&#39;v&#39;</code></td>
<td>triangle_down marker</td>
</tr>
<tr>
<td><code>&#39;^&#39;</code></td>
<td>triangle_up marker</td>
</tr>
<tr>
<td><code>&#39;&lt;&#39;</code></td>
<td>triangle_left marker</td>
</tr>
<tr>
<td><code>&#39;&gt;&#39;</code></td>
<td>triangle_right marker</td>
</tr>
<tr>
<td><code>&#39;1&#39;</code></td>
<td>tri_down marker</td>
</tr>
<tr>
<td><code>&#39;2&#39;</code></td>
<td>tri_up marker</td>
</tr>
<tr>
<td><code>&#39;3&#39;</code></td>
<td>tri_left marker</td>
</tr>
<tr>
<td><code>&#39;4&#39;</code></td>
<td>tri_right marker</td>
</tr>
<tr>
<td><code>&#39;8&#39;</code></td>
<td>octagon marker</td>
</tr>
<tr>
<td><code>&#39;s&#39;</code></td>
<td>square marker</td>
</tr>
<tr>
<td><code>&#39;p&#39;</code></td>
<td>pentagon marker</td>
</tr>
<tr>
<td><code>&#39;P&#39;</code></td>
<td>plus (filled) marker</td>
</tr>
<tr>
<td><code>&#39;*&#39;</code></td>
<td>star marker</td>
</tr>
<tr>
<td><code>&#39;h&#39;</code></td>
<td>hexagon1 marker</td>
</tr>
<tr>
<td><code>&#39;H&#39;</code></td>
<td>hexagon2 marker</td>
</tr>
<tr>
<td><code>&#39;+&#39;</code></td>
<td>plus marker</td>
</tr>
<tr>
<td><code>&#39;x&#39;</code></td>
<td>x marker</td>
</tr>
<tr>
<td><code>&#39;X&#39;</code></td>
<td>x (filled) marker</td>
</tr>
<tr>
<td><code>&#39;D&#39;</code></td>
<td>diamond marker</td>
</tr>
<tr>
<td><code>&#39;d&#39;</code></td>
<td>thin_diamond marker</td>
</tr>
<tr>
<td><img src="https://i.loli.net/2021/09/03/fa3MXH4lvBU6jq7.png" alt="image-20210903222651862"></td>
<td>vline marker</td>
</tr>
<tr>
<td><code>&#39;_&#39;</code></td>
<td>hline marker</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>Example</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> math

x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">"1.png"</span><span class="token punctuation">)</span></code></pre>
<p><img src="https://i.loli.net/2021/08/30/hkl36mb9unPYUtE.png" alt="1"></p>
<p><strong>Line styles</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>character</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&#39;-&#39;</code></td>
<td>solid line style</td>
</tr>
<tr>
<td><code>&#39;--&#39;</code></td>
<td>dashed line style</td>
</tr>
<tr>
<td><code>&#39;-.&#39;</code></td>
<td>dash-dot line style</td>
</tr>
<tr>
<td><code>&#39;:&#39;</code></td>
<td>dotted line style</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>Example</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> math

x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'s-'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">"1.png"</span><span class="token punctuation">)</span></code></pre>
<p><img src="https://i.loli.net/2021/08/30/mI6pTX2EBwclnOr.png" alt="1"></p>
<h4 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h4><p><code>pyplot.pie(x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=0, radius=1, counterclock=True, wedgeprops=None, textprops=None, center=0, 0, frame=False, rotatelabels=False, *, normalize=None, data=None)[source]</code></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> math

x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"CA"</span><span class="token punctuation">,</span> <span class="token string">"LA"</span><span class="token punctuation">,</span> <span class="token string">"FOP"</span><span class="token punctuation">,</span> <span class="token string">"DM"</span><span class="token punctuation">]</span>
y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>

plt<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>y<span class="token punctuation">,</span> labels<span class="token operator">=</span>x<span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">"1.png"</span><span class="token punctuation">)</span></code></pre>
<p><img src="https://i.loli.net/2021/08/30/Io1HG9FxpVXTyli.png" alt="1"></p>
<p><strong>参数的使用</strong></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> math

x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"CA"</span><span class="token punctuation">,</span> <span class="token string">"LA"</span><span class="token punctuation">,</span> <span class="token string">"FOP"</span><span class="token punctuation">,</span> <span class="token string">"DM"</span><span class="token punctuation">]</span>
y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>

plt<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>y<span class="token punctuation">,</span> labels<span class="token operator">=</span>x<span class="token punctuation">,</span> explode<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> autopct<span class="token operator">=</span><span class="token string">'%.2f%%'</span><span class="token punctuation">)</span>
<span class="token comment"># %d%% 整数百分比，%0.1f%% 一位小数百分比， %0.2f%% 两位小数百分比</span>
plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">"1.png"</span><span class="token punctuation">)</span></code></pre>
<p><img src="https://i.loli.net/2021/08/30/Cl6AKWtjYJQ2soH.png" alt="1"></p>
<h4 id="柱形图"><a href="#柱形图" class="headerlink" title="柱形图"></a>柱形图</h4><p><code>matplotlib.pyplot.bar(x, height, width=0.8, bottom=None, *, align=&#39;center&#39;, data=None, **kwargs)</code></p>
<h3 id="Prettify"><a href="#Prettify" class="headerlink" title="Prettify"></a>Prettify</h3><p><strong>设置标题</strong></p>
<p><code>plt.title(title)</code></p>
<p><strong>设置图例</strong></p>
<p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html#matplotlib.pyplot.legend">https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html#matplotlib.pyplot.legend</a></p>
<h3 id="Subplots"><a href="#Subplots" class="headerlink" title="Subplots"></a>Subplots</h3><p><code>plt.subplot(nrows, ncols, index)</code></p>
<p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplot.html#matplotlib.pyplot.subplot">https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplot.html#matplotlib.pyplot.subplot</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://numpy.org/doc/stable/user/quickstart.html">https://numpy.org/doc/stable/user/quickstart.html</a></li>
<li><a href="https://www.runoob.com/numpy/numpy-ndarray-object.html">https://www.runoob.com/numpy/numpy-ndarray-object.html</a></li>
<li><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html">https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html</a></li>
<li><a href="https://www.runoob.com/matplotlib/matplotlib-pie.html">https://www.runoob.com/matplotlib/matplotlib-pie.html</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/Python应用</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Requests 库的基本使用</title>
    <url>/python-requests/</url>
    <content><![CDATA[<p>Requests 库的基本用法，内含对 HTTP 请求方法的介绍，request 和 response 类的介绍，Session 类的使用，附加参数的选择等等。</p>
<a id="more"></a>
<h2 id="创建请求-Creating-requests"><a href="#创建请求-Creating-requests" class="headerlink" title="创建请求 Creating requests"></a>创建请求 Creating requests</h2><h3 id="安装与引入"><a href="#安装与引入" class="headerlink" title="安装与引入"></a>安装与引入</h3><pre class="language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> requests</code></pre>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests</code></pre>
<p>十分简单，不再赘述.</p>
<h3 id="选择请求方法"><a href="#选择请求方法" class="headerlink" title="选择请求方法"></a>选择请求方法</h3><blockquote>
<p>HTTP 定义了一组<strong>请求方法</strong>, 以表明要对给定资源执行的操作。指示针对给定资源要执行的期望动作。</p>
<ul>
<li><strong>GET</strong><br>GET 方法请求一个指定资源的表示形式. 使用 GET 的请求应该只被用于获取数据.</li>
<li>HEAD<br>HEAD 方法请求一个与 GET 请求的响应相同的响应，但没有响应体.</li>
<li><strong>POST</strong><br>POST 方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用. </li>
<li>PUT<br>PUT 方法用请求有效载荷替换目标资源的所有当前表示。</li>
<li>DELETE<br>DELETE 方法删除指定的资源。</li>
<li>CONNECT<br>CONNECT 方法建立一个到由目标资源标识的服务器的隧道。</li>
<li>OPTIONS<br>OPTIONS 方法用于描述目标资源的通信选项。</li>
<li>TRACE<br>TRACE 方法沿着到目标资源的路径执行一个消息环回测试。</li>
<li>PATCH<br>PATCH 方法用于对资源应用部分修改。</li>
</ul>
<p>我们常说的 CRUD (Create, Read/Retrieve, Update, Delete) 可以说成<code>增删查改</code>，即对应前四种方法。</p>
<p>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods</a></p>
</blockquote>
<p>我们就可以采用对应的 <code>requests</code> 模块所提供的方法来创建请求.</p>
<pre class="language-python" data-language="python"><code class="language-python">requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
requests<span class="token punctuation">.</span>head<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>

requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> json<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
requests<span class="token punctuation">.</span>put<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">[</span>source<span class="token punctuation">]</span>
requests<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></code></pre>
<p>当然，我们也可以使用简单的<code>request</code>方法来构建请求。</p>
<pre class="language-python" data-language="python"><code class="language-python">requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># Where method should be one of GET, OPTIONS, HEAD, POST, PUT, PATCH, or DELETE.</span></code></pre>
<h3 id="添加可选参数"><a href="#添加可选参数" class="headerlink" title="添加可选参数"></a>添加可选参数</h3><p>这里仅列出部分常用参数.</p>
<ul>
<li>params: Dict</li>
</ul>
<p>Mainly used for GET method. 帮助构建 Query 字符串。</p>
<ul>
<li>data : str | json : Dict</li>
</ul>
<p>Mainly used for POST/PUT method. 作为 Request Body.</p>
<pre class="language-python" data-language="python"><code class="language-python">URL <span class="token operator">=</span> PluginManager<span class="token punctuation">.</span>CONFIGURATION<span class="token punctuation">[</span><span class="token string">'destinations'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'QQ'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'http-adapter-address'</span><span class="token punctuation">]</span>
res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>URL<span class="token operator">+</span><span class="token string">'/sendFriendMessage'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> json<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"target"</span><span class="token punctuation">:</span> destination<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">"messageChain"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"Plain"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"hello world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">//</span> Equals to data<span class="token operator">=</span><span class="token string">"JSON STRING"</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<ul>
<li>headers : Dict</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Example</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>URL<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span>
                            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>
<ul>
<li>cookies: Dict</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Attached: get cookies in Dict from documen.cookie</span>
<span class="token keyword">def</span> <span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"cookies"</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span>
    result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> entry <span class="token keyword">in</span> data<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span>
        entryGroup <span class="token operator">=</span> entry<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span>
        result<span class="token punctuation">[</span>entryGroup<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> entryGroup<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> result

<span class="token comment"># Maybe the code could be more pythonic...??</span></code></pre>
<ul>
<li>timeout: float (seconds)</li>
</ul>
<h3 id="Optional-使用-Session"><a href="#Optional-使用-Session" class="headerlink" title="(Optional) 使用 Session"></a>(Optional) 使用 Session</h3><p>如果只需要对单个链接进行数据获取，那么我们上述的方法执行一次就够了.</p>
<p>但是某些网站可能需要前后访问的 Session 是一致的，这样才能够实现，先 Login 后 Verify 等等操作…</p>
<p>这时就需要我们的 Session 类了.</p>
<pre class="language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment"># Configurate headers</span>
s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">)</span>
<span class="token comment"># Other Operations with s...</span>
s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h2 id="提取响应-Parsing-responses"><a href="#提取响应-Parsing-responses" class="headerlink" title="提取响应 Parsing responses"></a>提取响应 Parsing responses</h2><p>上述方法的返回值为 <code>Response</code> 类的对象。</p>
<p><code>Response</code> 类的对象具有以下常用属性。</p>
<ul>
<li>ok</li>
</ul>
<p>Returns true if return code is less than 400.</p>
<ul>
<li>text</li>
</ul>
<p>Content of the response, in unicode.</p>
<ul>
<li>json(**kwargs)</li>
</ul>
<p>Returns the json-encoded content of a response if any.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.python-requests.org/en/master/">https://docs.python-requests.org/en/master/</a></li>
<li><a href="https://docs.python-requests.org/en/latest/api/">https://docs.python-requests.org/en/latest/api/</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>React Redux 学习手记</title>
    <url>/react-redux/</url>
    <content><![CDATA[<blockquote>
<p><strong>React Redux</strong> is the official React UI bindings layer for Redux. It lets your React components read data from a Redux store, and dispatch actions to the store to update state.</p>
<p>(Excerpted from react-redux.js.org)</p>
<p>Redux 是 JavaScript 应用的<strong>状态容器</strong>，提供可预测的状态管理。</p>
</blockquote>
<p><s>想做全局变量管理，于是来学</s></p>
<a id="more"></a>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><img src="http://cn.redux.js.org/assets/images/ReduxDataFlowDiagram-49fa8c3968371d9ef6f2a1486bd40a26.gif" alt="数据流更新动画"></p>
<h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><p>有以下基本流程：</p>
<ul>
<li>用 state 来描述应用程序在特定时间点的状况</li>
<li>基于 state 来渲染出 view</li>
<li>当发生某些事情时（例如用户单击按钮），state 会根据发生的事情进行更新，生成新的 state</li>
<li>基于新的 state 重新渲染 view</li>
</ul>
<h3 id="不可变性"><a href="#不可变性" class="headerlink" title="不可变性"></a>不可变性</h3><p>原来的对象或数组中的内容<strong>不改变</strong>，通过复制的方式先获取一份 copy，然后更新 copy 中的内容。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 为了安全的更新 obj.a.c，需要先复制一份</span>
    c<span class="token operator">:</span> <span class="token number">3</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  b<span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// obj 的备份</span>
  <span class="token operator">...</span>obj<span class="token punctuation">,</span>
  <span class="token comment">// 覆盖 a</span>
  a<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// obj.a 的备份</span>
    <span class="token operator">...</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">,</span>
    <span class="token comment">// 覆盖 c</span>
    c<span class="token operator">:</span> <span class="token number">42</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span>
<span class="token comment">// 创建 arr 的备份，并把 c 拼接到最后。</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>

<span class="token comment">// 或者，可以对原来的数组创建复制体</span>
<span class="token keyword">const</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 修改复制体</span>
arr3<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span></code></pre>
<p><em>Redux 期望所有状态更新都是使用不可变的方式</em>。</p>
<h3 id="state-view-action"><a href="#state-view-action" class="headerlink" title="state, view, action"></a>state, view, action</h3><ul>
<li>state: 储存数据的一个个“状态”</li>
<li>view: 当前绘制出的 UI</li>
<li>action: 由用户交互而触发的<strong>事件</strong>，可以引起 state 的更新，进而重新渲染 view.<ul>
<li><strong>action</strong> 是一个具有 <code>type</code> 字段的普通 JavaScript 对象。</li>
<li><code>type</code> 字段是一个字符串，给这个 action 一个描述性的名字，比如<code>&quot;todos/todoAdded&quot;</code>。我们通常把那个类型的字符串写成“域/事件名称”，其中第一部分是这个 action 所属的特征或类别，第二部分是发生的具体事情。</li>
<li>action 对象可以有其他字段，其中包含有关发生的事情的附加信息。按照惯例，我们将该信息放在名为 <code>payload</code> 的字段中。</li>
</ul>
</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Example for action</span>
<span class="token keyword">const</span> addTodoAction <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  type<span class="token operator">:</span> <span class="token string">'todos/todoAdded'</span><span class="token punctuation">,</span>
  payload<span class="token operator">:</span> <span class="token string">'Buy milk'</span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><p><strong>reducer</strong> 是一个函数，接收当前的 <code>state</code> 和一个 <code>action</code> 对象，必要时决定如何更新状态，并返回新状态。函数签名是：<code>(state, action) =&gt; newState</code>。 </p>
<p><strong>你可以将 reducer 视为一个事件监听器，它根据接收到的 action（事件）类型处理事件。</strong></p>
<p>Reducer 必需符合以下规则：</p>
<ul>
<li>仅使用 <code>state</code> 和 <code>action</code> 参数计算新的状态值</li>
<li>禁止直接修改 <code>state</code>。必须通过复制现有的 <code>state</code> 并对复制的值进行更改的方式来做 <em>不可变更新（immutable updates）</em>。</li>
<li>禁止任何异步逻辑、依赖随机值或导致其他“副作用”的代码</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">counterReducer</span><span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 检查 reducer 是否关心这个 action</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'counter/increment'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 如果是，复制 `state`</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token operator">...</span>state<span class="token punctuation">,</span>
      <span class="token comment">// 使用新值更新 state 副本</span>
      value<span class="token operator">:</span> state<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 返回原来的 state 不变</span>
  <span class="token keyword">return</span> state
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>当前 Redux 应用的状态存在于一个名为 <strong>store</strong> 的对象中。</p>
<p>store 是通过传入一个 reducer 来创建的，并且有一个名为 <code>getState</code> 的方法，它返回当前状态值.</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> configureStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@reduxjs/toolkit'</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> reducer<span class="token operator">:</span> counterReducer <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// &#123;value: 0&#125;</span></code></pre>
<h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><p><strong>dispatch 一个 action 可以形象的理解为 “触发一个事件”</strong>。</p>
<p>Reducer 就像事件监听器一样，当它们收到关注的 action 后，它就会更新 state 作为响应。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'counter/increment'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// &#123;value: 1&#125;</span>

<span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    type<span class="token operator">:</span> <span class="token string">'counter/increment'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// &#123;value: 2&#125;</span></code></pre>
<h3 id="辅助函数类型"><a href="#辅助函数类型" class="headerlink" title="辅助函数类型"></a>辅助函数类型</h3><h4 id="action-creator"><a href="#action-creator" class="headerlink" title="action creator"></a>action creator</h4><p><strong>action creator</strong> (<strong>[text =&gt; action]</strong>)是一个创建并返回一个 action 对象的函数。它的作用是让你不必每次都手动编写 action 对象.</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">addTodo</span> <span class="token operator">=</span> <span class="token parameter">text</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    type<span class="token operator">:</span> <span class="token string">'todos/todoAdded'</span><span class="token punctuation">,</span>
    payload<span class="token operator">:</span> text
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h4 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h4><p><strong>Selector</strong> 函数可以从 store 状态树中提取指定的片段.</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">selectCounterValue</span> <span class="token operator">=</span> <span class="token parameter">state</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>value

<span class="token keyword">const</span> currentValue <span class="token operator">=</span> <span class="token function">selectCounterValue</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span>
<span class="token comment">// 2</span></code></pre>
<h3 id="functions-provided-by-toolkit"><a href="#functions-provided-by-toolkit" class="headerlink" title="functions provided by toolkit"></a>functions provided by toolkit</h3><h4 id="createSlice"><a href="#createSlice" class="headerlink" title="createSlice"></a>createSlice</h4><p>可以定义 初始状态, reducer 函数, slice name, 然后自动生成相应的action creator 和 action type.</p>
<p>内部重写了实现逻辑，可以使用<strong>可变</strong>的方式来进行状态修改。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createSlice<span class="token punctuation">,</span> PayloadAction <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@reduxjs/toolkit'</span>

<span class="token keyword">interface</span> <span class="token class-name">CounterState</span> <span class="token punctuation">&#123;</span>
  value<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span> <span class="token keyword">as</span> CounterState

<span class="token keyword">const</span> counterSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'counter'</span><span class="token punctuation">,</span>
  initialState<span class="token punctuation">,</span>
  reducers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      state<span class="token punctuation">.</span>value<span class="token operator">++</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function">decrement</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      state<span class="token punctuation">.</span>value<span class="token operator">--</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function">incrementByAmount</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token operator">:</span> PayloadAction<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      state<span class="token punctuation">.</span>value <span class="token operator">+=</span> action<span class="token punctuation">.</span>payload
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> increment<span class="token punctuation">,</span> decrement<span class="token punctuation">,</span> incrementByAmount <span class="token punctuation">&#125;</span> <span class="token operator">=</span> counterSlice<span class="token punctuation">.</span>actions
<span class="token keyword">export</span> <span class="token keyword">default</span> counterSlice<span class="token punctuation">.</span>reducer</code></pre>
<p>Return values:</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">&#123;</span>
    name <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    reducer <span class="token operator">:</span> ReducerFunction<span class="token punctuation">,</span>
    actions <span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> ActionCreator<span class="token operator">></span><span class="token punctuation">,</span>
    caseReducers<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> CaseReducer<span class="token operator">></span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="Redux-数据流"><a href="#Redux-数据流" class="headerlink" title="Redux 数据流"></a>Redux 数据流</h3><p>具体来说，对于 Redux，我们可以将这些步骤分解为更详细的内容：</p>
<ul>
<li>初始启动：<ul>
<li>使用最顶层的 root reducer 函数创建 Redux store</li>
<li>store 调用一次 root reducer，并将返回值保存为它的初始 <code>state</code></li>
<li>当 UI 首次渲染时，UI 组件访问 Redux store 的当前 state，并使用该数据来决定要呈现的内容。同时监听 store 的更新，以便他们可以知道 state 是否已更改。</li>
</ul>
</li>
<li>更新环节：<ul>
<li>应用程序中发生了某些事情，例如用户单击按钮</li>
<li>dispatch 一个 action 到 Redux store，例如 <code>dispatch(&#123;type: &#39;counter/increment&#39;&#125;)</code></li>
<li>store 用之前的 <code>state</code> 和当前的 <code>action</code> 再次运行 reducer 函数，并将返回值保存为新的 <code>state</code></li>
<li>store 通知所有订阅过的 UI，通知它们 store 发生更新</li>
<li>每个订阅过 store 数据的 UI 组件都会检查它们需要的 state 部分是否被更新。</li>
<li>发现数据被更新的每个组件都强制使用新数据重新渲染，紧接着更新网页</li>
</ul>
</li>
</ul>
<p><img src="http://cn.redux.js.org/assets/images/ReduxDataFlowDiagram-49fa8c3968371d9ef6f2a1486bd40a26.gif" alt="数据流更新动画"></p>
<h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><p><s>好，现在我已经掌握了 React Redux 的基本用法了</s></p>
<p><img src="https://i.loli.net/2021/08/23/EFG2eolQ7dzgkm3.png" alt="img"></p>
<p><strong>Store.tsx</strong></p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>configureStore<span class="token punctuation">,</span> createSlice<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@reduxjs/toolkit'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> DataSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">'data'</span><span class="token punctuation">,</span>
  initialState<span class="token operator">:</span> <span class="token punctuation">&#123;</span>loggedIn<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> role<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> childProps<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> parentProps<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  reducers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">setLoggedIn</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      state<span class="token punctuation">.</span>loggedIn <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">setRole</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      state<span class="token punctuation">.</span>role <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">setChildProps</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      state<span class="token punctuation">.</span>childProps <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">setParentProps</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      state<span class="token punctuation">.</span>parentProps <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>setLoggedIn<span class="token punctuation">,</span> setRole<span class="token punctuation">,</span> setChildProps<span class="token punctuation">,</span> setParentProps<span class="token punctuation">&#125;</span> <span class="token operator">=</span>
  DataSlice<span class="token punctuation">.</span>actions<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  reducer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>data<span class="token operator">:</span> DataSlice<span class="token punctuation">.</span>reducer<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><strong>App.tsx</strong></p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Provider<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">'./UI/Child'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">&#123;</span>Store<span class="token punctuation">&#125;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>View <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>然后就可以在代码中调用 Store 提供的 setLoggedIn, setRole, setChildProps, setParentProps 这些 action creators 和 dispatch 方法了.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://react-redux.js.org/tutorials/quick-start">https://react-redux.js.org/tutorials/quick-start</a></li>
<li><a href="http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts">http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts</a></li>
<li><a href="https://redux-toolkit.js.org/api/createslice">https://redux-toolkit.js.org/api/createslice</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/前端</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>全局数据流</tag>
      </tags>
  </entry>
  <entry>
    <title>React-Native Android App 开发手记</title>
    <url>/react-native-record/</url>
    <content><![CDATA[<p>是这样的，简而言之，有口大锅，让我背着。</p>
<p><s>在小学期两周速成 Android App 开发什么的，这合理嘛.</s></p>
<p>这恒河里.</p>
<p>于是这篇文章就完全是记录性质的，可能最后会根据 咕的情况 &amp;&amp; 是否便于整理成学习笔记 这两个因素决定要不要再水一篇指北。</p>
<p>咕咕咕。</p>
<a id="more"></a>
<h1 id="8-13"><a href="#8-13" class="headerlink" title="8.13"></a>8.13</h1><ul>
<li>下午 23：00</li>
</ul>
<p>开会，定App方案。第二天七夕节，大晚上还定方案。离谱（</p>
<p>实践视频改稿，等风扇转到晚上 03:00，终于能入睡，咕咕咕，啥都没干</p>
<h1 id="8-14"><a href="#8-14" class="headerlink" title="8.14"></a>8.14</h1><ul>
<li>凌晨 10:00</li>
</ul>
<p>装模作样地打开了<a href="https://reactnative.dev/">https://reactnative.dev/</a>.</p>
<p><s>明明后端更好写吧 为什么要在前端耗着</s></p>
<p>看了配置说明 感觉好麻烦x</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><strong>什么是 React Native？</strong></p>
<p><code>React Native</code>是使用 React 来构建 Android 和 iOS 应用的开源社区框架。也就是说，我们使用 Javascript 来实现应用的主要界面和功能。</p>
<p><strong>Views</strong>: Just like ReactElement，或是 Web 开发中的一个<code>&lt;div&gt;</code>块，有层级结构</p>
<p><strong>核心组件</strong>(Core Components)与<strong>本地组件</strong>(Native Components)</p>
<p><img src="https://i.loli.net/2021/08/14/RSQOvdVLxl7fpt9.png" alt="image-20210814120050939"></p>
<p>如何理解？核心组件在两个平台上都能正常显示，本地组件只能显示在特定平台上。</p>
<ul>
<li>中午 16:40</li>
</ul>
<p>不行 不能咕咕咕了 干活干活</p>
<p>今天要不把开发环境给配置好 c7w 就是爬爬怪</p>
<h2 id="Setting-up-the-development-environment-开发环境配置"><a href="#Setting-up-the-development-environment-开发环境配置" class="headerlink" title="Setting up the development environment 开发环境配置"></a>Setting up the development environment 开发环境配置</h2><p>这里我们介绍 <code>Development OS=Linux headless(WSL), TargetOS=Android</code> 的环境配置方法。</p>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><ul>
<li>Node (12+)</li>
<li>JDK (8+)</li>
</ul>
<p>首先可以使用 <code>java -version</code> 查看是否已成功安装 java.</p>
<p>查看结果后，如果没有成功安装，我们可以运行 <code>apt install</code></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-11-jre-headless</code></pre>
<p>然后我们再运行查看版本:</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">c7w@cc7w  /mnt/e/Project  java -version
openjdk version <span class="token string">"11.0.11"</span> <span class="token number">2021</span>-04-20
OpenJDK Runtime Environment <span class="token punctuation">(</span>build <span class="token number">11.0</span>.11+9-Ubuntu-0ubuntu2.20.04<span class="token punctuation">)</span>
OpenJDK <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">11.0</span>.11+9-Ubuntu-0ubuntu2.20.04, mixed mode, sharing<span class="token punctuation">)</span></code></pre>
<ul>
<li>Android SDK</li>
</ul>
<blockquote>
<p>什么是 SDK？</p>
<p>A software development kit (SDK) is a collection of software development tools in one installable package. They facilitate the creation of applications by having a compiler, debugger and perhaps a software framework. They are normally specific to a hardware platform and operating system combination. (Excerpted from Wikipedia)</p>
</blockquote>
<p>由于我们要开发 Android App，所以显然我们是需要 Android SDK的.</p>
<p>SDK的安装参考了这里.</p>
<p><a href="https://gist.github.com/steveclarke/d988d89e8cdf51a8a5766d69ecb07e7b">https://gist.github.com/steveclarke/d988d89e8cdf51a8a5766d69ecb07e7b</a></p>
<h2 id="创建新应用"><a href="#创建新应用" class="headerlink" title="创建新应用"></a>创建新应用</h2><p>新建文件夹，然后运行<code>npx react-native init AwesomeProject</code>. 简单易用.</p>
<p>要想使用 Typescript，我们可以运行<code>npx react-native init AwesomeTSProject --template react-native-template-typescript</code>.</p>
<p>然后我们就能打开喜闻乐见的编辑器.</p>
<p><img src="https://i.loli.net/2021/08/14/SbQTErNlz3qky5G.png" alt="image-20210814170452919"></p>
<p>然后什么都不管先运行了一波 <code>yarn android</code>.</p>
<p>然后项目会帮我们安装 gradle.</p>
<p>然后我们需要设置 在<code>local.properties</code> 中 <code>sdk.dir=/home/c7w/Android</code></p>
<p>然后这时再 <code>yarn android</code> 便可以成功. 但由于没有emulation env 我们仍没有完成调试的配置，<s>所以我们直接快进到打包发布</s></p>
<h2 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h2><p><a href="https://reactnative.cn/docs/signed-apk-androidhttps://reactnative.cn/docs/signed-apk-android">https://reactnative.cn/docs/signed-apk-androidhttps://reactnative.cn/docs/signed-apk-android</a></p>
<p><s>饿饿 饭饭</s></p>
<ul>
<li>下午 19:00</li>
</ul>
<h3 id="初次配置：设置签名"><a href="#初次配置：设置签名" class="headerlink" title="初次配置：设置签名"></a>初次配置：设置签名</h3><pre class="language-bash" data-language="bash"><code class="language-bash">keytool -genkeypair -v -storetype PKCS12 -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize <span class="token number">2048</span> -validity <span class="token number">1000</span></code></pre>
<p>这条命令会要求你输入密钥库（keystore）和对应密钥的密码，然后设置一些发行相关的信息。最后它会生成一个叫做<code>my-release-key.keystore</code>的密钥库文件。</p>
<p>在运行上面这条语句之后，密钥库里应该已经生成了一个单独的密钥，有效期为 1000 天。—alias 参数后面的别名是你将来为应用签名时所需要用到的，所以记得记录这个别名。</p>
<p>然后，我们需要配置 gradle 变量.</p>
<ol>
<li>把<code>my-release-key.keystore</code>文件放到工程中的<code>android/app</code>文件夹下。</li>
<li>编辑<code>项目目录/android/gradle.properties</code>。如果没有<code>gradle.properties</code>文件你就自己创建一个，添加如下的代码（注意把其中的<code>****</code>替换为相应密码）</li>
</ol>
<pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">MYAPP_RELEASE_STORE_FILE</span><span class="token punctuation">=</span><span class="token attr-value">my-release-key.keystore</span>
<span class="token attr-name">MYAPP_RELEASE_KEY_ALIAS</span><span class="token punctuation">=</span><span class="token attr-value">my-key-alias</span>
<span class="token attr-name">MYAPP_RELEASE_STORE_PASSWORD</span><span class="token punctuation">=</span><span class="token attr-value">*****</span>
<span class="token attr-name">MYAPP_RELEASE_KEY_PASSWORD</span><span class="token punctuation">=</span><span class="token attr-value">*****</span></code></pre>
<h3 id="生成-APK"><a href="#生成-APK" class="headerlink" title="生成 APK"></a>生成 APK</h3><blockquote>
<p>What is <strong>APK</strong>?</p>
<p>Android Package (APK) is the Android <strong>application package</strong> file format used by the Android operating system, and a number of other Android-based operating systems for distribution and installation of mobile apps, mobile games and middleware.</p>
<p>(Excerpted from Wikipedia)</p>
</blockquote>
<p>只需在终端中运行以下命令：</p>
<pre class="language-sh" data-language="sh"><code class="language-sh">cd android
.&#x2F;gradlew assembleRelease</code></pre>
<p>生成的 APK 文件位于<code>android/app/build/outputs/apk/release/app-release.apk</code>，它已经可以用来发布了。</p>
<p><strong>启用 Proguard 来减少 apk 的大小</strong></p>
<p>Proguard 是一个 Java 字节码混淆压缩工具，它可以移除掉 React Native Java（和它的依赖库中）中没有被使用到的部分，最终有效的减少 APK 的大小。</p>
<p>要启用 Proguard，修改<code>android/app/build.gradle</code>文件：</p>
<pre class="language-gradle" data-language="gradle"><code class="language-gradle">&#x2F;** 
* Run Proguard to shrink the Java bytecode in release builds. *&#x2F;
def enableProguardInReleaseBuilds &#x3D; true</code></pre>
<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><blockquote>
<p>Dev on Windows with WSL</p>
<p>在 Windows 上用 WSL 优雅开发</p>
<p><a href="https://dowww.spencerwoo.com/">https://dowww.spencerwoo.com/</a> 看了这个Doc网站</p>
<p>感觉对USB调试有效.</p>
<p>是时候该升级成wsl2了.</p>
<p><a href="https://xwsoul.com/posts/199">https://xwsoul.com/posts/199</a></p>
<p>感觉似乎可行.</p>
<p>总比每次先build然后传到手机上调试好吧.</p>
<p>这就干.</p>
<p>准备水另一篇文章.</p>
</blockquote>
<h1 id="8-15"><a href="#8-15" class="headerlink" title="8.15"></a>8.15</h1><h2 id="Android-Debugging"><a href="#Android-Debugging" class="headerlink" title="Android Debugging"></a>Android Debugging</h2><h3 id="ADB-的使用"><a href="#ADB-的使用" class="headerlink" title="ADB 的使用"></a>ADB 的使用</h3><blockquote>
<p>What is <strong>ADB</strong>?</p>
<p>Android Debug Bridge (adb) is a versatile command-line tool that lets you communicate with a device. (Excerpted from developer.android.com)</p>
</blockquote>
<p>在 Windows 上下载：<a href="https://developer.android.com/studio/releases/platform-tools">https://developer.android.com/studio/releases/platform-tools</a></p>
<p>下载好直接就能用.</p>
<p>使用方法：</p>
<ul>
<li>在 Windows 上先 <code>adb devices</code> 查看可用设备列表，确保配置好 USB 调试.</li>
<li>在 Windows 上使用 <code>adb tcpip &lt;port&gt;</code> 为设备开启 tcpip 端口.</li>
<li>在 WSL 上使用 <code>abd connect &lt;Device IP&gt;:&lt;port&gt;</code> 连接该端口.</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash">c7w@cc7w  ~/Android/platform-tools  ./adb devices
List of devices attached
<span class="token number">183.172</span>.***.***:5556    device</code></pre>
<p>配置完成.</p>
<p>但是死活连接不上去，目测是辣鸡 Tsinghua-Secure 会吃掉连接.</p>
<p>从中厅把路由器拿来装好. Peking-Secure 也不行.</p>
<p>在 Windows 和 WSL 之间的通信总是会出问题.</p>
<p><s>需要把 WSL 的 IP 也纳入到 Peking-Secure 下才行，但是解决不了.</s></p>
<p>大恼，决定把整个开发环境从 WSL 里面搬出来，换成 Windows.</p>
<ul>
<li>下午 20:00</li>
</ul>
<p>整个 Windows 的环境配置完成了. 也成功在 Debug 专用板砖上输出了 Hello React Native.</p>
<ul>
<li>下午 23:00</li>
</ul>
<p>画了一个简单的登录界面. 睡大觉.</p>
<h1 id="8-16"><a href="#8-16" class="headerlink" title="8.16"></a>8.16</h1><ul>
<li>半夜 8:00</li>
</ul>
<p>舍友早九 不得已被迫起床，开始干活.</p>
<p>先从方舟挂机开始（大嘘</p>
<p><img src="https://i.loli.net/2021/08/16/xUu1hqgyZ5PrDjN.png" alt="image-20210816093146543"></p>
<p>安装 React-Native-Navigator 之后没有<code>yarn android</code> ，狂按R按了半小时，还搁那搜索为什么报错.</p>
<p>安装依赖后一定要重新 Build 一遍发到手机上再开 Debugger.</p>
<p><a href="https://reactnavigation.org/docs/navigating">https://reactnavigation.org/docs/navigating</a></p>
<h1 id="8-21-amp-8-22"><a href="#8-21-amp-8-22" class="headerlink" title="8.21 &amp; 8.22"></a>8.21 &amp; 8.22</h1><p>画前端。装了什么 icons navigator 之类的包。还在研究怎么用。</p>
<h1 id="8-23"><a href="#8-23" class="headerlink" title="8.23"></a>8.23</h1><p>做跳转。打算先从 redux 的教程写起。</p>
<h1 id="8-24"><a href="#8-24" class="headerlink" title="8.24"></a>8.24</h1><p>后端 deploy 好了。这下大鱼摸不成了。</p>
<p>写前端。把请求加进去.</p>
<p>被队友痛击.</p>
<p>前端 狗都不写.</p>
<p>逻辑十分不清晰. 感觉需要重构.</p>
<p>但是就这么一个破 App 似乎没有重构的必要.</p>
<p><em>TO BE CONTINUED</em></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/安卓开发</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>安卓开发</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLAlchemy 下的数据库关系设计</title>
    <url>/sqlalchemy-database-relationship/</url>
    <content><![CDATA[<p><strong>SQLAlchemy</strong> 主要用于将 Python 中的类映射为数据库中的数据表，方便进行后端的管理操作。&gt;&gt; <strong>Object-relational mapper</strong> <em>(ORM)</em></p>
<p>我们从数据库关系的常见设计模式，一对一，一对多，多对一，多对多开始回顾，然后给出 <strong>SQLAlchemy</strong> 下其具体实现。</p>
<a id="more"></a>
<h2 id="引入包-Imports"><a href="#引入包-Imports" class="headerlink" title="引入包 Imports"></a>引入包 Imports</h2><p>Import all packages that will be used in the later sections.</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Table<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> ForeignKey
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base

Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h2 id="一对多-One-to-Many"><a href="#一对多-One-to-Many" class="headerlink" title="一对多 One to Many"></a>一对多 One to Many</h2><p>我们不妨用<code>Exam</code>表示一次考试，<code>ExamRecord</code>表示一条考试记录。</p>
<p>显而易见，一次考试应该有多条考试记录。</p>
<p>我们需要在 <code>ExamRecord</code>(Child) 的数据成员列表中添加一个数据成员并标记为<code>ForeignKey</code>，指向 <code>Exam</code>(Parent) 的 <code>PrimaryKey</code>。</p>
<p>同时，我们需要在 <code>Exam</code>(Parent) 新增数据成员 <code>records</code> 用于指向 <code>ExamRecord</code> 中的成员。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Not completed...</span>
<span class="token keyword">import</span> json
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>schema <span class="token keyword">import</span> ForeignKey
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>type_api <span class="token keyword">import</span> TypeDecorator
<span class="token keyword">from</span> models<span class="token punctuation">.</span>database <span class="token keyword">import</span> Base
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Boolean<span class="token punctuation">,</span> PickleType

<span class="token keyword">class</span> <span class="token class-name">Exam</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"exam_exams"</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
    state <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
    records <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"ExamRecord"</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">ExamRecord</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"exam_exam_records"</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    author_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'account_users.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    exam_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'exam_exams.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    feedback <span class="token operator">=</span> Column<span class="token punctuation">(</span>PickleType<span class="token punctuation">)</span></code></pre>
<p>到此为止，我们只完成了一对多关系建立的单向更新功能。我们还需要建立该关系的另一边。可能的解决方案有两种：</p>
<ol>
<li><p>此时，如果我们想在<code>ExamRecord</code>中直接访问其对应的<code>Exam</code>对象，即要求实现<code>ExamRecord.Exam</code>的效果的话，我们还需要添加一个<code>exam</code>对象，并使用<code>back_populates</code>参数。</p>
</li>
<li><p>我们可以在其中一个<code>relationship()</code>中使用<code>relationship.backref</code>参数创建一个反向引用。</p>
</li>
</ol>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Example Code for Solution 1</span>
<span class="token keyword">import</span> json
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>schema <span class="token keyword">import</span> ForeignKey
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>type_api <span class="token keyword">import</span> TypeDecorator
<span class="token keyword">from</span> models<span class="token punctuation">.</span>database <span class="token keyword">import</span> Base
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Boolean<span class="token punctuation">,</span> PickleType

<span class="token keyword">class</span> <span class="token class-name">Exam</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"exam_exams"</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
    state <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
    records <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"ExamRecord"</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">"exam"</span><span class="token punctuation">)</span> <span class="token comment"># Here</span>

<span class="token keyword">class</span> <span class="token class-name">ExamRecord</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"exam_exam_records"</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    author_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'account_users.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    exam_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'exam_exams.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    exam <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"Exam"</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">"records"</span><span class="token punctuation">)</span> <span class="token comment"># And here</span>
    feedback <span class="token operator">=</span> Column<span class="token punctuation">(</span>PickleType<span class="token punctuation">)</span></code></pre>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Example Code for Solution 2</span>
<span class="token keyword">import</span> json
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>schema <span class="token keyword">import</span> ForeignKey
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>type_api <span class="token keyword">import</span> TypeDecorator
<span class="token keyword">from</span> models<span class="token punctuation">.</span>database <span class="token keyword">import</span> Base
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Boolean<span class="token punctuation">,</span> PickleType

<span class="token keyword">class</span> <span class="token class-name">Exam</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"exam_exams"</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
    state <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
    records <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"ExamRecord"</span><span class="token punctuation">,</span> backref<span class="token operator">=</span><span class="token string">"exam"</span><span class="token punctuation">)</span> <span class="token comment"># Only here</span>

<span class="token keyword">class</span> <span class="token class-name">ExamRecord</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"exam_exam_records"</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    author_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'account_users.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    exam_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'exam_exams.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    feedback <span class="token operator">=</span> Column<span class="token punctuation">(</span>PickleType<span class="token punctuation">)</span></code></pre>
<h3 id="如何理解-back-ref？-Why-back-ref"><a href="#如何理解-back-ref？-Why-back-ref" class="headerlink" title="如何理解 back_ref？ Why back_ref?"></a>如何理解 back_ref？ Why back_ref?</h3><p>我们该如何理解关系的“单边”性呢？如果理解了“单边”是什么意思，我们自然就知道了<code>back_populates</code>和<code>back_ref</code>的意义了。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Example Code without back_ref</span>
<span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">'parent'</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    children <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"Child"</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">'child'</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    parent_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'parent.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    parent <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"Parent"</span><span class="token punctuation">)</span></code></pre>
<p>这时，如果我们执行如下命令：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> parent <span class="token operator">=</span> Parent<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> child <span class="token operator">=</span> Child<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> child<span class="token punctuation">.</span>parent <span class="token operator">=</span> parent
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>child<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre>
<p>我们会发现，<code>parent</code>的<code>child</code>字段并没有随之更新。</p>
<p>也就是说，这个关系的“单边”体现在只有一边的数据进行了更新。</p>
<p>而这显然不是我们在数据关系的处理时想要的。</p>
<p>于是我们就通过<code>back_populates</code>和<code>back_ref</code>字段的设置来完成了这种关系的双向绑定。</p>
<h3 id="自动删除-Cascade-on-delete"><a href="#自动删除-Cascade-on-delete" class="headerlink" title="自动删除 Cascade on delete"></a>自动删除 Cascade on delete</h3><p>我们想实现是，一旦一个<code>Exam</code>对象被删除，其对应的<code>ExamRecord</code>对象被全部删除的功能。</p>
<p>我们自然可以想到，在原有的数据库中，我们可以通过外键约束来实现这个功能。</p>
<p>那么，该如何在 <code>SQLAlchemy</code> 中实现这个功能呢？</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>schema <span class="token keyword">import</span> ForeignKey
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>type_api <span class="token keyword">import</span> TypeDecorator
<span class="token keyword">from</span> models<span class="token punctuation">.</span>database <span class="token keyword">import</span> Base
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Boolean<span class="token punctuation">,</span> PickleType

<span class="token keyword">class</span> <span class="token class-name">Exam</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"exam_exams"</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
    state <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
    records <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"ExamRecord"</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">"exam"</span><span class="token punctuation">,</span>
                           cascade<span class="token operator">=</span><span class="token string">"all, delete"</span><span class="token punctuation">,</span> passive_deletes<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">ExamRecord</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"exam_exam_records"</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    author_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span>
        <span class="token string">'account_users.id'</span><span class="token punctuation">,</span> ondelete<span class="token operator">=</span><span class="token string">"CASCADE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    exam_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'exam_exams.id'</span><span class="token punctuation">,</span> ondelete<span class="token operator">=</span><span class="token string">"CASCADE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    exam <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"Exam"</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">"records"</span><span class="token punctuation">)</span>
    feedback <span class="token operator">=</span> Column<span class="token punctuation">(</span>PickleType<span class="token punctuation">)</span></code></pre>
<p>我们可以通过配置子表的 <code>ForeignKey.ondelete</code> 字段和父表的 <code>relationship.cascade</code> 字段来实现该功能。</p>
<h3 id="多对一-Many-to-One"><a href="#多对一-Many-to-One" class="headerlink" title="多对一 Many to One"></a>多对一 Many to One</h3><p>由于类似于一对多关系，我们不再单独分 Section.</p>
<p>如果我们在<code>Exam</code>中添加字段 <code>records_id</code>，其值赋为<code>Column(Integer, ForeignKey(&#39;exam_exam_records.id&#39;))</code>，我们便实现了一个多对一关系单边更新的创建。</p>
<p>另一边同理，也是使用<code>back_populates</code>或<code>back_ref</code>实现的。</p>
<h2 id="一对一-One-to-One"><a href="#一对一-One-to-One" class="headerlink" title="一对一 One to One"></a>一对一 One to One</h2><p>这里我们仍然使用 <code>Parent</code> 类和 <code>Child</code> 类做例子，即使在一对一关系中不应存在父子关系。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">'parent'</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token comment"># previously one-to-many Parent.children is now</span>
    <span class="token comment"># one-to-one Parent.child</span>
    <span class="token comment"># uselist=False #</span>
    child <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"Child"</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">"parent"</span><span class="token punctuation">,</span> uselist<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">'child'</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    parent_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'parent.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># many-to-one side remains, see tip below</span>
    parent <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"Parent"</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">"child"</span><span class="token punctuation">)</span></code></pre>
<p>当然，不使用<code>back_populates</code>，我们仍然可以使用<code>back_ref</code>。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> backref

<span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">'parent'</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">'child'</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    parent_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'parent.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    parent <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"Parent"</span><span class="token punctuation">,</span> backref<span class="token operator">=</span>backref<span class="token punctuation">(</span><span class="token string">"child"</span><span class="token punctuation">,</span> uselist<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h2 id="多对多-Many-to-Many"><a href="#多对多-Many-to-Many" class="headerlink" title="多对多 Many to Many"></a>多对多 Many to Many</h2><p>我们考虑用户类<code>User</code>与用户组类<code>Group</code>。一个用户组中可以有多名用户，一个用户也可以同时属于多个用户组。</p>
<h3 id="使用-Table"><a href="#使用-Table" class="headerlink" title="使用 Table"></a>使用 Table</h3><p>为了实现多对多关系的建立，我们需要在<code>User</code>与<code>Group</code>之外，单独再建立一个描述二者之间关系的数据表。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Not Implemented...</span>
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Boolean
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>schema <span class="token keyword">import</span> ForeignKey<span class="token punctuation">,</span> Table
<span class="token keyword">from</span> models<span class="token punctuation">.</span>database <span class="token keyword">import</span> Base

UserGroupAssociation <span class="token operator">=</span> Table<span class="token punctuation">(</span><span class="token string">"account_user_group"</span><span class="token punctuation">,</span> Base<span class="token punctuation">.</span>metadata<span class="token punctuation">,</span>
                             Column<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'User.id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                             Column<span class="token punctuation">(</span><span class="token string">'group'</span><span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'Group.id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"account_users"</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    password <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
    is_active <span class="token operator">=</span> Column<span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    groups <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"Group"</span><span class="token punctuation">,</span> secondary<span class="token operator">=</span>UserGroupAssociation<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Group</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"account_groups"</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
    is_active <span class="token operator">=</span> Column<span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    users <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">,</span> secondary<span class="token operator">=</span>UserGroupAssociation<span class="token punctuation">)</span>    </code></pre>
<p>然后，我们只需要再使用<code>back_populates</code>或者<code>back_ref</code>进行双边关系绑定就好了。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Boolean
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>schema <span class="token keyword">import</span> ForeignKey<span class="token punctuation">,</span> Table
<span class="token keyword">from</span> models<span class="token punctuation">.</span>database <span class="token keyword">import</span> Base

UserGroupAssociation <span class="token operator">=</span> Table<span class="token punctuation">(</span><span class="token string">"account_user_group"</span><span class="token punctuation">,</span> Base<span class="token punctuation">.</span>metadata<span class="token punctuation">,</span>
                             Column<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'User.id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                             Column<span class="token punctuation">(</span><span class="token string">'group'</span><span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'Group.id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"account_users"</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    password <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
    is_active <span class="token operator">=</span> Column<span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    groups <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"Group"</span><span class="token punctuation">,</span> secondary<span class="token operator">=</span>UserGroupAssociation<span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">"users"</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Group</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"account_groups"</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
    is_active <span class="token operator">=</span> Column<span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    users <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">,</span> secondary<span class="token operator">=</span>UserGroupAssociation<span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">"groups"</span><span class="token punctuation">)</span></code></pre>
<h3 id="使用-Association-类-Optional"><a href="#使用-Association-类-Optional" class="headerlink" title="使用 Association 类 (Optional)"></a>使用 Association 类 (Optional)</h3><p>我们可以使用一个新类来存储数据关系。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Boolean
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>schema <span class="token keyword">import</span> ForeignKey
<span class="token keyword">from</span> models<span class="token punctuation">.</span>database <span class="token keyword">import</span> Base

<span class="token keyword">class</span> <span class="token class-name">UserGroupAssociation</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"account_user_group"</span>
    user <span class="token operator">=</span> Column<span class="token punctuation">(</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'User.id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    group <span class="token operator">=</span> Column<span class="token punctuation">(</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'Group.id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    role <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"account_users"</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    password <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
    is_active <span class="token operator">=</span> Column<span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    groups <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"UserGroupAssociation"</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Group</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">"account_groups"</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
    is_active <span class="token operator">=</span> Column<span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    users <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">"UserGroupAssociation"</span><span class="token punctuation">)</span></code></pre>
<h2 id="总结-Conclusion"><a href="#总结-Conclusion" class="headerlink" title="总结 Conclusion"></a>总结 Conclusion</h2><p><code>SQLAlchemy</code> 是一个 Python 的 ORM 管理包，可以协助 API 及后端的开发。</p>
<p>在一对一，一对多，多对一关系中，数据关系的建立主要是通过外键<code>Foreign Key</code>来实现的。</p>
<p>而在多对多的关系中，数据关系主要是通过建立新数据表<code>Association</code>来存储的。</p>
<p>为了建立能够双向更新的数据关系，<code>back_populates</code>和<code>back_ref</code>是不可或缺的。</p>
<h2 id="参考资料-Reference"><a href="#参考资料-Reference" class="headerlink" title="参考资料 Reference"></a>参考资料 Reference</h2><ul>
<li><a href="https://docs.sqlalchemy.org/en/14/orm/basic_relationships.html#one-to-many">https://docs.sqlalchemy.org/en/14/orm/basic_relationships.html#one-to-many</a></li>
<li><a href="https://stackoverflow.com/questions/39869793/when-do-i-need-to-use-sqlalchemy-back-populates">https://stackoverflow.com/questions/39869793/when-do-i-need-to-use-sqlalchemy-back-populates</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/后端</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>对象关系</tag>
      </tags>
  </entry>
  <entry>
    <title>Continue blogging, 2022!</title>
    <url>/update-2022/</url>
    <content><![CDATA[<p>写于 2022/1/3，考完 DSA 之后的一天。</p>
<p>既然氪金买了自己的服务器，虽然博客还是放在 GitHub Pages 上，但是想了想还是好好整整自己的博客吧。</p>
<p>（这两句话之前好像没有什么因果关系</p>
<a id="more"></a>
<h2 id="初步规划"><a href="#初步规划" class="headerlink" title="初步规划"></a>初步规划</h2><ul>
<li>魔改页面模板的源码<ul>
<li>修改文章的摘要摘取机制</li>
<li>增加背景图片</li>
</ul>
</li>
<li>翻一遍站点的配置文件</li>
<li>SEO</li>
<li>侧边栏及导航栏管理<ul>
<li>友链</li>
<li>社交链接</li>
<li>分类</li>
<li>关于</li>
</ul>
</li>
<li>更改文章的标签和分类机制，对所有文章做一遍清洗，适当拆分/合并<ul>
<li>分类应有一级分类 “/技术” “/日常” 和其下的二级分类 “/技术/Linux” “/技术/Python应用”</li>
<li>标签应侧重于体现文章的关键词</li>
</ul>
</li>
<li>写一些新博客<ul>
<li>将一些总结性的内容放到博客上</li>
<li>写一些新内容</li>
</ul>
</li>
</ul>
<h2 id="更新实况"><a href="#更新实况" class="headerlink" title="更新实况"></a>更新实况</h2><h3 id="2022-1-10"><a href="#2022-1-10" class="headerlink" title="2022/1/10"></a>2022/1/10</h3><ul>
<li>洗了一部分博客的文章，进行标签和分类更改</li>
<li>更改了 butterfly 有 bug 的博客页面 head 生成机制</li>
<li>更改了摘要生成机制</li>
<li>更改页面字体大小</li>
</ul>
<p>晚上：</p>
<ul>
<li>博客文章分类基本整理完成</li>
<li>大致做了下 SEO4</li>
<li>写了 About 页面</li>
<li>重写了 Friends 页面</li>
<li>应该差不多啦w</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
        <category>日志/更新记录</category>
      </categories>
      <tags>
        <tag>站点日志</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 配置指北</title>
    <url>/vscode/</url>
    <content><![CDATA[<p>VSCode 是一款<strong>轻量级</strong>的<strong>代码编辑器</strong>，可以通过安装各种各样不同<strong>扩展</strong>的方式来实现开发者所需要的功能。</p>
<blockquote>
<p>区分：代码编辑器（Editor）与集成开发环境（IDE, Integrated Development Environment）</p>
<p>代码编辑器事实上我们可以看成是一个记事本（没错，如果是 Windows 用户，就是你按下 Win+R 输入 notepad 回车之后的那个记事本），其最基本的功能是文档编辑。不过之所以将其称为是<strong>代码编辑器</strong>，是因为它虽然继承自一般的文档编辑器，又具备了一些一般的文档编辑器所不具备的功能。具体来说，例如自动语法高亮，自动补全，甚至是自动代码重构等等。</p>
<p>集成开发环境（IDE）是一种用于构建应用程序的软件，<strong>可将常用的开发人员工具合并到单个图形用户界面</strong>（GUI）中。具体来说，我们只需要简单的点击按钮，可能就可以完成程序的编译、链接、运行、调试等等工作。而这些工作在最初都是需要人手工在命令行中完成的。我们在《程序设计基础》课程中最初使用的 Dev-C++ 便是一个集成开发环境。</p>
</blockquote>
<p>我们今天要介绍的 VSCode 是一款轻量级的<strong>代码编辑器</strong>。如果没有各种扩展插件的支持的话，可能我们只能把它称作是大号的 Notepad++，而正是因为社区中各种各样的扩展，VSCode 才得以展现其强大。</p>
<p><img src="https://s2.loli.net/2022/02/09/psKk8yJ2CxMic1O.png" alt="image-20220209114623794"></p>
<p>本文我们介绍 VSCode 的基本配置，重点在于介绍一些未来可能会用到的扩展插件。按照本文的流程完成后，你应该等效地完成了足以应对《面向对象程序设计基础》课程中的代码的集成开发环境的配置。此外，我们还会介绍一些基本的调试方法，而这恰恰是 VSCode 比 Dev-C++ 在现阶段不知道高到哪里去的地方。</p>
<p>事实上，在未来，我们可以用 VSCode 配置 Python 开发环境，配置软件工程课程中所需要的框架的开发环境，而这些都是通过“扩展”（Extension）来实现的。</p>
<a id="more"></a>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul>
<li>了解一个 C++ 程序从源代码到可执行程序中发生了编译、链接这两步操作（《程序设计基础》大作业中会有此部分的讲解）</li>
<li>动手能力</li>
</ul>
<h2 id="下载与运行"><a href="#下载与运行" class="headerlink" title="下载与运行"></a>下载与运行</h2><ul>
<li>打开 VSCode 官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li>
<li>点击大大的 Download 按钮（如果是 Windows 64 位用户可以点击下拉框选择 x64 安装包版本）</li>
<li>进行安装或解压缩（注意路径中不能存在任何中文字符，推荐仅用字母和数字）</li>
<li>到你安装 VSCode 的目录下，新建 <code>data</code> 文件夹</li>
</ul>
<blockquote>
<p>这里我们新建 <code>data</code> 文件夹后，之后 VSCode 运行时的扩展插件和用户数据便都会存放在 <code>data</code> 文件夹下，这样可以在一定程度上避免系统盘容量占用的问题。如果不新建 <code>data</code> 文件夹，那么 VSCode 会将上述插件和用户信息存放在系统盘的用户目录下。</p>
<p><img src="https://s2.loli.net/2022/02/09/IsPShQ2nLyqmwH8.png" alt="image-20220209213021194"></p>
</blockquote>
<h2 id="C-相关开发环境配置"><a href="#C-相关开发环境配置" class="headerlink" title="C++ 相关开发环境配置"></a>C++ 相关开发环境配置</h2><h3 id="环境变量与-Mingw64"><a href="#环境变量与-Mingw64" class="headerlink" title="环境变量与 Mingw64"></a>环境变量与 Mingw64</h3><p>我们可以先打开终端（Windows 用户请使用 Win+R，输入 <code>cmd</code>），尝试输入：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">g++ --version</code></pre>
<p>如果你的终端返回了 <code>g++</code> 的版本信息，恭喜，您 C++ 编译器的环境变量配置正确，可以跳过这一小节。当然，如果想更加详细地了解环境变量是什么，可以继续阅读这一小节。</p>
<p>而如果返回：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token string">'g++'</span> 不是内部或外部命令，也不是可运行的程序
或批处理文件。</code></pre>
<p>那么则说明你的终端不知道 <code>g++</code> 是什么命令。我们接下来将首先讲解环境变量是什么，然后再为大家讲述该怎么配置环境变量。</p>
<ul>
<li>什么是环境变量？</li>
</ul>
<p>当你的 Shell 在执行命令时，会尝试在<strong>一系列路径</strong>下搜索同名的可执行文件。这一系列路径我们就称作是环境变量。</p>
<p>Windows 用户可以在终端中输入 path 来查看当前环境变量（由于我进行过一系列配置，所以其输出结果可能与你的不同）：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">D:<span class="token punctuation">\</span>Coding<span class="token operator">></span>path
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>D:<span class="token punctuation">\</span>Anaconda<span class="token punctuation">;</span>D:<span class="token punctuation">\</span>Anaconda<span class="token punctuation">\</span>Library<span class="token punctuation">\</span>mingw-w64<span class="token punctuation">\</span>bin<span class="token punctuation">;</span>D:<span class="token punctuation">\</span>Anaconda<span class="token punctuation">\</span>Library<span class="token punctuation">\</span>usr<span class="token punctuation">\</span>bin<span class="token punctuation">;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre>
<p>Linux 用户可以通过使用 <code>echo $PATH</code> 来查看自己的环境变量：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">c7w@cc7w <span class="token operator">></span> /mnt/d/Coding <span class="token operator">></span> <span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span>
/home/c7w/.local/lib/python3.8/site-packages:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/mnt/d/Anaconda:/mnt/d/Anaconda/Library/mingw-w64/bin:/mnt/d/Anaconda/Library/usr/bin:/mnt/d/Anaconda/Library/bin:/mnt/d/Anaconda/Scripts:/mnt/f/VM/bin/:/mnt/c/Program Files <span class="token punctuation">(</span>x86<span class="token punctuation">)</span>/Common Files/Intel/Shared Libraries/redist/intel64/compiler:/mnt/c/Program Files/Common Files/Oracle/Java/javapath:<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre>
<p>没错，就是这一系列文件夹。回忆我们刚才执行 <code>g++ --version</code> 命令的时候，我们的终端会在这一系列文件夹下为我们寻找叫做 <code>g++</code> 的可执行文件。如果找到了名为 <code>g++</code> 的可执行文件，我们的终端就会将参数传入，将其执行；而如果我们的终端没有找到，那么就会向我们报告“未知命令”。</p>
<p>我们刚刚已经理解了“环境变量（Path）”的运行逻辑，接下来我们讲解如何进行环境变量的配置。`</p>
<p>对于 Windows 用户，请按下 Windows + S 打开搜索框，在其中输入 <code>path</code>，然后选择”编辑系统环境变量”，进而选择“环境变量”，然后选择“系统变量”中的 Path 字段，双击打开后即可配置。</p>
<p><img src="https://s2.loli.net/2022/02/09/L9DhPnOjNZ58gCV.png" alt="image-20220209214212982"></p>
<p>对于 Linux 用户，环境变量是绑定在你的 Shell 上的，不同的 Shell 有不同的配置方式。这里我们提供一个<a href="https://www.cnblogs.com/youyoui/p/10680329.html">链接</a>帮助您了解环境变量的相关配置。</p>
<ul>
<li>什么是 Mingw64？</li>
</ul>
<blockquote>
<p>MinGW 的全称是：Minimalist GNU on Windows。</p>
<p>它实际上是将经典的开源 C 语言编译器 GCC 移植到了 Windows 平台下，并且包含了 Win32API，因此可以将源代码编译为可在 Windows 中运行的可执行程序。而且还可以使用一些 Windows 不具备的，Linux平台下的开发工具。</p>
<p>一句话来概括：MinGW 就是 GCC 的 Windows 版本。这是将你写的 C/C++ 语言的源代码编译成汇编代码，进而链接成可执行文件的工具。之前我们的 Dev-C++ 事实上也集成了这个工具。</p>
</blockquote>
<p>我们下载官方的安装工具（<a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe">链接</a>），下载完成后右键以管理员身份运行，<code>Architecture</code> 中 <code>i686</code> 是针对于 32 位系统，<code>x86_64</code> 针对于 64 位系统，其他不用修改，进入下一步选择安装目录即可。然后即可等待安装程序下载并进行安装。</p>
<p>然后，我们需要进行环境变量配置。进入 <code>Mingw64 的安装路径/mingw64/bin/</code>，我们可以看到 <code>gcc</code>，<code>g++</code> 这些我们熟悉的可执行文件。<strong>然后我们需要做的就是将这个文件夹添加至环境变量中。</strong></p>
<p>然后我们就可以打开终端，输入 <code>g++</code> 验证环境变量是否配置成功。（请注意，在环境变量配置后需要重启终端才能生效）</p>
<h3 id="Make"><a href="#Make" class="headerlink" title="Make"></a>Make</h3><p>同时，针对于我们之后课上所需要用到的 <code>make</code> 命令，我们可以将同目录下的 <code>mingw32-make.exe</code> 复制一份，改名为 <code>make.exe</code>，这样我们也能正常使用 <code>make</code> 命令了。</p>
<p>由于 Linux 平台自带了 <code>gcc</code> 和 <code>make</code> 等等编译工具，所以这里不需要进行额外的配置。</p>
<h2 id="扩展插件的安装"><a href="#扩展插件的安装" class="headerlink" title="扩展插件的安装"></a>扩展插件的安装</h2><p>我们打开 VSCode，先简单介绍下界面及其功能：</p>
<p><img src="https://s2.loli.net/2022/02/09/pM6kzGH4xbIRW5K.png" alt="image-20220209220846472"></p>
<p>红色框是我们当前项目（即文件夹）下的所有文件清单，蓝色框是我们编写代码的地方，绿色框是我们的应用商店。</p>
<p>这里我们推荐几个扩展，在应用商店中搜索即可下载：</p>
<ul>
<li>Chinese (Simplified) Language Pack for Visual Studio Code：语言</li>
<li>Code Runner：调试用</li>
<li>C/C++：支持在 Code 中调试 C/C++ 程序</li>
<li>Remote - SSH：之后进行远程开发会用到，这里不多做介绍</li>
</ul>
<p>在安装了简体中文插件后，我们可以按 <code>Ctrl + Shift + P</code>，打开输入框，输入 <code>Configurate display language</code>，选择中文后重新启动即可。</p>
<h2 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h2><p>如何运行一段代码呢？很简单，我们只需要在<strong>对应的代码界面</strong>按下 <code>F5</code> 或是在菜单栏找到“运行 &gt; 启动调试”，便可以启动调试模式：</p>
<p><img src="https://s2.loli.net/2022/02/09/x6yBiPzfVAQsErZ.png" alt="image-20220209221547145"></p>
<p>在配置中选择 <code>C++ (GDB)</code>，进而选择 <code>g++.exe</code>。</p>
<p>然后我们会发现项目路径下生成了一个 <code>.vscode</code> 文件夹，内含 <code>tasks.json</code> 和 <code>launch.json</code>，这两个文件分别有什么作用我们即将就会进行介绍。</p>
<p><img src="https://s2.loli.net/2022/02/09/pwDenGirIJZdjsv.png" alt="image-20220209221657511"></p>
<p>（你的界面排版可能和我有所不同，不过主要功能是大同小异的，当你熟练运用了 Code 之后你可以自行将这几个框框拖来拖去摆到你觉得舒适的位置）</p>
<p>我们接下来将分单文件项目和多文件项目进行讨论，说明一些在 Code 中调试 C++ 代码的技巧。</p>
<h3 id="单文件项目"><a href="#单文件项目" class="headerlink" title="单文件项目"></a>单文件项目</h3><p>单文件项目指只有一个 cpp 文件的项目，<code>main()</code> 函数的定义就在其中，我们在《程序设计基础》课程的大部分平时作业都是这种项目。</p>
<p>这种项目我们直接按 <code>F5</code> 便可进行运行，其输出结果会在“终端”选项卡中出现。</p>
<p><img src="https://s2.loli.net/2022/02/09/UO5mv1K3VBcN2lL.png" alt="image-20220209222124275"></p>
<p>这是一段演示单向平方和双向平方探测在哈希表中可以占用的位置的示例程序，在这里仅做说明使用，大家不必理解其背后的原理。（事实上你给别人调代码的时候不都是这样嘛，对着看不懂的逻辑满脸黑线.jpeg）</p>
<p>想要在程序运行过程中设置断点，我们只需点击对应的行号：</p>
<p><img src="https://s2.loli.net/2022/02/09/ZVFLrcwSbaOdxTm.png" alt="image-20220209222401148"></p>
<p>在这里设置断点，程序将会在第 30 行执行完成，第 31 行将要执行的时候触发断点，让我们看一看：</p>
<p><img src="https://s2.loli.net/2022/02/09/5tHAOwQBdh1Sqcs.png" alt="image-20220209222500324"></p>
<p>红框，也就是“终端框中，我们的程序输出了前半段运行时产生的 <code>cout</code> 信息。接下来我们将说明该如何查看中间变量：</p>
<p><img src="https://s2.loli.net/2022/02/09/UEioypzr9fa57GK.png" alt="image-20220209222635735"></p>
<p>比如程序在命中这个断点时，我们有以下途径获取中间变量的值：</p>
<p>在黄色框“变量”中，我们可以看到程序自动追溯的局部变量和寄存器值。在蓝色框“监视”中，我们可以自行定义一些需要追溯的变量。在红色框中，我们可以直接输入变量名来查看其对应的值。</p>
<p><img src="https://s2.loli.net/2022/02/09/jAlCZgHIYphwoDv.png" alt="image-20220209222812673"></p>
<p>然后，我们来将目光放在上述这几个按钮身上。</p>
<ul>
<li>继续（F5）按钮将会使程序继续执行，直到命中下一个断点或是到程序结尾。</li>
<li>单步跳过（F10）按钮对于程序来说，如果将要执行的行调用了某些函数，那么将直接将本行执行完毕，进入下一行。</li>
<li>单步调试（F11）按钮对于程序来说，如果将要执行的行调用了某些函数，那么将进入将要执行的函数内部。</li>
<li>停止（Shift+F5）按钮终止当前调试工作。</li>
</ul>
<h3 id="多文件项目"><a href="#多文件项目" class="headerlink" title="多文件项目"></a>多文件项目</h3><p>对于多文件项目的调试来说，我们重点关注点在于 <code>.vscode</code> 下两个文件的配置。</p>
<p>首先我们将我们的示例程序修改为多文件项目：</p>
<p><img src="https://s2.loli.net/2022/02/09/IBLJmUG7NCy1ikv.png" alt="image-20220209223422595"></p>
<p>我们采用最简单的方式，将我们的单文件项目魔改成多文件。</p>
<p>我们回忆如果使用命令行，该如何将我们的程序编译：</p>
<pre class="language-bash'" data-language="bash'"><code class="language-bash'">g++ hash.cpp another.cpp -o main</code></pre>
<p>没错，我们现在配置 Code 使得其在“生成目标文件”任务中执行上述命令。</p>
<p><code>tasks.json</code> 负责可执行文件的生成，我们主要进行如下修改：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span> <span class="token comment">// cppbuild -> shell</span>
            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"C/C++: g++.exe 生成活动文件"</span><span class="token punctuation">,</span>
            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"D:\\Mingw\\mingw64\\bin\\g++.exe"</span><span class="token punctuation">,</span>
            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">"-g"</span><span class="token punctuation">,</span>
                <span class="token string">"hash.cpp"</span><span class="token punctuation">,</span> <span class="token comment">// $&#123;file&#125; -> your source code list</span>
                <span class="token string">"another.cpp"</span><span class="token punctuation">,</span>
                <span class="token string">"-o"</span><span class="token punctuation">,</span>
                <span class="token string">"$&#123;fileDirname&#125;\\main.exe"</span> <span class="token comment">// main.exe</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;"</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">"$gcc"</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>
                <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token string">"调试器生成的任务。"</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span>
<span class="token punctuation">&#125;</span></code></pre>
<p><code>launch.json</code> 主要负责调试目标程序，我们做以下修改：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token comment">// 使用 IntelliSense 了解相关属性。 </span>
    <span class="token comment">// 悬停以查看现有属性的描述。</span>
    <span class="token comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span>
    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>
    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"g++.exe - 生成和调试活动文件"</span><span class="token punctuation">,</span>
            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>
            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>
            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;\\main.exe"</span><span class="token punctuation">,</span> <span class="token comment">// main.exe</span>
            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;"</span><span class="token punctuation">,</span>
            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>
            <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"D:\\Mingw\\mingw64\\bin\\gdb.exe"</span><span class="token punctuation">,</span>
            <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"为 gdb 启用整齐打印"</span><span class="token punctuation">,</span>
                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>
                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"C/C++: g++.exe 生成活动文件"</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>然后我们就可以愉快地调试多文件项目了。</p>
<h2 id="后续学习"><a href="#后续学习" class="headerlink" title="后续学习"></a>后续学习</h2><ul>
<li>自行研究 Remote-SSH 的使用方法，如何连接到外部服务器进行开发</li>
<li>自行研究 Python 配置调试环境的方法</li>
<li>在《软件工程》课程中，使用 Code Prettier 插件 + ESLint 规范项目</li>
</ul>
<h2 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h2><ul>
<li><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/76613134">https://zhuanlan.zhihu.com/p/76613134</a></li>
<li><a href="https://blog.csdn.net/linjf520/article/details/108559210">https://blog.csdn.net/linjf520/article/details/108559210</a></li>
</ul>
<p>Tips: 配置开发环境往往是在学习的过程中最恼人的一件事，但是不用心急，常言道“良好的开端是成功的一半”。如果实在遇到配置问题，在进行搜索无法解决后，建议向同年级/学长/答疑坊进行求助。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/综合</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL 2 的升级与 USB 调试的配置</title>
    <url>/wsl-update-config/</url>
    <content><![CDATA[<p><strong>什么是 WSL?</strong></p>
<p>即 <strong>Windows Subsystem for Linux</strong> 的缩写.</p>
<blockquote>
<p><strong>Windows Subsystem for Linux (WSL)</strong> is a compatibility layer for running Linux binary executables natively on Windows 10… (Excerpted from Wikipedia)</p>
</blockquote>
<p>也就是说，WSL 是安装在 Windows 系统上的 Linux 虚拟系统。</p>
<p>在 OOP 课程中我们将会初步接触到该系统的安装与使用。</p>
<p>本篇主要收集了 WSL 升级的方法和对于 Android 开发调试中的 USB 调试的实现过程。</p>
<p>此外，一旦完成了 WSL 的升级，我们还可以进行 Docker 部署等等进阶操作…</p>
<a id="more"></a>
<h2 id="WSL-2-的安装"><a href="#WSL-2-的安装" class="headerlink" title="WSL 2 的安装"></a>WSL 2 的安装</h2><p>WSL 的安装过程我们这里略去.</p>
<p>(1) 开启支持 WSL 2 的可选组件</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</code></pre>
<p>(2) 安装 Kernel update package</p>
<p>Download at: <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">https://docs.microsoft.com/en-us/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package</a></p>
<p>(3) 输入命令 进行转换</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># List all the distributions</span>
wsl --list
<span class="token comment"># Set version to WSL 2</span>
wsl --set-version <span class="token operator">&lt;</span>Distro<span class="token operator">></span> <span class="token number">2</span>
<span class="token comment"># Set default version to 2</span>
wsl --set-default-version <span class="token number">2</span>

<span class="token comment"># List all the distributions with verbose information, namely their versions</span>
wsl --list -v</code></pre>
<p>等了好久，大概两关方舟吧，就转换好了.</p>
<blockquote>
<p>[Interlude] 【插曲】</p>
<p>第一次运行时中间有个报错：<em>WSL2 请启用虚拟机平台 Windows 功能并确保在 BIOS 中启用虚拟化</em>.</p>
<p>进行了一次面向CSDN的问题解决，发现问题在于原来安装安卓虚拟机（<s>方舟挂机专用引擎</s>）的时候对某项设置进行了调整.</p>
<p><a href="https://blog.csdn.net/weixin_43271225/article/details/115698940">https://blog.csdn.net/weixin_43271225/article/details/115698940</a></p>
<p>对应的命令执行过之后，重新 <code>set-version</code> 就可以了.</p>
<p>但是，但是，这样做的问题在于，方舟挂机引擎打不开了.</p>
<p>市面上大部分安卓模拟器的通用版本和 Hyper V 还是不兼容的.</p>
<p>于是又进行了一次面向 Google 的问题解决，最终选用 Bluestacks 国际版提供的 HyperV 版本.</p>
<p><s>开发个 APP 不能老婆不养了啊对不对</s></p>
<p><s>昨天修了一个晚上 老婆材料挂机引擎还是没修好 先继续做App开发吧 大不了做完关掉HyperV（划掉</s></p>
<p>进度：最后改用了 Mumu 黄.</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://dowww.spencerwoo.com/1-preparations/1-0-intro.html">https://dowww.spencerwoo.com/1-preparations/1-0-intro.html</a></li>
<li><a href="https://dowww.spencerwoo.com/1-preparations/1-1-installation.html#wsl-2-%E7%9A%84%E5%AE%89%E8%A3%85">https://dowww.spencerwoo.com/1-preparations/1-1-installation.html#wsl-2-%E7%9A%84%E5%AE%89%E8%A3%85</a></li>
<li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10#step-2---check-requirements-for-running-wsl-2">https://docs.microsoft.com/en-us/windows/wsl/install-win10#step-2---check-requirements-for-running-wsl-2</a></li>
<li><a href="https://developer.android.com/studio/command-line/adb">https://developer.android.com/studio/command-line/adb</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/Linux</category>
      </categories>
      <tags>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>《动手学深度学习》 Pytorch ver. 阅读后练习</title>
    <url>/dive-into-dl-pytorch-practice/</url>
    <content><![CDATA[<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/cover.png" alt=""></p>
<ul>
<li>《动手学深度学习》原书地址：<a href="https://github.com/d2l-ai/d2l-zh">https://github.com/d2l-ai/d2l-zh</a></li>
<li>《动手学深度学习》(Pytorch ver.)：<a href="https://tangshusen.me/Dive-into-DL-PyTorch/#/">https://tangshusen.me/Dive-into-DL-PyTorch/#/</a></li>
</ul>
<p>知识架构：</p>
<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/book-org.svg" alt="封面"></p>
<p>本文的主要作用是在阅读过程中做一些摘录。对于「机器学习」领域，c7w 虽然曾尝试从各个领域入门，也尝试训过一些模型，但是还是缺少系统性、结构性的学习。希望阅读本书能带来更多的收获吧。</p>
<p>与前面的一些笔记相比，本文更加侧重于「实践」。也就是说切实地提升自己的代码能力。</p>
<p>本部分包含：</p>
<ol>
<li>{Finished} [5-5] 实现一个可以实现表情识别的类 CNN 网络并训练，重点在于造出一个机器学习的框架，然后评估其准确率。</li>
<li>{Finished} [5-11, 5-12] 实现 ResNet 和 DenseNet，注意体会怎样才能使得运算维度匹配。</li>
</ol>
<a id="more"></a>
<h2 id="5-5-CNN"><a href="#5-5-CNN" class="headerlink" title="[5-5] CNN"></a>[5-5] CNN</h2><p>主要是把训练模型的轮子连抄带造写了一遍。</p>
<ul>
<li><code>train.py</code></li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> toolkit<span class="token punctuation">.</span>dataset <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">import</span> torch
<span class="token keyword">from</span> toolkit<span class="token punctuation">.</span>utils <span class="token keyword">import</span> get_device
<span class="token keyword">from</span> toolkit<span class="token punctuation">.</span>net <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> toolkit<span class="token punctuation">.</span>procedure <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment"># By c7w, created on 2022/1/27.</span>

<span class="token triple-quoted-string string">'''
Usage:
+ Define your model in toolkit/net.py
+ Define your dataset in toolkit/dataset.py
+ Define configuration in main.py
'''</span>

device <span class="token operator">=</span> get_device<span class="token punctuation">(</span><span class="token punctuation">)</span>
device <span class="token operator">=</span> <span class="token string">'cpu'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Now on </span><span class="token interpolation"><span class="token punctuation">&#123;</span>device<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

<span class="token comment"># Configuration Here</span>
config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'epochs'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>
    <span class="token string">'batch_size'</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>
    <span class="token comment"># 'optimizer': in training stage</span>
    <span class="token string">'early_stop'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token string">'save_path'</span><span class="token punctuation">:</span> <span class="token string">'save/model2-rms.pth'</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token comment"># Data Preparation Stage</span>
    tr_data <span class="token operator">=</span> Data<span class="token punctuation">(</span><span class="token string">'train'</span><span class="token punctuation">)</span>
    vd_data <span class="token operator">=</span> Data<span class="token punctuation">(</span><span class="token string">'valid'</span><span class="token punctuation">)</span>
    tt_data <span class="token operator">=</span> Data<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>

    tr_set <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>tr_data<span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> drop_last<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    vd_set <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>vd_data<span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> drop_last<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    tt_set <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>tt_data<span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> drop_last<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    
    <span class="token comment"># Training Stage</span>
    model <span class="token operator">=</span> LeNet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
    <span class="token comment"># config['optimizer'] = torch.optim.Adam(model.parameters())</span>
    config<span class="token punctuation">[</span><span class="token string">'optimizer'</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>RMSprop<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    model_loss<span class="token punctuation">,</span> model_loss_record <span class="token operator">=</span> train<span class="token punctuation">(</span>tr_set<span class="token punctuation">,</span> vd_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> config<span class="token punctuation">,</span> device<span class="token punctuation">)</span>

    <span class="token comment"># Test Stage</span>
    <span class="token keyword">del</span> model
    model <span class="token operator">=</span> LeNet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
    model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'save_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    acc <span class="token operator">=</span> test<span class="token punctuation">(</span>tt_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span></code></pre>
<ul>
<li><code>toolkit/dataset.py</code></li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> random
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader
<span class="token keyword">from</span> icecream <span class="token keyword">import</span> ic
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image

<span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode
        data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"./project/data.csv"</span><span class="token punctuation">)</span>
        
        usage <span class="token operator">=</span> <span class="token string">"Test"</span> <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">"test"</span> <span class="token keyword">else</span> <span class="token string">"Training"</span>
        data <span class="token operator">=</span> data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>data<span class="token punctuation">.</span>Usage <span class="token operator">==</span> usage<span class="token punctuation">]</span>
        
        features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        
        <span class="token keyword">for</span> r<span class="token punctuation">,</span> row <span class="token keyword">in</span> data<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            labels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>  <span class="token builtin">int</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'emotion'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
            feature <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span> <span class="token keyword">for</span> number <span class="token keyword">in</span> row<span class="token punctuation">[</span><span class="token string">'pixels'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            features<span class="token punctuation">.</span>append<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>features<span class="token punctuation">,</span> labels<span class="token punctuation">)</span><span class="token punctuation">)</span>
        random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
        
        <span class="token comment"># im = Image.fromarray((self.data[0][0].view(48, 48) * 255).numpy())</span>
        <span class="token comment"># im = im.convert('L')</span>
        <span class="token comment"># ic(self.data[0][0], self.data[0][1])</span>
        <span class="token comment"># im.show()</span>
        
        l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">10</span>
        <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'valid'</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">-</span>l <span class="token punctuation">:</span> <span class="token punctuation">]</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span> <span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> l<span class="token punctuation">]</span>
        
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Reading </span><span class="token interpolation"><span class="token punctuation">&#123;</span>mode<span class="token punctuation">&#125;</span></span><span class="token string"> set finished with </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> samples in total."</span></span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Example:"</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>
        
    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        
    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre>
<ul>
<li><code>toolkit/net.py</code></li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn

<span class="token keyword">class</span> <span class="token class-name">LeNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>LeNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        self<span class="token punctuation">.</span>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            <span class="token comment"># Conv Layer</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            
            nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            
            <span class="token comment"># FC Layer</span>
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        
        self<span class="token punctuation">.</span>Loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">loss</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>Loss<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<ul>
<li><code>toolkit/procedure.py</code></li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>tr_set<span class="token punctuation">,</span> vd_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> config<span class="token punctuation">,</span> device<span class="token punctuation">)</span><span class="token punctuation">:</span>
    max_epoch_count <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'epochs'</span><span class="token punctuation">]</span>
    optimizer <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'optimizer'</span><span class="token punctuation">]</span>

    loss_record <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'train'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
    curr_min_loss <span class="token operator">=</span> <span class="token number">1145141919810.0</span>
    early_stop_cnt <span class="token operator">=</span> <span class="token number">0</span>
    epoch <span class="token operator">=</span> <span class="token number">0</span>
    
    <span class="token keyword">while</span> epoch <span class="token operator">&lt;</span> max_epoch_count<span class="token punctuation">:</span>
        model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> tr_set<span class="token punctuation">:</span>
            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>
            x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
            pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
            
            l <span class="token operator">=</span> model<span class="token punctuation">.</span>loss<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
            l<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>
            
            loss_record<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        valid_mse <span class="token operator">=</span> validate<span class="token punctuation">(</span>vd_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch &#123;:4d&#125; completed, tr_loss = &#123;:.4f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> valid_mse<span class="token punctuation">)</span><span class="token punctuation">)</span>
        
        
        <span class="token keyword">if</span> valid_mse <span class="token operator">&lt;</span> curr_min_loss<span class="token punctuation">:</span>
            <span class="token comment"># Save model if model improved</span>
            curr_min_loss <span class="token operator">=</span> valid_mse
            
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Saving model (epoch = &#123;:4d&#125;, loss = &#123;:.4f&#125;)'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> curr_min_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>
            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">[</span><span class="token string">'save_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Save model to specified path</span>
            early_stop_cnt <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            early_stop_cnt <span class="token operator">+=</span> <span class="token number">1</span>

        epoch <span class="token operator">+=</span> <span class="token number">1</span>
        loss_record<span class="token punctuation">[</span><span class="token string">'valid'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>valid_mse<span class="token punctuation">)</span>
        <span class="token keyword">if</span> early_stop_cnt <span class="token operator">></span> config<span class="token punctuation">[</span><span class="token string">'early_stop'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token comment"># Stop training if your model stops improving for "config['early_stop']" epochs.</span>
            <span class="token keyword">break</span>
    
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Finished training after </span><span class="token interpolation"><span class="token punctuation">&#123;</span>epoch<span class="token punctuation">&#125;</span></span><span class="token string"> epochs.'</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> curr_min_loss<span class="token punctuation">,</span> loss_record

<span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>vd_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">)</span><span class="token punctuation">:</span>
    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    total_loss <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> vd_set<span class="token punctuation">:</span>
        x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
            vd_loss <span class="token operator">=</span> model<span class="token punctuation">.</span>loss<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
        total_loss <span class="token operator">+=</span> vd_loss<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    
    total_loss <span class="token operator">=</span> total_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vd_set<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>              <span class="token comment"># compute averaged loss</span>
    <span class="token keyword">return</span> total_loss

<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>tt_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">)</span><span class="token punctuation">:</span>
    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    total_right <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> tt_set<span class="token punctuation">:</span>
        x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
        
        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>     
            <span class="token keyword">for</span> i<span class="token punctuation">,</span> logit <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>pred<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>logit<span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> total_right <span class="token operator">+=</span> <span class="token number">1</span>
            

    acc <span class="token operator">=</span> total_right <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tt_set<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>              <span class="token comment"># compute averaged loss</span>
    <span class="token keyword">return</span> acc

<span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>tt_set<span class="token punctuation">,</span> model<span class="token punctuation">,</span> device<span class="token punctuation">)</span><span class="token punctuation">:</span>
    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    preds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> x <span class="token keyword">in</span> tt_set<span class="token punctuation">:</span>
        x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
            preds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pred<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    preds <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> preds</code></pre>
<ul>
<li><code>toolkit/utils.py</code></li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch


<span class="token keyword">def</span> <span class="token function">get_device</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span>

<span class="token keyword">def</span> <span class="token function">get_one_hot</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> dim<span class="token punctuation">)</span><span class="token punctuation">:</span>
    t <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span>dim<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>
    t<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> t</code></pre>
<ul>
<li>训练结果</li>
</ul>
<pre class="language-none"><code class="language-none">Now on cpu
Reading train set finished with 25839 samples in total.
Example:
(tensor([[[0.2000, 0.1922, 0.2118,  ..., 0.1804, 0.2392, 0.2863],
         [0.1922, 0.1843, 0.1647,  ..., 0.2392, 0.2078, 0.2588],
         [0.1961, 0.1804, 0.1608,  ..., 0.2039, 0.1569, 0.2000],
         ...,
         [0.3098, 0.1961, 0.2353,  ..., 0.2980, 0.3255, 0.3412],
         [0.2706, 0.1647, 0.2471,  ..., 0.3098, 0.3294, 0.3373],
         [0.2392, 0.1686, 0.2157,  ..., 0.3255, 0.3333, 0.3490]]]), 3)


Reading valid set finished with 2870 samples in total.
Example:
(tensor([[[0.1725, 0.1333, 0.1451,  ..., 0.3176, 0.3216, 0.4510],
         [0.1333, 0.1333, 0.1255,  ..., 0.3137, 0.3216, 0.4471],
         [0.1333, 0.1216, 0.1137,  ..., 0.3137, 0.3216, 0.4471],
         ...,
         [0.3922, 0.3255, 0.4039,  ..., 0.4000, 0.4510, 0.5137],
         [0.3882, 0.3098, 0.3961,  ..., 0.3843, 0.4549, 0.5333],
         [0.4000, 0.2745, 0.3725,  ..., 0.3961, 0.4392, 0.5137]]]), 3)


Reading test set finished with 6461 samples in total.
Example:
(tensor([[[0.7373, 0.7608, 0.7255,  ..., 0.8549, 0.8157, 0.8275],
         [0.7529, 0.7608, 0.7137,  ..., 0.8588, 0.8314, 0.8157],
         [0.7804, 0.7451, 0.7137,  ..., 0.8510, 0.8353, 0.8157],
         ...,
         [0.4784, 0.5765, 0.5804,  ..., 0.6863, 0.5451, 0.4235],
         [0.2549, 0.3373, 0.4588,  ..., 0.5804, 0.5373, 0.5608],
         [0.3608, 0.3961, 0.6275,  ..., 0.5569, 0.3176, 0.6314]]]), 3)


Epoch    1 completed, tr_loss &#x3D; 1.4529
Saving model (epoch &#x3D;    1, loss &#x3D; 1.4529)
Epoch    2 completed, tr_loss &#x3D; 1.2995
Saving model (epoch &#x3D;    2, loss &#x3D; 1.2995)
Epoch    3 completed, tr_loss &#x3D; 1.1131
Saving model (epoch &#x3D;    3, loss &#x3D; 1.1131)
Epoch    4 completed, tr_loss &#x3D; 1.0275
Saving model (epoch &#x3D;    4, loss &#x3D; 1.0275)
Epoch    5 completed, tr_loss &#x3D; 1.1062
Epoch    6 completed, tr_loss &#x3D; 0.8805
Saving model (epoch &#x3D;    6, loss &#x3D; 0.8805)
Epoch    7 completed, tr_loss &#x3D; 0.7520
Saving model (epoch &#x3D;    7, loss &#x3D; 0.7520)
Epoch    8 completed, tr_loss &#x3D; 0.8390
Epoch    9 completed, tr_loss &#x3D; 0.8715
Epoch   10 completed, tr_loss &#x3D; 0.6758
Saving model (epoch &#x3D;   10, loss &#x3D; 0.6758)
Epoch   11 completed, tr_loss &#x3D; 0.6634
Saving model (epoch &#x3D;   11, loss &#x3D; 0.6634)
Epoch   12 completed, tr_loss &#x3D; 0.5063
Saving model (epoch &#x3D;   12, loss &#x3D; 0.5063)
Epoch   13 completed, tr_loss &#x3D; 0.5055
Saving model (epoch &#x3D;   13, loss &#x3D; 0.5055)
Epoch   14 completed, tr_loss &#x3D; 0.6266
Epoch   15 completed, tr_loss &#x3D; 0.4653
Saving model (epoch &#x3D;   15, loss &#x3D; 0.4653)
Epoch   16 completed, tr_loss &#x3D; 0.4373
Saving model (epoch &#x3D;   16, loss &#x3D; 0.4373)
Epoch   17 completed, tr_loss &#x3D; 0.3892
Saving model (epoch &#x3D;   17, loss &#x3D; 0.3892)
Epoch   18 completed, tr_loss &#x3D; 0.4048
Epoch   19 completed, tr_loss &#x3D; 0.4376
Epoch   20 completed, tr_loss &#x3D; 0.3657
Saving model (epoch &#x3D;   20, loss &#x3D; 0.3657)
Epoch   21 completed, tr_loss &#x3D; 0.3765
Epoch   22 completed, tr_loss &#x3D; 0.3329
Saving model (epoch &#x3D;   22, loss &#x3D; 0.3329)
Epoch   23 completed, tr_loss &#x3D; 0.3969
Epoch   24 completed, tr_loss &#x3D; 0.3382
Epoch   25 completed, tr_loss &#x3D; 0.3283
Saving model (epoch &#x3D;   25, loss &#x3D; 0.3283)
Epoch   26 completed, tr_loss &#x3D; 0.3192
Saving model (epoch &#x3D;   26, loss &#x3D; 0.3192)
Epoch   27 completed, tr_loss &#x3D; 0.3671
Epoch   28 completed, tr_loss &#x3D; 0.3457
Epoch   29 completed, tr_loss &#x3D; 0.3352
Epoch   30 completed, tr_loss &#x3D; 0.3461
Epoch   31 completed, tr_loss &#x3D; 0.3258
Epoch   32 completed, tr_loss &#x3D; 0.3097
Saving model (epoch &#x3D;   32, loss &#x3D; 0.3097)
Epoch   33 completed, tr_loss &#x3D; 0.3976
Epoch   34 completed, tr_loss &#x3D; 0.3364
Epoch   35 completed, tr_loss &#x3D; 0.3275
Epoch   36 completed, tr_loss &#x3D; 0.3179
Epoch   37 completed, tr_loss &#x3D; 0.3415
Epoch   38 completed, tr_loss &#x3D; 0.3471
Epoch   39 completed, tr_loss &#x3D; 0.3302
Epoch   40 completed, tr_loss &#x3D; 0.3407
Epoch   41 completed, tr_loss &#x3D; 0.4045
Epoch   42 completed, tr_loss &#x3D; 0.3310
Epoch   43 completed, tr_loss &#x3D; 0.3626
Epoch   44 completed, tr_loss &#x3D; 0.3288
Epoch   45 completed, tr_loss &#x3D; 0.3600
Epoch   46 completed, tr_loss &#x3D; 0.3866
Epoch   47 completed, tr_loss &#x3D; 0.3613
Epoch   48 completed, tr_loss &#x3D; 0.3402
Epoch   49 completed, tr_loss &#x3D; 0.3562
Epoch   50 completed, tr_loss &#x3D; 0.3674
Epoch   51 completed, tr_loss &#x3D; 0.3733
Epoch   52 completed, tr_loss &#x3D; 0.3461
Epoch   53 completed, tr_loss &#x3D; 0.3542
Finished training after 53 epochs.
0.5304132487231079</code></pre>
<h2 id="Resnet-amp-DenseNet-5-11-5-12"><a href="#Resnet-amp-DenseNet-5-11-5-12" class="headerlink" title="Resnet &amp; DenseNet (5-11, 5-12)"></a>Resnet &amp; DenseNet (5-11, 5-12)</h2><ul>
<li><code>main.py</code></li>
</ul>
<p>随机生成数据，模拟 <code>batch_size = 4</code>，<code>input_channels = 3</code>, <code>pic_size = 96x96</code> 的情况，然后将其丢入实现的网络中查看运行结果，没有发生错误则说明维度对应正确。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> ResNet <span class="token keyword">import</span> ResNet
<span class="token keyword">from</span> DenseNet <span class="token keyword">import</span> DenseNet
<span class="token keyword">from</span> icecream <span class="token keyword">import</span> ic <span class="token keyword">as</span> <span class="token keyword">print</span>

data <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># print(data)</span>

<span class="token comment"># net = ResNet(3)</span>
net <span class="token operator">=</span> DenseNet<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span>
<span class="token comment"># print(net(data))</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre>
<ul>
<li><code>ResNet.py</code></li>
</ul>
<p>本文件中实现了 ResNet-18.</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn

<span class="token comment"># Implementation of ResNet-18</span>

<span class="token keyword">class</span> <span class="token class-name">Residual</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    <span class="token comment"># Stride: to control the height/width of the manipulating data</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
        
        <span class="token comment"># If in_channels != out_channels</span>
        <span class="token comment"># Then use 1x1 conv layer to change channel size</span>
        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">)</span> <span class="token keyword">if</span> in_channels <span class="token operator">!=</span> out_channels <span class="token keyword">else</span> <span class="token boolean">None</span>
        
        self<span class="token punctuation">.</span>bn <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">)</span>
        
        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        y <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        y <span class="token operator">=</span> self<span class="token punctuation">.</span>bn<span class="token punctuation">(</span>y<span class="token punctuation">)</span>
        y <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>y<span class="token punctuation">)</span>
        y <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>y<span class="token punctuation">)</span>
        y <span class="token operator">=</span> self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>y<span class="token punctuation">)</span>
        
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>conv3<span class="token punctuation">:</span>
            x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">resnet_block</span><span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> num_residuals<span class="token punctuation">,</span> first_block<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    blk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_residuals<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token keyword">not</span> first_block<span class="token punctuation">:</span>
            blk<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Residual<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            blk<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Residual<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>blk<span class="token punctuation">)</span>    

<span class="token keyword">class</span> <span class="token class-name">ResNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>start <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>residual <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleList<span class="token punctuation">(</span><span class="token punctuation">[</span>
            resnet_block<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            resnet_block<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            resnet_block<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            resnet_block<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>output <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>

    
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        old_shape <span class="token operator">=</span> x<span class="token punctuation">.</span>shape
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>start<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">for</span> rb <span class="token keyword">in</span> self<span class="token punctuation">.</span>residual<span class="token punctuation">:</span>
            x <span class="token operator">=</span> rb<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> x<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>old_shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>output<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x</code></pre>
<pre class="language-none"><code class="language-none">ic| net: ResNet(
           (start): Sequential(
             (0): Conv2d(3, 64, kernel_size&#x3D;(7, 7), stride&#x3D;(2, 2), padding&#x3D;(3, 3))
             (1): BatchNorm2d(64, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
             (2): ReLU()
             (3): MaxPool2d(kernel_size&#x3D;3, stride&#x3D;2, padding&#x3D;1, dilation&#x3D;1, ceil_mode&#x3D;False)
           )
           (residual): ModuleList(
             (0): Sequential(
               (0): Residual(
                 (conv1): Conv2d(64, 64, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 (conv2): Conv2d(64, 64, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 (bn): BatchNorm2d(64, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (bn2): BatchNorm2d(64, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (relu): ReLU()
               )
               (1): Residual(
                 (conv1): Conv2d(64, 64, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 (conv2): Conv2d(64, 64, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 (bn): BatchNorm2d(64, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (bn2): BatchNorm2d(64, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (relu): ReLU()
               )
             )
             (1): Sequential(
               (0): Residual(
                 (conv1): Conv2d(64, 128, kernel_size&#x3D;(3, 3), stride&#x3D;(2, 2), padding&#x3D;(1, 1))
                 (conv2): Conv2d(128, 128, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 (conv3): Conv2d(64, 128, kernel_size&#x3D;(1, 1), stride&#x3D;(2, 2))
                 (bn): BatchNorm2d(128, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (bn2): BatchNorm2d(128, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (relu): ReLU()
               )
               (1): Residual(
                 (conv1): Conv2d(128, 128, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 (conv2): Conv2d(128, 128, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 (bn): BatchNorm2d(128, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (bn2): BatchNorm2d(128, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (relu): ReLU()
               )
             )
             (2): Sequential(
               (0): Residual(
                 (conv1): Conv2d(128, 256, kernel_size&#x3D;(3, 3), stride&#x3D;(2, 2), padding&#x3D;(1, 1))
                 (conv2): Conv2d(256, 256, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 (conv3): Conv2d(128, 256, kernel_size&#x3D;(1, 1), stride&#x3D;(2, 2))
                 (bn): BatchNorm2d(256, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (bn2): BatchNorm2d(256, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (relu): ReLU()
               )
               (1): Residual(
                 (conv1): Conv2d(256, 256, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 (conv2): Conv2d(256, 256, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 (bn): BatchNorm2d(256, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (bn2): BatchNorm2d(256, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (relu): ReLU()
               )
             )
             (3): Sequential(
               (0): Residual(
                 (conv1): Conv2d(256, 512, kernel_size&#x3D;(3, 3), stride&#x3D;(2, 2), padding&#x3D;(1, 1))
                 (conv2): Conv2d(512, 512, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 (conv3): Conv2d(256, 512, kernel_size&#x3D;(1, 1), stride&#x3D;(2, 2))
                 (bn): BatchNorm2d(512, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (bn2): BatchNorm2d(512, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (relu): ReLU()
               )
               (1): Residual(
                 (conv1): Conv2d(512, 512, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 (conv2): Conv2d(512, 512, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 (bn): BatchNorm2d(512, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (bn2): BatchNorm2d(512, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                 (relu): ReLU()
               )
             )
           )
           (output): Sequential(
             (0): Flatten(start_dim&#x3D;1, end_dim&#x3D;-1)
             (1): Linear(in_features&#x3D;512, out_features&#x3D;10, bias&#x3D;True)
           )
         )
ic| net(data).shape: torch.Size([4, 10])</code></pre>
<ul>
<li><code>DenseNet.py</code></li>
</ul>
<p>本文件实现了 DenseNet.</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> enum
<span class="token keyword">import</span> torch
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn

<span class="token comment"># Implementation of DenseNet</span>

<span class="token keyword">def</span> <span class="token function">conv_block</span><span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
        nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">DenseBlock</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    
    
    <span class="token comment"># Out_channels number is the increasing rate of channels</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_convs<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

        net <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_convs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            in_c <span class="token operator">=</span> in_channels <span class="token operator">+</span> i <span class="token operator">*</span> out_channels
            net<span class="token punctuation">.</span>append<span class="token punctuation">(</span>conv_block<span class="token punctuation">(</span>in_c<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleList<span class="token punctuation">(</span>net<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>out_channels <span class="token operator">=</span> in_channels <span class="token operator">+</span> num_convs <span class="token operator">*</span> out_channels
    
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> blk <span class="token keyword">in</span> self<span class="token punctuation">.</span>net<span class="token punctuation">:</span>
            y <span class="token operator">=</span> blk<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
            x <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> dim <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> x

<span class="token keyword">def</span> <span class="token function">transition_block</span><span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
        nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>AvgPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">DenseNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>start <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        
        dense_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        
        num_channels<span class="token punctuation">,</span> growth_rate <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">32</span>
        num_convs_in_dense_blocks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
        
        <span class="token keyword">for</span> i<span class="token punctuation">,</span> num_convs <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>num_convs_in_dense_blocks<span class="token punctuation">)</span><span class="token punctuation">:</span>
            DB <span class="token operator">=</span> DenseBlock<span class="token punctuation">(</span>num_convs<span class="token punctuation">,</span> num_channels<span class="token punctuation">,</span> growth_rate<span class="token punctuation">)</span>
            num_channels <span class="token operator">=</span> DB<span class="token punctuation">.</span>out_channels
            
            dense_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>DB<span class="token punctuation">)</span>
            
            <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_convs_in_dense_blocks<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
                dense_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span> transition_block<span class="token punctuation">(</span>num_channels<span class="token punctuation">,</span> num_channels <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                num_channels <span class="token operator">=</span> num_channels <span class="token operator">//</span> <span class="token number">2</span>
        
        self<span class="token punctuation">.</span>dense <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleList<span class="token punctuation">(</span>dense_list<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>output <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>num_channels<span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_channels<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>start<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">for</span> layer <span class="token keyword">in</span> self<span class="token punctuation">.</span>dense<span class="token punctuation">:</span>
            x <span class="token operator">=</span> layer<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>output<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> x<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x</code></pre>
<pre class="language-none"><code class="language-none">ic| net: DenseNet(
           (start): Sequential(
             (0): Conv2d(3, 64, kernel_size&#x3D;(7, 7), stride&#x3D;(2, 2), padding&#x3D;(3, 3))
             (1): BatchNorm2d(64, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
             (2): ReLU()
             (3): MaxPool2d(kernel_size&#x3D;3, stride&#x3D;2, padding&#x3D;1, dilation&#x3D;1, ceil_mode&#x3D;False)
           )
           (dense): ModuleList(
             (0): DenseBlock(
               (net): ModuleList(
                 (0): Sequential(
                   (0): BatchNorm2d(64, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(64, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
                 (1): Sequential(
                   (0): BatchNorm2d(96, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(96, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
                 (2): Sequential(
                   (0): BatchNorm2d(128, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(128, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
                 (3): Sequential(
                   (0): BatchNorm2d(160, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(160, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
               )
             )
             (1): Sequential(
               (0): BatchNorm2d(192, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
               (1): ReLU()
               (2): Conv2d(192, 96, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1))
               (3): AvgPool2d(kernel_size&#x3D;2, stride&#x3D;2, padding&#x3D;0)
             )
             (2): DenseBlock(
               (net): ModuleList(
                 (0): Sequential(
                   (0): BatchNorm2d(96, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(96, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
                 (1): Sequential(
                   (0): BatchNorm2d(128, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(128, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
                 (2): Sequential(
                   (0): BatchNorm2d(160, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(160, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
                 (3): Sequential(
                   (0): BatchNorm2d(192, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(192, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
               )
             )
             (3): Sequential(
               (0): BatchNorm2d(224, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
               (1): ReLU()
               (2): Conv2d(224, 112, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1))
               (3): AvgPool2d(kernel_size&#x3D;2, stride&#x3D;2, padding&#x3D;0)
             )
             (4): DenseBlock(
               (net): ModuleList(
                 (0): Sequential(
                   (0): BatchNorm2d(112, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(112, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
                 (1): Sequential(
                   (0): BatchNorm2d(144, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(144, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
                 (2): Sequential(
                   (0): BatchNorm2d(176, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(176, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
                 (3): Sequential(
                   (0): BatchNorm2d(208, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(208, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
               )
             )
             (5): Sequential(
               (0): BatchNorm2d(240, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
               (1): ReLU()
               (2): Conv2d(240, 120, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1))
               (3): AvgPool2d(kernel_size&#x3D;2, stride&#x3D;2, padding&#x3D;0)
             )
             (6): DenseBlock(
               (net): ModuleList(
                 (0): Sequential(
                   (0): BatchNorm2d(120, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(120, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
                 (1): Sequential(
                   (0): BatchNorm2d(152, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(152, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
                 (2): Sequential(
                   (0): BatchNorm2d(184, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(184, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
                 (3): Sequential(
                   (0): BatchNorm2d(216, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
                   (1): ReLU()
                   (2): Conv2d(216, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1))
                 )
               )
             )
           )
           (output): Sequential(
             (0): BatchNorm2d(248, eps&#x3D;1e-05, momentum&#x3D;0.1, affine&#x3D;True, track_running_stats&#x3D;True)
             (1): ReLU()
           )
           (fc): Sequential(
             (0): Flatten(start_dim&#x3D;1, end_dim&#x3D;-1)
             (1): Linear(in_features&#x3D;248, out_features&#x3D;10, bias&#x3D;True)
           )
         )
ic| net(data).shape: torch.Size([4, 10])</code></pre>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>《数据结构》课程 PA1 报告</title>
    <url>/dsa-pa1/</url>
    <content><![CDATA[<p>内含以下题目的实验报告：</p>
<ul>
<li>CST2021F 1-1 A+B Problem</li>
<li>CST2021F 1-2 Graphics</li>
<li>CST2021F 1-3 Filename</li>
<li>CST2021F 1-4 Risk</li>
</ul>
<p>这里不提供任何解题代码，仅将解题的白盒报告归档处理。</p>
<p>本博文仅做参考使用，任何可能影响您查重结果的行为请您后果自负！</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Problem</th>
<th style="text-align:center">White Box (20%)</th>
<th style="text-align:center">Black Box (80%)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CST2021F 1-1 A+B problem (25%)</td>
<td style="text-align:center">100</td>
<td style="text-align:center">[100] -1</td>
</tr>
<tr>
<td style="text-align:center">CST2021F 1-2 Graphics (25%)</td>
<td style="text-align:center">100</td>
<td style="text-align:center">[100] -1</td>
</tr>
<tr>
<td style="text-align:center">CST2021F 1-3 filename (25%)</td>
<td style="text-align:center">100</td>
<td style="text-align:center">[100] -2</td>
</tr>
<tr>
<td style="text-align:center">CST2021F 1-4 Risk (25%)</td>
<td style="text-align:center">100</td>
<td style="text-align:center">[100] -1</td>
</tr>
</tbody>
</table>
</div>
<a id="more"></a>
<h2 id="CST2021F-1-1-A-B-Problem"><a href="#CST2021F-1-1-A-B-Problem" class="headerlink" title="CST2021F 1-1 A+B Problem"></a>CST2021F 1-1 A+B Problem</h2><p>​    <strong>[关键词] 模拟，压位</strong></p>
<h3 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h3><h4 id="思路来源"><a href="#思路来源" class="headerlink" title="思路来源"></a>思路来源</h4><p>​    先来考虑小学二年级学过的十进制乘法。</p>
<p>​    如 $73 * 27$，我们的运算实际上是进行了…</p>
<script type="math/tex; mode=display">
\begin{align}
73*27 = & (7*10+3*1)*(2*10+7*1)\\
= & (7*2)*100 + (7*7+3*2)*10 + (3*7)*1 \\
= & (1*10+4) * 100+(5*10+5)*10 + (2*10+1)*1 \\
= & (1*10+4)*100+(5*10+7)*10+1*1\\
= & (1*10+9)*100+7*10+1*1 \\
= & 1*1000 + 9*100 + 7*10 + 1*1\\
= & 1971
\end {align}</script><p>​    而我们再考虑导致现有的高精度加法模板 TLE 的原因，$O(n|a||b|)$ 的算法对于 $n=500, |a|=|b|=5000$ 的最坏情况，与 $1s$ 内允许进行的运算次数，只差了一个常数级别.</p>
<p>​    因此我们的优化可以有两个思考方向，其一是进行<strong>常数级别的复杂度优化</strong>，另一是<strong>寻找更为高效的算法</strong>。这里斟酌考虑后选择了前者，而关于后者的相关实现留作报告中的【后续的优化方向】部分呈现。</p>
<p>​    而怎么去<strong>优化</strong>这个<strong>常数</strong>呢？我们可以考虑通过<strong>增加数据的存储与运算进制</strong>，来减少 $O(n|a||b|)$ 中 $|a|, |b|$ 的值，最终达到时间上的优化效果。举个例子，如果我们以 $10^4$ 为进制，那么复杂度在某种程度上就变成了 $O(n\frac{|a|}{4} \frac{|b|}{4})$。（虽然常系数可能有所增长）</p>
<p>​    同时还注意到，类似于位运算，加法，乘法等这种操作是较为节省时间的，而进行除法，取模的操作较为费时。因此我们尽可能<strong>避免每进行一次循环就进行进位处理</strong>的实现方式，因为处理进位可能需要大量的求余和求商运算。</p>
<h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>​    使用 <code>BigInteger</code> 类对大整数进行封装。其中的数据采用 <code>__uint128_t</code> 类型来进行存储，单个 <code>data</code> 可以储存上限为 $2^{128}-1$ 大小的值. 而最终数据存储和乘法运算采用的进制为 $10^{16}$.</p>
<p><strong>读取数据</strong></p>
<p>​    大整数的读取按照以下方式进行。</p>
<ol>
<li><p><strong>预读取阶段</strong>：将一个大整数的所有位读到一个栈结构中.</p>
</li>
<li><p><strong>处理阶段</strong></p>
<p>每次出栈最多 $16$ 位大整数，并从整数的逻辑最左端到逻辑最右端不断进行 $s_i \leftarrow (s_i&lt;&lt;3)+(s_i&lt;&lt;1); s_i \leftarrow s_i+val;$ 的操作。</p>
<p>然后将每 $16$ 位处理的结果 $s_i$ 按照逻辑倒序排列成一个数组。</p>
</li>
</ol>
<p><strong>数据相乘</strong></p>
<p>​    大整数的相乘主要是进行对十进制乘法的模拟。</p>
<ol>
<li><p><strong>结果计算</strong></p>
<p>我们记 $r$​ 为计算后的结果，我们可以得到：</p>
<script type="math/tex; mode=display">
for \ i \ in \ [0,|a|) \ and \ j \ in \ [0, |b|):\\
r_{i+j} \leftarrow r_{i+j}+a_i*b_j</script></li>
<li><p><strong>取模进位</strong></p>
<script type="math/tex; mode=display">
for \ i \ in \ [0, |a+b|]:\\
r_{i+1} \leftarrow r_{i+1} + r_i \ / \ e\\
r_i \leftarrow r_i \ \%\  e</script><p>其中 $e$ 代表进制数，即 $10^{16}$.</p>
</li>
</ol>
<h4 id="正确性证明"><a href="#正确性证明" class="headerlink" title="正确性证明"></a>正确性证明</h4><p><strong>[证明]</strong> 在结果计算时，<code>__uint128_t</code> 不会发生溢出.</p>
<p>考虑 $r_i$​，设单个数据在计算过程中所记录的最大数据的上界为 $M$.</p>
<script type="math/tex; mode=display">
M=e*e*(|i|+|j|)\le 10^{32}*10^4 = 10^{36} \lt 10^{38.53} \approx 2^{128}-1</script><p>于是数据不会发生溢出，先计算再取模来优化计算效率是安全的.</p>
<h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><strong>问题调试</strong></p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// First version: reading a big integer</span>
data<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// *= 10</span>
data<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">+=</span> currVal<span class="token punctuation">;</span></code></pre>
<p>进行逐行调试与中间变量逐 Bit 输出后发现运算符优先级出了问题.</p>
<p><strong>对拍验证</strong></p>
<p>为了测试边界数据的运行情况，撰写了数据生成程序.</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random

f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.in'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
g <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'answer.out'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span>
<span class="token builtin">len</span> <span class="token operator">=</span> <span class="token number">500</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">5000</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    b <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">5000</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
    g<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>

f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
g<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>然后就可以通过在控制台进行…</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">g++ main.cpp -o main

python3 datagen.py
<span class="token function">time</span> ./main <span class="token operator">&lt;</span> data.in <span class="token operator">></span> data.out
<span class="token function">diff</span> data.out answer.out

<span class="token comment"># 输出</span>
./main <span class="token operator">&lt;</span> data.in <span class="token operator">></span> data.out  <span class="token number">0</span>.33s user <span class="token number">0</span>.04s system <span class="token number">53</span>% cpu <span class="token number">0.683</span> total</code></pre>
<p>来进行程序运行时间和正确性的检测.</p>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><strong>时间复杂度</strong></p>
<p>我们记字符串 $a, b$ 的长度分别为 $|a|,|b|$. </p>
<p>进行压位本质上是对于 $O(n|a||b|)$​ 的时间复杂度进行常数上的优化，时间复杂度还是由乘法运算的双重循环所决定的 $O(n|a||b|)$​​​.</p>
<p><strong>空间复杂度</strong></p>
<p>程序使用的空间主要用来存储 $a,b,result$ 三个 <code>BigInteger</code> 类的对象.</p>
<p>而 $a,b,r$ 三个变量可以被循环利用.</p>
<p>因此空间复杂度可以近似地看作为 $O(|a|+|b|+|a||b|)$​. (考虑到 $|a| \equiv 0$​ 的情况)</p>
<h2 id="CST2021F-1-2-Graphics"><a href="#CST2021F-1-2-Graphics" class="headerlink" title="CST2021F 1-2 Graphics"></a>CST2021F 1-2 Graphics</h2><p>​    <strong>[关键词] 平面解析几何，快速排序，二分查找</strong></p>
<h3 id="方案设计-1"><a href="#方案设计-1" class="headerlink" title="方案设计"></a>方案设计</h3><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p><strong>唯一的连接方式</strong></p>
<p>[证明] 对于 $x, y$ 轴上的点列 $X=\{ x_1, \cdots, x_n \}$ 与 $Y=\{y_1, \cdots, y_n\}$，满足如果 $i \lt j$，那么 $x_i&lt;x_j, y_i \lt y_j$，那么将它们按题述方式连接的方式唯一。</p>
<p>​    (1) 假设存在 $i \lt j$​，满足 $x_i$​ 与 $y_j$​​ 相连.</p>
<p>​        由 $|Y| \lt + \infin$​ 我们可以得出，$\exist u,v \in[1,n], \ u \lt v$​，$y_u$​ 与​ $x_v$​ 相连。</p>
<p>​        考虑 $\frac{x}{x_i} + \frac{y}{y_j} = 1$​ 与 $\frac{x}{x_v} + \frac{y}{y_u} = 1$ 两条直线，可知它们在第一象限有交点.</p>
<p>​    (2) 假设存在 $i \lt j$​，满足 $x_v$​ 与 $y_u$​ 相连. 同 (1) 我们也可知不成立.</p>
<p>​    于是我们得出结论，唯一的连接方式为 $x_i$ 与 $y_i$​ 相连，而验证可知这种情况下，两条直线在第一象限确实没有交点。</p>
<p><strong>判断点与直线的位置关系</strong></p>
<p>​    我们接下来考虑点 $(x_0, y_0)$​​ 与直线 $\frac{x}{a} + \frac{y}{b} = 1$​ 的位置关系. ($x_0, y_0, a,b \gt0$)</p>
<p>​    联立$\begin{cases} \frac{x}{a} + \frac{y}{b} = 1 \\ y=\frac{y_0}{x_0}x\end{cases}$​，我们可以解得交点的横坐标为 $x_{intersection}=\frac{abx_0}{ay_0+bx_0}$​.</p>
<p>​    (1) 如果点 $(x_0, y_0)$​​​ 在直线左侧，即 $x_0<x_{intersection}$​​​​​，由上述公式我们可知 $\Delta:=-x_0y_0+(x_0-a)(y_0-b) >0$​​​.</p>
<p>​    (2) 如果点 $(x_0, y_0)$ 在直线上，同理可知 $\Delta = 0$.</p>
<p>​    (3) 如果点 $(x_0, y_0)$ 在直线右侧，同理可知 $\Delta &lt; 0$.</p>
<p>​    综上，如果我们对直线按照 $x_i$ 升序的次序排序，可知对应的 $\Delta$ 值先负后正.</p>
<p>​    而我们可以通过二分查找第一个大于 $0$ 的值所在的位置，确定有有多少条直线在给定点的左方或在直线上。</p>
<h4 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h4><ul>
<li>给定没有单调性的点列后，如何找到线段的连接关系？<strong>快速排序</strong>！</li>
<li>找到连接关系后如何判断给定点与直线的相互位置？<strong>使用$\Delta$判据</strong>！</li>
<li>如何找到有多少条直线在给定点的左方或在直线上？<strong>二分查找</strong>！</li>
</ul>
<h3 id="过程记录-1"><a href="#过程记录-1" class="headerlink" title="过程记录"></a>过程记录</h3><p>​    本题是对《程序设计基础》课程中传统的排序和查找算法的有效复习。</p>
<h3 id="复杂度估算"><a href="#复杂度估算" class="headerlink" title="复杂度估算"></a>复杂度估算</h3><p><strong>时间复杂度</strong></p>
<p>快速排序的平均时间复杂度为 $O(nlgn)$，但是在最坏情况下可能会有 $O(n^2)$ 的特例。</p>
<p>单次二分查找的时间复杂度为 $O(lgn)$，而总共进行了 $m$ 次，即查找的时间复杂度近似为 $O(mlgn)$。</p>
<p>因此，程序的时间复杂度约为 $O(nlgn+mlgn)$。</p>
<p><strong>空间复杂度</strong></p>
<p>程序的存储主要是用来存储 $X,Y$ 两个点列，而快速排序是原地排序算法，这里不需考虑其占用的可能空间。因此空间复杂度为 $O(n)$。</p>
<h2 id="CST2021F-1-3-Filename"><a href="#CST2021F-1-3-Filename" class="headerlink" title="CST2021F 1-3 Filename"></a>CST2021F 1-3 Filename</h2><p>​    <strong>[关键词] 动态规划，滚动数组</strong></p>
<h3 id="方案设计-2"><a href="#方案设计-2" class="headerlink" title="方案设计"></a>方案设计</h3><h4 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h4><h5 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h5><p>​    把字符串 $A$ 变成字符串 $B$ 所需的修改次数，很容易就能想到【最长公共子序列】这道模板题。记 $|S|$ 为字符串 $S$ 的长度，那么 把字符串 $A$ 变成字符串 $B$ 所需的修改次数 $e$ 满足 $e = |A|-|LCS|+|B|-|LCS| = |A|+|B|-2|LCS|$​.</p>
<p>​    但是再一看，最长公共子序列的常用的 $O(n^2)$ 的算法和优化后的 $O(nlgn)$ 自然是不可能满足题目中 $n,m$ 的数据范围的。而如果我们仔细将这道题与模板题加以对比就能发现，我们多获得的条件就是所允许的最大修改代价 $k$. 而<strong>添加的条件，自然是作为我们优化算法效率的突破口</strong>。</p>
<p>​    我们还是沿用 $LCS$​ 问题中定义的状态，设 $f[i][j]$​ 代表<strong>目标字符串的前 $i$​ 个字符 $B[1, i]$​ 与待修改字符串的前 $j$​ 个字符 $A[1, j]$​ 所含有的公共子序列的长度</strong>。我们的<strong>状态转移方程</strong>为：</p>
<script type="math/tex; mode=display">
f[i][j] =
\begin{cases}
max(f[i-1][j], f[i][j-1]), & A[j] \ne B[i],\\
f[i-1][j-1], & A[j]=B[i].
\end{cases}</script><p>​    但是我们需要考虑 $k$​ 的作用。我们断言，如果存在 $i,j$ 使得 $f[i][j]$ 对应的修改次数大于 $k$，那么由 $f[i][j]$ 递推来的答案一定不符合题目最大修改次数的要求。这是因为如果两个字串序列的修改代价就已经大于 $k$，两个整串之间的修改代价一定是随着 $i, j$ 而单调递增，也必不可能不大于 $k$.</p>
<p>​    于是我们在递推的时候就可以尝试更改我们的策略。我们可以直接将递推边界设置为 $max((i-k)-1, 1)$ 与 $min(n, (i+k)+1)$。这是因为在递推边界外的 $f$ 值，至少对我们关心的答案没有影响。为了不影响递推公式的通用性，我们可以将递推边界上的值置为 $0$.</p>
<h5 id="滚动数组"><a href="#滚动数组" class="headerlink" title="滚动数组"></a>滚动数组</h5><p>​    但是我们接下来又会遇到一个问题，就是经过计算，$mn$​ 大小的状态记录数组显然会超过内存限制。这时我们可以使用动态规划时常见的操作，也就是<strong>滚动数组</strong>。由于我们的状态记录数组在每次状态转移时只涉及到两行间的关系，于是我们完全可以将数组开成 $2*n$ 的大小。然后在每次需要读取或写入 $f[i][j]$ 的值时，我们即寻找 $f[i\&amp;1][j]$，其中 $i\&amp;1$ 代表 $i\%2$.</p>
<h4 id="样例分析"><a href="#样例分析" class="headerlink" title="样例分析"></a>样例分析</h4><p><img src="https://i.loli.net/2021/09/20/msOAJyKkHUuFz5o.png" alt="image-20210920112305557"></p>
<p style="text-align: center">(图为模拟运行 LCS 后的结果)</p>

<h3 id="过程记录-2"><a href="#过程记录-2" class="headerlink" title="过程记录"></a>过程记录</h3><h4 id="对拍验证"><a href="#对拍验证" class="headerlink" title="对拍验证"></a>对拍验证</h4><p>​    因为最后忘了特判 $|A|+|B|-2|LCS| &gt;k$ 将结果置为 $-1$​ 导致九成测爆了 Wrong Answer. 于是写了对拍程序验证。对拍程序使用最平凡的递归算法。<s>但是竟然能想起来特判，写题的时候却不起来。</s></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random
<span class="token keyword">import</span> os
<span class="token keyword">import</span> subprocess

<span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>ori<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ori <span class="token operator">==</span> <span class="token string">''</span> <span class="token keyword">or</span> des <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ori<span class="token punctuation">)</span>
    m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span>
    <span class="token keyword">if</span> ori<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> des<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> solve<span class="token punctuation">(</span>ori<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> des<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>solve<span class="token punctuation">(</span>ori<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">,</span> solve<span class="token punctuation">(</span>ori<span class="token punctuation">,</span> des<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 1000 Test cases</span>
    charList <span class="token operator">=</span><span class="token string">"ab"</span>
    
    n <span class="token operator">=</span> <span class="token number">20</span>
    m <span class="token operator">=</span> <span class="token number">20</span>
    k <span class="token operator">=</span> <span class="token number">18</span>

    ori <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>charList<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
    ori <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ori<span class="token punctuation">)</span>
    des <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>charList<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
    des <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>des<span class="token punctuation">)</span>

    g <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'testdata.in'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span>
    g<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
    g<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ori <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
    g<span class="token punctuation">.</span>write<span class="token punctuation">(</span>des<span class="token punctuation">)</span>
    g<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    a <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./main &lt; testdata.in"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    answer <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">#cpp</span>
    
    l <span class="token operator">=</span> solve<span class="token punctuation">(</span>ori<span class="token punctuation">,</span> des<span class="token punctuation">)</span>
    l <span class="token operator">=</span> n<span class="token operator">+</span>m<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>l
    <span class="token keyword">if</span> l <span class="token operator">></span> k<span class="token punctuation">:</span>
        l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[Answer </span><span class="token interpolation"><span class="token punctuation">&#123;</span>answer<span class="token punctuation">&#125;</span></span><span class="token string"> L </span><span class="token interpolation"><span class="token punctuation">&#123;</span>l<span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span><span class="token punctuation">(</span>answer <span class="token operator">==</span> l<span class="token punctuation">)</span>
</code></pre>
<p>​    跑了一次就能拿到 <code>AssertionError</code>，然后发现了程序中的错误<s>并后悔自己浪费了一次九成测</s>。以下是程序修改后对拍程序的运行效果截图。</p>
<p><img src="https://i.loli.net/2021/09/20/kzcqpPVEb6aGdvt.png" alt="image-20210920115702668"></p>
<h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><strong>时间复杂度</strong></p>
<p>由 $k$ 的限制和字符串长度的关系，我们得出时间复杂度为 $O(mk)$.</p>
<p><strong>空间复杂度</strong></p>
<p>新开辟的空间主要用来存储两个字符串，以及字符串对应的状态。因此空间复杂度为 $O(n+m)$.</p>
<h2 id="CST2021F-1-4-Risk"><a href="#CST2021F-1-4-Risk" class="headerlink" title="CST2021F 1-4 Risk"></a>CST2021F 1-4 Risk</h2><p>​    <strong>[关键词] 单调队列，归并排序，二分查找</strong></p>
<h3 id="方案设计-3"><a href="#方案设计-3" class="headerlink" title="方案设计"></a>方案设计</h3><h4 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h4><p>​    分析题目后，我们的需求是需要多次查询 $Cases$ 数组中位于 $[L_i, R_i]$ 的最大值，其中保证 $L_i$ 单调递增，$R_i=i-1$​​​。而我们可以根据<strong>单调队列</strong>这种数据结构来实现这种需求，将在下面介绍。在计算好每一天对应的风险评估值，也就是对应区间 $Cases$ 的最大值之后，我们对风险评估值数组进行排序，然后使用二分查找就能找到对于任意的 $e = p,q$，数组中小于 $e$ 的元素个数.</p>
<p><strong>单调队列</strong></p>
<p style="text-align:center; color:red">声明：本节内容根据题目提示，在复习参考<a href="https://oi-wiki.org/ds/monotonous-queue/">单调队列</a>相关知识后写成。<br/>提交的 main.cpp 中代码均为原创，不存在任何复制粘贴抄袭的行为</p>

<p>​    我们应实现具有以下功能的<strong>单调递减队列</strong>.</p>
<p>​    比如，对于测试 $Cases$ 输入 <code>&#123;0, 1000, 1000, 800, 900&#125;</code>.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Index</th>
<th>区间</th>
<th>对应 Queap 的值</th>
</tr>
</thead>
<tbody>
<tr>
<td>0: Enqueue</td>
<td>[0]</td>
<td>{0}</td>
</tr>
<tr>
<td>1: Enqueue</td>
<td>[0 1000]</td>
<td>{1000}</td>
</tr>
<tr>
<td>2: Enqueue</td>
<td>[0 1000 1000]</td>
<td>{1000, 1000}</td>
</tr>
<tr>
<td>3: Enqueue</td>
<td>[0 1000 1000 800]</td>
<td>{1000, 1000, 800}</td>
</tr>
<tr>
<td>4: Enqueue</td>
<td>[0 1000 1000 800 900]</td>
<td>{1000, 1000, 900}</td>
</tr>
<tr>
<td>5: Dequeue</td>
<td>[1000 1000 800 900]</td>
<td>{1000, 1000, 900}</td>
</tr>
<tr>
<td>6: Dequeue</td>
<td>[1000 800 900]</td>
<td>{1000, 900}</td>
</tr>
<tr>
<td>7: Dequeue</td>
<td>[800 900]</td>
<td>{900}</td>
</tr>
</tbody>
</table>
</div>
<p>​    记 $q$ 为<strong>单调递减队列</strong>，即对于所有 $[Leftbound, rightbound)$ 中的位置 $i,j$，命题 $(i&lt;j) \rightarrow (q[i] \ge q[j])$ 成立.</p>
<ol>
<li><strong>Enqueue</strong></li>
</ol>
<p>​    在将 $e$ 插入队列时…</p>
<ul>
<li>使用 $[Leftbound, rightbound)$​ 内二分查找找到位置 $i$​​​<ul>
<li>使得 $i = \inf\{i \ |\  q[i]&lt;e\} \ (Leftbound \le i \le Rightbound)$​​​​</li>
</ul>
</li>
<li>$q[i] \leftarrow e$​, $Rightbound \leftarrow i+1$</li>
</ul>
<ol>
<li><strong>Dequeue</strong></li>
</ol>
<p>​    在考虑将 $e$ 移出队列时…</p>
<ul>
<li>如果 $e$​ 是区间最大值，那么必有 $e=q[Leftbound]$​ ，只需 $Leftbound \leftarrow Leftbound+1$​;</li>
<li>如果 $e$​ 不是区间最大值，那么在后续的序列中，一定存在大于 $e$​ 的元素，$e$​ 一定在之前被覆盖.</li>
</ul>
<ol>
<li><p><strong>Get</strong></p>
<p>考虑获取当前区间的最大值，只需要返回队列中最大的元素，也就是 $q[Leftbound]$​.</p>
</li>
</ol>
<h4 id="具体实现-2"><a href="#具体实现-2" class="headerlink" title="具体实现"></a>具体实现</h4><p>​    单调队列使用一个线性结构实现，并保证长度上限为 $n$.</p>
<p>​    归并排序与二分查找手打模板即可.</p>
<h3 id="过程记录-3"><a href="#过程记录-3" class="headerlink" title="过程记录"></a>过程记录</h3><h4 id="对拍测试"><a href="#对拍测试" class="headerlink" title="对拍测试"></a>对拍测试</h4><p>使用规模最大的测例进行测试。</p>
<pre class="language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.in'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
ans <span class="token operator">=</span> <span class="token string">''</span>
leng <span class="token operator">=</span> <span class="token number">1000000</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>leng<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>leng<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> leng<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
T <span class="token operator">=</span> <span class="token number">100000</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'0 10000000000000\n'</span><span class="token punctuation">)</span>
    ans <span class="token operator">+=</span> <span class="token string">'0 1000000\n'</span>

g <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'answer.out'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span>
g<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
g<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<pre class="language-bash" data-language="bash"><code class="language-bash">c7w@cc7w /mnt/e/Project/Homework/DSA/PA1/4-Risk <span class="token builtin class-name">:</span> python3 check.py
c7w@cc7w /mnt/e/Project/Homework/DSA/PA1/4-Risk <span class="token builtin class-name">:</span> <span class="token function">time</span> ./main <span class="token operator">&lt;</span> data.in <span class="token operator">></span> cpp.out
c7w@cc7w /mnt/e/Project/Homework/DSA/PA1/4-Risk <span class="token builtin class-name">:</span> <span class="token function">diff</span> cpp.out answer.out

./main <span class="token operator">&lt;</span> data.in <span class="token operator">></span> cpp.out  <span class="token number">0</span>.36s user <span class="token number">0</span>.11s system <span class="token number">43</span>% cpu <span class="token number">1.091</span> total</code></pre>
<h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><strong>时间复杂度</strong></p>
<p>设单调队列的长度为 $s$，则 Enqueue 过程的时间复杂度为 $O(lgs)$，Dequeue 过程的时间复杂度为 $O(1)$.</p>
<p>在最坏的情况下，将 $Cases$ 数组中的所有元素都入队，复杂度约为 $O(nlgn)$.</p>
<p>将风险评估值数组 $Measure$ 中的所有元素排序，复杂度 $O(nlgn)$.</p>
<p>之后执行 $2T$ 次二分查找，复杂度为 $O(Tlgn)$.</p>
<p>综上，时间复杂度为 $O(nlgn+Tlgn)$.</p>
<p><strong>空间复杂度</strong></p>
<p>程序所用的空间主要是单调队列的 $O(n)$，$Cases, \ Measure$ 以及归并排序的缓冲数组 $Buffer$ 数组的 $O(n)$，因此总体的空间复杂度为 $O(n)$.</p>
]]></content>
      <categories>
        <category>程设</category>
        <category>程设/数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>《数据结构》课程 PA3 报告</title>
    <url>/dsa-pa3/</url>
    <content><![CDATA[<p>内含以下题目的实验报告：</p>
<ul>
<li>CST2021F 3-1 Circuit</li>
<li>CST2021F 3-3 kth</li>
<li>CST2021F 3-5 Prefix</li>
<li>CST2021F 3-7 Sort</li>
</ul>
<p>这里不提供任何解题代码，仅将解题的白盒报告归档处理。</p>
<p>本博文仅做参考使用，任何可能影响您查重结果的行为请您后果自负！</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Problem</th>
<th style="text-align:center">White Box (20%)</th>
<th style="text-align:center">Black Box (80%)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CST2021F 3-1 Circuit (25%)</td>
<td style="text-align:center">100</td>
<td style="text-align:center">[100] -1</td>
</tr>
<tr>
<td style="text-align:center">CST2021F 3-3 kth (25%)</td>
<td style="text-align:center">100</td>
<td style="text-align:center">[100] -1</td>
</tr>
<tr>
<td style="text-align:center">CST2021F 3-5 Prefix (25%)</td>
<td style="text-align:center">100</td>
<td style="text-align:center">[100] -1</td>
</tr>
<tr>
<td style="text-align:center">CST2021F 3-7 Sort (25%)</td>
<td style="text-align:center">100</td>
<td style="text-align:center">[100] -1</td>
</tr>
</tbody>
</table>
</div>
<a id="more"></a>
<h1 id="CST2021F-3-1-Circuit"><a href="#CST2021F-3-1-Circuit" class="headerlink" title="CST2021F 3-1 Circuit"></a>CST2021F 3-1 Circuit</h1><p>​    <strong>[关键词] Trie 树</strong></p>
<h2 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h2><p>$\forall i \in [0, n)$，需要一种支持以下操作的数据结构：</p>
<p>(1) 持有 $[\max(i-k-1, 0), \min(i+k+1, n-1)]$ 中所有的元件的输出信息；</p>
<p>(2) 可以查询这些信息中满足与 $data[i]$ 异或值最大的 $data[j]$ 的 $j$，其中 $i \ne j$。</p>
<p>(3) 在考虑 $i$ 结束，转向考虑 $i+1$ 的时候，可以快速地删除 $data[i-k-1]$ 的信息，加入 $data[(i+1)+k+1]$ 的信息。</p>
<p>而字典树，恰恰就能满足我们上述的需求，下面对其进行详细介绍。</p>
<h3 id="字典树：规则"><a href="#字典树：规则" class="headerlink" title="字典树：规则"></a>字典树：规则</h3><p>字典树的结点分<strong>非叶结点</strong>和<strong>叶结点</strong>两种。事实上，我们可以用考虑有限转移自动机（DFA）的方式来考虑字典树。</p>
<p><strong>非叶结点</strong>记录了所有终态经过它的串的个数，以及通过输入一个字符 $a\in\Sigma$​，可以转移到的下一个非叶结点或叶结点的位置。</p>
<p><strong>叶结点</strong>记录了所有以它为终态的串的个数，同时维护了一个列表来按次序记录所有以该叶结点为终态的串的 ID。</p>
<p>我们定义，一个结点输入一个字符 $a\in \Sigma$​​ 后对应的结点<strong>存在</strong>，当且仅当该结点是非叶结点，同时该非叶结点可以通过字符 $a$ 转移到位置 $t$，且结点 $t$ 接受的终态经过 $t$ 或是以 $t$ 为终态的串的个数非零。</p>
<h3 id="字典树：初始化"><a href="#字典树：初始化" class="headerlink" title="字典树：初始化"></a>字典树：初始化</h3><p>从这小节的讨论开始，我们只讨论 $\Sigma=\{0, 1\}$ 的情况。</p>
<p>字典树默认只有一个根节点，接受空串 $\epsilon$​，终态经过它的串的个数为 $0$​​，这里我们不将该根节点视为叶结点。</p>
<p>$\Sigma = \{0,1\}$​​ 的字典树的非叶结点只需记录其经过 $0$ 转移和 $1$ 转移后的到达结点，这里我们使用二叉树的记号，分别记作其左孩子和右孩子。</p>
<h3 id="字典树：插入"><a href="#字典树：插入" class="headerlink" title="字典树：插入"></a>字典树：插入</h3><p>考虑我们将插入 $64$ 位整数 $data[i]$。</p>
<p>我们从根节点出发，逐一考虑去接受该串的字符，遇 $0$ 则转向其左孩子，遇 $1$ 则转向其右孩子，若对应的孩子的<strong>位置不存在</strong>（注意这里与上述结点的<strong>存在</strong>不同，结点存在需要位置存在，且该位置的记录串数非零）则创建。同时我们将沿途所有的非叶结点的“终态经过它的串的个数”自增，终态叶结点的“以它为终态的串的个数”自增。最后，我们在终态叶结点的串列表中将该串的 ID $i$ 插入。在本题中由于我们考虑的窗口永远是从左向右滑动，我们可以保证插入的 ID $i$​ 一定是在列表的末尾，故我们只需插入到列表末尾即可。</p>
<h3 id="字典树：删除"><a href="#字典树：删除" class="headerlink" title="字典树：删除"></a>字典树：删除</h3><p>考虑我们将删除 $64$ 位整数 $data[i]$，同时我们断言 $data[i]$ 在此前一定被插入到树中。</p>
<p>我们从根节点出发，逐一考虑去接受该串的字符，遇 $0$ 则转向其左孩子，遇 $1$ 则转向其右孩子。我们将沿途所有的非叶结点的“终态经过它的串的个数”自减，终态叶结点的“以它为终态的串的个数”自减。最后，我们在终态叶结点的串列表中将该串的 ID $i$ 移除。在本题中由于我们考虑的窗口永远是从左向右滑动，我们可以保证删除的 ID $i$​ 一定是在列表的首位，故我们只需删除列表首位即可。</p>
<h3 id="字典树：查询"><a href="#字典树：查询" class="headerlink" title="　字典树：查询"></a>　字典树：查询</h3><p>考虑我们将查询 $j$，使得 $i \ne j$ 且 $data[j]$ 与 $64$ 位整数 $data[i]$ 的异或值最大，其中 $j \in [\max(i-k-1, 0), \min(i+k+1, n-1)]$。</p>
<p>由贪心策略，如果我们每步均朝向异或值最大的方向走，即遇 $0$ 走 $1$，遇 $1$ 走 $0$（如果可能的话，这种可能性由对应的<strong>结点存在</strong>蕴含），我们最终得到的异或值便一定是最大的。</p>
<p>也就是说，我们的查询过程可以概述如下：</p>
<p>从根节点出发，逐一去考虑接受该串的字符，遇 $0$ 若右孩子存在则转向右孩子，不然转向左孩子；遇 $1$ 若左孩子存在则转向左孩子，不然转向右孩子。这样不断进行下去势必会达到一个终态，而这个我们要做的便是输出这个终态叶结点的接受串 ID 列表中第一个 $id$（满足 $id \ne i$​）。</p>
<h2 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h2><p>输入有毒。输入有毒。输入有毒。最初一版使用 <code>getchar()</code> 读取 $64$ 位字符串，结果满满的是 WA，一个点都不给过。初步推断可能是输入文件以 <code>\r\n</code> 结尾而程序只考虑了以 <code>\n</code> 结尾的情况。换用 <code>scanf()</code> 后便解决了问题，<s>而这个问题竟然喜提 PA3 中 Debug 时间最久的问题</s>。</p>
<p>解决过程大致是首先为了控制变量，排除算法实现过程的具体问题，做了以下两个操作：</p>
<p>(1) 撰写了对拍器 check.py（见附 1），但是本地的数据怎么测都是 AC。</p>
<p>(2) 撰写了 Trivial.cpp（见附 2），读入部分没变（事实上，最初我认为是后续字典树处理写出了问题，于是想写个最简单的版本交上去看下测试数据的规模），使用最平凡的 $O(nk)$ 的算法处理问题，最终发现还是爆零。目光转向读入部分，改用 <code>scanf</code> 后 Trivial 算法拿到了 40/50（自然会喜提 TLE），然后是将新的读入复制回 <code>main.cpp</code>，前后两次拿到了 50/50, 90/90, <s>完结撒花</s>。</p>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>从时间上来看，每个结点最多被插入一次，查询一次，删除一次，这些操作的时间复杂度均是正比于树高 $h=O(64)=O(1)$，而对于 $n$ 个结点，我们有时间复杂度是 $O(n)$。</p>
<p>字典树的每个结点可能对应 $64$​​ 位整数的位表示中的一个字符。也就是说，最多有 $O(64n)=O(n)$​​ 量级的结点个数。而这些结点有小部分是可以复用的。具体来说，根据鸽巢原理，我们设读入 $k$​​ 个字符后，才会出现 $2^k&gt;n$​​，解得 $k\ge19$​​。也就是说，我们可以考虑一种极端的情况，树深度 $depth \le 19$​​ 时为满树，而树深度 $depth \ge 20$​​ 时为单链，这种情况下最多的结点个数为 $\sum_{i=0}^{19}2^i+(64-19)<em>n\approx 2.4</em>10^7=24M$​​​。</p>
<p>我们的叶结点共有 $O(n)$​ 个，同时每个叶节点都需要维护 1 个列表，因此列表的个数也是 $O(n)$​​ 个，列表的元素的总个数也是 $O(n)$。综上，空间复杂度为 $O(n)$。</p>
<p>而这题还是有卡常的嫌疑的，也就是说虽然是 $O(n)$​ 量级，但是空间复杂度还是可能有可能会超限，具体分析如下：（$n=5*10^5$）</p>
<ul>
<li>非叶结点，24M * 12Byte = 288M.</li>
<li>列表条目，0.5M * 12Byte = 6M.</li>
<li>叶结点，0.5M * 20Byte = 10M.</li>
<li>$64$ 位整数的数据，0.5M * 8Byte = 4M.</li>
<li>合计 308M &lt; 512M.</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="附-1-check-py"><a href="#附-1-check-py" class="headerlink" title="附 1: check.py"></a>附 1: check.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> io
<span class="token keyword">import</span> time
<span class="token keyword">import</span> datetime
<span class="token keyword">import</span> random
<span class="token keyword">import</span> subprocess
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

IN <span class="token operator">=</span> <span class="token string">''</span>
OUT <span class="token operator">=</span> <span class="token string">''</span>

<span class="token keyword">class</span> <span class="token class-name">Judger</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">generateInputData</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">global</span> IN<span class="token punctuation">,</span> OUT
        IN <span class="token operator">=</span> <span class="token string">''</span>
        OUT <span class="token operator">=</span> <span class="token string">''</span>
        n <span class="token operator">=</span> <span class="token number">10</span>
        k <span class="token operator">=</span> <span class="token number">2</span>
        IN <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span></span><span class="token string">\n'</span></span>
        
        dataList <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">64</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
        rawList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">bin</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">for</span> data <span class="token keyword">in</span> dataList<span class="token punctuation">]</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>rawList<span class="token punctuation">)</span>
        <span class="token keyword">for</span> raw <span class="token keyword">in</span> rawList<span class="token punctuation">:</span>
            IN <span class="token operator">+=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>raw<span class="token punctuation">&#125;</span></span><span class="token string">\n'</span></span>
        
        <span class="token keyword">for</span> index<span class="token punctuation">,</span> data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">:</span>
            left <span class="token operator">=</span> index <span class="token operator">-</span> k <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">if</span> left <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                left <span class="token operator">=</span> <span class="token number">0</span>
            right <span class="token operator">=</span> index <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">if</span> right <span class="token operator">></span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
                right <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span>
            
            currMaxIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">999</span>
            currMaxValue <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">999</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">continue</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>dataList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> data<span class="token punctuation">)</span> <span class="token operator">></span> currMaxValue<span class="token punctuation">:</span>
                    currMaxIndex <span class="token operator">=</span> i
                    currMaxValue <span class="token operator">=</span> <span class="token punctuation">(</span>dataList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> data<span class="token punctuation">)</span>
            OUT <span class="token operator">+=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>currMaxIndex<span class="token punctuation">&#125;</span></span><span class="token string">\n'</span></span>
        
        <span class="token keyword">return</span> IN

    <span class="token keyword">def</span> <span class="token function">getAnswer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">global</span> OUT
        <span class="token keyword">return</span> OUT<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">judge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> judgeAns<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n\nCompiling...'</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'g++'</span><span class="token punctuation">,</span> <span class="token string">'-O2'</span><span class="token punctuation">,</span> <span class="token string">'-std=c++14'</span><span class="token punctuation">,</span> <span class="token string">'-w'</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">,</span> <span class="token string">'-o'</span><span class="token punctuation">,</span> <span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> subprocess<span class="token punctuation">.</span>CalledProcessError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">'CE'</span>
        
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Generating testing data...'</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> self<span class="token punctuation">.</span>generateInputData<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Running...'</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            time1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
            cppout <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">2.0</span><span class="token punctuation">)</span>
            cppout <span class="token operator">=</span> cppout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
            time2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> subprocess<span class="token punctuation">.</span>TimeoutExpired<span class="token punctuation">:</span>
            f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'check-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d-%H-%M-%S"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">.log'</span></span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Time Limit Exceeded\n"</span></span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"-------------IN--------------\n"</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Time Limit Exceeded (2.000s)'</span></span>
        <span class="token keyword">except</span> subprocess<span class="token punctuation">.</span>CalledProcessError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'check-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d-%H-%M-%S"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">.log'</span></span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Runtime Error (signal </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span>returncode<span class="token punctuation">&#125;</span></span><span class="token string">)\n"</span></span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"-------------IN--------------\n"</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Runtime Error (Signal </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span>returncode<span class="token punctuation">&#125;</span></span><span class="token string">)'</span></span>
        <span class="token keyword">if</span> judgeAns<span class="token punctuation">:</span>
            <span class="token comment"># print(cppout)</span>
            <span class="token comment"># print("↑ cppout ↓ ans")</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Generating testing answer...'</span><span class="token punctuation">)</span>
            ans <span class="token operator">=</span> self<span class="token punctuation">.</span>getAnswer<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment"># print(ans)</span>
            
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Judging...'</span><span class="token punctuation">)</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                cppout_ <span class="token operator">=</span> cppout<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
                ans_ <span class="token operator">=</span> ans<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cppout_<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ans_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">raise</span> BaseException<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cppout_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cppout_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ans_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                        <span class="token keyword">raise</span> BaseException<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            <span class="token keyword">except</span> BaseException <span class="token keyword">as</span> e<span class="token punctuation">:</span>
                f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'check-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d-%H-%M-%S"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">.log'</span></span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Wrong Answer on line </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"-------------IN--------------\n"</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"-------------CPPOUT--------------\n"</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>cppout <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"-------------ANS--------------\n"</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token string">'Wrong Answer'</span>
            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Accepted (</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">round</span><span class="token punctuation">(</span>time2 <span class="token operator">-</span> time1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">s)'</span></span>

        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Program exited successfully (</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">round</span><span class="token punctuation">(</span>time2 <span class="token operator">-</span> time1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">s)'</span></span>
        

j <span class="token operator">=</span> Judger<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span>judge<span class="token punctuation">(</span><span class="token string">'trivial.cpp'</span><span class="token punctuation">,</span> judgeAns<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="附-2-Trivial-cpp"><a href="#附-2-Trivial-cpp" class="headerlink" title="附 2: Trivial.cpp"></a>附 2: Trivial.cpp</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ull</span> <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>

ull data<span class="token punctuation">[</span><span class="token number">500001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'0'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> c <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>
            c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        
        <span class="token keyword">int</span> l <span class="token operator">=</span> i<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> i <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">></span> n<span class="token punctuation">)</span> r <span class="token operator">=</span> n<span class="token punctuation">;</span>
        
        ull currMax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        ull currMaxIndex <span class="token operator">=</span> l <span class="token operator">!=</span> i <span class="token operator">?</span> l <span class="token operator">:</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> T <span class="token operator">=</span> l<span class="token punctuation">;</span> T <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token operator">^</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span>currMax<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                currMax <span class="token operator">=</span> data<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token operator">^</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                currMaxIndex <span class="token operator">=</span> T<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> currMaxIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h1 id="CST2021F-3-3-kth"><a href="#CST2021F-3-3-kth" class="headerlink" title="CST2021F 3-3 kth"></a>CST2021F 3-3 kth</h1><p>​    <strong>[关键词] 堆，偏序关系，归并排序</strong></p>
<h2 id="方案设计-1"><a href="#方案设计-1" class="headerlink" title="方案设计"></a>方案设计</h2><h3 id="偏序关系"><a href="#偏序关系" class="headerlink" title="偏序关系"></a>偏序关系</h3><p>首先我们可以回忆出针对一维数组寻找第 $k$​ 大元素问题的解决方案。我们可以将原数组直接建小顶堆后，第 $k$​ 次 pop 出的元素即为所求，时间复杂度为 $O(n+k*\log n)$​​。而稍微再仔细考虑我们的建堆过程，实际上我们是将这一维数组中的所有元素之间建立起一种偏序关系。没错，偏序关系，这也是接下来我们讨论的重点。</p>
<h3 id="二维情况"><a href="#二维情况" class="headerlink" title="二维情况"></a>二维情况</h3><p>再来考虑针对两个数组的情况。首先我们可以固定某个 $X$ 元素，将 $Y$ 元素的顺序排序；然后固定某个 $Y$ 元素，将 $X$ 元素进行排序。这里排序的意思是说，找到一个序列 $(new_1, new_2, \cdots, new_n)$，使得 $X_{new_i} = sorted(X)[i]$。之后我们便可以记 $X[i]:=X_{new_i}=sorted(X)[i]$.</p>
<p>针对两个数组的情况，我们记 $(i,j)$ 表示值 $X[i]+Y[j]$。可以对于 $(i_1, j_1)$ 与 $(i_2, j_2)$，我们有：</p>
<ul>
<li>$(i_1,j_1) \le (i_2, j_2)$, if $i_1 \le i_2$ and $j_1 \le j_2$.</li>
</ul>
<p>由于我们的内存有限，我们能放在堆中的元素是有限的。所以我们要想出一种组织这些元素的方式，使得每个元素能且仅能出现在小顶堆中一次，也就是说，我们要建立一种新的偏序关系 $M$​​，使得 $\forall (i,j)$, 集合 $\{(x,y)\ |\ (x,y) \le_M (i,j) \ \and\ (x,y)\ne(i,j) \}$ 有最大元 $(m,n)$，即当且仅当 $(m,n)$ 出堆，$(i,j)$ 才能入堆，且这种偏序关系满足如果 $(x,y) \le_M(i,j)$，那么 $(x,y) \le (i,j)$​​​​。</p>
<p>对于数组有两个维度的情况，我们可以构造偏序关系 $M$ 如下图：</p>
<p><img src="https://i.loli.net/2021/11/30/ebFOURVMwqcm56J.png" alt="image-20211130004938307.png"></p>
<p>对于某个顶点 $(i,j)$，可以验证从比它小的元素指向它的边的入度均为 $1$（根节点除外），此即保证了每个元素都能入堆（当在新的偏序关系下，比它小的元素的极大值出堆，即当与它直接相连但比它小的那个顶点出堆，注意这里的“小”均为在新的偏序关系下），且每个元素仅能入堆一次。</p>
<p>于是我们便可以首先将 $(1,1)$ 推入小顶堆中，然后每 pop 一次，将其出边对应的结点推入堆中。这样 pop $k$ 次后得到的 $(x,y)$​ 即为所求。</p>
<h3 id="三维情况"><a href="#三维情况" class="headerlink" title="三维情况"></a>三维情况</h3><p>在三个数组的情况，我们采用与上述类似的记号，而建立的偏序关系如下图：</p>
<p><img src="https://i.loli.net/2021/11/30/nq3Vba9K1WA4P8J.png" alt="image-20211130005405726.png"></p>
<p>于是我们便可以首先将 $(1,1,1)$​​ 推入小顶堆中，然后每 pop 一次，将其出边对应的结点推入堆中。这样 pop $k$​​ 次后得到的 $(x,y,z)$​​ 即为所求。</p>
<h2 id="过程记录-1"><a href="#过程记录-1" class="headerlink" title="过程记录"></a>过程记录</h2><ul>
<li><p>首先对原有的 X，Y，Z 数组进行归并排序，具体来说是找到上述的 $X$​</p>
</li>
<li><p>编写 <code>Index</code> 类模拟上述定义的索引 tuple。可以简单地通过重载运算符来实现两个 <code>Index</code> 之间的比较（调用交互库函数）。</p>
</li>
<li>注意按照上述拓扑关系建立 <code>Index</code> 之间的新偏序关系，以保证所有顶点能且仅能被推入堆中一次。</li>
</ul>
<h2 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>从时间上来说，归并排序所需时间复杂度为 $O(n \log n)$​。注意到上述所有结点最多有 3 条出边，即运行 $k$​ 次上述操作后，可以保证堆中的结点数不超过 $3*k=O(k)$​。对于这样的堆，运行 $k$​ 次 pop，$O(3k)$​ 次 insert，我们有时间复杂度为 $O(k \log k)$​​​。​于是总体时间复杂度为 $O(n \log n + k \log k)$。</p>
<p>对原数组进行排序的归并排序数组辅助空间为 $O(n)$​，堆开辟的空间大小为 $O(3k)=O(k)$​。总空间复杂度为 $O(n+k)$。</p>
<h1 id="CST2021F-3-5-Prefix"><a href="#CST2021F-3-5-Prefix" class="headerlink" title="CST2021F 3-5 Prefix"></a>CST2021F 3-5 Prefix</h1><p>​    <strong>[关键词] KMP next[] 表，动态规划</strong></p>
<h2 id="方案设计-2"><a href="#方案设计-2" class="headerlink" title="方案设计"></a>方案设计</h2><h3 id="关键概念定义"><a href="#关键概念定义" class="headerlink" title="关键概念定义"></a>关键概念定义</h3><p>这里我们采用一种与题目和课堂讲义上不同的字符串及 <code>next[]</code> 表表示方式，具体介绍如下：</p>
<ul>
<li>对于长度为 $n$ 的串 $S$，记之为 $S[1…n]$​. (Index starts from 1)</li>
<li>记 $next[j]$​ 表示 <strong>$S[1…j]$​​ 中最大自匹配的真前缀和真后缀的串长</strong>，也就是说，与讲义中偏重 Pattern String 下一次移动到的位置不同，我们更加侧重的是这个长度值。举个例子：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">i</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">raw[i]</td>
<td>*</td>
<td>a</td>
<td>a</td>
<td>b</td>
<td>a</td>
<td>a</td>
<td>b</td>
</tr>
<tr>
<td style="text-align:center">next[i]</td>
<td>-1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
</tbody>
</table>
</div>
<p>可以证明，这种 next[] 表与讲义上的 next[] 表只偏差了一个 offset。</p>
<h3 id="next-表的构建"><a href="#next-表的构建" class="headerlink" title="next[] 表的构建"></a>next[] 表的构建</h3><p>根据我们的定义，$next[j]$​​ 代表 $S[1…j]$​​ 中<strong>最大自匹配的真前缀和真后缀的串长</strong>，而这个真前缀便是 $S[1…next[j]]$​。</p>
<p>于是，在我们采用递推的方式计算 $next[j+1]$​ 时，我们要寻找的是 $S[1…j+1]$​ 中最大自匹配的真前缀和真后缀的串长。</p>
<p>我们已知 $S[1…t]$​ 与 $S[j-t+1… j]$​ 是匹配的，这里 <strong>$t \in \{next[j], next[next[j]], next[next[next[j]]] \cdots\} =: T_j$​</strong>。</p>
<p>于是，我们便可以逐个考虑序列 $T_j$ 中的元素：</p>
<ul>
<li>如果 $S[j+1]$​​ 与 $S[t+1]$​​ 相等，我们便找到了 $S[1…j+1]$​​ 的一个最大的自匹配的真前缀与真后缀，此即 $next[j+1] \leftarrow t+1$.</li>
<li>不然，我们转而考虑这个序列的下一个元素。</li>
</ul>
<p>由于这个序列最后必然收敛于通配符 <code>*</code>，算法必定终止。</p>
<h3 id="动态规划求前缀出现次数"><a href="#动态规划求前缀出现次数" class="headerlink" title="动态规划求前缀出现次数"></a>动态规划求前缀出现次数</h3><p>考虑串 <code>aabaabaab</code>，定义 $dp[j]$ 表示 $S[1…j]$ 的所有真前缀与真后缀相匹配的次数。可得下表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>i</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
</tr>
</thead>
<tbody>
<tr>
<td>raw[i]</td>
<td>*</td>
<td>a</td>
<td>a</td>
<td>b</td>
<td>a</td>
<td>a</td>
<td>b</td>
<td>a</td>
<td>a</td>
<td>b</td>
</tr>
<tr>
<td>next[i]</td>
<td>-1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
</tr>
<tr>
<td>dp[i]</td>
<td>-</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>2</td>
</tr>
</tbody>
</table>
</div>
<p>归纳可证明：</p>
<script type="math/tex; mode=display">
dp[i] =
\begin{cases}
0, & next[i] = 0, \\
dp[next[i]]+1, & next[i] \gt 0.
\end{cases}</script><p>最后我们的答案还需要考虑整个子串自匹配的情况，即 $S[1…j]$ 在 $S[1…n]$ 中出现过一次，$\forall j \in [1, n]$.</p>
<p>于是答案便是 $n + \sum_{i=1}^ndp[i]$.</p>
<h2 id="过程记录-2"><a href="#过程记录-2" class="headerlink" title="过程记录"></a>过程记录</h2><ul>
<li>通过引入通配符 <code>*</code> 这个哨兵结点，可以有效地进行递推。</li>
<li>需要用 <code>long long</code> 来存储答案数值。</li>
<li>同时记录 $raw, next, dp$ 会导致内存溢出，因为 $(1+4+8)*20M = 260M &gt; 256M.$<ul>
<li>首先想到的解决方案是，由于答案的大小不会超过 $(20M)^2=4e14$，而 $\log_2(4*10^{14})=2+\frac {14} {\lg2} \approx 49$，使用 $56$ 个 bit 便可以将其储存。<ul>
<li>于是我们可以撰写自己的 <code>int56</code> 类，在 get 与 set 对应整数的时候将 <code>long long</code> 通过位运算拆成 <code>char</code>, <code>short</code>, <code>int</code> 三部分（7 Byte）。</li>
<li>经过此种优化之后，内存用量为 $240M$，便有了通过的可能。</li>
</ul>
</li>
<li><s>但是转而一想，数据结构并不是汇编程序设计。</s><ul>
<li>事实上我们按照上述解题思路不难得出，我们是先算出了 $next$ 数组中的所有值，然后根据 $next$ 数组的值去递推 $dp$ 数组。</li>
<li>事实上，我们可以考虑只建立一个 $next$​ 数组，为 <code>long long</code> 类型，首先在其中算出所有 $next_j$，然后根据这个 $next_j$ 计算 $dp_i$，实行就地覆盖的方法，并不会影响答案的结果。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>KMP 的 next[] 表构建过程时间复杂度为 $O(n)$，之后根据 $next$ 递推 $dp$ 与累加求和的复杂度均为 $O(n)$。于是时间复杂度为 $O(n)$。</p>
<p>空间上，使用 $raw$​ 与 $next$​ 数组均为 $O(n)$​ 大小，最大内存使用量为 $20M*9=180M&lt;256M$。</p>
<h1 id="CST2021F-3-7-Sort"><a href="#CST2021F-3-7-Sort" class="headerlink" title="CST2021F 3-7 Sort"></a>CST2021F 3-7 Sort</h1><p>​    <strong>[关键词] 归并排序， 四路归并</strong></p>
<h2 id="方案设计-3"><a href="#方案设计-3" class="headerlink" title="方案设计"></a>方案设计</h2><p>首先由题目测试数据给出的 $n$ 和 $k$ 的大小关系我们可以果断摒弃掉最坏情况为 $O(n^2)$ 的冒泡排序，选择排序等等算法。这些算法即使在一次能比较的数的个数上进行了优化，这也只是常数级别的，并不能撼动其数量级的地位。</p>
<p>目光自然转向了复杂度为 $O(n \log n)$ 的快速排序和归并排序上。我们要做的，便是利用比较器一次可以比较三个数的性质，对这些复杂度已经达到理论下界的算法进行常数级别的优化。</p>
<p>这里由于归并排序的稳定性，所以首选的是归并排序。首先我们自然可以想到的是，模仿二路归并的具体实现，如果比较器一次可以比较三个数，那么我们可以尝试实现三路归并，这样需要求解的递推方程为 $Cmp(n) = 3*Cmp(\frac n 3) + n$​，这是基于每经过一次比较，我们就可以确定三路中的最小元素，并将其从三路中取出，放置于数组的对应位置​。</p>
<p>但是如果我们代入 $n=3^k$​​ 对该方程求解，我们得出 $a_k=(k+1)<em>3^k$​​，其中 $a_k=Cmp(3^k)$​​，此即 $Cmp(n) \sim n</em>\log_3n$​​。代入 $n=10^6$ 我们有 $Cmp(n) \approx 7.6*10^7$。不能满足我们对 $limit$ 的要求。</p>
<p>于是想法转移到能否更加 exploit 比较器返回的结果中包含的信息。具体来说，在三路归并中，每次比较都能返回 $a&lt;b&lt;c$，我们只运用到了 $a&lt;b$, $a&lt;c$ 这两个部分，并没有利用到 $c$​ 是三者的最大值这么一个条件。而一旦 $c$ 是最大值，由于有 $b&lt;c$，可以保证在下次的比较过程中，$c$ 一定不是三者中的最小值。这竟然退化成了 $b,c,d$ 比较，实际上我们用比较器只比较了 $b, d$ 的二路归并的情况。</p>
<p>于是再进一步，我们考虑可以使用四路归并，便可以尽力 exploit 比较器的返回信息。具体来说，和上述想法相似，对于待合并数组 $a,b,c,d$，一旦我们在 $a,b,c$ 中比较得到 $a&lt;b&lt;c$，在下一次比较选择最小值时，我们便可以忽略掉 $c$，只比较 $next(a), b,d$，其正确性由 $b&lt;c$，即 $c$ 一定不是最小值保证。</p>
<p>这样需要求解的递推方程为 $Cmp(n) = 4<em>Cmp(\frac n 4) + n$​，此即 $Cmp(n) \sim n</em>\log_4n$​。代入 $n=10^6$​ 我们有 $Cmp(n) \approx 9.97*10^6&lt;limit_n$​。</p>
<h2 id="过程记录-3"><a href="#过程记录-3" class="headerlink" title="过程记录"></a>过程记录</h2><p>四路归并的具体实现过程中，递归过程与二路归并类似，而重点在于四路合并的过程。具体来说，我们可以先在 $a,b,c,d$ 四个数组中选取前三个数组 $a,b,c$ 做一次比较，将三者中的最大值的数组信息记录在一个全局变量 <code>nextBypass</code> 中。</p>
<p>然后我们便可以进入循环，每次比较除了该全局变量 <code>nextBypass</code> 记录的数组的剩下三个数组的首元素的相对大小信息，然后将三者中的最大值所在的数组信息更新给全局变量 <code>nextBypass</code>，而将最小值写入最终的合并后数组中，直到四路中某个数组耗竭，退化成上述平凡的三路归并的情况，进而退化成更加平凡的二路归并的情况，进而退化成更加更加平凡的数组拷贝的情况。</p>
<h2 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>四路归并中，时间复杂度方程与 $Cmp(n) = 4*Cmp(\frac n 4) + n$ 同构，即 $T(n) = O(n \log_4 n)$。而我们在上文也证明了比较次数 $Cmp(n) = O(n \log_4 n)$。</p>
<p>在空间上，主要开辟的是 $a,b,c,d$ 四个数组的辅助空间，空间复杂度为 $O(n)$。</p>
]]></content>
      <categories>
        <category>程设</category>
        <category>程设/数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>《数据结构》课程 PA2 报告</title>
    <url>/dsa-pa2/</url>
    <content><![CDATA[<p>内含以下题目的实验报告：</p>
<ul>
<li>CST2021F 2-1 Build</li>
<li>CST2021F 2-2 Not Found</li>
<li>CST2021F 2-4-2 Kidd</li>
<li>CST2021F 2-6 Hacker</li>
</ul>
<p>这里不提供任何解题代码，仅将解题的白盒报告归档处理。</p>
<p>本博文仅做参考使用，任何可能影响您查重结果的行为请您后果自负！</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Problem</th>
<th style="text-align:center">White Box (20%)</th>
<th style="text-align:center">Black Box (80%)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CST2021F 2-1 Build (25%)</td>
<td style="text-align:center">100</td>
<td style="text-align:center">[100] -1</td>
</tr>
<tr>
<td style="text-align:center">CST2021F 2-2 Not Found (25%)</td>
<td style="text-align:center">95</td>
<td style="text-align:center">[100] -1</td>
</tr>
<tr>
<td style="text-align:center">CST2021F 2-4-2 Kidd (25%)</td>
<td style="text-align:center">95</td>
<td style="text-align:center">[100] -1</td>
</tr>
<tr>
<td style="text-align:center">CST2021F 2-6 Hacker (25%)</td>
<td style="text-align:center">100</td>
<td style="text-align:center">[100] -2</td>
</tr>
</tbody>
</table>
</div>
<a id="more"></a>
<h2 id="CST2021F-2-1-NotFound"><a href="#CST2021F-2-1-NotFound" class="headerlink" title="CST2021F 2-1 NotFound"></a>CST2021F 2-1 NotFound</h2><p>​    <strong>[关键词] 父亲-长子-兄弟法的多叉树表示，List</strong></p>
<h3 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h3><h4 id="结点"><a href="#结点" class="headerlink" title="结点"></a>结点</h4><p>每个结点需要维护以下信息。</p>
<ul>
<li><code>parent</code>，指向父亲的指针</li>
<li><code>firstChild</code>，指向长子的指针</li>
<li><code>nextSibling</code>，指向下一个兄弟的指针</li>
<li><code>prevSibling</code>，指向前一个兄弟的指针</li>
<li><code>height</code>，子树高度</li>
<li><code>size</code>，子树规模</li>
<li><code>suffixMaxHeight</code>，以自己为基点，自己及自己之后的兄弟的高度的最大值</li>
<li><code>childLength</code>，孩子个数</li>
<li><code>childPushed</code>，在建树时用到的临时变量</li>
</ul>
<p>其中 <code>suffixMaxHeight</code> 的维护是基于复杂度分析的考量。每次更新时我们需保证复杂度不大于 $O(cost)$，$cost$ 中包含了结点的 $Rank$、也就是说，为了避免遍历所有孩子结点，我们可以考虑维护后续高度的最大值，然后只更新<strong>长子</strong>到<strong>本结点</strong>这些兄弟的高度最大值即可。父亲的高度自然是长子的 <code>suffixMaxHeight</code> + 1。这样就保证了单步更新高度复杂度在 $O(Rank)$，进而整体更新高度 $O(cost)$​ 范围内。</p>
<h4 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h4><p>我们在遍历初始树的时候按照以下原则，效力从上到下递减：</p>
<ul>
<li>如果一个结点的 <code>childPushed</code> 为 <code>false</code>，那么将其该字段设为 <code>true</code>，并将其压入栈中，将其所有孩子按照长子到末子的顺序压入栈中。</li>
<li>如果一个结点是叶节点，那么直接将其预处理。<ul>
<li>$height \leftarrow 0$​</li>
<li>$size \leftarrow 1$</li>
<li>$suffixMaxHeight \leftarrow \max(suffixMaxHeight_{nextSibling?}, height)$​​</li>
<li>$parent?.height \leftarrow parent?.height+1 $</li>
</ul>
</li>
<li>不然我们得出该结点一定有长子，且其所有孩子一定先于其被预处理。<ul>
<li>$height \leftarrow firstChild.suffixMaxHeight +1$</li>
<li>$size \leftarrow size + 1$​</li>
<li>$suffixMaxHeight \leftarrow \max(suffixMaxHeight_{nextSibling?}, height)$</li>
<li>$parent?.height \leftarrow parent?.height+1 $</li>
</ul>
</li>
<li>其中 $?$ 表示对其不存在的情况做特判。</li>
</ul>
<h4 id="删除子树"><a href="#删除子树" class="headerlink" title="删除子树"></a>删除子树</h4><p>分待删除子树是不是长子两种情况考虑。</p>
<ul>
<li>改变子树局部的拓扑结构</li>
<li>沿“祖父”链更新子树规模</li>
<li>沿“结点$\rightarrow$长子$\rightarrow$父亲$\rightarrow\cdots$”链更新 <code>height</code> 与 <code>suffixMaxHeight</code></li>
</ul>
<h4 id="插入子树"><a href="#插入子树" class="headerlink" title="插入子树"></a>插入子树</h4><p>分待插入子树是不是长子两种情况考虑。</p>
<ul>
<li>改变子树局部的拓扑结构</li>
<li>沿“祖父”链更新子树规模</li>
<li>沿“结点$\rightarrow$长子$\rightarrow$父亲$\rightarrow\cdots$”链更新 <code>height</code> 与 <code>suffixMaxHeight</code></li>
</ul>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>根据我们维护的 <code>size</code> 和 <code>height</code>，找到对应节点输出相应数据即可。</p>
<h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><blockquote>
<p>目的位置的节点表示为移除源子树后的节点表示。</p>
</blockquote>
<p>题没读完就下手，对拍写的都是错的，痛苦 Debug 一天，然后不及 5min 读一遍题有效。</p>
<p>具体来说，提交记录交了 5 页，assert 出某个测试数据要在某个我认为的“叶节点”的第 1 个位置插入元素。猜测拓扑结构的查询或是更新出了问题，但小数据可以 AC，感觉大部分移动都是没问题的。于是感觉有种特殊情况处理的不对。大不解，重新读题…</p>
<p>事实上理解题意之后也直接可以手写一组小数据 Hack 掉自己的程序。</p>
<p>本题唯一有思想价值的是 <code>suffixMaxHeight</code> 的维护。既然不能在更新子树时遍历所有孩子，而复杂度要求我们可以在 $Rank$ 内完成子树的维护，于是我们就想到这样一种类似于区间最值的维护手段，每次更新只更新 $[0, Rank]$​ 的数据即可。</p>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>在建树时每个结点至多被压入栈中两次，预处理可以视为 $O(1)$ 时间，因而建树的时间复杂度为 $O(n)$。</p>
<p>按照上面对 <code>suffixMaxHeight</code> 维护的分析，所有单步操作 $i$ 的复杂度被 $O(cost_i)$ 所控制，因而整体 $m$ 次操作的复杂度被 $O(cost)$ 所控制。</p>
<p>总体来看时间复杂度为 $O(n+cost)$。</p>
<p>空间复杂度方面，只有结点列表和预处理栈大规模使用了空间，复杂度为 $O(n)$。</p>
<h2 id="CST2021F-2-2-NotFound"><a href="#CST2021F-2-2-NotFound" class="headerlink" title="CST2021F 2-2 NotFound"></a>CST2021F 2-2 NotFound</h2><blockquote>
<p>归档时注：该方法极有可能在优化不足的情况下被卡常，网络学堂已有人提交对应测例，本人并未对其进行测试。</p>
</blockquote>
<p>​    <strong>[关键词] Bitmap, BitMask</strong></p>
<h3 id="方案设计-1"><a href="#方案设计-1" class="headerlink" title="方案设计"></a>方案设计</h3><h4 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h4><p>考虑使用类似于 Bitmap 的结构，来逐位进行存储数据。</p>
<p>一个 unsigned char 为 8 个 Bit，将长度为 $2^{24}$​ 长的 0/1 串存储需要 $2^{24}/8=2^{21}$​ 个，内存占用 $2$ MB。 </p>
<h4 id="答案长度"><a href="#答案长度" class="headerlink" title="答案长度"></a>答案长度</h4><p>我们考虑答案长度的上界 $M$，即假设至多需要 $k$​​ 的长度才能得出答案。</p>
<p>那么字符串中所有长度为 $k$ 的连续字串共有 $n-k+1$ 个。</p>
<p>而 $k$ 的长度的所有可能情况有 $2^k$ 种。</p>
<p>于是我们令 $n-k+1<2^k$，即 $2^k+k>n+1$ 时，即可充分地保证答案存在，于是我们得出 $k \ge log_2 n$ 即可。</p>
<p>事实上，我们证明了答案的最大长度不超过 $log_2 n$​，因此我们不妨取 $M=24$​.</p>
<p>于是我们可以考虑枚举答案，最多不超过 $\sum_{k=1}^{24} 2^{k}$ 种可能情况。</p>
<h4 id="判断答案"><a href="#判断答案" class="headerlink" title="判断答案"></a>判断答案</h4><p>对输入字符串进行枚举一次，得出所有不满足答案要求的定长子串的时间为 $O(n)$​。而我们知道，针对不同的答案长度 $k\in[1, M]$​，封顶估计我们只需要枚举字符串 $Mn = 24n$​​​​ 次，便可以得到所有子串的情况。而我们只需要反选出所有可能的答案序列中，最早的一个即可。</p>
<p>而想要实现反选的效果，我们用 Ans 数组（unsigned char, $2^{21}$​）来记录某种情况是否已经出现。比如在枚举答案长度为 3，输入子串为 101 时，便将 Ans 数组的第 5 个 Bit 置为 1，表示该种情况存在。最终我们只需要输出第一个为 0 的 Bit 的 index 的二进制表示即可。</p>
<p>同时，一旦我们检测到某个答案长度下的<strong>输入数据的子串数目</strong>与<strong>可能的最多子串数目</strong>相等，便可以剪枝优化。</p>
<h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><p><strong>具体来说，我们考虑下面一个例子。</strong></p>
<p>对样例数据 $10100011$，我们考虑：</p>
<p>[AnsLen = 1]</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>输入数据的一个小 Window</th>
<th>Ans 数组</th>
<th>输入数据在本长度下的子串数目</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>01</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>11</td>
<td>2</td>
</tr>
</tbody>
</table>
</div>
<p>[AnsLen = 2]</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>输入数据的一个小 Window</th>
<th>Ans 数组</th>
<th>输入数据在本长度下的子串数目</th>
</tr>
</thead>
<tbody>
<tr>
<td>10</td>
<td>0010</td>
<td>1</td>
</tr>
<tr>
<td>01</td>
<td>0110</td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td>0110</td>
<td>2</td>
</tr>
<tr>
<td>00</td>
<td>1110</td>
<td>3</td>
</tr>
<tr>
<td>00</td>
<td>1110</td>
<td>3</td>
</tr>
<tr>
<td>01</td>
<td>1110</td>
<td>3</td>
</tr>
<tr>
<td>11</td>
<td>1111</td>
<td>4</td>
</tr>
</tbody>
</table>
</div>
<p>[AnsLen = 3]</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>输入数据的一个小 Window</th>
<th>Ans 数组</th>
<th>输入数据在本长度下的子串数目</th>
</tr>
</thead>
<tbody>
<tr>
<td>101</td>
<td>00000100</td>
<td>1</td>
</tr>
<tr>
<td>010</td>
<td>00100100</td>
<td>2</td>
</tr>
<tr>
<td>100</td>
<td>00101100</td>
<td>3</td>
</tr>
<tr>
<td>000</td>
<td>10101100</td>
<td>4</td>
</tr>
<tr>
<td>001</td>
<td>11101100</td>
<td>5</td>
</tr>
<tr>
<td>011</td>
<td>11111100</td>
<td>6</td>
</tr>
</tbody>
</table>
</div>
<p>我们最终判断得到 $6 \ne 2^{3} = 8$​，于是在此时寻找第一个为 0 的元素 $6$ 并输出其在长度为 3 意义下的二进制表示 $110$，即为答案。</p>
<h3 id="过程记录-1"><a href="#过程记录-1" class="headerlink" title="过程记录"></a>过程记录</h3><p>我们使用“对拍”验证程序的运行时间，具体来说我们生成长度为 $2^{24}$ 的随机测试数据，然后让程序多次实验取最坏情况。</p>
<p><s>经测试，在随机数据上程序运行的最坏时间为 $0.57s$​​​​。</s></p>
<p>事实上打开了 O2 优化开关之后运行的平均最坏时间为 $0.2s$。 </p>
<p>在报告的最后会附上对拍代码。</p>
<h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>在空间上，使用了两个大小为 $2^{21}$ 的 unsigned char 数组，不超过 $4$ M。</p>
<p>在时间上，复杂度主要为对输入子串做连续子串截取与最终的反向寻找答案，二者最坏情况为 $O(n)$，都最多进行 $M$ 次，故最终复杂度为 $O(Mn)=O(n\log n)$​。</p>
<p>附：Judger 代码</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Judger by c7w</span>
<span class="token keyword">import</span> io
<span class="token keyword">import</span> time
<span class="token keyword">import</span> datetime
<span class="token keyword">import</span> random
<span class="token keyword">import</span> subprocess
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token keyword">class</span> <span class="token class-name">Judger</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">generateInputData</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        IN <span class="token operator">=</span> <span class="token string">''</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            IN <span class="token operator">+=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>
        IN <span class="token operator">+=</span> <span class="token string">'\n'</span>
        <span class="token keyword">return</span> IN

    <span class="token keyword">def</span> <span class="token function">getAnswer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        OUT <span class="token operator">=</span> <span class="token string">''</span>
        <span class="token keyword">return</span> OUT<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">judge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> judgeAns<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n\nCompiling...'</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'g++'</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">,</span> <span class="token string">'-o'</span><span class="token punctuation">,</span> <span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> subprocess<span class="token punctuation">.</span>CalledProcessError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">'CE'</span>
        
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Generating testing data...'</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> self<span class="token punctuation">.</span>generateInputData<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Running...'</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            time1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
            cppout <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">2.0</span><span class="token punctuation">)</span>
            cppout <span class="token operator">=</span> cppout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
            time2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> subprocess<span class="token punctuation">.</span>TimeoutExpired<span class="token punctuation">:</span>
            f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'check-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d-%H-%M-%S"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">.log'</span></span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Time Limit Exceeded\n"</span></span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"-------------IN--------------\n"</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Time Limit Exceeded (2.000s)'</span></span>
        <span class="token keyword">except</span> subprocess<span class="token punctuation">.</span>CalledProcessError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'check-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d-%H-%M-%S"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">.log'</span></span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Runtime Error (signal </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span>returncode<span class="token punctuation">&#125;</span></span><span class="token string">)\n"</span></span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"-------------IN--------------\n"</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Runtime Error (Signal </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span>returncode<span class="token punctuation">&#125;</span></span><span class="token string">)'</span></span>
        
        <span class="token keyword">if</span> judgeAns<span class="token punctuation">:</span>
            <span class="token comment"># print(cppout)</span>
            <span class="token comment"># print("↑ cppout ↓ ans")</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Generating testing answer...'</span><span class="token punctuation">)</span>
            ans <span class="token operator">=</span> self<span class="token punctuation">.</span>getAnswer<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment"># print(ans)</span>
            
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Judging...'</span><span class="token punctuation">)</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                cppout_ <span class="token operator">=</span> cppout<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
                ans_ <span class="token operator">=</span> ans<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cppout_<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ans_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">raise</span> BaseException<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cppout_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cppout_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ans_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                        <span class="token keyword">raise</span> BaseException<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            <span class="token keyword">except</span> BaseException <span class="token keyword">as</span> e<span class="token punctuation">:</span>
                f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'check-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d-%H-%M-%S"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">.log'</span></span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Wrong Answer on line </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"-------------IN--------------\n"</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"-------------CPPOUT--------------\n"</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>cppout <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"-------------ANS--------------\n"</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token string">'Wrong Answer'</span>
            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Accepted (</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">round</span><span class="token punctuation">(</span>time2 <span class="token operator">-</span> time1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">s)'</span></span>
        
        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># Do not judge answer</span>
            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Program exited (</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">round</span><span class="token punctuation">(</span>time2 <span class="token operator">-</span> time1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">s)'</span></span>
        

j <span class="token operator">=</span> Judger<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span>judge<span class="token punctuation">(</span><span class="token string">'main.cpp'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h2 id="CST2021F-2-4-2-Kidd"><a href="#CST2021F-2-4-2-Kidd" class="headerlink" title="CST2021F 2-4-2 Kidd"></a>CST2021F 2-4-2 Kidd</h2><p>​    <strong>[关键词] Segment Tree</strong></p>
<h3 id="方案设计-2"><a href="#方案设计-2" class="headerlink" title="方案设计"></a>方案设计</h3><h4 id="建树-1"><a href="#建树-1" class="headerlink" title="建树"></a>建树</h4><p>首先读入数据，将所有操作预存储。</p>
<p>将所有 $[i, j]$​ 区间考虑为 $(i-1, j]$​ 的形式，并且将所有的 $(p_i, p_j]$​ 区间合并端点后，排序去重得到分点集合 $\{sep_0, sep_1, sep_2, \cdots, sep_{pos}\}$​​。</p>
<p>这样，我们便可以将 $(sep_{i-1}, sep_{i}]$​​​​​ 中所有的点在接下来的考虑中等而视之，我们不妨将其<strong>翻转次数和</strong>记作 $a_{i+1}$​。同时我们计算 $(sep_{i-1}, sep_{i}]$​​​​ 中所含有点的个数，来作为最终更新<strong>翻转次数和</strong>的时候该区间对应的权重 $weight$​。</p>
<p>我们维护两个数组 $sum$ 与 $lazy$​ 表示对应的区间的<strong>翻转总次数和</strong>以及<strong>没有下放的翻转次数</strong>。</p>
<p><img src="https://i.loli.net/2021/10/25/cwCBoszY5lZEpdm.png" alt="image-20211025173503713"></p>
<p>图为一颗普通的线段树的样子，其中绿色标记为其在数组中对应的存储下标。</p>
<p>然后我们就可以用这种数据结构去维护<strong>翻转次数和</strong>以及<strong>懒惰标记</strong>了，更新和查询操作如下。</p>
<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p><img src="https://i.loli.net/2021/10/25/6hcbXIyVQtr7OZE.png" alt="image-20211025173608364"></p>
<p>首先，我们要把待更新区间通过在有序分点集合中二分查找，找到其对应的最左区间 $a_l$ 和最右区间 $a_r$。</p>
<p>现在问题转化成我们要更新 $[a_l, a_r]$​ 中的所有元素。通过分治的方法我们可以将待更新区间分割成如图所示的若干个极大区间 $[a_{i_0}, a_{i_1}], \cdots, [a_{i_k}, a_{i_{k+1}}]$​，然后对其做一次“更新”操作，其中“更新”操作定义如下：</p>
<ul>
<li>将自身和自身的所有祖先的 $sum$ 加上自己的权值，表示对应区间翻转次数增加这个权值。</li>
<li>将自身的“懒惰”标记 $lazy$ 增加 1，表示有一次翻转并没有通知自己的子节点。</li>
</ul>
<h4 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h4><p><img src="https://i.loli.net/2021/10/25/EsUpMG86bPRTlwi.png" alt="image-20211025174102147"></p>
<p>首先，我们要把待查询区间通过在有序分点集合中二分查找，找到其对应的最左区间 $a_l$ 和最右区间 $a_r$​。</p>
<p>现在问题转化成我们要查找 $[a_l, a_r]$​ 中的所有元素。通过分治的方法我们可以将待查找区间分割成如图所示的若干个极大区间 $[a_{i_0}, a_{i_1}], \cdots, [a_{i_k}, a_{i_{k+1}}]$​，然后对其做一次“查找”操作，其中“查找”操作定义如下：</p>
<ul>
<li>在“分割”成极大子区间的过程中，如果一个含有懒惰标记的区间 $a_i$​​ 被分割，那么将该懒惰标记释放，同时其两个子区间 $a_j, a_k$​​ 要更新其 $sum$​​ 值和 $lazy$ 值：<ul>
<li>$sum_j \leftarrow sum_j + weight_j*lazy_i$​</li>
<li>$sum_k \leftarrow sum_k + weight_k*lazy_i$​</li>
<li>$lazy_j \leftarrow lazy_j + lazy_i$</li>
<li>$lazy_k \leftarrow lazy_k + lazy_i$</li>
<li>事实上，这是对之前更新时并未更新子区间的翻转次数和的“延时效应”的激活。</li>
</ul>
</li>
<li>返回各个极大子区间的 $sum$ 值之和。</li>
</ul>
<h3 id="过程记录-2"><a href="#过程记录-2" class="headerlink" title="过程记录"></a>过程记录</h3><p>理清思路是很重要的。</p>
<p>在首次划分区间的时候，并没有考虑 $(0, sep_0]$ 和 $(sep_{pos-1}, n]$ 这两个区段，导致算法运行时出现错误。</p>
<p>经过考虑不妨补充上这两个区间，即使 $sep_0 = 0$ 或是 $sep_{pos-1} = n$​，将其作为哨兵结点即可，在有序分点集合的二分查找中也不会命中它们。</p>
<h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>设分点总数为 $M$​​，可知 $M \le 2m$​​​，即 $M = O(m)$。</p>
<p>建树时排序 $O(Mlog M)$​，去重 $O(M)$​。在求权重时调用了递归方程对每个区间都求了权重，$T(M) = 2T(\frac M 2) +O(1)$，解递归方程复杂度 $O(M)$​。</p>
<p>更新时，首先在有序分点集合进行二分查找，复杂度 $O(logM)$​。因为有了懒惰标记，所以更新 $sum$​ 值的节点的个数被树高控制，即更新时复杂度为 $O(logM)$​。于是单次更新的复杂度为 $O((logM)^2)$​。</p>
<p>而在查询时，首先在有序分点集合进行二分查找，复杂度 $O(logM)$。因为极大区间存储了其对应子区间的 $sum$ 值总和，所以我们不需要遍历每一个子节点，与查询相关的极大子区间个数也被树高控制。于是单次查询的复杂度为 $O((logM)^2)$​。</p>
<p>由此我们可以得出，本算法的时间复杂度为 $O(MlogMlogM)$​​，即 $O(m\log m\log m)$.</p>
<p>而在空间上，我们使用的分点集合大小为 $M$​​​​，线段树对应的每个 $sum$​​​, $lazy$​​​, $weight$​​​ 的元素个数为 $O(m)$，于是我们得出空间复杂度为 $O(m)$​​​.</p>
<h2 id="CST2021F-2-6-Hacker"><a href="#CST2021F-2-6-Hacker" class="headerlink" title="CST2021F 2-6 Hacker"></a>CST2021F 2-6 Hacker</h2><p>​    <strong>[关键词] Hash, CRC32, Bitmask</strong></p>
<h3 id="方案设计-3"><a href="#方案设计-3" class="headerlink" title="方案设计"></a>方案设计</h3><h4 id="密码表示"><a href="#密码表示" class="headerlink" title="密码表示"></a>密码表示</h4><p>首先我们建立密码可能存在的字符与整数的对应关系。</p>
<ul>
<li>‘0’ ~ ‘9’ 映射至 0 ~ 9</li>
<li>‘t’, ‘s’, ‘i’, ‘n’, ‘g’, ‘h’, ‘u’, ‘a’ 映射至 10 ~ 17</li>
</ul>
<p>用字符数组来存储不方便我们进行管理，由于每个密码长度不超过八位，我们做以下规定：</p>
<ul>
<li>使用 <code>long long</code> ($64$ Bit) 来表示一个密码</li>
<li>密码的后 $4$ 个 Bit 表示密码长度.</li>
<li>密码的后 $[5k+4, 5k+9)$​ 个 Bit 表示倒数第 $k$ 个字符。</li>
</ul>
<p>比如，密码 <code>222</code> 可以表示为 $0b0000200002000020011$ </p>
<p>我们可以通过方便的移位操作和与操作来取出对应位数的字符。</p>
<p>将密码组织成密码结点的形式，存储其 salted(CRC32) 值，当前密码以及下一个同样 key 的密码结点的地址。</p>
<p>特别的，如果一个 CRC32 值已冲突，我们将密码记为 -1，即 $11111 \cdots 1111$。​</p>
<h4 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h4><p>我们的取模值 M 取为 5999993.</p>
<p>我们的 HashTable 取长度为 M，待插入其中的元素 key 为 $salted(CRC32) \mod M$​​，值为对应的密码结点地址。</p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>首先我们需要把 $\bigcup_{i=1}^{5} \Sigma^i$​​ 的所有字符串加入 HashTable 中。</p>
<p>根据 <code>CRC32</code> 函数的流拼接性质，我们使用队列来实现类似广度优先搜索的操作。</p>
<p>具体来说，首先向散列表插入 $\Sigma$ 中的所有元素，并将其入队。如果队列中还有剩余元素，那么首先向散列表插入将其与 $\Sigma$ 中所有元素拼接的结果，如果这些结果长度小于 5，那么继续将其入队。</p>
<h4 id="散列表的动态操作"><a href="#散列表的动态操作" class="headerlink" title="散列表的动态操作"></a>散列表的动态操作</h4><h5 id="查询-2"><a href="#查询-2" class="headerlink" title="查询"></a>查询</h5><p>首先将对应的 CRC32 值加盐，称为 salted(CRC32)。</p>
<p>查询 salted(CRC32) % M 单元，返回第一个 CRC32 值为 salted(CRC32) 的密码结点。</p>
<p>如果没查询到返回 nullptr。</p>
<h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><p>首先将 CRC32 值加盐，称之为 salted(CRC32)。</p>
<p>对散列表查询 CRC32 % M 单元，如果返回 nullptr 直接插入到该单元。</p>
<p>如果发现了一个 salted(CRC32)，那么直接将其 pass 设置为 -1.</p>
<h4 id="历史记录维护"><a href="#历史记录维护" class="headerlink" title="历史记录维护"></a>历史记录维护</h4><p>历史记录使用一维长度为 8 的滚动数组维护，需要存储其累积至今的 CRC32 值和 pass 值。</p>
<p>根据 CRC32 的流性质在有新的成功记录时直接拼接即可。</p>
<h3 id="过程记录-3"><a href="#过程记录-3" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://i.loli.net/2021/10/29/S8ZgtnEvzKwhGFX.png" alt="image-20211029213744001"></p>
<center>《当你看代码逻辑三小时而不知出什么问题.jpeg》</center>

<ul>
<li>初版代码忘了在历史记录插入 HashTable 时加盐（样例都跑不过 本地解决）</li>
<li>第一次九成测内存空间没算对。密码结点最多数目为 $2M$（Init）+ $3M$​（历史记录插入）</li>
</ul>
<h3 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>首先我们分析 HashTable 的查询与插入过程。</p>
<p>查询 HashTable，由于 HashTable 的长度大于实际最终可能的密码结点总数，因此分摊而言查询复杂度为 $O(1)$。</p>
<p>插入 HashTable 包含了一个查询过程和插入过程。因此时间也是 $O(1)$。</p>
<p>初始处理 1 ~ 5 位的初始字符串集合需要处理 $18 + 18^2 + 18^3 + 18^4 + 18^5 = 2<em>10^6$ 的数据，因此需要 $O(T)$​ 的时间，这里 $T=2</em>10^6$。</p>
<p>而后续处理的过程中，对于每个 CRC32 值，我们均需查询，如果成功还需维护历史记录，但是这些操作均在 $O(1)$ 时间内能够完成，因此整体来看时间复杂度为 $O(n)$。</p>
<p>于是整体的时间复杂度为 $O(T+n)$，其中 $T=2*10^6$，为初始遍历序列的势。</p>
<p>空间复杂度而言，我们每个密码结点需要 24 Byte（考虑到对齐要求），$24<em>5M=120M$​。而 HashTable 只需要储存密码结点的地址，$8</em>6M=48M$。遍历初始序列的队列大小为 $0.1M$，可以忽略。这样我们就整体在 $O(n)$​ 的空间复杂度内，且常数符合题目要求的情况下，完成了题目。</p>
]]></content>
      <categories>
        <category>程设</category>
        <category>程设/数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>《数据结构》课程 Lab 报告</title>
    <url>/dsa-lab/</url>
    <content><![CDATA[<p>内含以下题目的实验报告：</p>
<ul>
<li>CST2021F LAB1 Zuma</li>
<li>CST2021F LAB2 HashFun</li>
<li>CST2021F LAB3 BBST</li>
</ul>
<p>这里不提供任何解题代码，仅将解题的白盒报告归档处理。</p>
<p>本博文仅做参考使用，任何可能影响您查重结果的行为请您后果自负！</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Problem</th>
<th style="text-align:center">White Box (100%)</th>
<th style="text-align:center">Black Box (0%)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CST2021F LAB1 Zuma (100%)</td>
<td style="text-align:center">97</td>
<td style="text-align:center">[0]</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Problem</th>
<th style="text-align:center">White Box (100%)</th>
<th style="text-align:center">Black Box (0%)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CST2021F LAB2 HashFun (100%)</td>
<td style="text-align:center">98</td>
<td style="text-align:center">[100]</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Problem</th>
<th style="text-align:center">White Box (80%)</th>
<th style="text-align:center">Black Box (20%)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CST2021F LAB3 BBST (100%)</td>
<td style="text-align:center">100</td>
<td style="text-align:center">[100]</td>
</tr>
</tbody>
</table>
</div>
<a id="more"></a>
<h2 id="LAB1"><a href="#LAB1" class="headerlink" title="LAB1"></a>LAB1</h2><h3 id="01"><a href="#01" class="headerlink" title="01"></a>01</h3><ul>
<li>错误类型: Runtime Error</li>
<li>错误原因: 访问 <code>string a</code> 时可能发生越界访问</li>
<li>相应测例<pre class="language-none"><code class="language-none">XYZ
3
0 X
0 X
0 X</code></pre></li>
<li>标准答案: <code>XYZ\n</code></li>
<li>构造思路<ul>
<li>在程序的 19 行 <code>play(left - 1);</code> 可能发生越界访问的情况(原因在于第 10 行 <code>char color = a.at(rank);</code> 直接对 <code>rank</code> 进行了访问).</li>
<li>我们只需构造输入让 <code>left</code> 的值 <code>0</code>，也就是构造在字符串 <code>a</code> 的最左边进行一次消除的情况即可.</li>
</ul>
</li>
</ul>
<h3 id="02"><a href="#02" class="headerlink" title="02"></a>02</h3><ul>
<li>错误类型: Runtime Error</li>
<li>错误原因: 访问 <code>string a</code> 时可能发生越界访问</li>
<li>相应测例<pre class="language-none"><code class="language-none">
3
0 X
0 X
0 X</code></pre></li>
<li>标准答案: <code>\n</code></li>
<li>构造思路<ul>
<li>在程序的 23 行 <code>play(left - 1);</code> 可能发生越界访问的情况(原因在于第 10 行 <code>char color = a.at(rank);</code> 直接对 <code>rank</code> 进行了访问).</li>
<li>我们只需让程序的 18 行字符串 <code>a</code> 的值在 <code>erase()</code> 后为空，此时的 <code>next</code> 值便会变成 <code>0</code>.</li>
<li>在下次 <code>play</code> 时，便会尝试访问一个空串中的第 <code>0</code> 个元素.</li>
</ul>
</li>
</ul>
<h3 id="03"><a href="#03" class="headerlink" title="03"></a>03</h3><ul>
<li>错误类型: Time Limit Exceeded</li>
<li>错误原因: 算法效率过低</li>
<li>相应测例<pre class="language-none"><code class="language-none">[&quot;QWER&quot; x 65536 times]
262144
[&quot;0 X\n0 Y\n&quot; x 131072 times]</code></pre></li>
<li>标准答案: <code>YXYX...(Trash)...QWER...(Trash)...QWER\n</code></li>
<li>构造思路<ul>
<li>现算法时间复杂度为 $O(mn)$, 构造足够大的数据规模即可.</li>
</ul>
</li>
</ul>
<h3 id="04"><a href="#04" class="headerlink" title="04"></a>04</h3><ul>
<li>错误类型: Wrong Answer</li>
<li>错误原因: 在进行 <code>while</code> 寻找可消除元素串时对边界情况处理错误</li>
<li>相应测例<pre class="language-none"><code class="language-none">XYY
1
1 Y</code></pre></li>
<li>标准答案: <code>X\n</code></li>
<li>构造思路<ul>
<li>在程序的 12 行 <code>while (left &gt; 0 &amp;&amp; a.at(left) == color) --left;</code> 中, 最终 <code>a.at(left)</code> 的值不一定为 <code>color</code>.</li>
<li>而最终却通过 <code>erase</code> 将该值删除.</li>
<li>构造含有消除的输入即可.</li>
</ul>
</li>
</ul>
<h3 id="05"><a href="#05" class="headerlink" title="05"></a>05</h3><ul>
<li>错误类型: Wrong Answer</li>
<li>错误原因: 没有考虑初始序列为空行的情况</li>
<li>相应测例<pre class="language-none"><code class="language-none">
1
0 X</code></pre></li>
<li>标准答案: <code>X\n</code></li>
<li>构造思路<ul>
<li>构造初始序列为空行即可.</li>
</ul>
</li>
</ul>
<h3 id="06"><a href="#06" class="headerlink" title="06"></a>06</h3><ul>
<li>错误类型: Wrong Answer</li>
<li>错误原因: 没有考虑到插入分块数组时，块过长的情况</li>
<li>相应测例<pre class="language-none"><code class="language-none">XYXY[&quot;XY&quot; x 1020 times]XYM
2050
0 Y
0 X
0 Y
0 X
[&quot;0 Y\n0 X\n&quot; x 1021 times]
0 Y
0 X
0 Y
0 X</code></pre></li>
<li>标准答案: 以 <code>M</code> 结尾</li>
<li>构造思路<ul>
<li>构造某个块过长，使得在 <code>memmove</code> 时覆盖掉后面数组中的 <code>M</code> 即可.</li>
</ul>
</li>
</ul>
<h3 id="07"><a href="#07" class="headerlink" title="07"></a>07</h3><ul>
<li>错误类型: Wrong Answer</li>
<li>错误原因: 在向左计算需要消除的区间时，对长度为 <code>0</code> 的分块未有效过滤</li>
<li>相应测例<pre class="language-none"><code class="language-none">QWER[&quot;QWER&quot; x 510 times]QWMXXYYX[&quot;XYYX&quot; x 510 times]XYYXXM
2
3072 X
2048 M</code></pre></li>
<li>标准答案: <code>QWERQWER...(Trash)...QW</code></li>
<li>构造思路<ul>
<li>构造需要将其中一个分块完全清除的连消输入.</li>
<li>输入为 $[QWER…QWERQWMX][XYYX…XYYX][XM]$<ul>
<li>在中间分块的中间位置首先执行一次连消，中间区块的长度被置为 <code>0</code>.</li>
<li>程序在之后插入 <code>M</code>，寻找可消除区块时，<code>l.first</code> 便无法成功查询到目标位置，导致答案错误的出现.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="08"><a href="#08" class="headerlink" title="08"></a>08</h3><ul>
<li>错误类型: Wrong Answer</li>
<li>错误原因: 没有考虑连消</li>
<li>相应测例<pre class="language-none"><code class="language-none">XXYYZZYYXX
1
4 Z</code></pre></li>
<li>标准答案: <code>\n</code></li>
<li>构造思路<ul>
<li>构造连消输入即可.</li>
</ul>
</li>
</ul>
<h3 id="09"><a href="#09" class="headerlink" title="09"></a>09</h3><ul>
<li>错误类型: Runtime Error</li>
<li>错误原因: 在执行消除时没有对 <code>l</code>, <code>r</code> 出现在同一个分块数组的情况进行特判而导致异常</li>
<li>相应测例<pre class="language-none"><code class="language-none">XYZXYZMMXYZXYZ
1
6 M</code></pre></li>
<li>标准答案: <code>XYZXYZXYZXYZ\n</code></li>
<li>构造思路<ul>
<li>代码的 132 行，135 行对 <code>len</code> 的赋值，在<code>l</code>, <code>r</code> 出现在同一个分块数组的情况会出现负数.</li>
<li>构造执行消除时 <code>l</code>, <code>r</code> 出现在同一个分块数组的情况即可.</li>
</ul>
</li>
</ul>
<h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><ul>
<li>错误类型: Wrong Answer</li>
<li>错误原因: 在执行跨分块消除时，误将 <code>plen[l.first]</code> 设为 <code>0</code></li>
<li>相应测例<pre class="language-none"><code class="language-none">XY[&quot;XY&quot; x 1022 times]XYYM
1
2048 Y</code></pre></li>
<li>标准答案: 以 <code>M</code> 结尾</li>
<li>构造思路<ul>
<li>代码消除连珠后，在对中间分块的区间长度置 <code>0</code> 时，<code>for (int i = l.first; i &lt; r.first; i++)</code> 会误将 <code>plen[l.first]</code> 设为 <code>0</code>.</li>
<li>构造跨分块消除的情况，注意构造 <code>M</code> 使得在 <code>p2a()</code> 拷贝时 <code>M</code> 覆盖掉 <code>a</code> 的首元素.<ul>
<li>输入为 $[XYXYXY…XYXY][YM]$.</li>
<li>连消后 <code>plen[0]</code> 被置 <code>0</code>，再发生 <code>p2a()</code> 拷贝时 <code>M</code> 便会覆盖掉 <code>a</code> 的首元素.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="LAB2"><a href="#LAB2" class="headerlink" title="LAB2"></a>LAB2</h2><h3 id="Hashing-Strategies"><a href="#Hashing-Strategies" class="headerlink" title="Hashing Strategies"></a>Hashing Strategies</h3><h4 id="hashing-ascii"><a href="#hashing-ascii" class="headerlink" title="[hashing_ascii] "></a><strong>[hashing_ascii] </strong></h4><script type="math/tex; mode=display">
(\sum_{every-32bit}BitRepresentation_i) \ \ \ \ \ \ \ \ (mod \ \ TableSize)</script><p>即字符串 <code>aaaabbbbcd</code> 会被分割为 <code>aaaa</code>, <code>bbbb</code>, <code>cd\0\0</code> 考虑，分别找出其 32bit 的表示后求和。（对 $TableSize$ 取模的意义下）</p>
<h4 id="hashing-utf8"><a href="#hashing-utf8" class="headerlink" title="[hashing_utf8]"></a><strong>[hashing_utf8]</strong></h4><script type="math/tex; mode=display">
(\sum_{every-utf8-character}BitRepresentation_i) \mod TableSize</script><p>如 <code>哒a</code> 被考虑为 <code>哒\0</code> 和 <code>a\0\0\0</code>。即考虑字符串中的每个 utf-8 字符，将其延拓为 32bit 表示后求和。（对 $TableSize$ 取模的意义下）</p>
<h4 id="quad-probe"><a href="#quad-probe" class="headerlink" title="[quad_probe]"></a><strong>[quad_probe]</strong></h4><p><strong>quad_probe</strong> 有成员函数 <code>getOffset()</code> 建立 $(-1,0,1,2,3,4,5,6\cdots)$ 到 $(0,0,1,-1,4,-4,9,-9\cdots)$ 的映射，成员变量 <code>lastIndex</code> 记录当前的 offset-index，在 <code>init()</code> 类对象的时候将 <code>lastIndex</code> 置为 $-1$​​​，之后每次解决冲突都将 <code>lastIndex</code> 自增，在对 $TableSize$ 取模的意义下返回 <code>last_choice + getOffset(lastIndex) - getOffset(lastIndex-1)</code>。</p>
<h4 id="public-overflow"><a href="#public-overflow" class="headerlink" title="[public_overflow]"></a><strong>[public_overflow]</strong></h4><p>对 collision_strategy 增加虚函数 <code>get_max_hashing_volume</code> 获得非溢出区的长度，默认返回 $TableSize$，并修改 <code>*my_hashing</code> 调用时传入该函数的返回值。<strong>public_overflow</strong> 对该函数重写，返回最大表长的 $4/5$。</p>
<p>在解决 overflow 问题的时候，若 <code>last_choice</code> 不在缓冲区中，则返回缓冲区的第一个位置；不然返回下一个邻近的位置。</p>
<h3 id="Testing-Cases"><a href="#Testing-Cases" class="headerlink" title="Testing Cases"></a>Testing Cases</h3><div class="table-container">
<table>
<thead>
<tr>
<th>测例名</th>
<th>数据来源</th>
<th>插入</th>
<th>查询</th>
<th>Collision Factor</th>
</tr>
</thead>
<tbody>
<tr>
<td>1-ascii-standard</td>
<td>poj</td>
<td>30k</td>
<td>90k</td>
<td>20</td>
</tr>
<tr>
<td>2-utf8-standard</td>
<td>hdu</td>
<td>30k</td>
<td>90k</td>
<td>20</td>
</tr>
<tr>
<td>3-ascii-collision</td>
<td>poj</td>
<td>30k</td>
<td>90k</td>
<td>100</td>
</tr>
<tr>
<td>4-utf8-collision</td>
<td>hdu</td>
<td>30k</td>
<td>90k</td>
<td>100</td>
</tr>
<tr>
<td>5-ascii-large</td>
<td>poj</td>
<td>100k</td>
<td>300k</td>
<td>20</td>
</tr>
<tr>
<td>6-utf8-large</td>
<td>hdu</td>
<td>100k</td>
<td>300k</td>
<td>20</td>
</tr>
</tbody>
</table>
</div>
<h4 id="测例构造方法"><a href="#测例构造方法" class="headerlink" title="测例构造方法"></a>测例构造方法</h4><p>首先将所有数据读入，并维护一个 hashTable 来进行 key 去重的操作。这个 hashTable 使用的 hash 策略根据数据来源，分别使用 hashing-ascii 和 hashing-utf8，这是为了保证可以构造高冲突率的样例。在将数据读入时，我们为每条数据赋予一个 uniqueId，计算公式为：</p>
<script type="math/tex; mode=display">
uniqueId_i = hash(key) + randint(1, 100M)/CollisionFactor^2</script><p>这个计算公式可以保证，在 CollisionFactor 较小时，数据的 uniqueId 由随机值决定；而在冲突因子较大时，hash 值相近的数据最终 uniqueId 相近。最终我们按照 uniqueId 将读入的顺序进行排序。</p>
<p>然后我们均匀选择插入与查询操作，<strong>插入</strong>即将排序后的条目的最后一个移入待查询队列中；<strong>查询</strong>有 75% 的概率从待查询队列随机选取一个，25% 概率查询条目队列的最后一个并将其丢弃。</p>
<h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><ol>
<li>使用 hashing-ascii 处理 utf-8 字符串的性能比使用 hashing-utf8 的性能差。这是因为 hashing-ascii 没有充分考虑 utf-8 字符串的组成结构，导致散列后的关键码分布不均匀。</li>
<li>双向平方探测的性能显著优于线性试探，这是因为一旦发生散列冲突，前者可以快速跳离冲突区域。</li>
<li>闭散列在性能上更占优势。当冲突的元素个数 $k \le TableSize$ 时，不需要进行 $O(TableSize)$ 的试探链探测，只需要 $O(k)$ 的溢出区查找。</li>
<li><p>这可能会导致散列后的散列码分布并不均匀，因而可能导致局部的聚集性，进而造成散列表操作效率的下降。</p>
</li>
<li></li>
</ol>
<p><strong>[Input Data]</strong> <code>a-z0-9</code> 上长度为 5 的串的集合 $S$​。</p>
<p><strong>[Representation]</strong> $h :=(0,\cdots,9,a,\cdots,z) \rightarrow (0,\cdots,9,10,\cdots, 35)$​​​​​， $f(w) := \sum _{i=1}^n h(w_i)*36^{i-1}$​​​​。</p>
<p><strong>[Operation]</strong> 使用长度为 $O(|S|)$​ 的向量 $V$，$Rank(w)=f(w)$，$V_w = Rank(w)$。</p>
<h2 id="LAB3"><a href="#LAB3" class="headerlink" title="LAB3"></a>LAB3</h2><h3 id="Data-Structures"><a href="#Data-Structures" class="headerlink" title="Data Structures"></a>Data Structures</h3><p>实验中实现了<strong>AVL 树</strong>，<strong>Splay 树</strong>，<strong>红黑树</strong>三种数据结构，接下来做简单介绍与复杂度分析。数据结构的构思部分参考了《数据结构》课堂讲义第八章和第十章的内容。</p>
<h4 id="BBST"><a href="#BBST" class="headerlink" title="BBST"></a>BBST</h4><p>这是一个接口（抽象基类）。本实验用到的三种数据结构均由 BBST 派生。具体来说，它提供了以下虚方法：</p>
<ul>
<li><code>find(const T&amp; e)</code></li>
<li><code>insert(const T&amp; e)</code></li>
<li><code>remove(const T&amp; e)</code></li>
</ul>
<h4 id="AVL-树"><a href="#AVL-树" class="headerlink" title="AVL 树"></a>AVL 树</h4><p>AVL 树实现了一种渐进平衡，其定义一个结点的<strong>平衡因子</strong>为左孩子与右孩子的高度差。其渐进平衡的条件为每个结点的平衡因子绝对值不超过 1。可以证明，在这样的渐进平衡意义下，树高 $h=O(\log_2n)$。</p>
<p>AVL 树的查找调用了与标准 BST 类似的接口，不过增设了 <code>_find</code> 指针记录上一个结点 $T$ 的地址，其中结点 $T$ 满足 $data(T) \le e$ 的题设条件。最终的查找结果便是 <code>_find</code> 指针对应的结点。</p>
<p>AVL 树的插入和删除涉及到平衡因子被破坏后的恢复操作。具体来说，是对失衡结点 $g$，及其较高的孩子 $p$，以及较高的孩子的较高的孩子 $v$ 执行 3+4 重构，保持中序遍历单调增原则的不变性。对于插入操作可以证明这样的修正是一蹴而就的，修正后局部子树的高度恢复，平衡因子的改变影响无需上传至树根。而删除操作在修正后，产生的失衡影响可能继续上传，一直到树根。</p>
<p>也因此我们可以分析得出，一颗结点数为 $n$ 的 AVL 树的空间复杂度为 $O(n)$，时间复杂度分析如下：</p>
<p>单次查找时间复杂度为 $O(h) = O(\log n)$，插入删除操作最坏情况均为 $O(\log n)$。而单次插入操作引起的拓扑结构变化量为 $O(1)$，单次删除操作引起的拓扑结构变化量为 $O(\log n)$。</p>
<h4 id="Splay-树"><a href="#Splay-树" class="headerlink" title="Splay 树"></a>Splay 树</h4><p>伸展树使用双层伸展策略，思想主要是充分利用数据访问的局部性，具体来说：</p>
<ul>
<li>刚被访问过的结点，极有可能很快地再次被访问</li>
<li>下一次将要访问的结点，极有可能就在刚被访问过的结点的附近</li>
</ul>
<p>于是就模仿自适应链表的想法，一旦结点被访问，便通过旋转将其推送至树根。而这旋转是使用双层伸展策略，即每次旋转考察祖孙三代，对其做 3+4 重构。事实证明这有利于树高的减小。</p>
<p>Splay 树的查找调用了与标准 BST 类似的接口，不过增设了 <code>_find</code> 指针记录上一个结点 $T$ 的地址，其中结点 $T$ 满足 $data(T) \le e$ 的题设条件。最终的查找结果便是 <code>_find</code> 指针对应的结点。此外，在结点查找结束后，最终被查找到的结点会被旋转推送至根。</p>
<p>Splay 树的插入和删除依赖于其查找操作。不管是插入，还是删除，在此之前都会执行一次查找操作。对于插入操作来说，带插入节点的直接前驱/后继已经在这时推送至根，我们只需在根部做简单的拓扑结构改变便可将新结点接入。而对于删除操作来说，待删除结点已经在这时被推送至根。我们只需要在其其中一棵子树中寻找其直接后继，然后将其推送至该子树的根部，然后将两颗子树重新拼接起来即可。</p>
<p>于是我们可以分析得出，一颗结点数为 $n$ 的 Splay 树的空间复杂度为 $O(n)$，时间复杂度分析如下：</p>
<p>单次查找最坏时间复杂度为 $O(h) = O(n)$，而分摊复杂度为 $O(\log n)$；插入删除操作由于调用了查找接口，最坏情况均为 $O(n)$，但分摊复杂度均为 $O(\log n)$。单次插入删除操作引起的拓扑结构变化量均为 $O(\log n)$。而当我们进行连续的 $m$ 次查找，满足 $k \ll n \ll m$ 时，整体的时间复杂度仅为 $O(m\log k+n \log n)$。也就是说，针对局部性的数据访问，Splay 树有其独特的优势。</p>
<h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><p>红黑树是一种适度平衡树，其满足以下条件：</p>
<ol>
<li>树根必为黑色。</li>
<li>外部结点必为黑色。</li>
<li>红结点只能有黑孩子和黑父亲。</li>
<li>外部结点的黑深度相等，或全树的黑深度相等。</li>
</ol>
<p>事实上，红黑树的性质与 (2,4)-B 树有密不可分的联系，在这里我们不多详细介绍。值得注意的是，适度平衡的红黑树虽然平衡条件没有 AVL 树严格，但是可以证明其高度 $h = O(\log n)$。</p>
<p>红黑树的查找调用了与标准 BST 类似的接口，不过增设了 <code>_find</code> 指针记录上一个结点 $T$ 的地址，其中结点 $T$ 满足 $data(T) \le e$ 的题设条件。最终的查找结果便是 <code>_find</code> 指针对应的结点。</p>
<p>红黑树的插入和删除需要处理插入时上溢（双红修正）和下溢（双黑修正）两种特殊情况。二者均可以类比 B 树中结点上溢和下溢的操作来处理，然后将 B 树的处理结果通过重染色和旋转两种方式体现回红黑树中。而不管是插入还是删除的哪种情况，针对拓扑结构改变而言，我们均最多做常数次旋转便可以将其恢复为符合红黑树规则的 BST。</p>
<p>也因此我们可以分析得出，一颗结点数为 $n$ 的红黑树的空间复杂度为 $O(n)$，时间复杂度分析如下：</p>
<p>单次查找时间复杂度为 $O(h) = O(\log n)$，插入删除操作最坏情况均为 $O(\log n)$。而单次插入和删除操作引起的拓扑结构变化量均为 $O(1)$。</p>
<h3 id="Test-Cases"><a href="#Test-Cases" class="headerlink" title="Test Cases"></a>Test Cases</h3><p>实验使用 Python 写了自动化的测试工程，只需使用 <code>python3 main.py</code> 即可运行输出测试结果。我们在报告的根目录留了一份 <code>result.log</code>，为使用 <code>Ubuntu-20.04 LTS, AMD Ryzen 5 4600H (3.00 GHz), 8GM RAM</code> 的运行结果。</p>
<p>项目目录解释如下：<br><pre class="language-none"><code class="language-none">|- main.py  测试程序主入口
|- cases  测试样例生成器
    |- case1_rand.py
    |- case2_sorted.py
    |- case3_query.py
    |- case4_modification.py
|- utils
    |- judger.py  Judger
|- testdata  样例生成器的生成结果 &#x2F;&#x2F; Very large. Maybe 600MB+!</code></pre></p>
<h4 id="Case-1-Random"><a href="#Case-1-Random" class="headerlink" title="Case 1: Random"></a>Case 1: Random</h4><p>实验的第一组为随机数据。数据量分为 $100K$，$1M$，$5M$，$10M$ 四种情况。</p>
<p>具体来说，测例生成的流程如下：</p>
<ul>
<li>随机在 $[1, 1M]$ 中均匀选择关键字 <code>key</code>；</li>
<li>如果 <code>key</code> 不在树中，执行插入操作；不然有 70% 的概率对 <code>key</code> 执行一次查找，30% 的概率执行一次删除。</li>
</ul>
<p>这样可以首先保证树中有足够多的数据，后续操作不至因树中结点规模 $n$ 过小而导致性能无法区分；此外可知  $p_{query}$，$p_{insertion}$，$p_{removal}$ 三者的极限均收敛，实证证明三者的比例分别约为 $0.5, 0.3, 0.2$。</p>
<h4 id="Case-2-Sorted"><a href="#Case-2-Sorted" class="headerlink" title="Case 2: Sorted"></a>Case 2: Sorted</h4><p>实验的第二组为顺序插入数据。数据量分为 $100K$，$1M$，$5M$，$10M$ 四种情况。</p>
<p>具体来说，测例生成的流程如下：</p>
<ul>
<li>对于 $[1, n]$ 之间的所有关键码 <code>key</code>，顺序插入 <code>key</code>。</li>
</ul>
<p>有序数据是现实中较为特殊的一种情况。同时，这样数据的插入也在一定程度上具有局部性，即每次要插入的结点都是上一次插入的结点的直接后继。此外，这组数据也可以反映出树的动态操作次数。</p>
<h4 id="Case-3-Query-with-locality"><a href="#Case-3-Query-with-locality" class="headerlink" title="Case 3: Query with locality"></a>Case 3: Query with locality</h4><p>实验的第三组为大量查询具有局部性特征的数据。数据量分为 $100K$，$1M$，$5M$，$10M$ 四种情况。</p>
<p>具体来说，测例生成的流程如下：</p>
<ul>
<li>向树中插入规模为 $n * 0.5\%$ 的随机结点；</li>
<li>剩下的次数均用于查询最后被插入的结点。</li>
</ul>
<p>这既能反映 AVL 树和红黑树面对大量查询时的表现性能，从而间接反映出树高的情况，同时由于查询带有局部性，可以更好地体现 Splay 树具有的局部性查询的特征。</p>
<h4 id="Case-4-Modification"><a href="#Case-4-Modification" class="headerlink" title="Case 4: Modification"></a>Case 4: Modification</h4><p>实验的第四组为大量插入和删除数据。数据量分为 $100K$，$1M$，$5M$，$10M$ 四种情况。</p>
<p>具体来说，测例生成的流程如下：</p>
<ul>
<li>随机在 $[1, 1M]$ 中均匀选择关键字 <code>key</code>；</li>
<li>如果 <code>key</code> 在树中，执行插入操作；不然执行删除操作。</li>
</ul>
<p>这样可以首先保证树中有足够多的数据，后续操作不至因树中结点规模 $n$ 过小而导致性能无法区分；此外这样可以测试数据结构在面对大量的增删操作时的运作性能。</p>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>我们在计算机无其他任务运行时使用上述的配置共计运行了 5 次实验并取平均值。其中“运行时间”的定义为 Python 的 subprocess 开始运行与停止运行的时间，旋转次数定义为 <code>zig</code>, <code>zag</code>, 或是 3+4 重构总的调用次数。下面我们逐测例分析：</p>
<h4 id="Case-1"><a href="#Case-1" class="headerlink" title="Case 1"></a>Case 1</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据结构/运行时间(s)</th>
<th style="text-align:center">100 K</th>
<th style="text-align:center">1M</th>
<th style="text-align:center">5M</th>
<th style="text-align:center">10M</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AVL</td>
<td style="text-align:center"><font color="limegreen">0.45</font></td>
<td style="text-align:center">1.14</td>
<td style="text-align:center">5.14</td>
<td style="text-align:center">10.50</td>
</tr>
<tr>
<td style="text-align:center">Splay</td>
<td style="text-align:center">0.47</td>
<td style="text-align:center">2.10</td>
<td style="text-align:center">11.00</td>
<td style="text-align:center"><span style="color: red"> &gt; 15.00</span></td>
</tr>
<tr>
<td style="text-align:center">RedBlack</td>
<td style="text-align:center">0.51</td>
<td style="text-align:center"><font color="limegreen">1.05</font></td>
<td style="text-align:center"><font color="limegreen">5.03</font></td>
<td style="text-align:center"><font color="limegreen">9.25</font></td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据结构/旋转次数</th>
<th style="text-align:center">100 K</th>
<th style="text-align:center">1M</th>
<th style="text-align:center">5M</th>
<th style="text-align:center">10M</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AVL</td>
<td style="text-align:center">45K</td>
<td style="text-align:center">0.32M</td>
<td style="text-align:center">0.95M</td>
<td style="text-align:center">1.5M</td>
</tr>
<tr>
<td style="text-align:center">Splay</td>
<td style="text-align:center">1.2M</td>
<td style="text-align:center">15M</td>
<td style="text-align:center"><font color="red">79M</font></td>
<td style="text-align:center"><font color="red">- TLE -</font></td>
</tr>
<tr>
<td style="text-align:center">RedBlack</td>
<td style="text-align:center">39K</td>
<td style="text-align:center"><font color="limegreen">0.27M</font></td>
<td style="text-align:center"><font color="limegreen">0.8M</font></td>
<td style="text-align:center"><font color="limegreen">1.4M</font></td>
</tr>
</tbody>
</table>
</div>
<p>在随机数据上的表现红黑树最好，伸展树最差。伸展树由于其单次插入，删除和查询都需要将目标结点通过旋转推送至根，而我们的数据输入十分具有随机性，因此平均每次增删查都需要 $O(\log n)$ 的时间将目标结点推送至根，因此在时间复杂度上逊于另外两者。而 AVL 树与红黑树二者的表现不相伯仲，但红黑树的动态操作数明显小于 AVL 树，这是由于其动态操作拓扑结构的变化量都是常数级别的。</p>
<h4 id="Case-2"><a href="#Case-2" class="headerlink" title="Case 2"></a>Case 2</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据结构/运行时间(s)</th>
<th style="text-align:center">100 K</th>
<th style="text-align:center">1M</th>
<th style="text-align:center">5M</th>
<th style="text-align:center">10M</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AVL</td>
<td style="text-align:center">0.49</td>
<td style="text-align:center">0.62</td>
<td style="text-align:center">1.30</td>
<td style="text-align:center">2.16</td>
</tr>
<tr>
<td style="text-align:center">Splay</td>
<td style="text-align:center">0.50</td>
<td style="text-align:center"><font color="limegreen">0.54</font></td>
<td style="text-align:center"><font color="limegreen">0.98</font></td>
<td style="text-align:center"><font color="limegreen">1.72</font></td>
</tr>
<tr>
<td style="text-align:center">RedBlack</td>
<td style="text-align:center">0.50</td>
<td style="text-align:center">0.66</td>
<td style="text-align:center">1.50</td>
<td style="text-align:center">2.66</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据结构/旋转次数</th>
<th style="text-align:center">100 K</th>
<th style="text-align:center">1M</th>
<th style="text-align:center">5M</th>
<th style="text-align:center">10M</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AVL</td>
<td style="text-align:center">100K</td>
<td style="text-align:center">1M</td>
<td style="text-align:center">5M</td>
<td style="text-align:center">10M</td>
</tr>
<tr>
<td style="text-align:center">Splay</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">RedBlack</td>
<td style="text-align:center">100K</td>
<td style="text-align:center">1M</td>
<td style="text-align:center">5M</td>
<td style="text-align:center">10M</td>
</tr>
</tbody>
</table>
</div>
<p>Splay 树在这组数据上表现的最好，这是因为插入的数据具有局部性，每次插入的数据的直接前驱是上一次插入的数据，这样可以让 Splay 树仅仅在根部做嫁接即可，无需旋转操作，单次操作也只需要常数级别。而 AVL 树在这组数据上的动态操作表现与红黑树近似，这是因为只有插入操作，二者均可在 $O(1)$ 的动态操作次数内完成。</p>
<h4 id="Case-3"><a href="#Case-3" class="headerlink" title="Case 3"></a>Case 3</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据结构/运行时间(s)</th>
<th style="text-align:center">100 K</th>
<th style="text-align:center">1M</th>
<th style="text-align:center">5M</th>
<th style="text-align:center">10M</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AVL</td>
<td style="text-align:center">0.52</td>
<td style="text-align:center">0.67</td>
<td style="text-align:center">1.40</td>
<td style="text-align:center"><font color="limegreen">2.00</font></td>
</tr>
<tr>
<td style="text-align:center">Splay</td>
<td style="text-align:center">0.50</td>
<td style="text-align:center"><font color="limegreen">0.66</font></td>
<td style="text-align:center"><font color="limegreen">1.39</font></td>
<td style="text-align:center">3.12</td>
</tr>
<tr>
<td style="text-align:center">RedBlack</td>
<td style="text-align:center">0.51</td>
<td style="text-align:center">0.67</td>
<td style="text-align:center">1.44</td>
<td style="text-align:center">3.20</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据结构/旋转次数</th>
<th style="text-align:center">100 K</th>
<th style="text-align:center">1M</th>
<th style="text-align:center">5M</th>
<th style="text-align:center">10M</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AVL</td>
<td style="text-align:center">0.2K</td>
<td style="text-align:center">2.3K</td>
<td style="text-align:center">11K</td>
<td style="text-align:center">23K</td>
</tr>
<tr>
<td style="text-align:center">Splay</td>
<td style="text-align:center">3K</td>
<td style="text-align:center">44K</td>
<td style="text-align:center">280K</td>
<td style="text-align:center"><font color="red">610K</font></td>
</tr>
<tr>
<td style="text-align:center">RedBlack</td>
<td style="text-align:center">0.2K</td>
<td style="text-align:center">1.9K</td>
<td style="text-align:center">9.7K</td>
<td style="text-align:center">19K</td>
</tr>
</tbody>
</table>
</div>
<p>在小批量插入随机数据，大批量查询局部数据的过程中我们可以得出结论：</p>
<ul>
<li>Splay 树针对局部数据的查询有其独到之处，具体来说，在 1M 和 5M 的实验中，即使其有十分缓慢的插入速度，其综合性能仍然优于其他两者；而在 10 M 的实验中，其查询带来的性能提升终究没有低过随机插入带来的严重性能浪费（这点由其动态操作的次数便可看出）。</li>
<li>而同时值得我们注意的是，AVL 树和红黑树在面对大规模的数据查询时所表现出的不同。AVL 树面对大规模的数据查询时性能明显优于红黑树，这是由于其较为严格的平衡条件保证了其在结点规模相等的情况下，树高低于红黑树，因而查找的平均长度低。</li>
</ul>
<h4 id="Case-4"><a href="#Case-4" class="headerlink" title="Case 4"></a>Case 4</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据结构/运行时间(s)</th>
<th style="text-align:center">100 K</th>
<th style="text-align:center">1M</th>
<th style="text-align:center">5M</th>
<th style="text-align:center">10M</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AVL</td>
<td style="text-align:center">0.54</td>
<td style="text-align:center">1.28</td>
<td style="text-align:center">5.30</td>
<td style="text-align:center">10.45</td>
</tr>
<tr>
<td style="text-align:center">Splay</td>
<td style="text-align:center">0.53</td>
<td style="text-align:center">2.02</td>
<td style="text-align:center"><font color="red">10.30</font></td>
<td style="text-align:center"><span style="color: red"> &gt; 15.00</span></td>
</tr>
<tr>
<td style="text-align:center">RedBlack</td>
<td style="text-align:center">0.51</td>
<td style="text-align:center"><font color="limegreen">1.16</font></td>
<td style="text-align:center"><font color="limegreen">4.89</font></td>
<td style="text-align:center"><font color="limegreen">9.89</font></td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据结构/旋转次数</th>
<th style="text-align:center">100 K</th>
<th style="text-align:center">1M</th>
<th style="text-align:center">5M</th>
<th style="text-align:center">10M</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AVL</td>
<td style="text-align:center">44K</td>
<td style="text-align:center">375K</td>
<td style="text-align:center">1.6M</td>
<td style="text-align:center">3.1M</td>
</tr>
<tr>
<td style="text-align:center">Splay</td>
<td style="text-align:center">1.3M</td>
<td style="text-align:center">16.4M</td>
<td style="text-align:center">88M</td>
<td style="text-align:center"><font color="red">- TLE -</font></td>
</tr>
<tr>
<td style="text-align:center">RedBlack</td>
<td style="text-align:center">37K</td>
<td style="text-align:center"><font color="limegreen">326K</font></td>
<td style="text-align:center"><font color="limegreen">1.4M</font></td>
<td style="text-align:center"><font color="limegreen">2.8M</font></td>
</tr>
</tbody>
</table>
</div>
<p>在涉及到大规模的数据插入与删除的时候，因为每次插入和删除都要大批量旋转的伸展树自然是喜提 TLE。而我们得到的结论是，红黑树在大规模的增删操作是优于 AVL 树的，这恰恰也是因为红黑树对于渐进平衡的要求并没有 AVL 树严格，同时红黑树删除操作所涉及的动态操作数目少于 AVL 树的缘故。</p>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><ol>
<li>在进行大规模<strong>查找</strong>时，<strong>AVL 树</strong>比红黑树更优。因为它的平衡条件更严格，平均树高更低，也因此适用于数据库等需要快速查找的场合。</li>
<li><strong>红黑树</strong>的大规模<strong>插入与删除</strong>操作优于 AVL 树，既可以有效减少拓扑结构的更改次数，且分摊时间成本也较低。红黑树也因此被广泛用于各种编程语言提供的标准数据结构中。</li>
<li>当问题访问的数据具有<strong>局部性</strong>时，<strong>Splay 树</strong>的可以大大提升性能，甚至在某些情况下会超过 AVL 树和红黑树的性能。因此当要处理的问题数据具有明显的局部性特征，应选用 Splay 树。</li>
</ol>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>[1] Pfaff B. Performance analysis of BSTs in system software[J]. ACM SIGMETRICS Performance Evaluation Review, 2004, 32(1): 410-411.</p>
<p>[2] Štrbac-Savić S, Tomašević M. Comparative performance evaluation of the AVL and red-black trees[C]//Proceedings of the Fifth Balkan Conference in Informatics. 2012: 14-19.</p>
]]></content>
      <categories>
        <category>程设</category>
        <category>程设/数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>GAMES101 PA 报告兼课程重点算法回顾</title>
    <url>/games101-pa/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/28/hIQTsycbV6xeojp.png" alt="output-4"></p>
<p><img src="https://s2.loli.net/2022/01/29/GZtErdMFQcBfN8P.png" alt="7-256"></p>
<p>GAMES101 2020-Spring 对应的 8 次 PA 整理。</p>
<p>仓库地址：<a href="https://github.com/c7w/GAMES101-HW-2020-Spring">https://github.com/c7w/GAMES101-HW-2020-Spring</a></p>
<p><em>　　Warning: FYI, these codes may be ugly and buggy.</em></p>
<a id="more"></a>
<h2 id="PA1"><a href="#PA1" class="headerlink" title="PA1"></a>PA1</h2><blockquote>
<p>本次作业的任务是填写一个<strong>旋转矩阵</strong>和一个<strong>透视投影矩阵</strong>。</p>
<p>给定三维下三个点 $v_0(2.0, 0.0, −2.0), v_1(0.0, 2.0, −2.0), v_2(−2.0, 0.0, −2.0)$​，你需要将这三个点的坐标变换为屏幕坐标并在屏幕上绘制出对应的线框三角形 (在代码框架中，我们已经提供了 draw_triangle 函数，所以你只需要去构建变换矩阵即可)。</p>
<p>简而言之，我们需要进行模型、视图、投影、视口等变换来将三角形显示在屏幕上。在提供的代码框架中，我们留下了模型变换和投影变换的部分给你去完成。</p>
</blockquote>
<h3 id="算法回顾"><a href="#算法回顾" class="headerlink" title="算法回顾"></a>算法回顾</h3><p>拍照的第一步是模型变换，也就是把模型放在合适的位置上。第二步是找好角度放相机（View Transformation），也就是视图变换。第三步是做投影变换，将照片定格。</p>
<ul>
<li>视图变换：定义 $M_{view}$ 变换相机，使得经过该变换满足 $\vec e = \vec 0, \hat g = -\hat z, \hat t = \hat y $，其中：$\vec e$ 为相机所在位置， $\hat g$ 为相机看的方向，$\hat t$ 为相机的向上方向。</li>
</ul>
<script type="math/tex; mode=display">
M_{view} = R_{view}T_{view} \ (**)\\

T_{view} = \begin{bmatrix} 1&0&0&-x_e\\
0&1&0&-y_e\\
0&0&1&-z_e\\
0&0&0&1\end{bmatrix}\\

R_{view}^{-1} = \begin{bmatrix} x_{\hat g \times \hat t}&x_{\hat t}&x_{-\hat g}&0\\
y_{\hat g \times \hat t}&y_{\hat t}&y_{-\hat g}&0\\
z_{\hat g \times \hat t}&z_{\hat t}&z_{-\hat g}&0\\
0&0&0&1\end{bmatrix}\\

R_{view} = (R_{view}^{-1})^T =
\begin{bmatrix} x_{\hat g \times \hat t}&y_{\hat g \times \hat t}&z_{\hat g \times \hat t}&0\\
x_{\hat t}&y_{\hat t}&z_{\hat t}&0\\
x_{-\hat g}&y_{-\hat g}&z_{-\hat g}&0\\
0&0&0&1\end{bmatrix}\\</script><p>我们要做的，是把所有物体都应用这个变换，保证相机与物体的相对位置不变。</p>
<ul>
<li>投影变换</li>
</ul>
<p><strong>首先将摄像机的视锥压成正方体 $M_{persp\rightarrow ortho}$​，然后进行正交投影 $M_{ortho}$​​。</strong></p>
<p>这里我们略去透视投影矩阵的推导，直接给出透视投影转换为正交投影矩阵的表示形式。具体的推导可以通过考虑以下特殊点，代入特殊值来决定矩阵的元素。</p>
<ul>
<li>近平面的坐标不改变</li>
<li>远平面的 $x,y$ 坐标被压缩至与近平面相同</li>
<li>近平面中心点与远平面中心点的位置不变</li>
</ul>
<script type="math/tex; mode=display">
M_{persp\rightarrow ortho} = 
\begin{bmatrix}
n & 0 & 0 & 0 \\
0 & n & 0 & 0 \\
0 & 0 & n+f & -nf \\
0 & 0 & 1 & 0
\end{bmatrix} \\\\</script><p>值得注意的是，在我们平常的应用中，我们并不是直接使用 $l, r, b,t$ 来描述一个近平面的位置，而是更倾向于使用 $fovY$​(<strong>field-of-view</strong>, 垂直视角) 和 <strong>aspect ratio</strong> 这两个量来描述一个近平面。</p>
<p>使用这两个量我们可以轻松地计算出 $l,r,b,t$ 四个近平面参数。</p>
<p><img src="https://i.loli.net/2021/11/06/NZbxWisdEH78plf.png" alt="image-20211106214646265"></p>
<p>然后我们使用正交投影映射到 $[-1, 1]^3$。</p>
<script type="math/tex; mode=display">
M_{\text {ortho }}=\left[\begin{array}{cccc}
\frac{2}{r-l} & 0 & 0 & 0 \\
0 & \frac{2}{t-b} & 0 & 0 \\
0 & 0 & \frac{2}{n-f} & 0 \\
0 & 0 & 0 & 1
\end{array}\right]\left[\begin{array}{cccc}
1 & 0 & 0 & -\frac{r+l}{2} \\
0 & 1 & 0 & -\frac{t+b}{2} \\
0 & 0 & 1 & -\frac{n+f}{2} \\
0 & 0 & 0 & 1
\end{array}\right]</script><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="https://s2.loli.net/2022/01/28/ftcK5nhEdYaGwPp.png" alt="1"></p>
<h2 id="PA2"><a href="#PA2" class="headerlink" title="PA2"></a>PA2</h2><blockquote>
<p>任务如下：</p>
<ul>
<li><code>rasterize_triangle()</code>: 执行三角形栅格化算法</li>
<li><code>static bool insideTriangle()</code>: 测试点是否在三角形内</li>
<li>正确实现深度缓冲算法</li>
<li>Super-sampling</li>
</ul>
</blockquote>
<h3 id="算法回顾-1"><a href="#算法回顾-1" class="headerlink" title="算法回顾"></a>算法回顾</h3><ul>
<li>检测点在三角形内</li>
</ul>
<p>我们考虑如下的三个叉积。$\overrightarrow {P_0P_1} \times \overrightarrow {P_0Q}$, $\overrightarrow {P_1P_2} \times \overrightarrow {P_1Q}$, $\overrightarrow {P_2P_0} \times \overrightarrow {P_2Q}$ 如果 z 坐标的符号相同，那么点 Q 就一定在三角形内。但是，如果对屏幕的所有元素采样，造成了没有必要的资源浪费。我们使用<strong>包围盒</strong>（Bounding Box）的概念，取三角形边界点的 x, y 坐标分别的最小值或最大值，作为包围盒 x, y 坐标的最小值与最大值。这样我们就能得到一张带锯齿的图像了。</p>
<ul>
<li>Super-sampling</li>
</ul>
<p>而在我们具体解决问题的时候，我们选择 Supersampling 的方式，也就是将某个像素分为 $N\times N$​ 个采样点，然后对这些采样点的像素值取平均。</p>
<ul>
<li>深度缓冲</li>
</ul>
<p>为了解决这个问题，图形学引入了深度缓存的概念。想法就是对屏幕的所有像素额外记录其当前显示物体的最浅深度（深度取正值，表示距离相机的远近）。这样类似于动态规划的算法最终复杂度是 $O(n)$ 的。而且如果我们假设在同一深度处不会出现两个模型，那么不同模型的着色顺序对结果是没有影响的。</p>
<p><img src="https://i.loli.net/2021/11/10/vkn5R7zfhoNZTjC.png" alt="image-20211110140334554"></p>
<h3 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="https://s2.loli.net/2022/01/28/ma6wt8dVnjGMTq4.png" alt="2-1"></p>
<p><img src="https://s2.loli.net/2022/01/28/GDWpa1w9JLNsXz6.png" alt="2-2"></p>
<h2 id="PA3"><a href="#PA3" class="headerlink" title="PA3"></a>PA3</h2><blockquote>
<p>任务：</p>
<ul>
<li>参数插值</li>
<li>Blinn-Phong 模型</li>
<li>Texture Mapping</li>
<li>Bump Mapping &amp; Displacement Mapping</li>
<li>尝试更多模型</li>
<li>双线性插值</li>
</ul>
</blockquote>
<h3 id="算法回顾-2"><a href="#算法回顾-2" class="headerlink" title="算法回顾"></a>算法回顾</h3><ul>
<li>重心坐标插值</li>
</ul>
<p>当我们知道了三角形的三个顶点的属性的时候，如果我们想要实现在三角形内部属性的平滑过渡，就要引入重心坐标的概念。对于一个三角形 ABC 来说，其中 $(x,y) = \alpha A + \beta B + \gamma C$，若 $\alpha + \beta + \gamma = 1$，则称 $(\alpha, \beta, \gamma)$ 为该三角形内的 $(x,y)$ 点的重心坐标，其中 $\alpha, \beta, \gamma \ge 0$。</p>
<p><img src="https://i.loli.net/2021/11/11/U4jEISXchwARgZV.png" alt="image-20211111231732485"></p>
<ul>
<li>BP</li>
</ul>
<script type="math/tex; mode=display">
\begin{aligned}
L &=L_{a}+L_{d}+L_{s} \\
&=k_{a} I_{a}+k_{d}\left(I / r^{2}\right) \max (0, \mathbf{n} \cdot \mathbf{l})+k_{s}\left(I / r^{2}\right) \max (0, \mathbf{n} \cdot \mathbf{h})^{p}
\end{aligned}</script><h3 id="实验结果-2"><a href="#实验结果-2" class="headerlink" title="实验结果"></a>实验结果</h3><ul>
<li>Normal</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/28/K8ISoYs59h2wdPg.png" alt="output-2"></p>
<ul>
<li>BP</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/28/oVBEDL2NuwRpkGO.png" alt="output-3"></p>
<ul>
<li>Texture</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/28/hIQTsycbV6xeojp.png" alt="output-4"></p>
<ul>
<li>Bump Mapping &amp; Displacement Mapping</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/28/HJiSMxQa4udzjPF.png" alt="output-5"></p>
<p><img src="https://s2.loli.net/2022/01/28/vXV89tQPTSUpDeA.png" alt="output-6"></p>
<ul>
<li>Bunny</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/28/ERkHN7PlVSQF4qm.png" alt="bunny"></p>
<ul>
<li>双线性插值前/后 (Shrink texture.png by 50%)</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/28/fm9AjRGu2rngCLw.png" alt="output-small"></p>
<p><img src="https://s2.loli.net/2022/01/28/I5jeWBENHgndFtC.png" alt="output-small2"></p>
<h3 id="实验框架"><a href="#实验框架" class="headerlink" title="实验框架"></a>实验框架</h3><ul>
<li><code>main.cpp</code><ul>
<li><code>Eigen::Matrix4f get_view_matrix(Eigen::Vector3f eye_pos)</code></li>
<li><code>Eigen::Matrix4f get_model_matrix(float angle)</code></li>
<li><code>Eigen::Matrix4f get_projection_matrix(float eye_fov, float aspect_ratio, float zNear, float zFar)</code></li>
<li><code>struct Light &#123;Eigen::Vector3f position; Eigen::Vector3f intensity;&#125;;</code></li>
<li>Shaders<ul>
<li><code>Eigen::Vector3f texture_fragment_shader(const fragment_shader_payload&amp; payload)</code></li>
<li><code>Eigen::Vector3f phong_fragment_shader(const fragment_shader_payload&amp; payload)</code><ul>
<li>定义 $k_d, k_s, k_a, lights, amb_light, eye_pos$​</li>
<li>返回 $result_color * 255.0$</li>
</ul>
</li>
<li><code>Eigen::Vector3f displacement_fragment_shader(const fragment_shader_payload&amp; payload)</code></li>
<li><code>Eigen::Vector3f bump_fragment_shader(const fragment_shader_payload&amp; payload)</code></li>
</ul>
</li>
<li><code>int main()</code><ul>
<li>读取模型，然后将模型中的各个面建立 Triangle 对象</li>
<li>建立 Rasterizer 类对象，设置材质</li>
<li>调用渲染函数，然后使用 OpenCV 库保存渲染结果</li>
</ul>
</li>
</ul>
</li>
<li><code>OBJ_Loader.h</code>：加载模型用</li>
<li><p><code>Rasterizer.hpp/Rasterizer.cpp</code></p>
<ul>
<li>其中的 rasterizer 子类内包括了一些必备的结构和函数</li>
<li><code>std::vector&lt;Eigen::Vector3f&gt; frame_buf;</code></li>
<li><code>std::vector&lt;float&gt; depth_buf;</code></li>
</ul>
</li>
<li><p><code>Texture.hpp/Texture.cpp</code></p>
<ul>
<li><code>cv::Mat image_data;</code> // Raw data</li>
<li><code>int width, height;</code></li>
<li><code>Vector3f getColor(float u, float v);</code></li>
</ul>
</li>
<li><code>Triangle.hpp/Triangle.cpp</code><ul>
<li><code>Vector4f v[3];</code> // Original coordinates of the triangle</li>
<li><code>Vector3f color[3]; Vector2f tex_coords[3]; Vector3f normal[3];</code> // Color, texture_coord, normal vector for each vertex</li>
</ul>
</li>
</ul>
<h2 id="PA4"><a href="#PA4" class="headerlink" title="PA4"></a>PA4</h2><blockquote>
<p>使用 <strong>De Casteljau 算法</strong> 生成贝塞尔曲线。</p>
</blockquote>
<h3 id="算法回顾-3"><a href="#算法回顾-3" class="headerlink" title="算法回顾"></a>算法回顾</h3><p>（1）先考虑三个控制点，生成二次贝塞尔曲线。</p>
<p><img src="https://i.loli.net/2021/12/01/fE6FrtaL2sDQIGT.png" alt="image-20211201194418429"></p>
<p>（2）再考虑四个控制点，生成三次贝塞尔曲线。</p>
<p><img src="https://i.loli.net/2021/12/01/wR7VDnSPCrLxkKY.png" alt="image-20211201194528603"></p>
<p>(3) 代数形式：插值！</p>
<p><img src="https://i.loli.net/2021/12/01/pmW5vVa61urdbxI.png" alt="image-20211201194639946"></p>
<p>给定 $n+1$ 个控制点，有贝塞尔曲线如下：</p>
<script type="math/tex; mode=display">
b^n(t) = b^n_0(t) = \sum_{j=0}^nb_jB_j^n(t) \\
B_{i}^{n}(t)=\left(\begin{array}{l}
n\\
i
\end{array}\right) t^{i}(1-t)^{n-i}</script><h3 id="实验结果-3"><a href="#实验结果-3" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="https://s2.loli.net/2022/01/29/kHpBU6wfgcvxi7W.png" alt="4"></p>
<h2 id="PA5"><a href="#PA5" class="headerlink" title="PA5"></a>PA5</h2><blockquote>
<p>在光线追踪中，最重要的操作之一就是找到光线与物体的交点。</p>
<p>一旦找到光线与物体的交点，就可以执行着色并返回像素颜色。</p>
<p>在这次作业中，我们需要实现两个部分：光线的生成和光线与三角的相交。</p>
<p>具体来说，我们需要修改：</p>
<ul>
<li><code>Renderer.cpp</code> 中的 <code>Render()</code>：这里你需要为每个像素生成一条对应的光线，然后调用函数 <code>castRay()</code> 来得到颜色，最后将颜色存储在帧缓冲区的相应像素中。</li>
<li><code>Triangle.hpp</code> 中的 <code>rayTriangleIntersect()</code>: v0, v1, v2 是三角形的三个顶点，orig 是光线的起点，dir 是光线单位化的方向向量。tnear, u, v 是你需要使用我们课上推导的 Moller-Trumbore 算法来更新的参数。</li>
</ul>
</blockquote>
<h3 id="算法回顾-4"><a href="#算法回顾-4" class="headerlink" title="算法回顾"></a>算法回顾</h3><ul>
<li>Whitted-style Ray Tracing</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/14/T1xAeVvrhOoGJK4.png" alt="image-20220114155905503"></p>
<ul>
<li>Möller Trumbore 算法</li>
</ul>
<p>Möller Trumbore 算法，可以直接判断交点是否在三角形内（需要用到克莱姆法则）：</p>
<script type="math/tex; mode=display">
\begin{gathered}
\overrightarrow{\mathbf{O}}+t \overrightarrow{\mathbf{D}}=\left(1-b_{1}-b_{2}\right) \overrightarrow{\mathbf{P}}_{0}+b_{1} \overrightarrow{\mathbf{P}}_{1}+b_{2} \overrightarrow{\mathbf{P}}_{2} \\
\text { Where: } \\
{\left[\begin{array}{c}
t \\
b_{1} \\
b_{2}
\end{array}\right]=\frac{1}{\overrightarrow{\mathbf{S}}_{1} \bullet \overrightarrow{\mathbf{E}}_{1}}\left[\begin{array}{cc}
\overrightarrow{\mathbf{S}}_{2} \cdot \overrightarrow{\mathbf{E}}_{2} \\
\overrightarrow{\mathbf{S}}_{1} \cdot \overrightarrow{\mathbf{S}} \\
\overrightarrow{\mathbf{S}}_{2} \cdot \overrightarrow{\mathbf{D}}
\end{array}\right]} \\
\text { Cost = (1 div, 27 mul, 17 add) } \\
\overrightarrow{\mathbf{E}}_{1}=\overrightarrow{\mathbf{P}}_{1}-\overrightarrow{\mathbf{P}}_{0} \\
\overrightarrow{\mathbf{E}}_{2}=\overrightarrow{\mathbf{P}}_{2}-\overrightarrow{\mathbf{P}}_{0} \\
\overrightarrow{\mathbf{S}}=\overrightarrow{\mathbf{O}}-\overrightarrow{\mathbf{P}}_{0} \\
\overrightarrow{\mathbf{S}}_{1}=\overrightarrow{\mathbf{D}} \times \overrightarrow{\mathbf{E}}_{2} \\
\overrightarrow{\mathbf{S}}_{2}=\overrightarrow{\mathbf{S}} \times \overrightarrow{\mathbf{E}}_{1}
\end{gathered}</script><h3 id="实验结果-4"><a href="#实验结果-4" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="https://s2.loli.net/2022/01/29/ZeSLqlF65o7vfD8.png" alt="5"></p>
<h2 id="PA6"><a href="#PA6" class="headerlink" title="PA6"></a>PA6</h2><blockquote>
<p>在之前的编程练习中，我们实现了基础的光线追踪算法，具体而言是光线传输、光线与三角形求交。</p>
<p>我们采用了这样的方法寻找光线与场景的交点：<strong>遍历场景中的所有物体，判断光线是否与它相交。</strong></p>
<p>在场景中的物体数量不大时，该做法可以取得良好的结果，但当物体数量增多、模型变得更加复杂，该做法将会变得非常低效。</p>
<p>因此，我们需要加速结构来加速求交过程。</p>
<p>在本次练习中，我们重点关注：<strong>物体划分算法 Bounding Volume Hierarchy (BVH)</strong>。</p>
<p>本练习要求你实现 Ray-Bounding Volume 求交与 BVH 查找，附加内容为使用 <strong>SAH 加速</strong>算法对 BVH 查找进行改进。</p>
</blockquote>
<h3 id="算法回顾-5"><a href="#算法回顾-5" class="headerlink" title="算法回顾"></a>算法回顾</h3><h4 id="包围盒求交"><a href="#包围盒求交" class="headerlink" title="包围盒求交"></a>包围盒求交</h4><p>我们将（包围盒）长方体理解成三个对面所分划出的空间的交集。我们一般使用的包围体积便是长方体，且长方体是与坐标轴平行的，即轴对齐包围盒（AABB）。选用 AABB 式包围盒有利于加速计算。判断光线和 AABB 类包围盒的求交方法如下：</p>
<p><img src="https://s2.loli.net/2022/01/14/5rMlAnIw3gQBVNL.png" alt="image-20220114163501816"></p>
<p>核心思想：只有当光线进入所有三个对面后，光线才进入了包围盒；若光线从某一个对面出射，则光线便从包围盒中射出。于是我们可以计算三个对面分别对应的 $t_{min}$​​ 和 $t_{max}$​​，然后对其求交。当且仅当 $t_{enter} \lt t_{exit}$​​ 且 $t_{exit} \ge 0$​​，光线才可能与包围盒有交点。</p>
<h4 id="BVH"><a href="#BVH" class="headerlink" title="BVH"></a>BVH</h4><p>通过对含有物体的向量沿轴划分建立二叉树，并且对于二叉树的每一个结点建立其包围盒。</p>
<p><img src="https://s2.loli.net/2022/01/16/zbLpGw5E7SCgQAu.png" alt="image-20220116102930688"></p>
<p>如何进行划分？</p>
<ul>
<li>沿着最长的维度来划分</li>
<li>划分端点取中位数<ul>
<li>取三角形的重心</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/16/xtKaWO7lJ2Rm8Xb.png" alt="image-20220116103520101"></p>
<p>使用 BVH 算法，即使包围盒可能在空间上有相交，但是我们却解决了 kd-Tree 存在的问题。</p>
<h4 id="SAH-加速"><a href="#SAH-加速" class="headerlink" title="SAH 加速"></a>SAH 加速</h4><p>（BVH）构建过程中最重要的问题就是如何对图元进行划分…划分时要<strong>尽可能减少划分后两部分包围盒重叠的体积</strong>，因为<strong>重叠的体积越大，光线穿过重叠区域的可能性越大，遍历两个子树的可能性就越高，计算消耗越多</strong>。</p>
<p>因为我们最终的目的是要减少划分后左右子节点重叠的体积，因此一般<strong>在图元跨度最大的坐标轴上进行划分</strong>。这里，图元的跨度可以用图元的包围盒来衡量也可以用图元的质心来衡量。</p>
<p>两种最简单的划分方法是：</p>
<ul>
<li>取坐标轴跨度的中点 $t_{\operatorname{mid}}=\frac{t_{\max }+t_{\min }}{2}$​ ，若节点的坐标小于 $t_{mid}$ 则将其划分到左节点，否则将其划分到右节点（中点划分）。</li>
<li>最左边的 $\frac n 2$​ 个被划分到左节点，剩下的被划分到右节点（等量划分）。 // 作业框架中 Naive 的划分由此实现</li>
</ul>
<p>一种更为常用且效果更好的方法是<strong>基于表面积的启发式评估划分方法</strong>（Surface Area Heuristic，SAH），这种方法通过对求交代价和遍历代价进行评估，给出了每一种划分的代价（Cost），而我们的目的便是去寻找代价最小的划分。</p>
<p>假设当前节点的包围体中存在 $n$​ 个物体，设对每一个物体求交的代价为 $t(i)$​​ ，如果不做划分依次对其求交则总的代价为：</p>
<script type="math/tex; mode=display">
\sum t(i)=t(1)+t(2)+\cdots+t(n)</script><p>如果这些物体划分为 2 组，这两组物体分别处于它们的包围盒 A 和 B 中。设光线击中它们的概率分别为 $p_A$​​​​​​​ 和 $p_B$​​​​​​ ，需要注意包围盒 A 和 B 之间存在重叠，且它们并不一定会填满其父节点的包围体，因此 $p_A$​​​ 和 $p_B$​​ 的和不一定为1，且它们的和越大说明 A 和 B 的重叠程度越大。综上所述，当前节点求交的代价可以写为：</p>
<script type="math/tex; mode=display">
c(A,B) = p_A \sum_{i \in A}t(i) + p_B \sum_{i \in B}t(i) + t_{traverse}</script><p>其中 $t_{traverse}$​​​ 代表遍历树状结构的代价。一般来说，我们假设对所有图元的求交代价是相同的，可设 $t(i) \equiv 1$​​​，又遍历的代价小于求交的代价，可设 $t_{traverse} = 0.125$​​ 。设包围盒A中图元的个数为 $a$​，B中图元的个数为 $b$，则：</p>
<script type="math/tex; mode=display">
c(A,B) = \frac {S(A)} {S(C)}a + \frac {S(B)} {S(C)}b + 0.125</script><p>SAH 考虑到了图元在空间中的分布也考虑到了子节点包围体的重叠程度，在实际应用中拥有很好的效果。</p>
<p>然后我们就可以借助一定的辅助空间，在 $O(n)$​ 的时间内完成这个划分过程。这里我们<s>偷懒</s>采用一种 $O(n \log n)$ 的分划方式：</p>
<ul>
<li>将物体按照质心顺序排序. $O(n \log n)$</li>
<li>$\forall k$​，记录 $a_i := \cup_{i \le k} \ S(i)$​. $O(n)$​​</li>
<li>$\forall k$​，记录 $b_i := \cup_{i \gt k} \ S(i)$​. $O(n)$​</li>
<li>$\forall k$​，考虑划分 $[0, k] \ || \ [k+1, n)$​，计算其代价并更新最小代价. $O(n)$​</li>
</ul>
<p>参考资料：<a href="https://zhuanlan.zhihu.com/p/50720158">https://zhuanlan.zhihu.com/p/50720158</a></p>
<h3 id="实验结果-5"><a href="#实验结果-5" class="headerlink" title="实验结果"></a>实验结果</h3><p>采用 SAH 加速前，进行 RT 用时 8 min 35 secs；使用 SAH 加速后，用时为 8 min 48 secs。</p>
<p>// Warning: this code may be buggy!</p>
<p>// 没错用了这 ** 优化又慢了我也不知道x</p>
<p>// 我感觉包围盒算法就需要大改，anyway 领会精神吧x</p>
<p><img src="https://s2.loli.net/2022/01/18/Y9Nh7QAUxfncCgV.png" alt="6-1"></p>
<h3 id="实验框架-1"><a href="#实验框架-1" class="headerlink" title="实验框架"></a>实验框架</h3><ul>
<li><code>main.cpp</code><ul>
<li>创建场景（1280x960）与预处理<ul>
<li>导入模型为 MeshTriangle 类对象，并添加入场景；</li>
<li>将光源添加入场景；</li>
<li>对场景执行 buildBVH()</li>
</ul>
</li>
<li>创建 <code>Renderer</code> 类对象渲染器，并开始渲染</li>
</ul>
</li>
<li><code>Vector.hpp, Vector.cpp</code>：向量类，提供了向量 <code>Vector3f</code>, <code>Vector2f</code> 的基本操作</li>
<li><code>Object.hpp</code>：抽象类<ul>
<li>提供了以下接口：<ul>
<li><code>bool intersect(const Ray&amp;)</code></li>
<li><code>bool intersect(const Ray&amp; ray, float&amp; distance, int&amp; index) const</code></li>
<li><code>Intersection getIntersection(Ray _ray)</code></li>
<li><code>void getSurfaceProperties(const Vector3f &amp;, const Vector3f &amp;, const uint32_t &amp;, const Vector2f &amp;, Vector3f &amp;, Vector2f &amp;) const</code></li>
<li><code>virtual Vector3f evalDiffuseColor(const Vector2f &amp;) const</code></li>
<li><code>virtual Bounds3 getBounds()</code></li>
</ul>
</li>
<li>总结来说，首先是判断有无交点和获取交点的接口，然后是获取表面属性和计算颜色的接口，然后是获取包围盒的接口。</li>
<li><code>Triangle.hpp/Sphere.hpp</code>：继承自 <code>Object</code>，重载上述函数并实现为对应对象</li>
</ul>
</li>
<li><code>Ray.hpp</code><ul>
<li><code>Vector3f orig, direction;</code>, <code>double t, t_min, t_max;</code></li>
</ul>
</li>
<li><code>Light.hpp</code>：<code>Vector3f position, intensity;</code><ul>
<li><code>AreaLight.hpp</code>：<code>Vector3f u, v, normal; double length;</code></li>
</ul>
</li>
<li><code>Intersection.hpp</code>：<ul>
<li><code>bool happened;</code></li>
<li><code>Vector3f coords, normal;</code></li>
<li><code>double distance;</code></li>
<li><code>Object* obj;</code></li>
<li><code>Material* m;</code></li>
</ul>
</li>
<li><code>Material.hpp</code>：存储表面属性<ul>
<li>表面类型： <code>enum MaterialType &#123; DIFFUSE_AND_GLOSSY, REFLECTION_AND_REFRACTION, REFLECTION &#125;;</code></li>
<li>表面颜色（反射，辐射），折射率，BP 模型中的 $k_d, k_s, p$​</li>
</ul>
</li>
<li><code>Bounds3.hpp</code>：包围盒相关函数<ul>
<li>求对角线，维数，表面积，中心点；</li>
<li>与另外一个包围盒求交，求并；</li>
<li>检测两个包围盒是否互相包含或者重叠；</li>
<li>判断与光线是否相交；</li>
</ul>
</li>
<li><code>BVH.hpp/BVH.cpp</code>：加速结构<ul>
<li><code>enum class SplitMethod &#123; NAIVE, SAH &#125;;</code></li>
<li>与光线求交<ul>
<li><code>Intersection Intersect(const Ray &amp;ray) const;</code></li>
<li><code>Intersection getIntersection(BVHBuildNode* node, const Ray&amp; ray)const;</code></li>
<li><code>bool IntersectP(const Ray &amp;ray) const;</code></li>
</ul>
</li>
<li>本质是一颗二叉树，拥有树形结构<ul>
<li><code>BVHBuildNode* root;</code></li>
<li><code>BVHBuildNode* recursiveBuild(std::vector&lt;Object*&gt;objects);</code></li>
<li><code>BVHBuildNode* recursiveBuildSAH(std::vector&lt;Object*&gt;objects);</code></li>
</ul>
</li>
<li>存储其图元 primitive 的指针<ul>
<li><code>std::vector&lt;Object*&gt; primitives;</code></li>
</ul>
</li>
</ul>
</li>
<li><code>Renderer.hpp / Renderer.cpp</code><ul>
<li>给定一个场景，创建渲染任务</li>
<li>管理任务过程中的 framebuffer 等等图像数据</li>
<li>管理整个渲染流程以及数据最终的写入文件</li>
</ul>
</li>
<li><code>Scene.hpp / Scene.cpp</code><ul>
<li>图像相关的设定<ul>
<li><code>int width, height;</code></li>
<li><code>double fov;</code></li>
<li><code>Vector3f backgroundColor;</code></li>
<li><code>maxDepth;</code></li>
</ul>
</li>
<li>模型相关的设定 Get / Set<ul>
<li><code>void Add(Object *object);</code></li>
<li><code>void Add(std::unique_ptr&lt;Light&gt; light);</code></li>
</ul>
</li>
<li>与光线求交的函数：<code>Intersection intersect(const Ray&amp; ray) const;</code></li>
<li>BVH 相关：<ul>
<li><code>BVHAccel *bvh = nullptr;</code></li>
<li><code>void buildBVH();</code></li>
</ul>
</li>
<li>渲染主函数：<ul>
<li><code>Vector3f castRay(const Ray &amp;ray, int depth) const;</code> // Important!</li>
<li><code>bool trace(const Ray &amp;ray, const std::vector&lt;Object*&gt; &amp;objects, float &amp;tNear, uint32_t &amp;index, Object **hitObject);</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="PA7"><a href="#PA7" class="headerlink" title="PA7"></a>PA7</h2><blockquote>
<ul>
<li>实现 Path Tracing 算法</li>
</ul>
</blockquote>
<h3 id="算法回顾-6"><a href="#算法回顾-6" class="headerlink" title="算法回顾"></a>算法回顾</h3><pre class="language-none"><code class="language-none">def ray_generation(camPos, pixel):
	Uniformly choose N samples from the pixel
	pixel_radiance &#x3D; 0.0
	for sample in the pixel:
		Shoot a ray r(camPos, cam_to_sample)
		if ray r hit the scene at p:
			pixel_radiance +&#x3D; 1 &#x2F; N * shade(p, sample_to_cam)
    return pixel_radiance

def shade(p, wo):

	# Contributions from the light source
	L_dir &#x3D; 0.0
	Uniformly sample the light at x&#39; (pdf_light &#x3D; 1&#x2F;A)
	Shoot a ray from p to x&#39;
	if the ray is not blocked in the middle:
		L_dir &#x3D; L_i * f_r * cos \theta * cos \theta&#39; &#x2F; |x&#39;-p|^2 &#x2F; pdf_light
    
    # Contributions from other places
    L_indir &#x3D; 0.0
    If test Russian Roulette with probability P_RR :
        Uniformly sample the hemisphere toward wi (pdf_hemi &#x3D; 1 &#x2F; 2pi)
        Trace a ray r(p, wi)
        If ray r hit a non-emitting object at q:
            L_indir &#x3D; shade(q, -wi) * f_r * cos \theta &#x2F; pdf_hemi &#x2F; P_RR
    
    Return L_dir + L_indir</code></pre>
<h3 id="实验结果-6"><a href="#实验结果-6" class="headerlink" title="实验结果"></a>实验结果</h3><ul>
<li>SPP = 16 / 32 / 64 / 256</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/29/pwevmYcRyDqBPxh.png" alt="7-16"></p>
<p><img src="https://s2.loli.net/2022/01/29/1OrJUsgTSLocbwK.png" alt="7-32"></p>
<p><img src="https://s2.loli.net/2022/01/29/7aCgFk6KOdqS4bM.png" alt="7-64"></p>
<p><img src="https://s2.loli.net/2022/01/29/GZtErdMFQcBfN8P.png" alt="7-256"></p>
<h2 id="PA8"><a href="#PA8" class="headerlink" title="PA8"></a>PA8</h2><blockquote>
<ul>
<li>连接绳子约束，正确的构造绳子 </li>
<li>半隐式欧拉法</li>
<li>显式欧拉法</li>
<li>显式 Verlet</li>
<li>阻尼</li>
</ul>
</blockquote>
<h3 id="算法回顾-7"><a href="#算法回顾-7" class="headerlink" title="算法回顾"></a>算法回顾</h3><ul>
<li>显式/半隐式欧拉法</li>
</ul>
<script type="math/tex; mode=display">
\boldsymbol{f}_{a \rightarrow b}=k_{s} \frac{\boldsymbol{b}-\boldsymbol{a}}{\|\boldsymbol{b}-\boldsymbol{a}\|}(\|\boldsymbol{b}-\boldsymbol{a}\|-l) \\
f_{b \rightarrow a} = - f_{ a \rightarrow b}</script><script type="math/tex; mode=display">
\begin{aligned}
&\mathrm{F}=\mathrm{ma} \\
&\mathrm{v}(\mathrm{t}+1)=\mathrm{v}(\mathrm{t})+\mathrm{a}(\mathrm{t}) * \mathrm{dt} \\
&\mathrm{x}(\mathrm{t}+1)=\mathrm{x}(\mathrm{t})+\mathrm{v}(\mathrm{t}) * \mathrm{dt} \\
&\mathrm{x}(\mathrm{t}+1)=\mathrm{x}(\mathrm{t})+\mathrm{v}(\mathrm{t}+1) * \mathrm{dt}
\end{aligned}</script><p>倒数第二行为显式欧拉法，最后一行为半隐式欧拉法。</p>
<ul>
<li>显式 Verlet</li>
</ul>
<script type="math/tex; mode=display">
x(t+1)=x(t)+[x(t)-x(t-1)]+a(t) * d t * d t</script><ul>
<li>阻尼</li>
</ul>
<script type="math/tex; mode=display">
x(t+1) =x(t)+(1-\text {damping\_factor }) *[x(t)-x(t-1)]+a(t) * d t * d t</script>]]></content>
      <categories>
        <category>理论</category>
        <category>理论/计算机图形学</category>
      </categories>
      <tags>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>GAMES101 现代计算机图形学基础 笔记（上）</title>
    <url>/games101/</url>
    <content><![CDATA[<p>GAMES 101 现代计算机图形学基础 笔记（上篇）.</p>
<ul>
<li>变换与齐次坐标</li>
<li>光栅化（反走样与深度缓冲）</li>
<li>着色（Blinn-Phong 着色模型，图形管线，纹理映射，凹凸贴图）</li>
<li>几何（曲线与曲面，贝塞尔曲线）</li>
</ul>
<a id="more"></a>
<h2 id="变换-Transformation"><a href="#变换-Transformation" class="headerlink" title="变换 Transformation"></a>变换 Transformation</h2><h3 id="为什么要学习变换？"><a href="#为什么要学习变换？" class="headerlink" title="为什么要学习变换？"></a>为什么要学习变换？</h3><p>变换分为模型变换和视图变换。</p>
<p>模型变换的例子：</p>
<ul>
<li>跳舞机器人的运动</li>
<li>PIXAR 的开场动画</li>
</ul>
<p>视图变换：</p>
<ul>
<li>3D 空间到 2D 的投影</li>
</ul>
<h3 id="二维变换"><a href="#二维变换" class="headerlink" title="二维变换"></a>二维变换</h3><h4 id="缩放变换（Scale）"><a href="#缩放变换（Scale）" class="headerlink" title="缩放变换（Scale）"></a>缩放变换（Scale）</h4><script type="math/tex; mode=display">
x'=s_xx \\
y'=s_yy \\
\begin{bmatrix}x' \\ y' \end{bmatrix}
=
\begin{bmatrix} s_x & 0 \\ 0 & s_y\end{bmatrix}
\begin{bmatrix}x \\ y \end{bmatrix}</script><h4 id="反射变换（Reflection）"><a href="#反射变换（Reflection）" class="headerlink" title="反射变换（Reflection）"></a>反射变换（Reflection）</h4><script type="math/tex; mode=display">
x'=-x \\
y'=y \\
\begin{bmatrix}x' \\ y' \end{bmatrix}
=
\begin{bmatrix} -1 & 0 \\ 0 & 1\end{bmatrix}
\begin{bmatrix}x \\ y \end{bmatrix}</script><h4 id="切变变换（Shear）"><a href="#切变变换（Shear）" class="headerlink" title="切变变换（Shear）"></a>切变变换（Shear）</h4><script type="math/tex; mode=display">
x'=x+a y \\
y'=y \\
\begin{bmatrix}x' \\ y' \end{bmatrix}
=
\begin{bmatrix} 1 & a \\ 0 & 1\end{bmatrix}
\begin{bmatrix}x \\ y \end{bmatrix}</script><h4 id="旋转（Rotation"><a href="#旋转（Rotation" class="headerlink" title="旋转（Rotation)"></a>旋转（Rotation)</h4><p>About (0,0), CCW(Counter clockwise) by default.</p>
<script type="math/tex; mode=display">
R_\theta =
\begin{bmatrix}
\cos\theta & -\sin \theta \\
\sin\theta & \cos \theta
\end{bmatrix}</script><h4 id="线性变换（Linear）"><a href="#线性变换（Linear）" class="headerlink" title="线性变换（Linear）"></a>线性变换（Linear）</h4><script type="math/tex; mode=display">
\begin{bmatrix}x' \\ y' \end{bmatrix}
=
\begin{bmatrix} a & b \\ c & d\end{bmatrix}
\begin{bmatrix}x \\ y \end{bmatrix}</script><h3 id="齐次坐标-Homogeneous-Coordinates"><a href="#齐次坐标-Homogeneous-Coordinates" class="headerlink" title="齐次坐标 (Homogeneous Coordinates)"></a>齐次坐标 (Homogeneous Coordinates)</h3><p><strong>平移</strong>不能有上述的矩阵表示。</p>
<script type="math/tex; mode=display">
\begin{bmatrix}x' \\ y' \end{bmatrix}
=
\begin{bmatrix} a & b \\ c & d\end{bmatrix}
\begin{bmatrix}x \\ y \end{bmatrix}
+
\begin{bmatrix}T_x \\ T_y \end{bmatrix}</script><p>但是我们希望使用简单的表示方法。有无能将上述变换统一的表示方式？</p>
<p>增加坐标的第三维度！(w-coordinate)</p>
<ul>
<li>2D Point: $(x,y,1)^T$</li>
<li>2D Vector: $(x, y, 0)^T$</li>
</ul>
<script type="math/tex; mode=display">
\begin{bmatrix}x' \\ y' \\ w' \end{bmatrix}
=
\begin{bmatrix} 1 & 0 & t_x \\ 
0 & 1 & t_y \\
0 & 0 & 1\end{bmatrix}
\begin{bmatrix}x \\ y \\ 1 \end{bmatrix}
=\begin{bmatrix}x+t_x \\ y+t_y \\ 1 \end{bmatrix}</script><ul>
<li>Valid Operations on w-coordinate<ul>
<li>Vec + Vec = Vec</li>
<li>Point - Point = Vec</li>
<li>Point + Vec = Point</li>
<li>Point + Point = ?<ul>
<li>Let $(x,y,w)^T := (\frac x w, \frac y w, 1), w\ne 0$</li>
<li>几何意义是 n 等分点</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>这样我们就能将仿射变换转换成统一的矩阵表示了。</p>
<h3 id="逆变换（Inverse-Transform）"><a href="#逆变换（Inverse-Transform）" class="headerlink" title="逆变换（Inverse Transform）"></a>逆变换（Inverse Transform）</h3><p>$M^{-1}$ is the inverse of transform $M$ in both a matrix and geometric sense.</p>
<h3 id="变换的合成（Composing-Transforms）"><a href="#变换的合成（Composing-Transforms）" class="headerlink" title="变换的合成（Composing Transforms）"></a>变换的合成（Composing Transforms）</h3><p>复杂的变换可以通过简单的变换得到;在变换的复合过程中，先后次序很重要.</p>
<h3 id="三维变换"><a href="#三维变换" class="headerlink" title="三维变换"></a>三维变换</h3><p>可按照上述的思路，构造出 4x4 矩阵表示的三维空间中的齐次坐标。</p>
<p>特别的，三维空间中的旋转需要固定旋转轴。</p>
<p>欧拉角 $R_{xyz}(\alpha, \beta,\gamma)=R_x(\alpha)R_y(\beta)R_z(\gamma)$​</p>
<h3 id="观测变换（Viewing-Transformation）"><a href="#观测变换（Viewing-Transformation）" class="headerlink" title="观测变换（Viewing Transformation）"></a>观测变换（Viewing Transformation）</h3><h4 id="视图变换（View-Camera-Transformation）"><a href="#视图变换（View-Camera-Transformation）" class="headerlink" title="视图变换（View/Camera Transformation）"></a>视图变换（View/Camera Transformation）</h4><p>什么是视图变换？我们可以与拍照过程进行类比。拍照的第一步是模型变换，也就是把模型放在合适的位置上。第二步是找好角度放相机（View Transformation），也就是本节要介绍的视图变换。第三步是做投影变换，将照片定格。</p>
<p>如何执行视图变换？首先要定义<strong>相机</strong>的概念：</p>
<ul>
<li>位置 $\vec e$</li>
<li>看向 $\hat g$</li>
<li>相机的向上方向 $\hat t$</li>
</ul>
<p>约定俗成地，我们在视图变换时令 $\vec e = \vec 0, \hat g = -\hat z, \hat t = \hat y \ (*)$。</p>
<p>定义 $M_{view}$ 变换相机，使得经过该变换满足上述 $(*)$。</p>
<ul>
<li>Translates $\vec e$ to origin.</li>
<li>Rotate $\hat g$ to $-\hat z$.</li>
<li>Rotate $\hat t$ to $\hat y$.</li>
<li>Then naturally $\hat g \times \hat y = \hat x$.</li>
</ul>
<p>Then the calculation process:</p>
<script type="math/tex; mode=display">
M_{view} = R_{view}T_{view} \ (**)\\

T_{view} = \begin{bmatrix} 1&0&0&-x_e\\
0&1&0&-y_e\\
0&0&1&-z_e\\
0&0&0&1\end{bmatrix}\\

R_{view}^{-1} = \begin{bmatrix} x_{\hat g \times \hat t}&x_{\hat t}&x_{-\hat g}&0\\
y_{\hat g \times \hat t}&y_{\hat t}&y_{-\hat g}&0\\
z_{\hat g \times \hat t}&z_{\hat t}&z_{-\hat g}&0\\
0&0&0&1\end{bmatrix}\\

R_{view} = (R_{view}^{-1})^T =
\begin{bmatrix} x_{\hat g \times \hat t}&y_{\hat g \times \hat t}&z_{\hat g \times \hat t}&0\\
x_{\hat t}&y_{\hat t}&z_{\hat t}&0\\
x_{-\hat g}&y_{-\hat g}&z_{-\hat g}&0\\
0&0&0&1\end{bmatrix}\\</script><p>我们要做的，是把所有物体都应用这个变换，保证相机与物体的相对运动性质不变。</p>
<p>视图变换也被称为 ModelView Transformation.</p>
<h4 id="投影变换（Projection-Transformation）"><a href="#投影变换（Projection-Transformation）" class="headerlink" title="投影变换（Projection Transformation）"></a>投影变换（Projection Transformation）</h4><p>计算机图形学中的投影：是将 3D 模型形成二维图像，有两种投影方式，正交投影与透视投影。正交投影（Orthographic projection）原来平行的线仍然平行；透视投影（Perspective projection）平行线不再平行，会有近大远小的现象。</p>
<h5 id="正交投影"><a href="#正交投影" class="headerlink" title="正交投影"></a>正交投影</h5><p>首先我们需要将相机摆在合适的位置（具体来说是满足上述 $(*)$​ 的条件），然后我们可以直接无视掉 Z 坐标，将剩余的物体直接平移并缩放到 $[-1, 1]^2$​​。</p>
<p>正交变换实际上是把空间立方体 $[l, r] \times [b,t] \times [f,n]$ 映射到标准正方体 $[-1,1]^3$​ 的过程。</p>
<p><img src="https://i.loli.net/2021/11/06/GjCdAz8hv9PtQle.png" alt="image-20211106214250684"></p>
<center>正交投影的过程</center>

<p>具体来说，我们有：</p>
<script type="math/tex; mode=display">
M_{\text {ortho }}=\left[\begin{array}{cccc}
\frac{2}{r-l} & 0 & 0 & 0 \\
0 & \frac{2}{t-b} & 0 & 0 \\
0 & 0 & \frac{2}{n-f} & 0 \\
0 & 0 & 0 & 1
\end{array}\right]\left[\begin{array}{cccc}
1 & 0 & 0 & -\frac{r+l}{2} \\
0 & 1 & 0 & -\frac{t+b}{2} \\
0 & 0 & 1 & -\frac{n+f}{2} \\
0 & 0 & 0 & 1
\end{array}\right]</script><h5 id="透视投影"><a href="#透视投影" class="headerlink" title="透视投影"></a>透视投影</h5><p>透视投影的特性是平行线相交于一点，近大远小。</p>
<p>回忆：$(x,y,z,1), (kx,ky,kz,k\ne0), (xz,yz,z^2,z\ne0)$​ 都代表同一点</p>
<ul>
<li>做透视投影的步骤：<ul>
<li>首先将视锥压成正方体 $M_{persp\rightarrow ortho}$</li>
<li>然后进行正交投影 $M_{ortho}$</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/16/K8cDzW3Nu4XjBLi.png" alt="image-20211016010006341"></p>
<center> 做透视投影的步骤 </center>

<p>这里我们略去透视投影矩阵的推导，直接给出透视投影转换为正交投影矩阵的表示形式。具体的推导可以通过考虑以下特殊点，代入特殊值来决定矩阵的元素。</p>
<ul>
<li>近平面的坐标不改变</li>
<li>远平面的 $x,y$ 坐标被压缩至与近平面相同</li>
<li>近平面中心点与远平面中心点的位置不变</li>
</ul>
<script type="math/tex; mode=display">
M_{persp\rightarrow ortho} = 
\begin{bmatrix}
n & 0 & 0 & 0 \\
0 & n & 0 & 0 \\
0 & 0 & n+f & -nf \\
0 & 0 & 1 & 0
\end{bmatrix} \\\\
M_{persp} = M_{ortho}M_{persp \rightarrow ortho}</script><p>值得注意的是，在我们平常的应用中，我们并不是直接使用 $l, r, b,t$ 来描述一个近平面的位置，而是更倾向于使用 $fovY$​(<strong>field-of-view</strong>, 垂直视角) 和 <strong>aspect ratio</strong> 这两个量来描述一个近平面。</p>
<p>使用这两个量我们可以轻松地计算出 $l,r,b,t$ 四个近平面参数。</p>
<p><img src="https://i.loli.net/2021/11/06/NZbxWisdEH78plf.png" alt="image-20211106214646265"></p>
<h2 id="光栅化-Rasterization"><a href="#光栅化-Rasterization" class="headerlink" title="光栅化 Rasterization"></a>光栅化 Rasterization</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>在我们进行完 MVP（模型变换，视图变换，投影变换）之后，我们将三维的模型转化成了 $[-1,1]^3$​​ 上的正规立方体。在那之后，我们就要将这个立方体投影到我们的屏幕上，绘出图像了。而这图像的绘制过程，我们便将其称为<strong>光栅化</strong>。</p>
<p>在此之前，我们必须先给出<strong>屏幕</strong>的定义：</p>
<p>我们可以将屏幕视为是像素点的二维数组，其中每个像素点由 R, G, B 三种颜色构成。像素点的维数与分辨率相同。进行坐标表示时我们使用 $(x,y)$ 表示 $[x, x+1]\times[y,y+1]$ 这一个像素点，这里 x,y 是整数。</p>
<p>要将正规立方体绘制到屏幕上，这个过程与 z 是无关的，我们需要首先对 xOy 平面做变换 $[-1,1]^2\rightarrow [0, width] \times [0, height]$，这个过程我们称为<strong>视口变换</strong>。而这里用到的变换矩阵是：</p>
<script type="math/tex; mode=display">
M_{\text {viewport }}=\left(\begin{array}{cccc}
\frac{\text { width }}{2} & 0 & 0 & \frac{\text { width }}{2} \\
0 & \frac{\text { height }}{2} & 0 & \frac{h e i g h t}{2} \\
0 & 0 & 1 & 0 \\
0 & 0 & 0 & 1
\end{array}\right)</script><p>该怎么把 $[0, width] \times [0, height]$​ 中的内容画到屏幕上呢？这就要用到<strong>光栅化</strong>了。</p>
<h3 id="三角形的光栅化"><a href="#三角形的光栅化" class="headerlink" title="三角形的光栅化"></a>三角形的光栅化</h3><p>我们接下来要考虑如何将三维空间中的一个三角形光栅化成像素。</p>
<p>为什么选择三角形？因为三角形是最基础的多边形，任何其它多边形都可以用三角形来表示。同时，三角形的三个顶点一定在同一个平面内。三角形的内部和外部区分的十分清楚，而且可以用叉积来判断点是否在三角形中。</p>
<p>那么，如果我们得到了三角形的三个顶点在二维平面中的表示 $(x_1, y_1), (x_2, y_2), (x_3, y_3)$​ 之后，我们该如何估计这个三角形所包围的像素点的集合呢？也就是说，该如何判断一个像素（的中心点）和一个三角形的位置关系呢？</p>
<p>我们可以通过<strong>采样</strong>（Sampling）的方法来实现。采样，实际是将一个函数离散化的过程，这是图形学中的一个核心概念。</p>
<p>我们再明确一下我们的采样目标：判断某个像素的中心点是否在给定的三角形 $(x_1, y_1), (x_2, y_2), (x_3, y_3)$​​ 内部。即我们要尝试去实现如下的函数：</p>
<script type="math/tex; mode=display">
inside(t, x, y) = 
\begin{cases} 
1, & if \ Point (x,y) \ inside \ triangle \ t, \\
0, & otherwise.
\end{cases}</script><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Sampling</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> xmax<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> ymax<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        image<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">inside</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>那么该如何实现 <code>inside(t, x, y)</code> 函数呢？</p>
<p><img src="https://i.loli.net/2021/11/06/Qx9SjUgGACRuBta.png" alt="image-20211106223216259"></p>
<p>我们考虑如下的三个叉积。$\overrightarrow {P_0P_1} \times \overrightarrow {P_0Q}$, $\overrightarrow {P_1P_2} \times \overrightarrow {P_1Q}$, $\overrightarrow {P_2P_0} \times \overrightarrow {P_2Q}$ 如果 z 坐标的符号相同，那么点 Q 就一定在三角形内。如果点正好落在边界上，可自行定义解决方案。</p>
<p><img src="https://i.loli.net/2021/11/06/XLsJyofHK3p9zOn.png" alt="image-20211106225745932"></p>
<center>光栅化加速：包围盒</center> 

<p>但是，如果对屏幕的所有元素采样，造成了没有必要的资源浪费。我们使用<strong>包围盒</strong>（Bounding Box）的概念，取三角形边界点的 x, y 坐标分别的最小值或最大值，作为包围盒 x, y 坐标的最小值与最大值。这样我们就能得到一张带锯齿的图像了。</p>
<p><img src="https://i.loli.net/2021/11/06/sh3uLpPWTYroKQz.png" alt="image-20211106232712939"></p>
<center>带锯齿的图像</center>

<p>图像之所以带锯齿（Jaggies）是因为，我们的采样率并不够高，并不足以描述原来的信号，因此就发生了走样（Aliasing）的问题。</p>
<h3 id="反走样"><a href="#反走样" class="headerlink" title="反走样"></a>反走样</h3><p>首先我们简单介绍一下采样理论。采样瑕疵（Sampling Artifacts）包括多种，在图形学中包括锯齿，摩尔纹等等。采样瑕疵背后都是因为信号的变化太快，以至于采样的速度跟不上信号的变化。而解决办法，便是通过首先对原图进行<strong>模糊</strong>（滤波, pre-filtering then sampling），然后再对其进行采样。</p>
<h4 id="频域的概念"><a href="#频域的概念" class="headerlink" title="频域的概念"></a>频域的概念</h4><p>频率的概念我们已经熟知，如 $\cos 2\pi fx$ 中频率为 $f$​。用频率可以定义函数周期性变化的快慢。</p>
<p>我们可以使用傅里叶级数将一个函数（从它的时域）表示成正弦函数和余弦函数的加权和的形式（转换到频域），也可以使用逆傅里叶变换将其从频域转化回时域。</p>
<p><img src="https://i.loli.net/2021/11/06/XSeh2kvlg97x6UE.png" alt="image-20211106235002520"></p>
<center>傅里叶变换和逆傅里叶变换</center>

<p>而<strong>走样</strong>是指，使用同样的采样方式，在高频信号和低频信号两个不同的信号上，得到了相同的采样结果。如下图所示：</p>
<p><img src="https://i.loli.net/2021/11/08/qPJ81KrkMgR3uoG.png" alt="image-20211108153046165"></p>
<center>走样的例子</center>

<h4 id="滤波-Filtering"><a href="#滤波-Filtering" class="headerlink" title="滤波 Filtering"></a>滤波 Filtering</h4><p>滤波是指对于某个特定的信号，仅保留其特定频率的信息。以图像为例，一个图的低通滤波等价于对这个图作用模糊效果，而一个图的高通滤波等价于描绘出这个图像的细节边界。</p>
<p>我们接下来要说明，对一张图做滤波，等价于对这张图做卷积（分 Box 加权平均）。</p>
<p><img src="https://i.loli.net/2021/11/08/txp4Ta7ugkn2IZ1.png" alt="image-20211108155427029"></p>
<center>卷积定理</center>

<p><strong>卷积定理</strong>是说，对时域的卷积，等价于对频域的乘积；在时域上的乘积，等价于在频域上的卷积。也就是说，如果我们想得到一张图像的滤波，有以下两种选择：</p>
<ul>
<li>在时域中对图像做卷积</li>
<li>先使用傅里叶变换将图像转化到频域，将其与 Box Filter 的频域相乘之后再做逆傅里叶变换</li>
</ul>
<p>事实上，这里的 Box Function 就相当于是一个低通滤波器，可以用来将图像模糊化。而这里 Box 越宽，所接受的频率就越低，所得到的图像也就越模糊。</p>
<h4 id="采样：重复频域上的内容"><a href="#采样：重复频域上的内容" class="headerlink" title="采样：重复频域上的内容"></a>采样：重复频域上的内容</h4><p><img src="https://i.loli.net/2021/11/08/1AHSzyQBpvDseNY.png" alt="image-20211108160150741"></p>
<p>卷积定理指出，在时域上的乘积，等价于在频域上的卷积。我们将原函数 $X_a(t)$​ 与冲激函数 $P_\delta(t)$ 做乘积，也就等价于将二者都使用 FFT 化归到频域后，将二者做卷积。而这结果表明，采样就是在重复一个原始信号的频谱。</p>
<p><img src="https://i.loli.net/2021/11/08/MC5PEF42YIJZDmR.png" alt="image-20211108160830500"></p>
<center>对走样的解释</center>

<p>而为什么会发生走样呢？采样的不同间隔，会引起频谱以不同的间隔去移动。如果我们采样的不够快，那么信号在频域上就产生了混叠现象。</p>
<h4 id="反走样的方法"><a href="#反走样的方法" class="headerlink" title="反走样的方法"></a>反走样的方法</h4><p>该怎么才能减少走样错误呢？</p>
<ul>
<li>增大采样率 （But very costly &amp; may need high resolution）</li>
<li>进行反走样操作：让图像的频谱的频宽变窄！如何做到？在采样前去掉高频信号！</li>
</ul>
<p>回到我们的问题上来，我们要解决现在存在的锯齿问题，也就是要先对原三角形进行模糊，然后再对其采样。那么该怎么对原来的三角形进行模糊呢？我们使用一个低通滤波器对其进行卷积即可。</p>
<p><img src="https://i.loli.net/2021/11/08/lCz2uI3KpdNhsiX.png" alt="image-20211108161654357"></p>
<center>通过计算像素点落在三角形中的平均面积来做滤波</center>

<p>而在我们具体解决问题的时候，我们选择 Supersampling 的方式，也就是将某个像素分为 $N\times N$ 个采样点，然后对这些采样点的像素值取平均。</p>
<p><img src="https://i.loli.net/2021/11/10/dlZQAvIWpihb67C.png" alt="image-20211110134128999"></p>
<p><img src="https://i.loli.net/2021/11/10/OabvGcD1oJsdrwP.png" alt="image-20211110134145650"></p>
<h3 id="深度缓冲"><a href="#深度缓冲" class="headerlink" title="深度缓冲"></a>深度缓冲</h3><p>本节我们主要立足于解决可见性/遮挡问题，解决方法就是<strong>深度缓存/深度缓冲</strong>（Z-Buffering）。</p>
<p>只有将模型按照一定的顺序放在屏幕上，才能达到正确的效果。直观的想法是，先画远处的，再画近处的，这样才能让近处的物体覆盖远处的物体。这样的算法叫做画家算法。而如果假设有 $n$ 个物体，进行 $O(n \log n)$​ 的排序后便可将其画出。但是这种算法的缺陷是，如何定义“远近”，即定义物体离相机所在处的深度，并不容易。</p>
<p><img src="https://i.loli.net/2021/11/10/K6cD4pCLA5aZSXd.png" alt="image-20211110135626091"></p>
<center>相互遮挡的例子</center>

<p>为了解决这个问题，图形学引入了深度缓存的概念。想法就是对屏幕的所有像素额外记录其当前显示物体的最浅深度（深度取正值，表示距离相机的远近）。这样类似于动态规划的算法最终复杂度是 $O(n)$ 的。而且如果我们假设在同一深度处不会出现两个模型，那么不同模型的着色顺序对结果是没有影响的。</p>
<p><img src="https://i.loli.net/2021/11/10/vkn5R7zfhoNZTjC.png" alt="image-20211110140334554"></p>
<center> 深度缓存算法 </center>

<h2 id="Shading-着色"><a href="#Shading-着色" class="headerlink" title="Shading 着色"></a>Shading 着色</h2><h3 id="Blinn-Phong-着色模型"><a href="#Blinn-Phong-着色模型" class="headerlink" title="Blinn-Phong 着色模型"></a>Blinn-Phong 着色模型</h3><p>着色是指引入明暗和颜色不同的过程，但在这里我们定义为对物体应用不同材质的过程。</p>
<p>于是我们在这里介绍一个简单的着色模型，Blinn-Phong Reflectance Model，其中包括高光，漫反射以及环境光照三部分。值得注意的是这个模型是 OpenGL 和 Direct3D 的默认着色模型。具体来说，其定义的参数如下：</p>
<p><img src="https://i.loli.net/2021/11/10/hjsMQS1zJblKIOa.png" alt="image-20211110141545558"></p>
<center> 概念的定义</center>

<p>着色是具有局部性的，即每次只考虑单个点，不考虑其他物体的存在。这样是无法表现阴影的。</p>
<h4 id="漫反射-Diffuse-Reflection"><a href="#漫反射-Diffuse-Reflection" class="headerlink" title="漫反射 Diffuse Reflection"></a>漫反射 Diffuse Reflection</h4><p>光线的接收：单位面积上接收到的光照强度为 $\cos \theta = I \cdot n$。</p>
<p>光线的反射：$I’ = \frac I {r^2}$​</p>
<p>漫反射后：$L_d = k_d(I/r^2)\max(0,\vec n \cdot \vec l)$​，其中 $k_d$ 是三维的 (R,G,B)，表示漫反射系数。</p>
<h4 id="高光-Specular-Term"><a href="#高光-Specular-Term" class="headerlink" title="高光 Specular Term"></a>高光 Specular Term</h4><p>基于如果 $v$ 视线方向和镜面方向相近，那么半程向量就跟平面法向相近的事实，我们定义半程向量 $h := bisector(v,l) = \frac {v+l} {||v+l||}$。</p>
<p>然后令 $L_s = k_s (I/r^2)max(0, \cos \alpha)^p=k_s (I/r^2)max(0, n \cdot h)^p$ 即可，其中 $k_s$ 为高光反射系数。</p>
<p>为什么要带有 $p$ 次方呢？这是因为我们想让产生高光的夹角处于一个相对较小的范围。</p>
<p><img src="https://i.loli.net/2021/11/10/lL5AVnJi8DhTZPb.png" alt="image-20211110200642332"></p>
<h4 id="环境光照-Ambientbu-Term"><a href="#环境光照-Ambientbu-Term" class="headerlink" title="环境光照 Ambientbu Term"></a>环境光照 Ambientbu Term</h4><p>环境光照的强度不取决于物体，我们在这里大胆假设每个地方、每个方向的环境光照的大小都相同。也就是说，这一项会填充图中的黑色区域，将图像整体提升某个光照强度。$L_a := k_aI_a$。</p>
<h3 id="着色频率"><a href="#着色频率" class="headerlink" title="着色频率"></a>着色频率</h3><p>不同的着色单位会有不同的着色效果，具体来说，可分为以下几种：</p>
<ul>
<li><p>逐三角形着色（Flat shading）：将每个三角形视作一个平面，但着色效果不够光滑。</p>
</li>
<li><p>逐顶点着色（Gourand shading）：使用插值的方法计算三角形内部的颜色值，但问题在于如何求顶点的法向。</p>
</li>
<li>逐像素着色（Phong shading）：对每个像素点进行模型计算。</li>
</ul>
<p><img src="https://i.loli.net/2021/11/10/rkst1SbMTCq9c7O.png" alt="image-20211110202506874"></p>
<p>值得注意的是，着色频率越低并不一定代表着效果越差。若几何体足够复杂，则可能区别甚小。</p>
<p>接下来就侧重于解决上述着色频率留下的问题：</p>
<p><img src="https://i.loli.net/2021/11/10/AldyF6mRwpCvb5a.png" alt="image-20211110202753142"></p>
<center>定义逐顶点的法线</center>

<p><img src="https://i.loli.net/2021/11/10/GJhlmoHwv2dMWaj.png" alt="image-20211110202853817"></p>
<center>定义逐像素法线</center>

<h3 id="图形管线-Graphic-Pipeline"><a href="#图形管线-Graphic-Pipeline" class="headerlink" title="图形管线 Graphic Pipeline"></a>图形管线 Graphic Pipeline</h3><p>从图形到场景的过程描述为图形管线。</p>
<p><img src="https://i.loli.net/2021/11/10/wmXdbSKyiNF95PJ.png" alt="image-20211110203343148"></p>
<h3 id="纹理映射-Texture-Mapping"><a href="#纹理映射-Texture-Mapping" class="headerlink" title="纹理映射 Texture Mapping"></a>纹理映射 Texture Mapping</h3><p>纹理映射，事实上是为每个三角形分配一个材质平面的坐标 $(u, v)$。</p>
<p><img src="https://i.loli.net/2021/11/11/hLBROgEdHIyfrkC.png" alt="image-20211111231357192"></p>
<p>其中那种拼接起来可以无限重复的材质我们称为 <strong>tiled</strong> texture.</p>
<h3 id="重心坐标插值"><a href="#重心坐标插值" class="headerlink" title="重心坐标插值"></a>重心坐标插值</h3><p>当我们知道了三角形的三个顶点的属性的时候，如果我们想要实现在三角形内部属性的平滑过渡，就要引入重心坐标的概念。</p>
<p><img src="https://i.loli.net/2021/11/11/iGVW3jLvqsERew8.png" alt="image-20211111231532132"></p>
<p>对于一个三角形 ABC 来说，其中 $(x,y) = \alpha A + \beta B + \gamma C$，若 $\alpha + \beta + \gamma = 1$，则称 $(\alpha, \beta, \gamma)$ 为该三角形内的 $(x,y)$ 点的重心坐标，其中 $\alpha, \beta, \gamma \ge 0$。</p>
<p><img src="https://i.loli.net/2021/11/11/U4jEISXchwARgZV.png" alt="image-20211111231732485"></p>
<p>而由此推导下去，在 $xOy$ 平面中我们有：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\alpha &=\frac{-\left(x-x_{B}\right)\left(y_{C}-y_{B}\right)+\left(y-y_{B}\right)\left(x_{C}-x_{B}\right)}{-\left(x_{A}-x_{B}\right)\left(y_{C}-y_{B}\right)+\left(y_{A}-y_{B}\right)\left(x_{C}-x_{B}\right)} \\
\beta &=\frac{-\left(x-x_{C}\right)\left(y_{A}-y_{C}\right)+\left(y-y_{C}\right)\left(x_{A}-x_{C}\right)}{-\left(x_{B}-x_{C}\right)\left(y_{A}-y_{C}\right)+\left(y_{B}-y_{C}\right)\left(x_{A}-x_{C}\right)} \\
\gamma &=1-\alpha-\beta
\end{aligned}</script><p>使用重心坐标可以方便我们做插值。具体来说，对于三角形 ABC，对于其内部点 $(x,y)=(\alpha, \beta, \gamma)$​，有 $V = \alpha V_A + \beta V_B + \gamma V_C$​。</p>
<p>但是值得注意的是，重心坐标在投影操作中可能会变化。这就会导致一些插值操作只能在三维空间中计算，比如计算深度插值，应该使用原始的三角形三维坐标来计算，而不应使用投影后的平面坐标。</p>
<h3 id="纹理应用-Applying-Texture"><a href="#纹理应用-Applying-Texture" class="headerlink" title="纹理应用 Applying Texture"></a>纹理应用 Applying Texture</h3><p>我们可以将纹理的颜色值设置为模型对应位置的漫反射系数，从而达到应用纹理的效果。</p>
<p>而一个像素对应的纹理的颜色值，则可以通过插值的方式计算得出。</p>
<p>这里我们可能遇到问题：</p>
<ul>
<li>如果材质对应的图像过小怎么办？</li>
<li>如果材质对应的图像过大怎么办？</li>
</ul>
<p>对于前者，我们可以使用双线性插值的方法来缓解。</p>
<p><img src="https://i.loli.net/2021/11/15/HqSbWhcoGAE8rsK.png" alt="image-20211115164939643"></p>
<p>而对于后者，我们可以使用 Mipmap / 各向异性过滤的方法来解决。</p>
<p>事实上，我们可以将纹理视为是内存中的一个数据结构，提供了便捷的查询接口，而非将纹理视为是一张图片。</p>
<h3 id="用纹理做环境光反射效果"><a href="#用纹理做环境光反射效果" class="headerlink" title="用纹理做环境光反射效果"></a>用纹理做环境光反射效果</h3><p>纹理可以用来做环境光反射的效果。实际上，如果我们将来自环境的光照组织成纹理：</p>
<p><img src="https://i.loli.net/2021/11/27/8CwUR6qT5uvHSyt.png" alt="image-20211127173639430"></p>
<center>犹他茶壶</center>

<p>环境光可以通过记录在球面上，然后将球面展开，就可以得到环境光照对应的纹理。但是这样做在纹理上下会有明显的扭曲现象。</p>
<p><img src="https://i.loli.net/2021/11/27/xv2lRyBA1a8PDG6.png" alt="image-20211127174058860"></p>
<p>为了解决这个扭曲的问题，我们使用如下的方案：</p>
<p><img src="https://i.loli.net/2021/11/27/TmiStDkjVz3IsNA.png" alt="image-20211127174158530"></p>
<p>将球面上的每个点映射到恰好包围球的包围盒的表面上（沿球面法向）。然后将包围盒展开成六个表面。</p>
<h3 id="用纹理做凹凸贴图"><a href="#用纹理做凹凸贴图" class="headerlink" title="用纹理做凹凸贴图"></a>用纹理做凹凸贴图</h3><p>事实上，我们的纹理不只是可以用来替换 Blinn-Phong 反射模型中的 $k_d$ 值。我们可以用纹理来描述表面的“属性”，比如待渲染表面的凹凸感，便可以用纹理来记录表面的相对高度。</p>
<p>其实我们可以用足够多的三角形来模拟出凹凸效果，但是这样势必会导致性能上的衰减。使用纹理来做凹凸贴图可以在不改变原模型的几何复杂程度的情况之下，达到渲染出带有凹凸感的图像的目的。</p>
<h4 id="凹凸贴图的推导"><a href="#凹凸贴图的推导" class="headerlink" title="凹凸贴图的推导"></a>凹凸贴图的推导</h4><p>计算过程：修改高度值 -&gt; 重新计算法向量值 -&gt; 着色。</p>
<p><img src="https://i.loli.net/2021/12/01/FfaVTe4LkvhR9u2.png" alt="image-20211201185543817"></p>
<center> Local Coordinate : 换基 </center>

<h4 id="位移贴图"><a href="#位移贴图" class="headerlink" title="位移贴图"></a>位移贴图</h4><p>凹凸贴图并没有改变自己的几何，所以在边缘上看不出凹凸感。同时在阴影上也体现不出来凹凸感。而位移贴图实际上改变了模型几何的位置。但我们需要要求模型足够细致。</p>
<h2 id="Geometry-几何"><a href="#Geometry-几何" class="headerlink" title="Geometry 几何"></a>Geometry 几何</h2><h3 id="几何的表示"><a href="#几何的表示" class="headerlink" title="几何的表示"></a>几何的表示</h3><p>几何的分类：Implicit 的几何和 Explicit 的几何。</p>
<p>Implicit 的几何是说，满足某些特定关系的点构成的几何，即 $f(x,y,z)=0$；Implicit 对于找出集合中的所有点很困难，但是要想判断某个点在不在其中很容易。</p>
<p>Explicit 的表示是说，通过参数映射的方法来定义表面，即将平面上的点 $(u,v)$ 映射到三维坐标 $(x,y,z)$​​​. 想找出几何体表面集合中的所有点，只需变化 $u,v$ 的值即可。但是不容易判断某个点在不在其中。</p>
<p>不同的表示方法，需要根据需要来选择。</p>
<p>此外，隐式表示还可以用 CSG(Constructive Solid Geometry) 的方法来构造，如 $A \cup B, A\cap B, A\backslash B$.</p>
<p><img src="https://i.loli.net/2021/12/01/PfKUJDwvi4FC6ZQ.png" alt="image-20211201192043523"></p>
<center> CSG 的例子 </center>

<p>隐式表示还可以用距离函数、水平集、分形等等方法来定义。</p>
<p>显式表示可以用点云，多边形面（obj 文件）等等表示。</p>
<h3 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a>曲线</h3><h4 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h4><p>用一系列的控制点定义出满足某些性质的曲线。</p>
<p>曲线的起点为控制点的起点，终点为控制点的终点，起始点处与终点处的切线分别为 $\overrightarrow {P_0P_1}, \overrightarrow{P_{n-1}P_n}$.</p>
<p><strong>如何画贝塞尔曲线：de Casteljau Algorithm</strong></p>
<p>（1）先考虑三个控制点，生成二次贝塞尔曲线。</p>
<p><img src="https://i.loli.net/2021/12/01/fE6FrtaL2sDQIGT.png" alt="image-20211201194418429"></p>
<p>（2）再考虑四个控制点，生成三次贝塞尔曲线。</p>
<p><img src="https://i.loli.net/2021/12/01/wR7VDnSPCrLxkKY.png" alt="image-20211201194528603"></p>
<p>(3) 代数形式：插值！</p>
<p><img src="https://i.loli.net/2021/12/01/pmW5vVa61urdbxI.png" alt="image-20211201194639946"></p>
<p>给定 $n+1$ 个控制点，有贝塞尔曲线如下：</p>
<script type="math/tex; mode=display">
b^n(t) = b^n_0(t) = \sum_{j=0}^nb_jB_j^n(t) \\
B_{i}^{n}(t)=\left(\begin{array}{l}
n\\
i
\end{array}\right) t^{i}(1-t)^{n-i}</script><p>贝塞尔曲线的性质：</p>
<script type="math/tex; mode=display">
(1) \ \ b(0) = b_0; \ b(1)=b_{n}\\
(2) \ \ b'(0)=3(b_1-b_0); \ b'(1) = 3(b_3-b_2) \ (For \ cubic \ cases) \\</script><p>(3) 在仿射变换下不变；</p>
<p>(4) 曲线包含在控制点的凸包（包含所有控制点的最小凸多边形）内。</p>
<p><strong>逐段形成贝塞尔曲线</strong>：每四个控制点形成一段贝塞尔曲线，并将其连接。</p>
<p>保证切线光滑？导数连续！保证性质(2)成立即可。</p>
<p>两段贝塞尔曲线的连续： $C^0$ 连续指点重合，$C^1$ 连续指导数连续，以此类推。</p>
<h4 id="其它曲线"><a href="#其它曲线" class="headerlink" title="其它曲线"></a>其它曲线</h4><p>样条（Spline），B-样条（basis splines），具有好的局部性。</p>
<h3 id="曲面"><a href="#曲面" class="headerlink" title="曲面"></a>曲面</h3><h4 id="贝塞尔曲面"><a href="#贝塞尔曲面" class="headerlink" title="贝塞尔曲面"></a>贝塞尔曲面</h4><p><img src="https://i.loli.net/2021/12/01/SbHh4tNQ7RKZWTy.png" alt="image-20211201201257424"></p>
<h4 id="面上的操作"><a href="#面上的操作" class="headerlink" title="面上的操作"></a>面上的操作</h4><ul>
<li>Subdivision</li>
<li>Simplification</li>
<li>Regularization</li>
</ul>
<h5 id="细分"><a href="#细分" class="headerlink" title="细分"></a>细分</h5><p>(1) 分出更多三角形 (2) 将新的三角形的位置改变，使得原模型更加光滑</p>
<p><strong>Loop Subdivision</strong></p>
<p><img src="https://i.loli.net/2021/12/01/5BsOmrFeHV29QaI.png" alt="image-20211201202358001"></p>
<p><img src="https://i.loli.net/2021/12/01/YmIofNMZ3GVULzd.png" alt="image-20211201202518340"></p>
<p><strong>Catmull-Clark Subdivision</strong></p>
<p>针对于一般的曲面，而非三角形作为图源。</p>
<p>定义：非四边形面，奇异点（度不为 4 的点）</p>
<p>细分的方式：引入点的操作十分简单，取每面的中点和该面的边的中点，并将其连接。</p>
<p>调整位置的方法：分为三种。</p>
<p><img src="https://s2.loli.net/2022/01/16/WSt491CxVjMGNHr.png" alt="image-20211201204717217"></p>
<h5 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h5><p><strong>边坍缩</strong> Edge Collapse</p>
<p>Quadric Error Metrics 二次误差度量 寻找去 Collapse 某条边后新顶点的位置。</p>
<p><img src="https://s2.loli.net/2022/01/16/qOX5RmUnkLvfhTJ.png" alt="image-20211201205342215"></p>
<p>将所有边按二次误差测量排序，坍缩最小值所在边，更新受影响的其他边的权重。用堆来维护！</p>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/计算机图形学</category>
      </categories>
      <tags>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>GAMES101 现代计算机图形学基础 笔记（下）</title>
    <url>/games101-cont/</url>
    <content><![CDATA[<p>GAMES 101 现代计算机图形学基础 笔记（下篇）.</p>
<ul>
<li>光线追踪（Whitted-style，求交算法，加速结构，辐射度量学，路径追踪）</li>
<li>材质与外观</li>
<li>动画与模拟</li>
</ul>
<a id="more"></a>
<h2 id="光线追踪-Ray-Tracing"><a href="#光线追踪-Ray-Tracing" class="headerlink" title="光线追踪 Ray Tracing"></a>光线追踪 Ray Tracing</h2><h3 id="从问题出发"><a href="#从问题出发" class="headerlink" title="从问题出发"></a>从问题出发</h3><p>如何用光栅化的手法解决阴影的问题？</p>
<p>重要思想：点不在阴影中，当且仅当点必须同时被光源和摄像机看到。</p>
<ol>
<li>从光源看向场景（用 Z-buffer’ 记录深度）</li>
<li>从摄像机看向场景</li>
<li>如果两深度相同，则无需阴影；若两深度不同，则在阴影中。</li>
</ol>
<p>这样做存在的问题：</p>
<ul>
<li>Hard shadows（阴影被 0/1 化，无法表示阴影的程度）</li>
</ul>
<p>提出光线追踪，就是为了解决光线追踪无法很好地处理<strong>全局效果</strong>的问题。</p>
<ul>
<li>Soft Shadows</li>
<li>Glossy reflection</li>
<li>Indirect illumination (光线会弹射不止一次)</li>
</ul>
<p>光线追踪生成的图片质量很高，但是是离线的算法，运作速度也很慢。</p>
<h3 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h3><h4 id="相关定义"><a href="#相关定义" class="headerlink" title="相关定义"></a>相关定义</h4><ul>
<li><p>光线</p>
<ul>
<li>光线沿直线传播</li>
<li>光线和光线并不会发生碰撞</li>
<li>光线总是从光源发出，终止于人的眼睛（我们需要模拟的就是这个过程）<ul>
<li>根据光路的可逆性，我们可以假设“感知光线”从人眼出发…</li>
</ul>
</li>
</ul>
</li>
<li><p>光线投射</p>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/14/wJAXG9b1VIEuSLt.png" alt="image-20220114154759095"></p>
<p>对于我们眼前的成像平面的每一个像素点，从人眼发出一条“感知光线”经过这个像素点，可能会触碰到场景中的某个位置。如果该位置和光源的连线上无其它物体的遮挡，那么我们就可以直接对其进行着色计算。</p>
<p><img src="https://s2.loli.net/2022/01/14/wCFDdpmHioMkrEL.png" alt="image-20220114155221509"></p>
<h4 id="Whitted-style-Ray-Tracing"><a href="#Whitted-style-Ray-Tracing" class="headerlink" title="Whitted-style Ray Tracing"></a>Whitted-style Ray Tracing</h4><p><img src="https://s2.loli.net/2022/01/14/T1xAeVvrhOoGJK4.png" alt="image-20220114155905503"></p>
<p>思路：模拟光线不断弹射的过程，并记录光线在每一个弹射点的衰减率。如上图中，对于玻璃球，需要模拟其反射和折射光路。具体的技术实现见下。</p>
<h4 id="光线和物体表面交点的求法"><a href="#光线和物体表面交点的求法" class="headerlink" title="光线和物体表面交点的求法"></a>光线和物体表面交点的求法</h4><ul>
<li>对于隐式表面</li>
</ul>
<p>光线的定义：原点 $\vec o$​​，传播方向 $\vec d \ (||\vec d||=1)$​​​，光线定义为 $\vec r(t) = \vec o +t\vec d, \ t\ge0$​​。</p>
<p>球的定义：$\vec p: (\vec p - \vec c)^2 - R^2 = 0$.</p>
<script type="math/tex; mode=display">
\begin{aligned}
&(\mathbf{o}+t \mathbf{d}-\mathbf{c})^{2}-R^{2}=0 \\
&a t^{2}+b t+c=0, \text { where } \\
&a=\mathbf{d} \cdot \mathbf{d} \\
&b=2(\mathbf{o}-\mathbf{c}) \cdot \mathbf{d} \\
&c=(\mathbf{o}-\mathbf{c}) \cdot(\mathbf{o}-\mathbf{c})-R^{2} \\
&t=\frac{-b \pm \sqrt{b^{2}-4 a c}}{2 a}
\end{aligned}</script><ul>
<li>对于显式表面</li>
</ul>
<p>一个简单的想法是对模型的所有三角形表面做遍历，然后选择 $t$ 最小的那个。（可能不存在，可以优化*）</p>
<p>于是，接下来我们仅考虑光线如何与单个三角形求交。</p>
<p>定义平面为 $(p-p’) \cdot N = 0$.</p>
<script type="math/tex; mode=display">
\begin{aligned}
&\left(\mathbf{p}-\mathbf{p}^{\prime}\right) \cdot \mathbf{N}=\left(\mathbf{o}+t \mathbf{d}-\mathbf{p}^{\prime}\right) \cdot \mathbf{N}=0 \\
&t=\frac{\left(\mathbf{p}^{\prime}-\mathbf{o}\right) \cdot \mathbf{N}}{\mathbf{d} \cdot \mathbf{N}} \quad \text { Check: } 0 \leq t<\infty
\end{aligned}</script><p>然后判断交点是否在三角形内。</p>
<p>此外还有 Möller Trumbore 算法，可以直接判断交点是否在三角形内（需要用到克莱姆法则）：</p>
<script type="math/tex; mode=display">
\begin{gathered}
\overrightarrow{\mathbf{O}}+t \overrightarrow{\mathbf{D}}=\left(1-b_{1}-b_{2}\right) \overrightarrow{\mathbf{P}}_{0}+b_{1} \overrightarrow{\mathbf{P}}_{1}+b_{2} \overrightarrow{\mathbf{P}}_{2} \\
\text { Where: } \\
{\left[\begin{array}{c}
t \\
b_{1} \\
b_{2}
\end{array}\right]=\frac{1}{\overrightarrow{\mathbf{S}}_{1} \bullet \overrightarrow{\mathbf{E}}_{1}}\left[\begin{array}{cc}
\overrightarrow{\mathbf{S}}_{2} \cdot \overrightarrow{\mathbf{E}}_{2} \\
\overrightarrow{\mathbf{S}}_{1} \cdot \overrightarrow{\mathbf{S}} \\
\overrightarrow{\mathbf{S}}_{2} \cdot \overrightarrow{\mathbf{D}}
\end{array}\right]} \\
\text { Cost = (1 div, 27 mul, 17 add) } \\
\overrightarrow{\mathbf{E}}_{1}=\overrightarrow{\mathbf{P}}_{1}-\overrightarrow{\mathbf{P}}_{0} \\
\overrightarrow{\mathbf{E}}_{2}=\overrightarrow{\mathbf{P}}_{2}-\overrightarrow{\mathbf{P}}_{0} \\
\overrightarrow{\mathbf{S}}=\overrightarrow{\mathbf{O}}-\overrightarrow{\mathbf{P}}_{0} \\
\overrightarrow{\mathbf{S}}_{1}=\overrightarrow{\mathbf{D}} \times \overrightarrow{\mathbf{E}}_{2} \\
\overrightarrow{\mathbf{S}}_{2}=\overrightarrow{\mathbf{S}} \times \overrightarrow{\mathbf{E}}_{1}
\end{gathered}</script><p>该怎样加速与模型求交呢(*)？</p>
<ul>
<li><p>Naive algorithm = #pixels ⨉ # traingles (⨉ #bounces) 太慢了，不能满足我们的需求</p>
</li>
<li><p>Improved Algorithm: Bounding Volume</p>
<ul>
<li>这里我们仍然引入“包围盒”的思想，这里称为 Bounding Volume</li>
<li>光线能够与模型有交点的必要条件：光线能够与包围模型的一个简单包围体积有交点</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/14/gtSeZD1FWrcXQCs.png" alt="image-20220114163023985"></p>
<p>我们将长方体理解成三个对面所分划出的空间的交集。我们一般使用的包围体积便是长方体，且长方体是与坐标轴平行的，即轴对齐包围盒（AABB）。选用 AABB 式包围盒有利于加速计算。判断光线和 AABB 类包围盒的求交方法如下：</p>
<p><img src="https://s2.loli.net/2022/01/14/5rMlAnIw3gQBVNL.png" alt="image-20220114163501816"></p>
<p>核心思想：只有当光线进入所有三个对面后，光线才进入了包围盒；若光线从某一个对面出射，则光线便从包围盒中射出。于是我们可以计算三个对面分别对应的 $t_{min}$​​ 和 $t_{max}$​​，然后对其求交。当且仅当 $t_{enter} \lt t_{exit}$​​ 且 $t_{exit} \ge 0$​​，光线才可能与包围盒有交点。</p>
<h4 id="使用包围盒加速光线追踪"><a href="#使用包围盒加速光线追踪" class="headerlink" title="使用包围盒加速光线追踪"></a>使用包围盒加速光线追踪</h4><h5 id="Uniform-Grids"><a href="#Uniform-Grids" class="headerlink" title="Uniform Grids"></a>Uniform Grids</h5><p>① 预处理</p>
<p><img src="https://s2.loli.net/2022/01/14/Ggt2BDyranQYdCh.png" alt="image-20220114165308910"></p>
<p>一般来说，取格子数 #cells = #objs * 27.</p>
<p>② 光线与场景中模型的求交</p>
<p><img src="https://s2.loli.net/2022/01/14/qTfEAhQo5OXLcgW.png" alt="image-20220114165353415"></p>
<p>存在的问题：Teapot in a Stadium，事实上物体模型在空间中的分布可能并不均匀！</p>
<h5 id="空间划分-Spatial-Partitions"><a href="#空间划分-Spatial-Partitions" class="headerlink" title="空间划分 Spatial Partitions"></a>空间划分 Spatial Partitions</h5><ul>
<li>Oct-Tree</li>
<li>Kd-Tree</li>
<li>BSP-Tree</li>
</ul>
<p>这里以 Kd-Tree 为例，Kd-Tree 的具体实现在《数据结构》课程中已详细介绍过，这里便不再赘述。我们将空间模型首先使用 Kd-Tree 预处理，然后针对不同的光线（Query），进行如下操作：</p>
<ul>
<li>首先判断光线和最外层包围盒是否有交点，如果有那么：<ul>
<li>如果包围盒为叶子结点，直接判断光线和包围盒中模型是否相交并求交；</li>
<li>如果包围盒非叶子结点，那么对其两个子节点的包围盒，分别判断其是否与光线有交，若有则递归地执行此过程。</li>
</ul>
</li>
</ul>
<p>kd-Tree 存在的问题：</p>
<ul>
<li>难以判断实际的物体和包围盒是否相交<ul>
<li>即使是对于物体全部为三角形的场景，也难以判断单个包围盒和单个三角形是否有交点！</li>
</ul>
</li>
<li>此外，一个物体可能出现在多个叶子结点中…</li>
</ul>
<h5 id="Object-Partitions"><a href="#Object-Partitions" class="headerlink" title="Object Partitions"></a>Object Partitions</h5><ul>
<li>Bounding volume Hierarchy (BVH)</li>
</ul>
<p>我们划分的不是空间，而是物体！</p>
<p><img src="https://s2.loli.net/2022/01/16/zbLpGw5E7SCgQAu.png" alt="image-20220116102930688"></p>
<p>如何进行划分？</p>
<ul>
<li>沿着最长的维度来划分</li>
<li>划分端点取中位数<ul>
<li>取三角形的重心</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/16/xtKaWO7lJ2Rm8Xb.png" alt="image-20220116103520101"></p>
<p>使用 BVH 算法，即使包围盒可能在空间上有相交，但是我们却解决了 kd-Tree 存在的问题。</p>
<h4 id="辐射度量学"><a href="#辐射度量学" class="headerlink" title="辐射度量学"></a>辐射度量学</h4><p>辐射度量学提供了精准地描述光这个物理量的方法。</p>
<ul>
<li>光照的度量方法和单位</li>
<li>精确地度量光的时空属性<ul>
<li>Radiant Flux 辐射通量</li>
<li>Radiant Intensity 辐射强度</li>
<li>Irradiance 辐射照度</li>
<li>Radiance 辐射亮度</li>
</ul>
</li>
<li>使用物理正确的方法来计算光照</li>
</ul>
<h5 id="物理量的定义"><a href="#物理量的定义" class="headerlink" title="物理量的定义"></a>物理量的定义</h5><ul>
<li><strong>Radiant Energy</strong> $Q$ (辐射能量，单位 J)</li>
<li><strong>Radiant Flux</strong> (又名 <strong>Power</strong>) $\Phi = \frac {dQ} {dt}$​ （辐射通量，单位 W, lm）</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/16/z41TFClAOsMcS9I.png" alt="image-20220116104840613"></p>
<ul>
<li><strong>Radiant Intensity</strong> $I(\omega) = \frac {d \Phi} {d \omega}$，其中 $\omega$​​ 是立体角，单位为 lm/sr =: cd (坎德拉)，每单位立体角的功率</li>
</ul>
<blockquote>
<p>立体角的定义：</p>
<p><img src="https://s2.loli.net/2022/01/16/la1fuCOdi9mKokN.png" alt="image-20220116105159216"></p>
</blockquote>
<p>特别地，若光源均匀辐射，则我们有 $I = \frac {\Phi} {4\pi}$​。</p>
<ul>
<li><strong>Irradiance</strong> $E(x) = \frac { d \Phi(x)} {dA}$，辐照度，单位面积上的辐射通量，单位 lux.</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/16/uXeymz4bKvgBPiV.png" alt="image-20220116110821261"></p>
<ul>
<li><strong>Radiance</strong> $L(p, \omega) = \frac {d^2\Phi(p, \omega)} {d \omega dA \cos \theta}$​</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/16/w8AWzY3Cs1HkaZP.png" alt="image-20220116111154506"></p>
<p>辐射度(亮度)是每单位立体角和每单位投影面积上，由表面反射、发射或接收的能量。辐射度是光线的属性。</p>
<ul>
<li>Radiance is power per solid angle per projected unit area;</li>
<li>Irradiance is power per projected unit area;</li>
<li>Intensity is power per solid angle;</li>
<li>That is to say…</li>
<li>Radiance is intensity per projected unit area;</li>
<li>Radiance is irradiance per solid angle, 也就是说，irradiance 是一个表面 $dA \cos \theta$接收到的能量，radiance 是该表面朝着某个 $\omega$ 立体角方向辐射出去或接收到的能量，后者具有表明方向的能力。</li>
</ul>
<h4 id="双向反射分布函数（BRDF）"><a href="#双向反射分布函数（BRDF）" class="headerlink" title="双向反射分布函数（BRDF）"></a>双向反射分布函数（BRDF）</h4><ul>
<li>BRDF := Bidirectional Reflectance Distribution Function</li>
</ul>
<p>什么是反射？反射可以看做是物体表面吸收了照射到该处的所有能量，然后再辐射出去的一个过程。</p>
<p>BRDF 这个分布函数是用于描述，对于物体表面一个小面积 $dA$，接收到的来自于立体角 $d \omega_i$ 的 irradiance，会以怎样的方式被辐射出去，分布于各个 solid angle 中。即：$BRDF := \frac {dL_r({\omega _r)}} {L(w_i) \cos \theta \ d\omega_i} \rightarrow percentage$​. 即：朝某个方向的辐射度占总照度的比例。</p>
<p><img src="https://s2.loli.net/2022/01/16/QCrPA8qnHXOhu2W.png" alt="image-20220116114348861"></p>
<p>使用 BRDF 可以用来定义镜面反射和漫反射。此外，BRDF 还可以用来定义物体表面的材质。</p>
<p>于是，借助于 BRDF 的定义，我们考虑真实的光线传播。从某个点 $dA$ 向 $\omega_r$ 方向出射的 radiance，可以通过考虑所有 $w_i$ 到达这个点的照度乘以其对应的 BRDF 占比，然后求和得到。</p>
<p><img src="https://s2.loli.net/2022/01/16/xbeovLICaJnK7sj.png" alt="image-20220116115205963"></p>
<p>问题：我们考虑的入射 Radiance 可能不仅仅由光源发出，也可能是由其他物体先经过若干次反射得到…</p>
<h4 id="Rendering-Equation"><a href="#Rendering-Equation" class="headerlink" title="Rendering Equation"></a>Rendering Equation</h4><script type="math/tex; mode=display">
L_{o}\left(p, \omega_{o}\right)=L_{e}\left(p, \omega_{o}\right)+\int_{\Omega^{+}} L_{i}\left(p, \omega_{i}\right) f_{r}\left(p, \omega_{i}, \omega_{o}\right)\left(n \cdot \omega_{i}\right) \mathrm{d} \omega_{i}</script><p>经过推导之后，我们得出：</p>
<p><img src="https://s2.loli.net/2022/01/16/gFjCZGfP3VmcYTs.png" alt="image-20220116151021069"></p>
<p>全局光照 L = 直接光照 E 和间接光照的集合，其中 K 是反射算符。</p>
<h4 id="路径追踪"><a href="#路径追踪" class="headerlink" title="路径追踪"></a>路径追踪</h4><blockquote>
<p><strong>蒙特卡洛积分</strong></p>
<p>目的是为了解决定积分 $\int_a^bf(x)dx$ 问题。</p>
<p>做法是在 $[a,b]$​ 间随机采样足够多次，然后将足够多次的结果进行平均后作为函数均值积分。</p>
<p>例如，我们使用均匀采样的方式：</p>
<p><img src="https://s2.loli.net/2022/01/16/4MltFzimgEdkbVR.png" alt="image-20220116153649942"></p>
<p>更一般地，我们有：</p>
<script type="math/tex; mode=display">
\int f(x) \mathrm{d} x=\frac{1}{N} \sum_{i=1}^{N} \frac{f\left(X_{i}\right)}{p\left(X_{i}\right)} \quad X_{i} \sim p(x)</script></blockquote>
<p>回忆 Whitted-style ray tracing:</p>
<ul>
<li>可以做镜面反射和折射的效果</li>
<li>遇到漫反射平面便停止</li>
</ul>
<p>使用渲染方程，我们可以有以下推导过程：</p>
<p>对于非光源表面 $dA$​​​，我们有：</p>
<script type="math/tex; mode=display">
L_{o}\left(p, \omega_{o}\right)=\int_{\Omega^{+}} L_{i}\left(p, \omega_{i}\right) f_{r}\left(p, \omega_{i}, \omega_{o}\right)\left(n \cdot \omega_{i}\right) \mathrm{d} \omega_{i}</script><p>对 $w_i$​​ 进行 Sample，且 Sample 均匀分布于 $[0, 2\pi]$​​。于是我们可以得出：</p>
<script type="math/tex; mode=display">
L_{o}\left(p, \omega_{o}\right) \approx \frac{1}{N} \sum_{i=1}^{N} \frac{L_{i}\left(p, \omega_{i}\right) f_{r}\left(p, \omega_{i}, \omega_{o}\right)\left(n \cdot \omega_{i}\right)}{p\left(\omega_{i}\right)}</script><p>进而，我们可以提出一种着色算法：</p>
<p><img src="https://s2.loli.net/2022/01/16/QVLKN1BoPISCDZE.png" alt="image-20220116164125480"></p>
<p>然而，我们如何继续引入全局光照的概念呢？很简单，只需要考虑如果光线 $r$ 命中某个物体时的情况。也就是说，将该物体表面视为新的光源：</p>
<p><img src="https://s2.loli.net/2022/01/16/qEcxeKGIJSw1lLb.png" alt="image-20220116164724144"></p>
<p>我们只需要计算 $q$ 处，$-w_i$ 方向发射的 Radiance，便可以得到渲染结果。</p>
<p>但是这样做带来的问题是，光线的数目会发生指数爆炸，于是我们只能在采样时取 N=1，即在计算蒙特卡洛积分时取 N=1，然后仅追踪一根光线的情况。</p>
<p><img src="https://s2.loli.net/2022/01/16/rxEkeSplq6doBgQ.png" alt="image-20220116164911441"></p>
<p>我们便将这种 N=1 的处理方式称为“路径追踪”。</p>
<p>为了降低 Noise，我们可以对像平面上的每个像素都追踪多条这样的“路径”，然后将这些路径计算得到的 Radiance 取平均值即可。</p>
<p><img src="https://s2.loli.net/2022/01/16/gbk2BK9LGTjZ1PV.png" alt="image-20220116165143374"></p>
<p>此外，我们还需要设置 shade 过程的递归基。为此，我们可以设置最大光线弹射次数，但这样取得的效果不如使用 <code>Russian Roulette</code>（俄罗斯轮盘赌）。也就是说，对于某个点的着色结果，我们给定 $p$ 的概率返回 $result_{old} / p$，$1-p$ 的概率返回 $0$​，这样做我们着色结果的期望仍是 $result_{old}$！</p>
<p><img src="https://s2.loli.net/2022/01/16/7g4DHb8rNKmeC1M.png" alt="image-20220116165744374"></p>
<p>目前我们就得到了路径追踪算法的正确版本，即对于每个像平面上的像素点调用 ray_generation 过程，而 shade 过程则加入了这样的几何分布方式来确定光线是否能够继续生存。但是目前来说，我们的算法可能在效率上并不高，在低采样率（SPP, Samples per pixel）的情况下效果并不好：</p>
<p><img src="https://s2.loli.net/2022/01/16/1M76Bj8Q9lnav3K.png" alt="image-20220116170133804"></p>
<p>这是因为，如果我们的光源过小，我们需要足够多次采样，才有可能将“追踪用光线”最终命中光源。也就是说，大部分的追踪路径都是无效的：</p>
<p><img src="https://s2.loli.net/2022/01/16/1j7Tk6HnRyMsVD5.png" alt="image-20220116170327150"></p>
<p>或许我们能找到更合适的采样概率分布…比如，<strong>对光源采样</strong>！</p>
<p><img src="https://s2.loli.net/2022/01/16/s8yVDHI3JiXBFeU.png" alt="image-20220116190243440"></p>
<p>于是：</p>
<script type="math/tex; mode=display">
\begin{aligned}
L_{o}\left(x, \omega_{o}\right) &=\int_{\Omega^{+}} L_{i}\left(x, \omega_{i}\right) f_{r}\left(x, \omega_{i}, \omega_{o}\right) \cos \theta \mathrm{d} \omega_{i} \\
&=\int_{A} L_{i}\left(x, \omega_{i}\right) f_{r}\left(x, \omega_{i}, \omega_{o}\right) \frac{\cos \theta \cos \theta^{\prime}}{\left\|x^{\prime}-x\right\|^{2}} \mathrm{~d} A
\end{aligned}</script><p>在之前我们假设光线可以在采样半球面上均匀射出，而现在我们将点 $dA$ 处的 Radiance 分两部分来考虑：</p>
<ol>
<li>光源的直接贡献（不需要 RR 计算）</li>
<li>其他表面的反射光的贡献（使用 RR）</li>
</ol>
<p>这样考虑后，我们得出改进版的路径追踪伪代码如下：</p>
<p><img src="https://s2.loli.net/2022/01/16/zMDhcL3almKIr6t.png" alt="image-20220116190636646"></p>
<p>此外，我们还需要考虑光源发出的光束是否可能被障碍物遮挡…</p>
<p><img src="https://s2.loli.net/2022/01/16/OEXG9d2tikuHncl.png" alt="image-20220116190917657"></p>
<p>最后，路径追踪的伪代码整理如下：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ray_generation</span><span class="token punctuation">(</span>camPos<span class="token punctuation">,</span> pixel<span class="token punctuation">)</span><span class="token punctuation">:</span>
	Uniformly choose N samples <span class="token keyword">from</span> the pixel
	pixel_radiance <span class="token operator">=</span> <span class="token number">0.0</span>
	<span class="token keyword">for</span> sample <span class="token keyword">in</span> the pixel<span class="token punctuation">:</span>
		Shoot a ray r<span class="token punctuation">(</span>camPos<span class="token punctuation">,</span> cam_to_sample<span class="token punctuation">)</span>
		<span class="token keyword">if</span> ray r hit the scene at p<span class="token punctuation">:</span>
			pixel_radiance <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">/</span> N <span class="token operator">*</span> shade<span class="token punctuation">(</span>p<span class="token punctuation">,</span> sample_to_cam<span class="token punctuation">)</span>
    <span class="token keyword">return</span> pixel_radiance

<span class="token keyword">def</span> <span class="token function">shade</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> wo<span class="token punctuation">)</span><span class="token punctuation">:</span>

	<span class="token comment"># Contributions from the light source</span>
	L_dir <span class="token operator">=</span> <span class="token number">0.0</span>
	Uniformly sample the light at x' <span class="token punctuation">(</span>pdf_light <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>A<span class="token punctuation">)</span>
	Shoot a ray <span class="token keyword">from</span> p to x'
	<span class="token keyword">if</span> the ray <span class="token keyword">is</span> <span class="token keyword">not</span> blocked <span class="token keyword">in</span> the middle<span class="token punctuation">:</span>
		L_dir <span class="token operator">=</span> L_i <span class="token operator">*</span> f_r <span class="token operator">*</span> cos \theta <span class="token operator">*</span> cos \theta<span class="token string">' / |x'</span><span class="token operator">-</span>p<span class="token operator">|</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">/</span> pdf_light
    
    <span class="token comment"># Contributions from other places</span>
    L_indir <span class="token operator">=</span> <span class="token number">0.0</span>
    If test Russian Roulette <span class="token keyword">with</span> probability P_RR <span class="token punctuation">:</span>
        Uniformly sample the hemisphere toward wi <span class="token punctuation">(</span>pdf_hemi <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> 2pi<span class="token punctuation">)</span>
        Trace a ray r<span class="token punctuation">(</span>p<span class="token punctuation">,</span> wi<span class="token punctuation">)</span>
        If ray r hit a non<span class="token operator">-</span>emitting <span class="token builtin">object</span> at q<span class="token punctuation">:</span>
            L_indir <span class="token operator">=</span> shade<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token operator">-</span>wi<span class="token punctuation">)</span> <span class="token operator">*</span> f_r <span class="token operator">*</span> cos \theta <span class="token operator">/</span> pdf_hemi <span class="token operator">/</span> P_RR
    
    Return L_dir <span class="token operator">+</span> L_indir</code></pre>
<h2 id="材质与外观-Materials-and-Appearance"><a href="#材质与外观-Materials-and-Appearance" class="headerlink" title="材质与外观 Materials and Appearance"></a>材质与外观 Materials and Appearance</h2><ul>
<li>Material == BRDF!</li>
</ul>
<h3 id="一些材质的例子"><a href="#一些材质的例子" class="headerlink" title="一些材质的例子"></a>一些材质的例子</h3><h4 id="漫反射材料-Diffuse-Lambertian-Material"><a href="#漫反射材料-Diffuse-Lambertian-Material" class="headerlink" title="漫反射材料 Diffuse/Lambertian Material"></a>漫反射材料 Diffuse/Lambertian Material</h4><p>假设入射光的 Radiance 均匀分布：</p>
<script type="math/tex; mode=display">
\begin{aligned}
L_{o}\left(\omega_{o}\right) &=\int_{H^{2}} f_{r} L_{i}\left(\omega_{i}\right) \cos \theta_{i} \mathrm{~d} \omega_{i} \\
&=f_{r} L_{i} \int_{H^{2}}\left(\omega_{i}\right) \cos \theta_{i} \mathrm{~d} \omega_{i} \\
&=\pi f_{r} L_{i} \\
f_{r}=\frac{\rho}{\pi} &-\text { albedo (color) }
\end{aligned}</script><p>这里 $\rho$ 可以是常数（单通道），也可以是针对不同通道定义了不同数值的向量。</p>
<h4 id="抛光的金属-Glossy-Material"><a href="#抛光的金属-Glossy-Material" class="headerlink" title="抛光的金属 Glossy Material"></a>抛光的金属 Glossy Material</h4><p><img src="https://s2.loli.net/2022/01/17/9xZHgA8u6icXKyo.png" alt="image-20220117103604496"></p>
<h4 id="理想反射-折射材质"><a href="#理想反射-折射材质" class="headerlink" title="理想反射/折射材质"></a>理想反射/折射材质</h4><p><img src="https://s2.loli.net/2022/01/17/RgoxIXL2qr3MaD7.png" alt="image-20220117103654766"></p>
<ul>
<li>反射：反射定律</li>
<li>折射：折射定律 Snell’s Law，注意全反射的情况</li>
<li>能量分配：菲涅尔公式 Fresnel Term</li>
</ul>
<blockquote>
<p>精确的菲涅尔公式：</p>
<script type="math/tex; mode=display">
\begin{aligned}

&R_{\mathrm{s}}=\left|\frac{n_{1} \cos \theta_{\mathrm{i}}-n_{2} \cos \theta_{\mathrm{t}}}{n_{1} \cos \theta_{\mathrm{i}}+n_{2} \cos \theta_{\mathrm{t}}}\right|^{2}=\left|\frac{n_{1} \cos \theta_{\mathrm{i}}-n_{2} \sqrt{1-\left(\frac{n_{1}}{n_{2}} \sin \theta_{\mathrm{i}}\right)^{2}}}{n_{1} \cos \theta_{\mathrm{i}}+n_{2} \sqrt{1-\left(\frac{n_{1}}{n_{2}} \sin \theta_{\mathrm{i}}\right)^{2}}}\right|^{2} \\

&R_{\mathrm{p}}=\left|\frac{n_{1} \cos \theta_{\mathrm{t}}-n_{2} \cos \theta_{\mathrm{i}}}{n_{1} \cos \theta_{\mathrm{t}}+n_{2} \cos \theta_{\mathrm{i}}}\right|^{2}=\left|\frac{n_{1} \sqrt{1-\left(\frac{n_{1}}{n_{2}} \sin \theta_{\mathrm{i}}\right)^{2}}-n_{2} \cos \theta_{\mathrm{i}}}{n_{1} \sqrt{1-\left(\frac{n_{1}}{n_{2}} \sin \theta_{\mathrm{i}}\right)^{2}}+n_{2} \cos \theta_{\mathrm{i}}}\right|^{2} \\

& R_{eff} = \frac 1 2 (R_s + R_p)
\end{aligned}</script></blockquote>
<p>近似后：</p>
<script type="math/tex; mode=display">
\begin{aligned}
R(\theta) &=R_{0}+\left(1-R_{0}\right)(1-\cos \theta)^{5} \\
R_{0} &=\left(\frac{n_{1}-n_{2}}{n_{1}+n_{2}}\right)^{2}
\end{aligned}</script><h4 id="微表面模型-Microfacet-Material"><a href="#微表面模型-Microfacet-Material" class="headerlink" title="微表面模型 Microfacet Material"></a>微表面模型 Microfacet Material</h4><p>虽然物体的表面是粗糙的，但是若从远处看，则可以将物体表面视为是平的。即对于粗糙表面来说：</p>
<ul>
<li>从远处看可以视为是平的粗糙表面</li>
<li>从近处看看到的是高低起伏的高光表面</li>
</ul>
<p>从远处看看到的是材质，从近处看看到的是几何。</p>
<p><img src="https://s2.loli.net/2022/01/17/8ESojAlrTM1sptY.png" alt="image-20220117110551868"></p>
<p>我们考虑这些微表面的法线的分布情况。如果其分布方差较小，则表面是 Glossy 的；而如果其分布方差较大，我们可以视其表面为 Diffuse 型。</p>
<p><img src="https://s2.loli.net/2022/01/17/n8QueMgHco16W5R.png" alt="image-20220117111415698"></p>
<h4 id="各向同性与各向异性材质"><a href="#各向同性与各向异性材质" class="headerlink" title="各向同性与各向异性材质"></a>各向同性与各向异性材质</h4><p>这是一种分类材质的方式。各向同性材质的微表面的法线分布并不具有明确的方向性，而各向异性材质的法线分布却具有，因而后者具有一些特殊的性质。</p>
<p>从定义上来说，后者的 BRDF 与其绝对方位角 $\Phi$ 有关。</p>
<h3 id="BRDF-的性质与其测量"><a href="#BRDF-的性质与其测量" class="headerlink" title="BRDF 的性质与其测量"></a>BRDF 的性质与其测量</h3><blockquote>
<p>BRDF 的性质：</p>
<ul>
<li>Non-negativity</li>
<li>Linearity</li>
<li>Reciprocity principle： $f_r(w_r \rightarrow w_i) = f_r(w_i \rightarrow w_r)$</li>
<li>Energy conservation</li>
<li>Isotropic or anisotropic</li>
</ul>
</blockquote>
<p>测量方法：</p>
<p><img src="https://s2.loli.net/2022/01/17/cegxist9jRBoTdb.png" alt="image-20220117112601733"></p>
<ul>
<li>MERL BRDF Database</li>
</ul>
<h2 id="知识补完"><a href="#知识补完" class="headerlink" title="知识补完"></a>知识补完</h2><h3 id="相机、棱镜与光场"><a href="#相机、棱镜与光场" class="headerlink" title="相机、棱镜与光场"></a>相机、棱镜与光场</h3><ul>
<li>成像 Imaging = Synthesis 合成 + Capture 捕捉</li>
</ul>
<h4 id="FOV"><a href="#FOV" class="headerlink" title="FOV"></a>FOV</h4><ul>
<li>小孔成像：针孔相机</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/17/NtqCuUidJ1kSafb.png" alt="image-20220117162312506"></p>
<p>视场 $FOV = 2 \arctan(\frac {h} {2f})$​，一般我们取 $h=36 * 24mm$ 时 $f$ 的大小作为 $FOV$ 的大小。</p>
<h4 id="Exposure"><a href="#Exposure" class="headerlink" title="Exposure"></a>Exposure</h4><ul>
<li>曝光 Exposure = Time * Irradiance</li>
</ul>
<p>其中 Time 由快门控制，能量由光圈的大小和焦距决定。此外，ISO 感光度可以视为是后期处理，给感光的多少进行倍增。这些因素都能影响成像的亮度。</p>
<p><img src="https://s2.loli.net/2022/01/17/73moA5gzpaDlFU9.png" alt="image-20220117163652644"></p>
<p>原理：ISO 作为后期处理，对于含有噪声的信号，同时将信号放大，噪声也随之被放大，因此会显得 Noisy；F-Number(F-Stop) 一般写作 F<strong>N</strong> 或 F/<strong>N</strong>。这里的 N 可以近似理解为光圈直径的倒数。快门速度变快也会降低 Exposure，而变慢会产生模糊。</p>
<h4 id="薄透镜-Thin-lens"><a href="#薄透镜-Thin-lens" class="headerlink" title="薄透镜 Thin lens"></a>薄透镜 Thin lens</h4><p>平行光入射，出射光过焦点；过焦点光入射，出射光平行；焦距可任意改变；$\frac 1 f = \frac 1 {z_i} + \frac 1 {z_o}$​。</p>
<p>利用薄透镜可以解释景深的问题：</p>
<p><img src="https://s2.loli.net/2022/01/17/r8hei9FOAUZWb7P.png" alt="image-20220117165250088"></p>
<h4 id="光场-Light-Field-Lumigraph"><a href="#光场-Light-Field-Lumigraph" class="headerlink" title="光场 Light Field / Lumigraph"></a>光场 Light Field / Lumigraph</h4><ul>
<li>全光函数：我们看到的世界是七维函数</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/17/OWevpzGJ1g7kVf4.png" alt="image-20220117171128615"></p>
<ul>
<li>光场是全光函数在位置集合上的限制，给定任何一个位置和任何一个方向，输出光线的强度。<ul>
<li>要想描述一个发光物体对于任何位置任何方向的辐射贡献，我们可以考虑用一个包围盒罩住这个物体，只需要知道这个包围盒上任意一点对于任意方向的辐射贡献，就可以用于替代这个物体的辐射贡献。</li>
<li>也就是说，对于任何一个物体，我们作全光函数在其包围盒上的限制，只要弄清楚其包围盒上任意一点对于任意方向的光照辐射，就可以用于替代这个发光物体。这样做方便我们进行 Query.</li>
<li>U-V 平面与 S-T 平面</li>
<li>光场照相机</li>
</ul>
</li>
</ul>
<h3 id="颜色与感知"><a href="#颜色与感知" class="headerlink" title="颜色与感知"></a>颜色与感知</h3><ul>
<li>谱功率密度（SPD），具有线性可加性；</li>
<li><strong>颜色</strong>事实上是人的一种感知，它并不是光的一种属性；</li>
<li>人感光的生物基础：视网膜上的 Cone 型细胞</li>
<li>同色异谱现象的存在</li>
<li>颜色的混合与匹配<ul>
<li>加色系统</li>
</ul>
</li>
<li>颜色空间与色域，RGB, XYZ, HSV, Lab, CMYK</li>
</ul>
<h2 id="动画与模拟"><a href="#动画与模拟" class="headerlink" title="动画与模拟"></a>动画与模拟</h2><h3 id="质点弹簧系统"><a href="#质点弹簧系统" class="headerlink" title="质点弹簧系统"></a>质点弹簧系统</h3><ul>
<li>质点弹簧系统：一系列相互连接的质点和弹簧</li>
</ul>
<script type="math/tex; mode=display">
\boldsymbol{f}_{a \rightarrow b}=k_{s} \frac{\boldsymbol{b}-\boldsymbol{a}}{\|\boldsymbol{b}-\boldsymbol{a}\|}(\|\boldsymbol{b}-\boldsymbol{a}\|-l) \\
f_{b \rightarrow a} = - f_{ a \rightarrow b}</script><p>我们再引入内部损耗摩擦力以让该系统可以停下来：</p>
<script type="math/tex; mode=display">
\boldsymbol{f}_{\boldsymbol{b}}=-k_{d} \ \left( \frac{\boldsymbol{b}-\boldsymbol{a}}{\|\boldsymbol{b}-\boldsymbol{a}\|} \cdot(\dot{\boldsymbol{b}}-\dot{\boldsymbol{a}}) \right)\  \frac{\boldsymbol{b}-\boldsymbol{a}}{\|\boldsymbol{b}-\boldsymbol{a}\|}</script><ul>
<li>质点弹簧系统组成的结构：<ul>
<li>Sheet / Block / …</li>
<li>下图为用质点弹簧系统对布料的模拟：</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/18/nKJWEFLij1BHOXz.png" alt="image-20220118112053335"></p>
<h3 id="粒子系统"><a href="#粒子系统" class="headerlink" title="粒子系统"></a>粒子系统</h3><p>把我们考虑的物体细分成粒子表示，然后在动画的每一帧中：</p>
<ul>
<li>(如果需要) 创建新粒子</li>
<li>计算每个粒子上的作用力</li>
<li>更新每个粒子的位置和速度</li>
<li>（如果需要）移除某些例子</li>
<li>渲染该帧</li>
</ul>
<h3 id="运动学"><a href="#运动学" class="headerlink" title="运动学"></a>运动学</h3><ul>
<li>正向运动学：通过定义各个部件之间的连接方式，给定参数（如 $l, \theta$），即可计算相应部件的位置</li>
<li>逆运动学：可以通过拖拽等方式改变最终目标部件的位置，中间的各个部件的情况自动计算得出</li>
</ul>
<blockquote>
<p>逆运动学的应用： Rigging</p>
<p>Rigging 是对于一个角色的控制，就像是提线木偶一样，改变角色的姿态或表情…</p>
<p>不同角色的 Rigging 是不同的…</p>
</blockquote>
<h3 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h3><ul>
<li><strong>Euler’s Method</strong>：简单的迭代法，十分不精确且不稳定</li>
</ul>
<script type="math/tex; mode=display">
\begin{aligned}
&\boldsymbol{x}^{t+\Delta t}=\boldsymbol{x}^{t}+\Delta t \dot{\boldsymbol{x}}^{t} \\
&\dot{\boldsymbol{x}}^{t+\Delta t}=\dot{\boldsymbol{x}}^{t}+\Delta t \ddot{\boldsymbol{x}}^{t}
\end{aligned}</script><p>用数值迭代的方法解 ODE 存在的问题：</p>
<ul>
<li>误差：随着迭代步数的增加，迭代结果和真实结果存在偏移</li>
<li>稳定性：原本收敛的结果<strong>发散</strong>，如螺旋速度场中粒子应该最终做匀速圆周运动，而实际模拟却会飞出该场</li>
</ul>
<p>于是，我们有若干方法解决这种不稳定性：</p>
<ul>
<li><strong>中点法 Midpoint Method</strong></li>
</ul>
<script type="math/tex; mode=display">
\begin{aligned}
x_{\mathrm{mid}} &=x(t)+\Delta t / 2 \cdot v(x(t), t) \\
x(t+\Delta t) &=x(t)+\Delta t \cdot v\left(x_{\mathrm{mid}}, t\right)
\end{aligned}\</script><ul>
<li><strong>Adaptive Step Size 自适应步长</strong></li>
</ul>
<p>按照误差项判断是否将 $\Delta t$​ 继续细分…</p>
<pre class="language-none"><code class="language-none">Repeat until error is below certain threshold epsilon:
	Compute x(T) one Euler step, size T
	Compute x(T&#x2F;2) two Euler steps, size T&#x2F;2
	Compute error &#x3D; || x(T) - x(T&#x2F;2) ||
	if (error &gt; threshold):
		T &lt;- reduced(T)
	else:
		break</code></pre>
<ul>
<li><strong>隐式欧拉方法</strong></li>
</ul>
<script type="math/tex; mode=display">
\begin{aligned}
\boldsymbol{x}^{t+\Delta t} &=\boldsymbol{x}^{t}+\Delta t \dot{\boldsymbol{x}}^{t+\Delta t} \\
\dot{\boldsymbol{x}}^{t+\Delta t} &=\dot{\boldsymbol{x}}^{t}+\Delta t \ddot{\boldsymbol{x}}^{t+\Delta t}
\end{aligned}</script><p>这种方法提供了更好的稳定性，下面我们就进行稳定性的定义：</p>
<ul>
<li>局部截断误差 Truncation Error</li>
<li>累积误差 Accumulated Error</li>
</ul>
<p>我们一般研究误差就是研究这两个误差和我们所取的 $\Delta t$ 的阶数的关系。</p>
<p>推导可以得出，隐式欧拉方法：</p>
<ul>
<li>Local Truncation Error: $O(h^2)$</li>
<li>Global Truncation Error: $O(h)$</li>
<li>$h$ is the step size, i.e. $\Delta t$​.</li>
</ul>
<p>误差是 $O(h)$ 的意思是说，如果我们将步长缩小到原来的一半，那么误差期望也缩小到原来的一半。</p>
<p>Runge-Kutta Families 中的 RK4 方法广泛得到运用，是一个 4 阶的方法。</p>
<ul>
<li><strong>Position-Based / Verlet Integration</strong>，一种不是基于物理的方法<ul>
<li>这种方法快速简单，但是可能不会遵守能量守恒等物理定律</li>
</ul>
</li>
</ul>
<p>下面举一个简单的 Position-Based 方法的例子，即渲染如下图片的例子。</p>
<p><img src="https://s2.loli.net/2022/01/18/Z21NyICghTidwWG.png" alt="image-20220118165158591"></p>
<p>关键想法如下：</p>
<ul>
<li>将水视为是很多小刚体球组成的</li>
<li>认为水的密度是不变的，即这些小刚体球是不可以被压缩的</li>
<li>也就是说，一旦某处水的密度改变了，就应该通过重新分布不同区域的刚体球的数量来“矫正”这个变化<ul>
<li>需要知道水的密度场的梯度！</li>
<li>这个水的密度场是由刚体球所在位置决定的…</li>
</ul>
</li>
<li>如何矫正？Gradient Descent!</li>
</ul>
<blockquote>
<p>模拟方法的总结：</p>
<ul>
<li>（质点法）拉格朗日方法，将物体细分成一个个质点</li>
<li>（网格法）欧拉方法，将整个空间分为不同的网格，考虑空间网格中存在的物体随着时间的变化</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/计算机图形学</category>
      </categories>
      <tags>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 从入坑到退坑</title>
    <url>/latex/</url>
    <content><![CDATA[<p>虽然 Markdown 很好用，但是生成的 pdf 文档看起来就是<s>没有范</s>不够正式。此外，使用 LaTeX 也是我们之后写论文的必备技能。</p>
<p>本教程主要涉及已对 Markdown 较为熟识之后的迁移学习。</p>
<a id="more"></a>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul>
<li>Markdown 入门</li>
<li>Markdown 编写数学公式的方法</li>
</ul>
<h2 id="LaTeX-简介"><a href="#LaTeX-简介" class="headerlink" title="LaTeX 简介"></a>LaTeX 简介</h2><p>我们首先解决以下几个问题：</p>
<ul>
<li>LaTeX 是什么？</li>
<li>LaTeX 怎样运作？</li>
<li>我该在哪里写 LaTex？</li>
</ul>
<p>在解决上述几个问题之后，我们再详细介绍该怎么写 LaTeX 的问题。</p>
<h3 id="LaTeX-是什么？"><a href="#LaTeX-是什么？" class="headerlink" title="LaTeX 是什么？"></a>LaTeX 是什么？</h3><p>相信你读到这里已经做好觉悟要被灌输一系列关键词和其对应概念了。让我们开始：</p>
<blockquote>
<p>历史回溯到 Knuth 教授的巨著 The Art of Computer Programming 将要出版之际，当出版商将他们排版的书稿草样交给 Knuth 教授的时候，他对于其中复杂数学公式的排版处理十分不满。其排版之粗糙，已达到了会影响人们理解原书内容的程度。因此，对于复杂的数学和物理公式，我们急需一种能够将其在互联网上传输的编码格式，使得人能阅读的公式和机器能存储的公式之间达到一种互相转化。</p>
</blockquote>
<ul>
<li><strong>TeX</strong>：一种排版引擎，也是该引擎使用的标记语言的名称。引擎是指能够断行、分页的程序，标记语言是控制命令和文本结合的格式。可以类比理解成你写的 C++ 源代码或者更底层的机器指令码，如输入 <script type="math/tex">2^6</script>。</li>
<li><strong>LaTeX</strong>：是一个基于 TeX 的排版系统，将用户按照它的格式编写的文档解释成 TeX 引擎能理解的形式并交付给 TeX 引擎处理，再将最终结果返回给用户。可以类比理解成 g++ 编译器，将上述代码渲染为 $2^6$。</li>
<li><strong>pdfTeX</strong> 与 <strong>pdfLaTeX</strong>：原版 TeX 系统生成的文件是 <code>dvi</code> 格式，而 pdfTeX 系统下生成的文件是 <code>pdf</code> 格式。</li>
<li><strong>XeTeX</strong> 与 <strong>XeLaTeX</strong>：上述 TeX 系统生成的字符集只支持 ASCII 字符。在 XeTeX 出现之前，我们曾使用过引用引入 CJK 宏库（解决不支持中日韩字符问题的一个库）手段来处理中文字符的问题。但是这个排版系统对所有 Unicode 字符都实现了支持。</li>
<li><strong>LuaTeX</strong> 与 <strong>LuaLaTeX</strong>：<code>pdfTeX</code> 系统的继承者，支持使用一些用户自定义脚本来实现之前需要写成 TeX 的功能。支持 Unicode，内联 lua，支持 OpenType。</li>
</ul>
<p>这里我们推荐使用 <code>XeTeX</code> 系统来进行我们日常的工作，我们后续的教程也围绕这个排版系统展开。为了简洁起见，我们后续不再区分上述概念，统一使用 <code>TeX</code>，<code>LaTeX</code> 来表述我们在说的这个话题。</p>
<h3 id="LaTeX-怎样运作？"><a href="#LaTeX-怎样运作？" class="headerlink" title="LaTeX 怎样运作？"></a>LaTeX 怎样运作？</h3><p>LaTeX 排版系统的输入是含有我们敲的文本和控制命令的 <code>tex</code> 文件，输出是一份 <code>pdf</code> 文件。我们只需要负责在 <code>tex</code> 文件中写下源码，然后剩下的编译和生成工作全部交给 LaTeX 即可。</p>
<p>有时我们还可以把一个 LaTeX 项目组织成一个文件夹，此时还是一份 <code>tex</code> 文件决定一个 <code>pdf</code> 的生成，但是我们还可以在这个文件夹中引入其他一些文件，如字体文件，图片文件，<code>.cls</code> 文件（文档模板类文件）等等。此外，我们还可以在这个文件夹中编写多个 <code>tex</code> 文件，以共享文件夹中的其他资源。此时不同的 <code>tex</code> 文件之间甚至可以项目包含（类比于 C++ 的 <code>#include</code> 包含）。</p>
<h3 id="在哪里编写-LaTeX？"><a href="#在哪里编写-LaTeX？" class="headerlink" title="在哪里编写 LaTeX？"></a>在哪里编写 LaTeX？</h3><p>我们有离线和在线两种模式来撰写 LaTeX。</p>
<p>离线模式就是安装一个 LaTeX 排版系统，类比我们想写 Markdown 的时候装了一个 Typora 软件一样，我们可以安装相应的软件来辅助我们工作，如：</p>
<ul>
<li>TeXworks</li>
<li>TeXstudio</li>
</ul>
<p>而使用这种方式安装带来的问题是可能安装包过于臃肿，优点是不用受到网络环境等等因素的干扰，也不用受到网络环境存储容量或运行时环境的限制。其安装方式在网络上搜索“LaTeX 入门”便可找到堆积如山的<a href="https://www.zhihu.com/question/62943097">教程</a>。</p>
<p>而我们这里推崇的方式就是使用在线方式来编写。如 <code>Overleaf</code> 在内的托管网站会将你的每个 TeX 项目组织成一个仓库的形式，并允许你在其中进行在线编辑：</p>
<p><img src="https://s2.loli.net/2022/02/14/JcqCKNfs31vxm2u.png" alt="image-20220213203750216"></p>
<p><img src="https://s2.loli.net/2022/02/13/IKAPDlYTmFEu5S1.png" alt="image-20220213204115880"></p>
<p>左上角是我们当前仓库的文件清单，较左侧窗口是编辑器，右侧窗口是即时预览窗口。类似于 <code>Overleaf</code> 的网站甚至还提供了仓库权限管理系统，你可以邀请其他人一起编辑，或是导入别人编辑好的模板继续你的编辑等等。值得一提的是许多学术会议都会给出他们接受的论文的模板。</p>
<p>鉴于 <code>Overleaf</code> 需要科学上网才能访问：</p>
<ul>
<li>贵校 TUNA 协会维护了一份 <a href="https://overleaf.tsinghua.edu.cn/login">Tsinghua Overleaf</a>，需要使用清华统一认证登录; </li>
<li>贵校贵系贵协网络部维护了一份自己的基于 <code>Overleaf</code>  的 LaTeX 在线编辑网站 <a href="https://stu.cs.tsinghua.edu.cn/tex9/">TeX9</a>，<u>需要使用酒井 ID 才能进行登录</u>。</li>
</ul>
<p>我们接下来的演示便是基于 TeX9。</p>
<h2 id="LaTeX-编写基础"><a href="#LaTeX-编写基础" class="headerlink" title="LaTeX 编写基础"></a>LaTeX 编写基础</h2><p>说是编写基础，接下来我们就要像介绍 Markdown 一样，先简单罗列一些简单的文档控制命令。在基础篇中我们先仅仅介绍怎样实现从 Markdown 到 LaTeX 的迁移。对于其中一些文档控制命令，我们将会在后续教程详细说明。</p>
<p>这里提供 CheatSheet 供查阅：</p>
<p><img src="https://s2.loli.net/2022/02/14/KP5yeuotcJhTlVO.png" alt="image-20220214004156979"></p>
<p><img src="https://s2.loli.net/2022/02/14/j3EHglvqhoetRi4.png" alt="image-20220214004207594"></p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello, World!"></a>Hello, World!</h3><p><img src="https://s2.loli.net/2022/02/13/HPCaZJUtNOj74uF.png" alt="image-20220213205714169"></p>
<p>上述便是一份 <code>tex</code> 文件的示例，我们推荐你新建一个项目，然后将下面我们要介绍的内容一一尝试。</p>
<h3 id="支持中文字符"><a href="#支持中文字符" class="headerlink" title="支持中文字符"></a>支持中文字符</h3><p>首先，我们上述已经介绍过，支持中文字符的方式有二，一种是引入 <code>CJK</code> 宏包，另一种是使用 XeLaTeX 编译器并对源码做适当修改。这里我们采用第二种方式。</p>
<p>首先，按下你项目左上角的 Menu 按钮，然后在 Compiler 选项中选择 XeLaTeX 选项。</p>
<p>然后，输入以下内容：</p>
<pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>UTF8<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">ctexart</span><span class="token punctuation">&#125;</span>
<span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span>
你好，world!
<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span></code></pre>
<p>这样我们就完成了中文字符的引入。至于 <code>documentclass</code> 是什么，我们将在后续介绍。</p>
<h3 id="导言与文档信息"><a href="#导言与文档信息" class="headerlink" title="导言与文档信息"></a>导言与文档信息</h3><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>UTF8<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">ctexart</span><span class="token punctuation">&#125;</span>
<span class="token function selector">\title</span><span class="token punctuation">&#123;</span>Sample Document<span class="token punctuation">&#125;</span>
<span class="token function selector">\author</span><span class="token punctuation">&#123;</span>c7w<span class="token punctuation">&#125;</span>
<span class="token function selector">\date</span><span class="token punctuation">&#123;</span><span class="token function selector">\today</span><span class="token punctuation">&#125;</span>

<span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span>

<span class="token comment">% 这条控制命令会读取导言部分的文档相关信息</span>
<span class="token comment">% 并将其渲染到文档中</span>
<span class="token comment">% 事实上可以参考相关宏包的 Doc：</span>
<span class="token comment">% http://texdoc.net/texmf-dist/doc/latex/titling/titling.pdf</span>
<span class="token function selector">\maketitle</span> 

你好，world!

<span class="token punctuation">[</span>在这里你就开始写你的作业第一题了<span class="token punctuation">]</span>

<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span></code></pre>
<p><img src="https://s2.loli.net/2022/02/13/IbNdaCD2wFXVlAq.png" alt="image-20220213210910831"></p>
<h3 id="章节与段落"><a href="#章节与段落" class="headerlink" title="章节与段落"></a>章节与段落</h3><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>UTF8<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">ctexart</span><span class="token punctuation">&#125;</span>
<span class="token function selector">\title</span><span class="token punctuation">&#123;</span>Sample Document<span class="token punctuation">&#125;</span>
<span class="token function selector">\author</span><span class="token punctuation">&#123;</span>c7w<span class="token punctuation">&#125;</span>
<span class="token function selector">\date</span><span class="token punctuation">&#123;</span><span class="token function selector">\today</span><span class="token punctuation">&#125;</span>

<span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span>

<span class="token function selector">\maketitle</span>

<span class="token function selector">\section</span><span class="token punctuation">&#123;</span><span class="token headline class-name">我是 Section 标题</span><span class="token punctuation">&#125;</span>

我是 Section 介绍。

<span class="token function selector">\subsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">我是 Subsection 标题</span><span class="token punctuation">&#125;</span>
我是 Subsection 介绍。

<span class="token function selector">\subsubsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">我是 Subsubsection 标题</span><span class="token punctuation">&#125;</span>
我是 Subsubsection 介绍。

<span class="token comment">% \subsubsubsection&#123;不能继续套 sub 了，到底了&#125;</span>

<span class="token function selector">\paragraph</span><span class="token punctuation">&#123;</span><span class="token headline class-name">我是 Paragraph 标题</span><span class="token punctuation">&#125;</span>
我是 Paragraph 后面跟着写的东西。
本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。
我们都知道，只要有意义，那么就必须慎重考虑。
这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。
要想清楚，一天掉多少根头发，到底是一种怎么样的存在。
贝多芬曾经说过，卓越的人一大优点是：在不利与艰难的遭遇里百折不饶。


<span class="token function selector">\subparagraph</span><span class="token punctuation">&#123;</span><span class="token headline class-name">我是 Subparagraph 标题</span><span class="token punctuation">&#125;</span>
我是 Subparagraph 后面跟着写的东西。
这不禁令我深思既然如何，一天掉多少根头发的发生，到底需要如何做到，不一天掉多少根头发的发生，又会如何产生。 
总结的来说， 所谓一天掉多少根头发，关键是一天掉多少根头发需要如何写。 生活中，若一天掉多少根头发出现了，我们就不得不考虑它出现了的事实。 郭沫若曾经说过，形成天才的决定因素应该是勤奋。这不禁令我深思这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。

<span class="token function selector">\subsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">这是第二节</span><span class="token punctuation">&#125;</span>
<span class="token function selector">\paragraph</span><span class="token punctuation">&#123;</span><span class="token headline class-name">第二节</span><span class="token punctuation">&#125;</span> 的首段。
<span class="token function selector">\subparagraph</span><span class="token punctuation">&#123;</span><span class="token headline class-name">第二节</span><span class="token punctuation">&#125;</span>的第二段。

<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span></code></pre>
<p><img src="https://s2.loli.net/2022/02/13/kIeOlBjF7uzJ5ZH.png" alt="image-20220213211528785"></p>
<p>在文档类 <code>article</code>/<code>ctexart</code> 中（文档类的概念我们会在进阶篇中提供指导），我们使用这些控制序列来调整行文组织结构。他们分别是：</p>
<ul>
<li><code>\section&#123;·&#125;</code></li>
<li><code>\subsection&#123;·&#125;</code></li>
<li><code>\subsubsection&#123;·&#125;</code></li>
<li><code>\paragraph&#123;·&#125;</code></li>
<li><code>\subparagraph&#123;·&#125;</code></li>
</ul>
<h3 id="文档目录"><a href="#文档目录" class="headerlink" title="文档目录"></a>文档目录</h3><p>我们尝试在渲染区 <code>\maketitle</code> 后加入如下控制命令：</p>
<pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\tableofcontents</span></code></pre>
<p>没错，正如你所想的，这就会生成文档的 TOC：</p>
<p><img src="https://s2.loli.net/2022/02/13/sSI8byUWJjYLkPw.png" alt="image-20220213211830033"></p>
<h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><h4 id="行内公式与行间公式"><a href="#行内公式与行间公式" class="headerlink" title="行内公式与行间公式"></a>行内公式与行间公式</h4><p>首先引入相应包 <strong>amsmath</strong>，然后我们简单介绍公式的引入：</p>
<pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>UTF8<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">ctexart</span><span class="token punctuation">&#125;</span>

<span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">amsmath</span><span class="token punctuation">&#125;</span> <span class="token comment">% 注意这里引入相应包</span>

<span class="token function selector">\title</span><span class="token punctuation">&#123;</span>Sample Document<span class="token punctuation">&#125;</span>
<span class="token function selector">\author</span><span class="token punctuation">&#123;</span>c7w<span class="token punctuation">&#125;</span>
<span class="token function selector">\date</span><span class="token punctuation">&#123;</span><span class="token function selector">\today</span><span class="token punctuation">&#125;</span>

<span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span>

<span class="token function selector">\maketitle</span>

<span class="token function selector">\tableofcontents</span>

<span class="token function selector">\section</span><span class="token punctuation">&#123;</span><span class="token headline class-name">我是 Section 标题</span><span class="token punctuation">&#125;</span>

我是 Section 介绍。

<span class="token function selector">\subsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">这个 Section 我们介绍数学公式的写法</span><span class="token punctuation">&#125;</span>

<span class="token function selector">\subsubsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">行内公式</span><span class="token punctuation">&#125;</span>

<span class="token comment">% 行内公式基本可以照搬 Markdown 的模式。</span>

初始处理 1 - 5 位的初始字符串集合需要处理 <span class="token equation string">$18 + 18^2 + 18^3 + 18^4 + 18^5 = 2*10^6$</span> 的数据，因此需要 <span class="token equation string">$O(T)$</span> 的时间，这里 <span class="token equation string">$T=2*10^6$</span>。

<span class="token function selector">\subsubsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">行间公式</span><span class="token punctuation">&#125;</span>

<span class="token comment">% 行间公式用 $$ $$ 或者 \[ \] 来框住都可以，但在 LaTeX 中前者会改变行文的默认行间距，因此不推荐采用。</span>

<span class="token equation string">\[
<span class="token equation-command regex">\text</span>&#123;dp&#125;[i] = <span class="token equation-command regex">\text</span>&#123;dp&#125;[next[i]]+1, next[i] > 0.
\]</span>


<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span></code></pre>
<p><img src="https://s2.loli.net/2022/02/13/CI2hzmUEwluDp6s.png" alt="image-20220213213336585"></p>
<h4 id="上下标、根式与分式"><a href="#上下标、根式与分式" class="headerlink" title="上下标、根式与分式"></a>上下标、根式与分式</h4><ul>
<li>上下标请使用 <code>^</code> 与 <code>_</code></li>
<li>根式与分式请使用 <code>\sqrt&#123;·&#125;</code> 与 <code>\frac&#123;·&#125;&#123;·&#125;</code><ul>
<li>在行间公式和行内公式中，分式的输出效果是有差异的。如果要强制行内模式的分式显示为行间模式的大小，可以使用 <code>\dfrac</code>, 反之可以使用 <code>\tfrac</code></li>
</ul>
</li>
</ul>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>一些小的运算符，可以在数学模式下直接输入；另一些需要用控制序列生成，如</p>
<pre class="language-none"><code class="language-none">\[ \pm\; \times \; \div\; \cdot\; \cap\; \cup\;
\geq\; \leq\; \neq\; \approx \; \equiv \]</code></pre>
<p>连加、连乘、极限、积分等大型运算符分别用 <code>\sum</code>, <code>\prod</code>, <code>\lim</code>, <code>\int</code> 生成。他们的上下标在行内公式中被压缩，以适应行高。我们可以用 <code>\limits</code> 和 <code>\nolimits</code> 来强制显式地指定是否压缩这些上下标。例如：</p>
<pre class="language-none"><code class="language-none">$ \sum_&#123;i&#x3D;1&#125;^n i\quad \prod_&#123;i&#x3D;1&#125;^n $
$ \sum\limits _&#123;i&#x3D;1&#125;^n i\quad \prod\limits _&#123;i&#x3D;1&#125;^n $
\[ \lim_&#123;x\to0&#125;x^2 \quad \int_a^b x^2 dx \]
\[ \lim\nolimits _&#123;x\to0&#125;x^2\quad \int\nolimits_a^b x^2 dx \]</code></pre>
<p>多重积分可以使用 <code>\iint</code>, <code>\iiint</code>, <code>\iiiint</code>, <code>\idotsint</code> 等命令输入。</p>
<pre class="language-none"><code class="language-none">\[ \iint\quad \iiint\quad \iiiint\quad \idotsint \]</code></pre>
<p><img src="https://s2.loli.net/2022/02/13/VeI1zToC3JfAyK9.png" alt="image-20220213214301901"></p>
<h4 id="定界符"><a href="#定界符" class="headerlink" title="定界符"></a>定界符</h4><p>各种括号用 <code>()</code>, <code>[]</code>, <code>\&#123;\&#125;</code>, <code>\langle\rangle</code> 等命令表示；注意花括号通常用来输入命令和环境的参数，所以在数学公式中它们前面要加 <code>\</code>。</p>
<p>因为 LaTeX 中 <code>|</code> 和 <code>\|</code> 的应用过于随意，amsmath 宏包推荐用 <code>\lvert\rvert</code> 和 <code>\lVert\rVert</code> 取而代之。</p>
<p>为了调整这些定界符的大小，amsmath 宏包推荐使用 <code>\big</code>, <code>\Big</code>, <code>\bigg</code>, <code>\Bigg</code> 等一系列命令放在上述括号前面调整大小。</p>
<h4 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h4><p>省略号用 <code>\dots</code>, <code>\cdots</code>, <code>\vdots</code>, <code>\ddots</code> 等命令表示。<code>\dots</code> 和 <code>\cdots</code> 的纵向位置不同，前者一般用于有下标的序列。</p>
<h4 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h4><p><code>amsmath</code> 的 <code>pmatrix</code>, <code>bmatrix</code>, <code>Bmatrix</code>, <code>vmatrix</code>, <code>Vmatrix</code> 等环境可以在矩阵两边加上各种分隔符。</p>
<pre class="language-none"><code class="language-none">\[ \begin&#123;pmatrix&#125; a&amp;b\\c&amp;d \end&#123;pmatrix&#125; \quad
\begin&#123;bmatrix&#125; a&amp;b\\c&amp;d \end&#123;bmatrix&#125; \quad
\begin&#123;Bmatrix&#125; a&amp;b\\c&amp;d \end&#123;Bmatrix&#125; \quad
\begin&#123;vmatrix&#125; a&amp;b\\c&amp;d \end&#123;vmatrix&#125; \quad
\begin&#123;Vmatrix&#125; a&amp;b\\c&amp;d \end&#123;Vmatrix&#125; \]</code></pre>
<p><img src="https://s2.loli.net/2022/02/14/uix67cYI4UaXvK9.jpg" alt="img"></p>
<h4 id="多行公式"><a href="#多行公式" class="headerlink" title="多行公式"></a>多行公式</h4><p>可以用 <code>aligned</code> 环境来实现，用 <code>&amp;</code> 实现位置对齐。</p>
<pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">\[
<span class="token equation-command regex">\begin</span>&#123;aligned&#125;
x = a+b+c+ <span class="token equation-command regex">\\</span>
+d+e+f+g+d+d+d+d+d+d+d+d+d+d+d+d <span class="token equation-command regex">\\</span>
+h+i <span class="token equation-command regex">\\</span>
+1 <span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\end</span>&#123;aligned&#125;
\]</span>

<span class="token equation string">\[
<span class="token equation-command regex">\begin</span>&#123;aligned&#125;
x &amp;= a+b+c+ <span class="token equation-command regex">\\</span>
&amp; +d+e+f+g+d+d+d+d+d+d+d+d+d+d+d+d <span class="token equation-command regex">\\</span>
&amp; +h+i <span class="token equation-command regex">\\</span>
&amp; +1 <span class="token equation-command regex">\\</span>
<span class="token equation-command regex">\end</span>&#123;aligned&#125;
\]</span></code></pre>
<p>效果：</p>
<p><img src="https://s2.loli.net/2022/02/14/oZugGY2MF78Lk9t.png" alt="image-20220214001008550"></p>
<p>若想要公式自带编号，可以用 <code>gather</code> 和 <code>align</code> 环境，其中 <code>gather</code> 环境将公式分行渲染，<code>align</code> 同上述 <code>aligned</code>，可以控制对齐：</p>
<pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">gather</span><span class="token punctuation">&#125;</span><span class="token equation string">
a = b+c+d <span class="token equation-command regex">\\</span>
x = y+z <span class="token equation-command regex">\\</span> 
p = a_1 + a_2 + a_3 + <span class="token equation-command regex">\dots</span> + a_&#123;200&#125;
</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">gather</span><span class="token punctuation">&#125;</span>

<span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">align</span><span class="token punctuation">&#125;</span><span class="token equation string">
a &amp;= b+c+d <span class="token equation-command regex">\\</span>
x &amp;= y+z <span class="token equation-command regex">\\</span>
p &amp;= a_1 + a_2 + a_3 + <span class="token equation-command regex">\dots</span> + a_&#123;200&#125;
</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">align</span><span class="token punctuation">&#125;</span></code></pre>
<p><img src="https://s2.loli.net/2022/02/14/5tZcTngyKSIsWxV.png" alt="image-20220214001355079"></p>
<p>若想使用分段函数，可以使用 <code>cases</code> 环境：</p>
<pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">\[
y= 
<span class="token equation-command regex">\begin</span>&#123;cases&#125;
-x,<span class="token equation-command regex">\quad</span> x<span class="token equation-command regex">\leq</span> 0 <span class="token equation-command regex">\\</span>
x,<span class="token equation-command regex">\quad</span> x>0
<span class="token equation-command regex">\end</span>&#123;cases&#125; 
\]</span></code></pre>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>数学公式是在引入了 <strong>amsmath</strong> 包之后，利用其提供的各种各样次环境来实现了较为复杂的公式的编辑。整体来说，与 Mathjax 的风格相差不大，因此迁移学习起来也十分方便。</p>
<p>这里我们再提供辅助工具：</p>
<ul>
<li><a href="https://mathpix.com/">https://mathpix.com/</a> 能够 OCR 手写体或是印刷体公式，而后将图片中的公式转换成 LaTeX 数学公式的代码。</li>
</ul>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><code>tabular</code> 环境提供了最简单的表格功能。它用 <code>\hline</code> 命令表示横线，在列格式中用 <code>|</code> 表示竖线；用 <code>&amp;</code> 来分列，用 <code>\\</code> 来换行；每列可以采用居左、居中、居右等横向对齐方式，分别用 <code>l</code>、<code>c</code>、<code>r</code> 来表示。</p>
<pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">tabular</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>|l|c|r|<span class="token punctuation">&#125;</span>
 <span class="token function selector">\hline</span>
操作系统<span class="token punctuation">&amp;</span> 发行版<span class="token punctuation">&amp;</span> 编辑器<span class="token function selector">\\</span>
 <span class="token function selector">\hline</span>
Windows <span class="token punctuation">&amp;</span> MikTeX <span class="token punctuation">&amp;</span> TexMakerX <span class="token function selector">\\</span>
 <span class="token function selector">\hline</span>
Unix/Linux <span class="token punctuation">&amp;</span> teTeX <span class="token punctuation">&amp;</span> Kile <span class="token function selector">\\</span>
 <span class="token function selector">\hline</span>
Mac OS <span class="token punctuation">&amp;</span> MacTeX <span class="token punctuation">&amp;</span> TeXShop <span class="token function selector">\\</span>
 <span class="token function selector">\hline</span>
通用<span class="token punctuation">&amp;</span> TeX Live <span class="token punctuation">&amp;</span> TeXworks <span class="token function selector">\\</span>
 <span class="token function selector">\hline</span>
<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">tabular</span><span class="token punctuation">&#125;</span></code></pre>
<p><img src="https://s2.loli.net/2022/02/14/ytG5hReFbjWClwg.jpg" alt="img"></p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>在 LaTeX 中插入图片，有很多种方式。最好用的应当属利用 <code>graphicx</code> 宏包提供的 <code>\includegraphics</code> 命令。比如你在你的 TeX 源文件同目录下，有名为 <code>a.jpg</code> 的图片，你可以用这样的方式将它插入到输出文档中：</p>
<pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">&#123;</span><span class="token keyword">article</span><span class="token punctuation">&#125;</span>
<span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">graphicx</span><span class="token punctuation">&#125;</span>
<span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span>
<span class="token function selector">\includegraphics</span><span class="token punctuation">&#123;</span>a.jpg<span class="token punctuation">&#125;</span>
<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span></code></pre>
<p>想要了解更多，参见 <code>graphicx</code> 的文档：<a href="http://texdoc.net/texmf-dist/doc/latex/graphics/graphicx.pdf。">http://texdoc.net/texmf-dist/doc/latex/graphics/graphicx.pdf。</a></p>
<blockquote>
<p><strong>浮动体环境</strong></p>
<p>什么是浮动体环境：<code>table</code> 与 <code>figure</code>，两种浮动体环境可以替代上述的表格和图片环境，实现为表格或图片自动安排位置。</p>
<p>想了解更多有关浮动体环境的内容，详见<a href="https://liam.page/series/#LaTeX-%E4%B8%AD%E7%9A%84%E6%B5%AE%E5%8A%A8%E4%BD%93">这里</a>。</p>
</blockquote>
<h3 id="页面设置"><a href="#页面设置" class="headerlink" title="页面设置"></a>页面设置</h3><h4 id="页边距"><a href="#页边距" class="headerlink" title="页边距"></a>页边距</h4><p>设置页边距，推荐使用 <code>geometry</code> 宏包。可以在<a href="http://texdoc.net/texmf-dist/doc/latex/geometry/geometry.pdf">这里</a>查看它的说明文档。</p>
<p>比如我希望，将纸张的长度设置为 20cm、宽度设置为 15cm、左边距 1cm、右边距 2cm、上边距 3cm、下边距 4cm，可以在导言区加上这样几行：</p>
<pre class="language-none"><code class="language-none">\usepackage&#123;geometry&#125;
\geometry&#123;papersize&#x3D;&#123;20cm,15cm&#125;&#125;
\geometry&#123;left&#x3D;1cm,right&#x3D;2cm,top&#x3D;3cm,bottom&#x3D;4cm&#125;</code></pre>
<h4 id="页眉页脚"><a href="#页眉页脚" class="headerlink" title="页眉页脚"></a>页眉页脚</h4><p>设置页眉页脚，推荐使用 <code>fancyhdr</code> 宏包。可以在<a href="http://texdoc.net/texmf-dist/doc/latex/fancyhdr/fancyhdr.pdf">这里</a>查看它的说明文档。</p>
<p>比如我希望，设置自定义页眉；页脚的正中写上页码；页眉和正文之间有一道宽为 0.4pt 的横线分割，可以在导言区加上如下几行：</p>
<pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">fancyhdr</span><span class="token punctuation">&#125;</span>
<span class="token function selector">\pagestyle</span><span class="token punctuation">&#123;</span>fancy<span class="token punctuation">&#125;</span>
<span class="token function selector">\lhead</span><span class="token punctuation">&#123;</span>页眉左侧<span class="token punctuation">&#125;</span>
<span class="token function selector">\chead</span><span class="token punctuation">&#123;</span>页眉中间<span class="token punctuation">&#125;</span>
<span class="token function selector">\rhead</span><span class="token punctuation">&#123;</span>页眉右侧<span class="token punctuation">&#125;</span>
<span class="token function selector">\lfoot</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token function selector">\cfoot</span><span class="token punctuation">&#123;</span><span class="token function selector">\thepage</span><span class="token punctuation">&#125;</span>
<span class="token function selector">\rfoot</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token function selector">\renewcommand</span><span class="token punctuation">&#123;</span><span class="token function selector">\headrulewidth</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>0.4pt<span class="token punctuation">&#125;</span>
<span class="token function selector">\renewcommand</span><span class="token punctuation">&#123;</span><span class="token function selector">\headwidth</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token function selector">\textwidth</span><span class="token punctuation">&#125;</span>
<span class="token function selector">\renewcommand</span><span class="token punctuation">&#123;</span><span class="token function selector">\footrulewidth</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>0pt<span class="token punctuation">&#125;</span></code></pre>
<h4 id="段间距"><a href="#段间距" class="headerlink" title="段间距"></a>段间距</h4><p>我们可以通过修改长度 <code>\parskip</code> 的值来调整段间距。例如在导言区添加以下内容</p>
<pre class="language-none"><code class="language-none">\addtolength&#123;\parskip&#125;&#123;.4em&#125;</code></pre>
<p>则可以在原有的基础上，增加段间距 0.4em。如果需要减小段间距，只需将该数值改为负值即可。</p>
<h3 id="引用与尾注脚注"><a href="#引用与尾注脚注" class="headerlink" title="引用与尾注脚注"></a>引用与尾注脚注</h3><h4 id="交叉引用"><a href="#交叉引用" class="headerlink" title="交叉引用"></a>交叉引用</h4><p>交叉引用设置方法：</p>
<ul>
<li>给对象命名：<code>\label&#123;name&#125;</code></li>
<li>引用对象：<code>\ref&#123;name&#125;</code></li>
</ul>
<p>注意，在引用对象时，<code>\ref&#123;name&#125;</code> 会被替换会被引用对象的编号。举个例子，如果被引用对象在文档中是第 5 个被命名的，那么这里就会被替换为 5.</p>
<p>要想避免图/表/论文等等引用在计数上互相影响，你可以在命名时命名为 <code>tag:name</code> 的格式，引用时使用 <code>tag:name</code> 的格式来引用。具体来说，这些 tag 有：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Tag</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>ch:</code></strong></td>
<td>chapter</td>
</tr>
<tr>
<td><strong><code>sec:</code></strong></td>
<td>section</td>
</tr>
<tr>
<td><strong><code>subsec:</code></strong></td>
<td>subsection</td>
</tr>
<tr>
<td><strong><code>fig:</code></strong></td>
<td>figure</td>
</tr>
<tr>
<td><strong><code>tab:</code></strong></td>
<td>table</td>
</tr>
<tr>
<td><strong><code>eq:</code></strong></td>
<td>equation</td>
</tr>
<tr>
<td><strong><code>lst:</code></strong></td>
<td>code listing</td>
</tr>
<tr>
<td><strong><code>itm:</code></strong></td>
<td>enumerated list item</td>
</tr>
<tr>
<td><strong><code>alg:</code></strong></td>
<td>algorithm</td>
</tr>
<tr>
<td><strong><code>app:</code></strong></td>
<td>appendix subsection</td>
</tr>
</tbody>
</table>
</div>
<h4 id="尾注脚注"><a href="#尾注脚注" class="headerlink" title="尾注脚注"></a>尾注脚注</h4><p>尾注直接在最后写就行，记得设置引用。</p>
<p>脚注可以使用 <code>\footnote&#123;角注内容&#125;</code> 来声明。</p>
<blockquote>
<p>想了解该如何更好地引入参考文献，请学习 BibTeX 宏包。</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/BibTeX">https://zh.wikipedia.org/wiki/BibTeX</a></li>
</ul>
</blockquote>
<h3 id="列表与枚举"><a href="#列表与枚举" class="headerlink" title="列表与枚举"></a>列表与枚举</h3><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">enumerate</span><span class="token punctuation">&#125;</span>
    <span class="token function selector">\item</span> <span class="token function selector">\LaTeX</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> 好 处 都 有 啥
        <span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">description</span><span class="token punctuation">&#125;</span>
            <span class="token function selector">\item</span><span class="token punctuation">[</span>好 用<span class="token punctuation">]</span> 体 验 好 才 是 真 的 好
            <span class="token function selector">\item</span><span class="token punctuation">[</span>好 看<span class="token punctuation">]</span> 强 迫 症 的 福 音
            <span class="token function selector">\item</span><span class="token punctuation">[</span>开 源<span class="token punctuation">]</span> 众 人 拾 柴 火 焰 高
        <span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">description</span><span class="token punctuation">&#125;</span>
    <span class="token function selector">\item</span> 还 有 呢?
        <span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">itemize</span><span class="token punctuation">&#125;</span>
            <span class="token function selector">\item</span> 好 处 1
            <span class="token function selector">\item</span> 好 处 2
    <span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">itemize</span><span class="token punctuation">&#125;</span>
<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">enumerate</span><span class="token punctuation">&#125;</span></code></pre>
<p><img src="https://s2.loli.net/2022/02/14/U3E8uCBy4RKxfSL.png" alt="image-20220214004408507"></p>
<h2 id="LaTeX-后续学习"><a href="#LaTeX-后续学习" class="headerlink" title="LaTeX 后续学习"></a>LaTeX 后续学习</h2><h3 id="更多宏包"><a href="#更多宏包" class="headerlink" title="更多宏包"></a>更多宏包</h3><p>宏包一般都会提供相应的文档供我们阅读使用。</p>
<p>这里提供查询宏包对应文档的网站：</p>
<ul>
<li><a href="https://texdoc.org/index.html">https://texdoc.org/index.html</a></li>
</ul>
<p><img src="https://s2.loli.net/2022/02/14/jkVbA8vBeY9FsUR.png" alt="image-20220214003834121"></p>
<h3 id="制作自己的模板"><a href="#制作自己的模板" class="headerlink" title="制作自己的模板"></a>制作自己的模板</h3><p>详见参考资料中 <code>.cls</code> 文件详解部分。我们同时推荐读者可以去多读一读其他已存在的 Template 的 <code>.cls</code> 内容。</p>
<h3 id="制作幻灯片"><a href="#制作幻灯片" class="headerlink" title="制作幻灯片"></a>制作幻灯片</h3><p>使用 Beamer 宏包可以制作幻灯片。详见：</p>
<ul>
<li><a href="https://www.overleaf.com/learn/latex/Beamer">https://www.overleaf.com/learn/latex/Beamer</a></li>
</ul>
<p>同时，校内也提供了一些适用于各种 pre 的 Beamer 模板。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>（推荐）一份其实很短的 LaTeX 入门文档：<a href="https://liam.page/2014/09/08/latex-introduction/">https://liam.page/2014/09/08/latex-introduction/</a></li>
<li>（推荐）如何使用 LaTeX 排版论文：<a href="https://github.com/tuna/thulib-latex-talk">https://github.com/tuna/thulib-latex-talk</a></li>
<li>（<code>.cls</code> 文件详解）How to write a LaTeX class file and design your own CV： <a href="https://www.overleaf.com/learn/latex/How_to_write_a_LaTeX_class_file_and_design_your_own_CV_(Part_1">https://www.overleaf.com/learn/latex/How_to_write_a_LaTeX_class_file_and_design_your_own_CV_(Part_1</a>)</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/综合</category>
      </categories>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>《机器学习》笔记</title>
    <url>/ml-notes/</url>
    <content><![CDATA[<p>正如篇名，是机器学习笔记的笔记。主要还是记录一些重要概念和思考的过程吧。</p>
<p>笔记的笔记中，第一个笔记的链接：</p>
<ul>
<li><a href="https://datawhalechina.github.io/leeml-notes/#/">https://datawhalechina.github.io/leeml-notes/#/</a></li>
</ul>
<p>对应视频的链接：</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1Ht411g7Ef">https://www.bilibili.com/video/BV1Ht411g7Ef</a></li>
</ul>
<p>此外，本文中还收录了部分自监督学习的模型，如 BERT 和 GPT 的运作模式。本文还记录了学习 Transformer 模型的过程。</p>
<a id="more"></a>
<h1 id="机器学习笔记"><a href="#机器学习笔记" class="headerlink" title="机器学习笔记"></a>机器学习笔记</h1><h2 id="机器学习介绍"><a href="#机器学习介绍" class="headerlink" title="机器学习介绍"></a>机器学习介绍</h2><h3 id="发展历程及基础概念"><a href="#发展历程及基础概念" class="headerlink" title="发展历程及基础概念"></a>发展历程及基础概念</h3><ul>
<li>在存在深度学习之前，通过 hand-crafted rules 来设定过滤规则</li>
<li>机器学习的过程<ul>
<li>Training<ul>
<li>Define a set of functions as <strong>Model</strong></li>
<li>Evaluate the goodness of these functions</li>
<li>Pick the best function $f^<em>$ from the <em>*Model</em></em></li>
</ul>
</li>
<li>Testing<ul>
<li>Using $f^*$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://datawhalechina.github.io/leeml-notes/chapter1/res/chapter1-21.png" alt="img"></p>
<h3 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h3><ul>
<li>监督学习 Supervised learning<ul>
<li>Tasks<ul>
<li>Regression<ul>
<li>The output of the target function $f$ is scalar.</li>
</ul>
</li>
<li>Classification<ul>
<li>Binary classification (Output: yes/no)</li>
<li>Multi-class classification</li>
</ul>
</li>
<li>Structured Learning<ul>
<li>The output is well-structured.</li>
</ul>
</li>
</ul>
</li>
<li>How to select function set?<ul>
<li>Non-linear model, the most famous of which is <strong>Deep Learning</strong></li>
<li>Other non-linear models, like SVM…</li>
</ul>
</li>
</ul>
</li>
<li>半监督学习 Semi-supervised Learning<ul>
<li>non-labelled data</li>
</ul>
</li>
<li>迁移学习 Transfer Learning<ul>
<li>Pictures that are not related to the topic could help…?</li>
</ul>
</li>
<li>无监督学习 Unsupervised Learning</li>
<li>强化学习 Reinforcement Learning<ul>
<li>我们没有告诉机器正确的答案是什么，机器所拥有的只有一个分数，就是他做的好还是不好</li>
</ul>
</li>
</ul>
<h2 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a>Regression</h2><p>找到函数$f$，使得对于任意给定特征$x$，输出数值$scalar$.</p>
<h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><ul>
<li>模型假设，选择模型框架（线性模型）</li>
<li>模型评估，如何判断众多模型的好坏（损失函数）</li>
<li>模型优化，如何筛选最优的模型（梯度下降）</li>
</ul>
<h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><ul>
<li>过拟合</li>
<li>Customize learning rate</li>
</ul>
<h3 id="步骤优化"><a href="#步骤优化" class="headerlink" title="步骤优化"></a>步骤优化</h3><ul>
<li>合并多个线性模型，使用 $\delta$ 函数</li>
<li>给予更多参数</li>
<li>正则化 Regularization<ul>
<li>$L=\sum_n (y-(b+\sum_iw_ix_i)) + \lambda\sum w_i^2$</li>
<li>使得 Loss function 更加平滑</li>
</ul>
</li>
</ul>
<h2 id="分析误差"><a href="#分析误差" class="headerlink" title="分析误差"></a>分析误差</h2><p>通过分析误差的来源，以期达到改善模型时有着手点的效果.</p>
<h3 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h3><ul>
<li>Average Error = error due to “bias” + error due to variance</li>
<li>Notation<ul>
<li>$\hat f$ := the actual function</li>
<li>$f^*$:= the best function picked from the model trained from the training data</li>
<li>$f^*$ is an $estimator$ of $\hat f$​ </li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/08/eqEIoViJlbtsuyj.png" alt="image-20210908141646887"></p>
<p><img src="https://i.loli.net/2021/09/08/jmIgTdBbVQr9Al5.jpg" alt="img"></p>
<ul>
<li>Conclusion<ul>
<li>Simple Model<ul>
<li>Large Bias</li>
<li>Small Variance</li>
</ul>
</li>
<li>Complex Model<ul>
<li>Small Bias</li>
<li>Large Variance</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/08/lXDf6xgFKIP3HZs.png" alt="image-20210908143937650"></p>
<p><strong>How to diagnose?</strong></p>
<ul>
<li>If your model cannot fit the training data, then you have large bias. (Underfitting)<ul>
<li>Redesign your model.<ul>
<li>Add more features…</li>
<li>A more complex model…</li>
</ul>
</li>
</ul>
</li>
<li>If your model can fit the training data, but has large error on the testing data, then you have the large variance. (Overfitting)<ul>
<li>More data.<ul>
<li>Effective but not always practical.</li>
</ul>
</li>
<li>Regularization. (May do harm to bias)</li>
</ul>
</li>
</ul>
<h3 id="Cross-Validation"><a href="#Cross-Validation" class="headerlink" title="Cross Validation"></a>Cross Validation</h3><ul>
<li>In each epoch, divide your training set into <strong>training set</strong> and <strong>validation set</strong>.</li>
<li>Use <strong>training set</strong> to train your model, and use <strong>validation set</strong> to pick the best one.</li>
<li>Then by this way, the average error of <strong>testing set</strong> could represent the real error when the model is applied.</li>
<li>What if the <strong>validation set</strong> has its biases? <strong>N-fold Cross Validation</strong></li>
</ul>
<p><img src="https://i.loli.net/2021/09/08/B5v8uoTOKUFHEMD.png" alt="image-20210908145850518"></p>
<ul>
<li>Firstly pick the best model using the validation approach, then train it using the whole training set.</li>
</ul>
<h2 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h2><h3 id="Tuning-learning-rates"><a href="#Tuning-learning-rates" class="headerlink" title="Tuning learning rates"></a>Tuning learning rates</h3><p>Visualize the figure of <strong>the loss</strong> and <strong>the turn of parameters updated</strong></p>
<p><img src="https://i.loli.net/2021/09/08/j64LqduhrsWzeTa.png" alt="image-20210908153835553"></p>
<h4 id="Adaptive-learning-rates"><a href="#Adaptive-learning-rates" class="headerlink" title="Adaptive learning rates"></a>Adaptive learning rates</h4><ul>
<li>Popular &amp; Simple Idea: Reduce the learning rate by some factor every few epochs.<ul>
<li>(E.g.) $\frac 1 t \ Decay$: $\eta^{(t)} = \frac {\eta^{(0)}} {\sqrt {t+1}}$</li>
<li>But tuning learning rate cannot be one-size for all parameters. That is to say, we need to <strong>give different parameters different learning rates</strong>.</li>
</ul>
</li>
<li><p>Adagrad</p>
<ul>
<li>Divide the learning rate of each parameter by the root mean square of its previous derivatives.</li>
<li>Vanilla gradient descent: $w^{(t+1)} \leftarrow w^{(t)} - \eta^{(t)}g^{(t)}$​​​, $t\ge0$.<ul>
<li>$g$​​​ is partial derivatives</li>
</ul>
</li>
<li>Adagrad: $w^{(t+1)} \leftarrow w^{(t)} - \frac {\eta^{(t)}}{\sigma^{(t)}}g^{(t)}$, $t\ge0$.<ul>
<li>$\sigma^{(t)} = \sqrt{\frac 1 {t+1} \sum_{i=0}^t[(g^{(i)})^2]}$</li>
</ul>
</li>
<li>If we use $\frac 1 t\ Decay$ and $Adagrad$ together, we could easily have:<ul>
<li>$w^{(t+1)} = w^{(t)}-\frac{\eta^{(0)}}{\sqrt {\sum_{i=0}^t[(g^{(i)})^2]}}g^{(t)}$​</li>
</ul>
</li>
</ul>
</li>
<li><p>The best step is $\frac{|一阶偏导|}{二阶偏导}$</p>
</li>
</ul>
<h3 id="Stochastic-Gradient-Descent"><a href="#Stochastic-Gradient-Descent" class="headerlink" title="Stochastic Gradient Descent"></a>Stochastic Gradient Descent</h3><p>随机梯度下降法. Make your training faster.</p>
<ul>
<li>每处理一个例子就更新.</li>
</ul>
<h3 id="Feature-Scaling-特征缩放"><a href="#Feature-Scaling-特征缩放" class="headerlink" title="Feature Scaling 特征缩放"></a>Feature Scaling 特征缩放</h3><p><img src="https://i.loli.net/2021/09/08/dz9XaEv26imuFY3.png" alt="image-20210908161121857"></p>
<ul>
<li>两个输入的分布的范围很不一样，建议把他们的范围缩放，使得不同输入的范围是一样的.</li>
</ul>
<p><img src="https://i.loli.net/2021/09/08/hruapvB7snqGtPk.png" alt="image-20210908161952204"></p>
<h3 id="Possible-Problems"><a href="#Possible-Problems" class="headerlink" title="Possible Problems"></a>Possible Problems</h3><p><img src="https://datawhalechina.github.io/leeml-notes/chapter6/res/chapter6-23.png" alt="img"></p>
<h2 id="Classification-概率分类模型"><a href="#Classification-概率分类模型" class="headerlink" title="Classification 概率分类模型"></a>Classification 概率分类模型</h2><h3 id="回归模型与概率模型"><a href="#回归模型与概率模型" class="headerlink" title="回归模型与概率模型"></a>回归模型与概率模型</h3><ul>
<li>回归模型有其缺陷.</li>
<li>Ideal Alternatives<ul>
<li><img src="https://datawhalechina.github.io/leeml-notes/chapter10/res/chapter10-7.png" alt="img"></li>
</ul>
</li>
</ul>
<h3 id="Generative-Model"><a href="#Generative-Model" class="headerlink" title="Generative Model"></a>Generative Model</h3><p><img src="https://datawhalechina.github.io/leeml-notes/chapter10/res/chapter10-9.png" alt="img"></p>
<ul>
<li>如何进行问题的转化?<ul>
<li>两个盒子中抽一个球，抽到的是盒子1中蓝色球的概率是多少？</li>
<li>相当于两个类别中抽一个 x，抽到的是类别1中 x 的概率是多少？</li>
<li>可以转化成，随机给出一个 x，那么它属于哪一个类别（属于<strong>概率相对比较大</strong>的类别）？<ul>
<li>If $P(C_1|x) \ge 0.5$, then output $C_1$​.</li>
<li>Else output $C_2$​.</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>Prior<ul>
<li>计算 $P(C_1), P(C_2)$: $P(C_1) = N(C_1)/N(All)$</li>
</ul>
</li>
<li>Probability from Class?<ul>
<li>我们假设 Training Data 中的数据全部是从一个 Gaussian Distribution 中 sample 出来.</li>
<li><a href="https://zh.wikipedia.org/zh-hans/%E5%A4%9A%E5%85%83%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83">https://zh.wikipedia.org/zh-hans/%E5%A4%9A%E5%85%83%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83</a></li>
<li>$f_{\mu, \Sigma}(x) = \frac 1 {(2\pi)^{D/2}}\frac 1 {|\Sigma|^{1/2}} exp\{-\frac 1 2 (x-\mu)^T\Sigma^{-1}(x-\mu)\}$</li>
</ul>
</li>
<li>那么如何找 $\mu$ 与 $\Sigma$ ？<strong>Maximum Likelihood</strong>, 最大似然估计.<ul>
<li>Likelihood of a <em>Gaussian</em> with mean $\mu$ and covariance matrix $\Sigma$:</li>
<li>$L(\mu, \Sigma) = \Pi_{i=1}^n f_{\mu, \Sigma}(x^{(i)})$</li>
<li>Assume that $\mu^<em>, \Sigma^</em>$ is the argument of the Gaussian Distribution with the maximum likelihood.</li>
<li>And the solution…<ul>
<li>$\mu^* = \frac 1 n \sum_{i=1}^nx^{(i)}$</li>
<li>$\Sigma ^{<em>} = \frac 1 n \sum_{i=1}^n (x^{(i)}-\mu^</em>)(x^{(i)}-\mu^*)^T$​}</li>
</ul>
</li>
</ul>
</li>
<li><p>Modifying Model</p>
<ul>
<li>Using the same Covariant Matrix</li>
<li>$L(\mu^1, \mu^2, \Sigma)$ <ul>
<li>Where $\Sigma = \frac {N(C_1)} {N(All)}\Sigma^1 + \frac {N(C_2)} {N(All)}\Sigma^2$ ​</li>
</ul>
</li>
<li>经过推导，我们的 Model 可以写成 $P_{w,b}(C_1|x) = \sigma(z), z=w \cdot x + b$</li>
</ul>
</li>
<li><p>假设所有的feature都是相互独立产生的，这种分类叫做 <strong>Naive Bayes Classifier</strong>（朴素贝叶斯分类器）</p>
</li>
</ul>
<h3 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h3><ul>
<li>Review<ul>
<li>Step 1: Function Set<ul>
<li>We want to find $P_{w,b}(C_1|x)$​.<ul>
<li>If $P_{w,b}(C_1|x) \ge 0.5$ then output $C_1$, else output $C_2$.</li>
</ul>
</li>
<li>$f_{w,b}(x):=P_{w,b}(C_1|x) = \sigma(z)$, where $z=w\cdot x + b$​</li>
</ul>
</li>
<li>Step 2: Goodness of the function<ul>
<li><img src="https://i.loli.net/2021/09/09/dT4isEYZSD5QGnH.png" alt="image-20210909203309727"></li>
<li><img src="https://datawhalechina.github.io/leeml-notes/chapter11/res/chapter11-5.png" alt="img"></li>
<li><img src="https://datawhalechina.github.io/leeml-notes/chapter11/res/chapter11-6.png" alt="img"></li>
<li>Cross Entropy</li>
</ul>
</li>
<li>Step 3: Find the best<ul>
<li><img src="https://i.loli.net/2021/09/09/I2isBxThM9nrNV4.png" alt="image-20210909205827591"></li>
<li>The partial derivatives are the same as those in linear regression.</li>
<li>The logistic regression is called discriminative method.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Discriminative-v-s-Generative"><a href="#Discriminative-v-s-Generative" class="headerlink" title="Discriminative v.s. Generative"></a>Discriminative v.s. Generative</h3><ul>
<li>Same model. $P(C_1|x) = \sigma(w\cdot x + b)$<ul>
<li>Logistic Regression: Directly find $w$ and $b$</li>
<li>Generative Model: Find $\mu^1$, $\mu^2$, $\Sigma^{-1}$</li>
<li>But we won’t obtain the same set of $w$ and $b$.</li>
</ul>
</li>
</ul>
<h3 id="Multi-class-Classification"><a href="#Multi-class-Classification" class="headerlink" title="Multi-class Classification"></a>Multi-class Classification</h3><h4 id="Softmax"><a href="#Softmax" class="headerlink" title="Softmax"></a>Softmax</h4><p><img src="https://datawhalechina.github.io/leeml-notes/chapter11/res/chapter11-18.png" alt="img"></p>
<ul>
<li>Definition of the target</li>
</ul>
<p><img src="https://datawhalechina.github.io/leeml-notes/chapter11/res/chapter11-19.png" alt="img"></p>
<h3 id="Limitation-of-logistic-regression"><a href="#Limitation-of-logistic-regression" class="headerlink" title="Limitation of logistic regression"></a>Limitation of logistic regression</h3><h4 id="Feature-Transformation"><a href="#Feature-Transformation" class="headerlink" title="Feature Transformation"></a>Feature Transformation</h4><p><img src="https://datawhalechina.github.io/leeml-notes/chapter11/res/chapter11-23.png" alt="img"></p>
<ul>
<li>Middle Layer!<ul>
<li>可以将很多的逻辑回归接到一起，就可以进行特征转换.</li>
<li><img src="https://datawhalechina.github.io/leeml-notes/chapter11/res/chapter11-26.png" alt="img"></li>
</ul>
</li>
</ul>
<h2 id="Deep-Learning"><a href="#Deep-Learning" class="headerlink" title="Deep Learning"></a>Deep Learning</h2><p><strong>Step 1: Neural Network</strong></p>
<ul>
<li>Fully Connect Feedforward Network<ul>
<li>Why call it deep? <strong>Deep = Many Hidden Layers</strong></li>
<li>本质：通过 Hidden Layers 进行 Feature Transformation</li>
</ul>
</li>
</ul>
<p><strong>Step 2: Loss Function</strong></p>
<ul>
<li>Cross Entropy</li>
</ul>
<p><strong>Step 3: Find the best function</strong></p>
<ul>
<li>Gradient Descent</li>
</ul>
<h3 id="Why-deep"><a href="#Why-deep" class="headerlink" title="Why deep?"></a>Why deep?</h3><ul>
<li>More parameters, better performance</li>
<li><p>Universality Theorem</p>
<ul>
<li>Any continuous function $f:R^N \rightarrow R^M$​ can be realized by a network with one hidden layer with enough neurons.</li>
<li>So why <strong>Deep Learning</strong>, not <strong>Fat Learning</strong>?</li>
</ul>
<h2 id="CNN-Convolutional-Neuronal-Network）"><a href="#CNN-Convolutional-Neuronal-Network）" class="headerlink" title="CNN (Convolutional Neuronal Network）"></a>CNN (Convolutional Neuronal Network）</h2></li>
</ul>
<h3 id="Why-CNN-for-image"><a href="#Why-CNN-for-image" class="headerlink" title="Why CNN for image"></a>Why CNN for image</h3><ul>
<li>Some patterns are much smaller than the whole image. That is to say, a neuron only need to have connection with a small region of the image, but not the whole image.</li>
<li>But the same pattern may appear in different regions in different images.<ul>
<li>We could let these neurons share their parameters…</li>
</ul>
</li>
<li>Subsampling the pixels will not change the object.</li>
</ul>
<h3 id="The-whole-CNN-architecture"><a href="#The-whole-CNN-architecture" class="headerlink" title="The whole CNN architecture"></a>The whole CNN architecture</h3><p>Image -&gt; (Convolution -&gt; Max Pooling)$^{+}$ -&gt; Flatten -(as input)-&gt; Fully Connected Feedforward Network </p>
<h4 id="Convolution"><a href="#Convolution" class="headerlink" title="Convolution"></a>Convolution</h4><ul>
<li>Calculation approaches</li>
<li>Feature Map</li>
<li>Colorful Image</li>
</ul>
<p><img src="https://i.loli.net/2021/10/02/Y3GhrSRlVWsnofc.png" alt="image-20211002101802253"></p>
<ul>
<li><strong>Channel</strong>: 颜色通道</li>
<li>What does CNN learn? 使用 gradient ascent 寻找 input $x^{*} = arg \max_x{a^k}$</li>
<li>Deep Dream: let CNN exaggerate what it sees</li>
<li>以 Alpha Go 为例讲解 Architecture 的可选择性</li>
</ul>
<h2 id="RNN-Recurrent-Neural-Network"><a href="#RNN-Recurrent-Neural-Network" class="headerlink" title="RNN (Recurrent Neural Network)"></a>RNN (Recurrent Neural Network)</h2><ul>
<li>Example Application<ul>
<li>Slot filling: Nerual Network needs memory!</li>
<li><img src="https://i.loli.net/2021/10/02/eJHzUvSWnOcTtBD.png" alt="image-20211002120218869"></li>
<li>Bidirectional RNN<ul>
<li><img src="https://i.loli.net/2021/10/02/r4fRUpxLKGBbnyc.png" alt="image-20211002120401629"></li>
<li>Why? Have a broader view of context. 正向只看前面，反向只看后面.</li>
</ul>
</li>
<li>Long Short-term Memory (LSTM)<ul>
<li>Input signal and output signal are learned by the network itself.</li>
<li><img src="https://i.loli.net/2021/10/02/FQIxTbOJPH25DvY.png" alt="image-20211002120742395"></li>
<li><img src="https://i.loli.net/2021/10/02/Z1V2qWHmAg354ku.png" alt="image-20211002121407528"></li>
</ul>
</li>
<li>How to train RNN?<ul>
<li>Loss function? Sum over cross entropy.</li>
<li>Learning? Gradient descent. <ul>
<li>How to calc partial derivative? BPTT (Back propagation through time).</li>
<li>The error surface may be very flat or very steep. Clipping…</li>
<li>LSTM may deal with gradient vanishing, but not with gradient explode.</li>
</ul>
</li>
</ul>
</li>
<li>Applications</li>
</ul>
</li>
</ul>
<h2 id="Semi-supervised-Learning-半监督学习"><a href="#Semi-supervised-Learning-半监督学习" class="headerlink" title="Semi-supervised Learning 半监督学习"></a>Semi-supervised Learning 半监督学习</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><ul>
<li>Semi-supervised learning $\{(x^r, \hat y^r)\}_{r=1}^R, \{x^u\}_{u=R}^{R+U}$<ul>
<li>A set of unlabeled data, usually $U\gg R$</li>
</ul>
</li>
<li>Classification 半监督学习的分类<ul>
<li>Transductive learning: unlabelled data is the testing data</li>
<li>Inductive learning: unlabelled data is not in the testing data</li>
</ul>
</li>
<li>Why semi-supervised learning?<ul>
<li>Collecting data is easy, but collecting “labelled” data is expensive</li>
<li>We do semi-supervised learning in our lives</li>
</ul>
</li>
</ul>
<h3 id="Semi-supervised-learning-for-Generative-Model"><a href="#Semi-supervised-learning-for-Generative-Model" class="headerlink" title="Semi-supervised learning for Generative Model"></a>Semi-supervised learning for Generative Model</h3><p><img src="https://i.loli.net/2021/10/03/WhAsVmULjZCRGMq.png" alt="image-20211003005516326"></p>
<h3 id="Low-density-separation-assumption"><a href="#Low-density-separation-assumption" class="headerlink" title="Low-density separation assumption"></a><strong>Low-density separation assumption</strong></h3><ul>
<li>Assumption<ul>
<li>两个 Class 之间非黑即白 (Black or white)</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/03/nWAefx6phy41tUK.png" alt="image-20211003010157597"></p>
<p><img src="https://i.loli.net/2021/10/03/YEya7komzgsGPM6.png" alt="image-20211003011038595"></p>
<h3 id="Smoothness-assumption"><a href="#Smoothness-assumption" class="headerlink" title="Smoothness assumption"></a>Smoothness assumption</h3><ul>
<li>近朱者赤 近墨者黑<ul>
<li>“similar” x has the same $\hat y$</li>
<li>More precisely:<ul>
<li>x is not uniform.</li>
<li>if $x^1$ and $x^2$​ are close in a high density region (connected by a high density path)</li>
<li>then $y^1$ and $y^2$ are the same</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="自监督学习"><a href="#自监督学习" class="headerlink" title="自监督学习"></a>自监督学习</h1><p>以 BERT 和 GPT 为例分析自监督式学习的架构。</p>
<!--more-->
<h2 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a>BERT</h2><h3 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h3><ul>
<li>BERT is a kind of <strong>transformer encoder</strong>.</li>
</ul>
<h3 id="Basic-Steps"><a href="#Basic-Steps" class="headerlink" title="Basic Steps"></a>Basic Steps</h3><ul>
<li>Mask<ul>
<li>Randomly masking some tokens.</li>
<li>Randomly replacing some tokens.</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/03/5qAycs8TR7zm9LM.png" alt="image-20211003222046934"></p>
<ul>
<li>Train goal:</li>
</ul>
<p><img src="https://i.loli.net/2021/10/03/Lh5lZuBDadc2gFT.png" alt="image-20211003222105101"></p>
<ul>
<li>Next sentence prediction</li>
</ul>
<p><img src="https://i.loli.net/2021/10/03/3cfvb2VBtqKrCdo.png" alt="image-20211003222412031"></p>
<h3 id="Fine-tuning-for-downstream-tasks"><a href="#Fine-tuning-for-downstream-tasks" class="headerlink" title="Fine-tuning for downstream-tasks"></a>Fine-tuning for downstream-tasks</h3><p><img src="https://i.loli.net/2021/10/03/EekjwNaRW1DyCt3.png" alt="image-20211003223325577"></p>
<h3 id="GLUE-General-Language-Understanding-Evaluation"><a href="#GLUE-General-Language-Understanding-Evaluation" class="headerlink" title="GLUE: General Language Understanding Evaluation"></a>GLUE: General Language Understanding Evaluation</h3><p><img src="https://i.loli.net/2021/10/03/gvQtEZ3ORVxUk5n.png" alt="image-20211003234413065"></p>
<h3 id="How-to-use-BERT"><a href="#How-to-use-BERT" class="headerlink" title="How to use BERT"></a>How to use BERT</h3><ul>
<li>Case 1<ul>
<li>Input a sequence, output a class.<ul>
<li>Sentimental Analysis</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/03/KUyO9mFxqHpvST5.png" alt="image-20211003234839607"></p>
<ul>
<li>Case 2<ul>
<li>Input a sequence and output a sequence of the same length.<ul>
<li>POS tagging</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/03/m2OFX7sVIWC6zd4.png" alt="image-20211003235251180"></p>
<ul>
<li><p>Case 3</p>
<ul>
<li>Input two sequences and output a class<ul>
<li>Natural Language Inference (NLI)</li>
</ul>
</li>
</ul>
</li>
<li><p>Case 4</p>
<ul>
<li>Input a sequence and output a sequence<ul>
<li>Extraction-based Question Answering</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/04/rLO5AnoRiYN1tF2.png" alt="image-20211004215647151"></p>
<p><img src="https://i.loli.net/2021/10/04/qUB2oTwpGdKNbcj.png" alt="image-20211004220019462"></p>
<h3 id="Why-does-BERT-work"><a href="#Why-does-BERT-work" class="headerlink" title="Why does BERT work?"></a>Why does BERT work?</h3><ul>
<li>The tokens with similar meanings have similar embeddings.</li>
<li>You shall know a word by the company it keeps.</li>
</ul>
<p>事实上我们可以把 BERT 各层包含的内容抽取出来做 linear combination，然后交给某些特定的任务，以此来推断 BERT 各层到底都在学什么东西。</p>
<h2 id="GPT-2"><a href="#GPT-2" class="headerlink" title="GPT-2"></a>GPT-2</h2><h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><p>GPT-2 类似于 Transformer 的 Decoder 架构。</p>
<p><img src="https://s2.loli.net/2022/02/07/y9GSaBzk1eONFRo.png" alt="image-20220207145205606"></p>
<h3 id="Predict-Next-Token"><a href="#Predict-Next-Token" class="headerlink" title="Predict Next Token"></a>Predict Next Token</h3><p><img src="https://i.loli.net/2021/10/04/akuvyBx9AD6XS8c.png" alt="image-20211004225110571"></p>
<p>架构像是 Transformer 的 Decoder，取消 cross attention.</p>
<h3 id="How-to-use-GPT"><a href="#How-to-use-GPT" class="headerlink" title="How to use GPT?"></a>How to use GPT?</h3><p><img src="https://i.loli.net/2021/10/04/mQjp7eLRnaWdM21.png" alt="image-20211004230723769"></p>
<h2 id="GPT-3"><a href="#GPT-3" class="headerlink" title="GPT-3"></a>GPT-3</h2><p>Aimed at few-shot learning. 170 B size of parameters.</p>
<p><img src="https://s2.loli.net/2022/02/07/ad9yrkOsHmlnV2P.png" alt="image-20220207150320965"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.youtube.com/watch?v=gh0hewYkjgo">https://www.youtube.com/watch?v=gh0hewYkjgo</a></li>
<li><a href="https://www.youtube.com/watch?v=WY_E0Sd4K80">https://www.youtube.com/watch?v=WY_E0Sd4K80</a></li>
</ul>
<h1 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h1><h2 id="Introduction-2"><a href="#Introduction-2" class="headerlink" title="Introduction"></a>Introduction</h2><ul>
<li><em>Transformer</em> is a <em>sequence to sequence</em> model. $Seq2seq$</li>
<li>Application…<ul>
<li>Speech Recognition</li>
<li>Machine Translation</li>
<li>Speech Translation</li>
<li>Syntactic Parsing（文法剖析）</li>
<li>Multi-label Classification</li>
</ul>
</li>
<li>Most NLP applications could be considered as <strong>Question Answering</strong></li>
<li>比起单纯用 seq2seq，Task-specific model 对于某些任务更合适</li>
<li>Architecture<ul>
<li><img src="https://i.loli.net/2021/10/03/QJFbND5rkBjZli6.png" alt="image-20211003151722794"></li>
</ul>
</li>
</ul>
<h2 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h2><ul>
<li><p>Given a set of vectors and output another set of vectors.</p>
<ul>
<li>Self-attention, CNN, RNN… All of them could realize this!</li>
<li><img src="https://i.loli.net/2021/10/03/fIVaFX65TWJcOl1.png" alt="image-20211003151915990"></li>
</ul>
</li>
<li><p><img src="https://i.loli.net/2021/10/03/rSqZC57w2jfveAk.png" alt="image-20211003152146306"></p>
</li>
<li>Residual Connection<ul>
<li><img src="https://i.loli.net/2021/10/03/KnYwBAroMfI5dFV.png" alt="image-20211003152616828"></li>
</ul>
</li>
</ul>
<h2 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h2><h3 id="1-Autoregressive-AT"><a href="#1-Autoregressive-AT" class="headerlink" title="(1) Autoregressive (AT)"></a>(1) Autoregressive (AT)</h3><p><img src="https://i.loli.net/2021/10/03/QTnXwExY2VjkLlR.png" alt="image-20211003153626358"></p>
<p><img src="https://i.loli.net/2021/10/03/zkqyt6LX2ZEcIJ3.png" alt="image-20211003153834166"></p>
<ul>
<li>Architecture</li>
</ul>
<p><img src="https://i.loli.net/2021/10/03/RimUkCW6bKHMXVe.png" alt="image-20211003153922255"></p>
<ul>
<li>Masked Multi-head Attention?<ul>
<li>Like RNN…</li>
<li><img src="https://i.loli.net/2021/10/03/eRHTsgjEmAay3WO.png" alt="image-20211003154121360"></li>
</ul>
</li>
<li>Adding “Stop Token”</li>
</ul>
<h3 id="2-Non-autoregressive-NAT"><a href="#2-Non-autoregressive-NAT" class="headerlink" title="(2) Non-autoregressive (NAT)"></a>(2) Non-autoregressive (NAT)</h3><p><img src="https://i.loli.net/2021/10/03/EY3eAv68mshjZVO.png" alt="image-20211003155032111"></p>
<h2 id="Encoder-Decoder"><a href="#Encoder-Decoder" class="headerlink" title="Encoder-Decoder"></a>Encoder-Decoder</h2><p><img src="https://i.loli.net/2021/10/03/Xao8lTPvudAC7j5.png" alt="image-20211003155352197"></p>
<p><img src="https://i.loli.net/2021/10/03/bTLuX5Ve9ExRirH.png" alt="image-20211003155455569"></p>
<h2 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h2><ul>
<li>Minimize the cross entropy<ul>
<li>The input of the decoder is the ground truth.</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/03/zQgEb4YLiA6ceV9.png" alt="image-20211003160151665"></p>
<h2 id="Tips-for-training"><a href="#Tips-for-training" class="headerlink" title="Tips for training"></a>Tips for training</h2><ul>
<li>Copy Mechanism<ul>
<li>Chat-bot</li>
</ul>
</li>
<li><p>Guided Attention</p>
<ul>
<li>Monotonic attention</li>
<li>Location-aware attention</li>
</ul>
</li>
<li><p>Beam Search</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/10/03/v74KjoIAMQuDT1F.png" alt="image-20211003161025399"></p>
<p><img src="https://i.loli.net/2021/10/03/8oCmEM2dxJeujFs.png" alt="image-20211003161307181"></p>
<ul>
<li>Scheduled Sampling</li>
</ul>
<h2 id="Reference-1"><a href="#Reference-1" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.youtube.com/watch?v=n9TlOhRjYoc">https://www.youtube.com/watch?v=n9TlOhRjYoc</a></li>
<li><a href="https://www.youtube.com/watch?v=N6aRv06iv2g">https://www.youtube.com/watch?v=N6aRv06iv2g</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Pandas 库使用指北</title>
    <url>/python-pandas/</url>
    <content><![CDATA[<p><code>Pandas</code> 是 Python 下的高性能的数据管理工具与数据分析工具。</p>
<p>本文中介绍了 <code>Pandas</code> 库中的一些常用类，然后记录了一些简单的筛选，切片等等用法。</p>
<a id="more"></a>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>（主要数据结构）Pandas 的主要数据结构是 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series">Series</a>（一维数据）与 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame">DataFrame</a>（二维数据）。</li>
<li>（大小不变）Pandas 所有数据结构的值都是可变的，但数据结构的大小并非都是可变的，比如，Series 的长度不可改变，但 DataFrame 里就可以插入列。</li>
<li>（倾向于复制）Pandas 里，绝大多数方法都不改变原始的输入数据，而是复制数据，生成新的对象。 一般来说，原始输入数据<strong>不变</strong>更稳妥。</li>
</ul>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</code></pre>
<h3 id="生成-Series-与-DataFrame"><a href="#生成-Series-与-DataFrame" class="headerlink" title="生成 Series 与 DataFrame"></a>生成 Series 与 DataFrame</h3><ul>
<li>Series 的生成：默认使用整数索引</li>
</ul>
<pre class="language-none"><code class="language-none">&gt;&gt;&gt; s &#x3D; pd.Series([1,3,5,np.nan,6,8])
&gt;&gt;&gt; s
0    1.0
1    3.0
2    5.0
3    NaN
4    6.0
5    8.0
dtype: float64</code></pre>
<ul>
<li>DataFrame 的生成：① 指定数据，索引，列名与是否为拷贝<ul>
<li><code>class pandas.DataFrame(data=None, index=None, columns=None, dtype=None, copy=None)</code></li>
</ul>
</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dates <span class="token operator">=</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'20220101'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> dates
DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2022-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2022-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2022-01-03'</span><span class="token punctuation">,</span> <span class="token string">'2022-01-04'</span><span class="token punctuation">,</span>
               <span class="token string">'2022-01-05'</span><span class="token punctuation">,</span> <span class="token string">'2022-01-06'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span>dates<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'ABCD'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> df
                   A         B         C         D
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">-</span><span class="token number">0.165424</span> <span class="token operator">-</span><span class="token number">0.095599</span>  <span class="token number">0.940562</span> <span class="token operator">-</span><span class="token number">0.629898</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">0.237563</span>  <span class="token number">0.252783</span>  <span class="token number">1.362851</span> <span class="token operator">-</span><span class="token number">1.525588</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token number">2.222287</span> <span class="token operator">-</span><span class="token number">0.591918</span> <span class="token operator">-</span><span class="token number">1.450194</span>  <span class="token number">0.860104</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span> <span class="token operator">-</span><span class="token number">0.560238</span>  <span class="token number">0.548346</span> <span class="token operator">-</span><span class="token number">0.691656</span> <span class="token operator">-</span><span class="token number">0.810484</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">1.600348</span>  <span class="token number">0.242665</span>  <span class="token number">0.836329</span>  <span class="token number">0.372371</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span> <span class="token operator">-</span><span class="token number">0.332250</span> <span class="token operator">-</span><span class="token number">0.941505</span>  <span class="token number">0.110009</span> <span class="token operator">-</span><span class="token number">1.478538</span>

<span class="token operator">>></span><span class="token operator">></span> a1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"A"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> a2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"A"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> pd1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> pd1
   A  B    c    C
<span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">3.0</span>  NaN
<span class="token number">1</span>  <span class="token number">1</span>  <span class="token number">3</span>  NaN  <span class="token number">5.0</span></code></pre>
<ul>
<li>DataFrame 的生成：② read_csv</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python">task <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'./Data/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>camp_name<span class="token punctuation">&#125;</span></span><span class="token string">/task.csv'</span></span><span class="token punctuation">)</span>

         tid     name   score
<span class="token number">0</span>  <span class="token number">0001</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>A   任务 <span class="token number">1</span><span class="token operator">-</span>A       <span class="token number">5</span>
<span class="token number">1</span>  <span class="token number">0001</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>B   任务 <span class="token number">1</span><span class="token operator">-</span>B       <span class="token number">7</span>
<span class="token number">2</span>  <span class="token number">0001</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>C   任务 <span class="token number">1</span><span class="token operator">-</span>C       <span class="token number">2</span>
<span class="token number">3</span>  <span class="token number">0001</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span>A   任务 <span class="token number">2</span><span class="token operator">-</span>A       <span class="token number">5</span>
<span class="token number">4</span>  <span class="token number">0001</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span>B   任务 <span class="token number">2</span><span class="token operator">-</span>B       <span class="token number">5</span>
<span class="token number">5</span>  <span class="token number">0001</span><span class="token operator">-</span><span class="token number">99</span><span class="token operator">-</span>A    Bonus       <span class="token number">1</span></code></pre>
<ul>
<li>DataFrame 的生成：③ data 中传入 Series，利用其所有的 index。如果不同列的 index 不 match，那么报错。</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Example</span>
df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>
                     <span class="token string">'B'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Timestamp<span class="token punctuation">(</span><span class="token string">'20130102'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'C'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'D'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'E'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Categorical<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"train"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token string">'foo'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
 

<span class="token operator">>></span><span class="token operator">></span> df2

     A          B    C  D      E    F
<span class="token number">0</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>   test  foo
<span class="token number">1</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>  train  foo
<span class="token number">2</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>   test  foo
<span class="token number">3</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>  train  foo


<span class="token comment"># Test</span>
df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>
                     <span class="token string">'B'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Timestamp<span class="token punctuation">(</span><span class="token string">'20130102'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'C'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'D'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'E'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Categorical<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"train"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token string">'foo'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
  File <span class="token string">"/home/c7w/.local/lib/python3.8/site-packages/pandas/core/frame.py"</span><span class="token punctuation">,</span> line <span class="token number">614</span><span class="token punctuation">,</span> <span class="token keyword">in</span> __init__
    mgr <span class="token operator">=</span> dict_to_mgr<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token punctuation">,</span> columns<span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">,</span> copy<span class="token operator">=</span>copy<span class="token punctuation">,</span> typ<span class="token operator">=</span>manager<span class="token punctuation">)</span>
  File <span class="token string">"/home/c7w/.local/lib/python3.8/site-packages/pandas/core/internals/construction.py"</span><span class="token punctuation">,</span> line <span class="token number">464</span><span class="token punctuation">,</span> <span class="token keyword">in</span> dict_to_mgr
    <span class="token keyword">return</span> arrays_to_mgr<span class="token punctuation">(</span>
  File <span class="token string">"/home/c7w/.local/lib/python3.8/site-packages/pandas/core/internals/construction.py"</span><span class="token punctuation">,</span> line <span class="token number">119</span><span class="token punctuation">,</span> <span class="token keyword">in</span> arrays_to_mgr
    index <span class="token operator">=</span> _extract_index<span class="token punctuation">(</span>arrays<span class="token punctuation">)</span>
  File <span class="token string">"/home/c7w/.local/lib/python3.8/site-packages/pandas/core/internals/construction.py"</span><span class="token punctuation">,</span> line <span class="token number">649</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _extract_index
    <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
ValueError<span class="token punctuation">:</span> array length <span class="token number">4</span> does <span class="token keyword">not</span> match index length <span class="token number">6</span>
        

<span class="token comment"># Another Test</span>
df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>
                     <span class="token string">'B'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Timestamp<span class="token punctuation">(</span><span class="token string">'20130102'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'C'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'D'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'E'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Categorical<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"train"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token string">'foo'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
  File <span class="token string">"/home/c7w/.local/lib/python3.8/site-packages/pandas/core/frame.py"</span><span class="token punctuation">,</span> line <span class="token number">614</span><span class="token punctuation">,</span> <span class="token keyword">in</span> __init__
    mgr <span class="token operator">=</span> dict_to_mgr<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token punctuation">,</span> columns<span class="token punctuation">,</span> dtype<span class="token operator">=</span>dtype<span class="token punctuation">,</span> copy<span class="token operator">=</span>copy<span class="token punctuation">,</span> typ<span class="token operator">=</span>manager<span class="token punctuation">)</span>
  File <span class="token string">"/home/c7w/.local/lib/python3.8/site-packages/pandas/core/internals/construction.py"</span><span class="token punctuation">,</span> line <span class="token number">464</span><span class="token punctuation">,</span> <span class="token keyword">in</span> dict_to_mgr
    <span class="token keyword">return</span> arrays_to_mgr<span class="token punctuation">(</span>
  File <span class="token string">"/home/c7w/.local/lib/python3.8/site-packages/pandas/core/internals/construction.py"</span><span class="token punctuation">,</span> line <span class="token number">119</span><span class="token punctuation">,</span> <span class="token keyword">in</span> arrays_to_mgr
    index <span class="token operator">=</span> _extract_index<span class="token punctuation">(</span>arrays<span class="token punctuation">)</span>
  File <span class="token string">"/home/c7w/.local/lib/python3.8/site-packages/pandas/core/internals/construction.py"</span><span class="token punctuation">,</span> line <span class="token number">649</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _extract_index
    <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
ValueError<span class="token punctuation">:</span> array length <span class="token number">4</span> does <span class="token keyword">not</span> match index length <span class="token number">7</span>
        
        
<span class="token comment"># Another Test</span>
df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>
                     <span class="token string">'B'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Timestamp<span class="token punctuation">(</span><span class="token string">'20130102'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'C'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'D'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'E'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Categorical<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"train"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token string">'foo'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> df3
     A          B    C     D      E    F
<span class="token number">0</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">12.0</span>   test  foo
<span class="token number">1</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">12.0</span>  train  foo
<span class="token number">2</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">12.0</span>   test  foo
<span class="token number">3</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">12.0</span>  train  foo</code></pre>
<h3 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h3><ul>
<li>列数据类型</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df2<span class="token punctuation">.</span>dtypes
A           float64
B    datetime64<span class="token punctuation">[</span>ns<span class="token punctuation">]</span>
C           float32
D             int32
E          category
F            <span class="token builtin">object</span>
dtype<span class="token punctuation">:</span> <span class="token builtin">object</span></code></pre>
<ul>
<li>预览数据</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df2
     A          B    C  D      E    F
<span class="token number">0</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>   test  foo
<span class="token number">1</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>  train  foo
<span class="token number">2</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>   test  foo
<span class="token number">3</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>  train  foo

<span class="token operator">>></span><span class="token operator">></span> df2<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 默认最多显示 5 条数据</span>
     A          B    C  D      E    F
<span class="token number">0</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>   test  foo
<span class="token number">1</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>  train  foo
<span class="token number">2</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>   test  foo
<span class="token number">3</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>  train  foo

<span class="token operator">>></span><span class="token operator">></span> df2<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
     A          B    C  D      E    F
<span class="token number">0</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>   test  foo
<span class="token number">1</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>  train  foo

<span class="token operator">>></span><span class="token operator">></span> df2<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
     A          B    C  D      E    F
<span class="token number">2</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>   test  foo
<span class="token number">3</span>  <span class="token number">1.0</span> <span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.0</span>  <span class="token number">3</span>  train  foo</code></pre>
<ul>
<li>显示索引与列</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df2<span class="token punctuation">.</span>index
Int64Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> df2<span class="token punctuation">.</span>columns
Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span></code></pre>
<ul>
<li>转换成 numpy 对象</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python">
<span class="token operator">>></span><span class="token operator">></span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span>dates<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'ABCD'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> df
                   A         B         C         D
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">-</span><span class="token number">0.451372</span>  <span class="token number">1.581206</span> <span class="token operator">-</span><span class="token number">0.499837</span> <span class="token operator">-</span><span class="token number">0.549320</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">0.508692</span> <span class="token operator">-</span><span class="token number">0.304325</span>  <span class="token number">1.995154</span> <span class="token operator">-</span><span class="token number">0.895727</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token number">0.681460</span>  <span class="token number">1.214341</span> <span class="token operator">-</span><span class="token number">0.608446</span> <span class="token operator">-</span><span class="token number">1.054553</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span> <span class="token operator">-</span><span class="token number">1.032206</span>  <span class="token number">0.237051</span>  <span class="token number">1.502665</span> <span class="token operator">-</span><span class="token number">0.048824</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">1.707183</span>  <span class="token number">0.382228</span>  <span class="token number">1.335121</span> <span class="token operator">-</span><span class="token number">1.099418</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>  <span class="token number">0.895205</span>  <span class="token number">0.982582</span>  <span class="token number">0.188397</span>  <span class="token number">0.023960</span>

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 纯 float 类型，转换速度较快</span>
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.45137221</span><span class="token punctuation">,</span>  <span class="token number">1.58120564</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.49983697</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.54931982</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span> <span class="token number">0.50869221</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.30432474</span><span class="token punctuation">,</span>  <span class="token number">1.99515425</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.89572709</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span> <span class="token number">0.68146026</span><span class="token punctuation">,</span>  <span class="token number">1.21434138</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.60844611</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.05455281</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.03220563</span><span class="token punctuation">,</span>  <span class="token number">0.23705134</span><span class="token punctuation">,</span>  <span class="token number">1.50266499</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.04882351</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span> <span class="token number">1.70718305</span><span class="token punctuation">,</span>  <span class="token number">0.38222751</span><span class="token punctuation">,</span>  <span class="token number">1.33512092</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.09941788</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span> <span class="token number">0.89520526</span><span class="token punctuation">,</span>  <span class="token number">0.98258218</span><span class="token punctuation">,</span>  <span class="token number">0.18839673</span><span class="token punctuation">,</span>  <span class="token number">0.02396049</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> df2<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 复合数据类型，转换速度慢</span>
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> Timestamp<span class="token punctuation">(</span><span class="token string">'2013-01-02 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> Timestamp<span class="token punctuation">(</span><span class="token string">'2013-01-02 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> Timestamp<span class="token punctuation">(</span><span class="token string">'2013-01-02 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> Timestamp<span class="token punctuation">(</span><span class="token string">'2013-01-02 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      dtype<span class="token operator">=</span><span class="token builtin">object</span><span class="token punctuation">)</span></code></pre>
<ul>
<li>数据统计信息</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span>
              A         B         C         D
count  <span class="token number">6.000000</span>  <span class="token number">6.000000</span>  <span class="token number">6.000000</span>  <span class="token number">6.000000</span>
mean   <span class="token number">0.384827</span>  <span class="token number">0.682181</span>  <span class="token number">0.652176</span> <span class="token operator">-</span><span class="token number">0.603980</span>
std    <span class="token number">0.981800</span>  <span class="token number">0.698997</span>  <span class="token number">1.106773</span>  <span class="token number">0.497813</span>
<span class="token builtin">min</span>   <span class="token operator">-</span><span class="token number">1.032206</span> <span class="token operator">-</span><span class="token number">0.304325</span> <span class="token operator">-</span><span class="token number">0.608446</span> <span class="token operator">-</span><span class="token number">1.099418</span>
<span class="token number">25</span><span class="token operator">%</span>   <span class="token operator">-</span><span class="token number">0.211356</span>  <span class="token number">0.273345</span> <span class="token operator">-</span><span class="token number">0.327779</span> <span class="token operator">-</span><span class="token number">1.014846</span>
<span class="token number">50</span><span class="token operator">%</span>    <span class="token number">0.595076</span>  <span class="token number">0.682405</span>  <span class="token number">0.761759</span> <span class="token operator">-</span><span class="token number">0.722523</span>
<span class="token number">75</span><span class="token operator">%</span>    <span class="token number">0.841769</span>  <span class="token number">1.156402</span>  <span class="token number">1.460779</span> <span class="token operator">-</span><span class="token number">0.173948</span>
<span class="token builtin">max</span>    <span class="token number">1.707183</span>  <span class="token number">1.581206</span>  <span class="token number">1.995154</span>  <span class="token number">0.023960</span></code></pre>
<h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><ul>
<li>转置</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>T
   <span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>  <span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>
A   <span class="token operator">-</span><span class="token number">0.451372</span>    <span class="token number">0.508692</span>    <span class="token number">0.681460</span>   <span class="token operator">-</span><span class="token number">1.032206</span>    <span class="token number">1.707183</span>    <span class="token number">0.895205</span>
B    <span class="token number">1.581206</span>   <span class="token operator">-</span><span class="token number">0.304325</span>    <span class="token number">1.214341</span>    <span class="token number">0.237051</span>    <span class="token number">0.382228</span>    <span class="token number">0.982582</span>
C   <span class="token operator">-</span><span class="token number">0.499837</span>    <span class="token number">1.995154</span>   <span class="token operator">-</span><span class="token number">0.608446</span>    <span class="token number">1.502665</span>    <span class="token number">1.335121</span>    <span class="token number">0.188397</span>
D   <span class="token operator">-</span><span class="token number">0.549320</span>   <span class="token operator">-</span><span class="token number">0.895727</span>   <span class="token operator">-</span><span class="token number">1.054553</span>   <span class="token operator">-</span><span class="token number">0.048824</span>   <span class="token operator">-</span><span class="token number">1.099418</span>    <span class="token number">0.023960</span></code></pre>
<ul>
<li>按索引排序<ul>
<li><code>DataFrame.sort_index(axis=0, level=None, ascending=True, inplace=False, kind=&#39;quicksort&#39;, na_position=&#39;last&#39;, sort_remaining=True, ignore_index=False, key=None)</code></li>
<li>kind 可以取’mergesort’，以达到稳定的目的</li>
<li>axis 取 0 按行排序，取 1 按列排序</li>
</ul>
</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df4 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                   columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> df4
     A
<span class="token number">100</span>  <span class="token number">1</span>
<span class="token number">29</span>   <span class="token number">2</span>
<span class="token number">234</span>  <span class="token number">3</span>
<span class="token number">1</span>    <span class="token number">4</span>
<span class="token number">150</span>  <span class="token number">5</span>
<span class="token operator">>></span><span class="token operator">></span> df4<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span>
     A
<span class="token number">1</span>    <span class="token number">4</span>
<span class="token number">29</span>   <span class="token number">2</span>
<span class="token number">100</span>  <span class="token number">1</span>
<span class="token number">150</span>  <span class="token number">5</span>
<span class="token number">234</span>  <span class="token number">3</span>


<span class="token operator">>></span><span class="token operator">></span> df4 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> df4
     B   A
<span class="token number">100</span>  <span class="token number">1</span>   <span class="token number">2</span>
<span class="token number">29</span>   <span class="token number">3</span>   <span class="token number">4</span>
<span class="token number">234</span>  <span class="token number">5</span>   <span class="token number">6</span>
<span class="token number">1</span>    <span class="token number">7</span>   <span class="token number">8</span>
<span class="token number">150</span>  <span class="token number">9</span>  <span class="token number">10</span>
<span class="token operator">>></span><span class="token operator">></span> df4<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span>
     B   A
<span class="token number">1</span>    <span class="token number">7</span>   <span class="token number">8</span>
<span class="token number">29</span>   <span class="token number">3</span>   <span class="token number">4</span>
<span class="token number">100</span>  <span class="token number">1</span>   <span class="token number">2</span>
<span class="token number">150</span>  <span class="token number">9</span>  <span class="token number">10</span>
<span class="token number">234</span>  <span class="token number">5</span>   <span class="token number">6</span>
<span class="token operator">>></span><span class="token operator">></span> df4<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
      A  B
<span class="token number">100</span>   <span class="token number">2</span>  <span class="token number">1</span>
<span class="token number">29</span>    <span class="token number">4</span>  <span class="token number">3</span>
<span class="token number">234</span>   <span class="token number">6</span>  <span class="token number">5</span>
<span class="token number">1</span>     <span class="token number">8</span>  <span class="token number">7</span>
<span class="token number">150</span>  <span class="token number">10</span>  <span class="token number">9</span></code></pre>
<ul>
<li>按某列排序<ul>
<li><code>DataFrame.sort_values(by, axis=0, ascending=True, inplace=False, kind=&#39;quicksort&#39;, na_position=&#39;last&#39;, ignore_index=False, key=None)</code></li>
<li>na_position 可以是 <code>first</code> 和 <code>last</code></li>
<li>如果 ignore_index 为真，那么结果的索引会从 0 标号至 n-1</li>
<li>key: 接受一个 Series 作为输出，返回一个 shape 相同的 Series，然后使用后者进行排序操作</li>
</ul>
</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'col1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'col2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'col3'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'col4'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">]</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> df
  col1  col2  col3 col4
<span class="token number">0</span>    A     <span class="token number">2</span>     <span class="token number">0</span>    a
<span class="token number">1</span>    A     <span class="token number">1</span>     <span class="token number">1</span>    B
<span class="token number">2</span>    B     <span class="token number">9</span>     <span class="token number">9</span>    c
<span class="token number">3</span>  NaN     <span class="token number">8</span>     <span class="token number">4</span>    D
<span class="token number">4</span>    D     <span class="token number">7</span>     <span class="token number">2</span>    e
<span class="token number">5</span>    C     <span class="token number">4</span>     <span class="token number">3</span>    F

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'col1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  col1  col2  col3 col4
<span class="token number">0</span>    A     <span class="token number">2</span>     <span class="token number">0</span>    a
<span class="token number">1</span>    A     <span class="token number">1</span>     <span class="token number">1</span>    B
<span class="token number">2</span>    B     <span class="token number">9</span>     <span class="token number">9</span>    c
<span class="token number">5</span>    C     <span class="token number">4</span>     <span class="token number">3</span>    F
<span class="token number">4</span>    D     <span class="token number">7</span>     <span class="token number">2</span>    e
<span class="token number">3</span>  NaN     <span class="token number">8</span>     <span class="token number">4</span>    D

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'col1'</span><span class="token punctuation">,</span> <span class="token string">'col2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  col1  col2  col3 col4
<span class="token number">1</span>    A     <span class="token number">1</span>     <span class="token number">1</span>    B
<span class="token number">0</span>    A     <span class="token number">2</span>     <span class="token number">0</span>    a
<span class="token number">2</span>    B     <span class="token number">9</span>     <span class="token number">9</span>    c
<span class="token number">5</span>    C     <span class="token number">4</span>     <span class="token number">3</span>    F
<span class="token number">4</span>    D     <span class="token number">7</span>     <span class="token number">2</span>    e
<span class="token number">3</span>  NaN     <span class="token number">8</span>     <span class="token number">4</span>    D

df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'col4'</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> col<span class="token punctuation">:</span> col<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  col1  col2  col3 col4
<span class="token number">0</span>    A     <span class="token number">2</span>     <span class="token number">0</span>    a
<span class="token number">1</span>    A     <span class="token number">1</span>     <span class="token number">1</span>    B
<span class="token number">2</span>    B     <span class="token number">9</span>     <span class="token number">9</span>    c
<span class="token number">3</span>  NaN     <span class="token number">8</span>     <span class="token number">4</span>    D
<span class="token number">4</span>    D     <span class="token number">7</span>     <span class="token number">2</span>    e
<span class="token number">5</span>    C     <span class="token number">4</span>     <span class="token number">3</span>    F</code></pre>
<h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><ul>
<li>获取单列：使用 <code>df.A</code> 或者 <code>df[&#39;A&#39;]</code></li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df
                   A         B         C         D
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">-</span><span class="token number">0.514649</span>  <span class="token number">2.198378</span> <span class="token operator">-</span><span class="token number">0.986735</span> <span class="token operator">-</span><span class="token number">0.368712</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span> <span class="token operator">-</span><span class="token number">2.059045</span>  <span class="token number">1.715020</span>  <span class="token number">0.607552</span>  <span class="token number">1.145638</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">-</span><span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span> <span class="token operator">-</span><span class="token number">0.167852</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.288924</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span> <span class="token operator">-</span><span class="token number">0.604422</span> <span class="token operator">-</span><span class="token number">0.483053</span>  <span class="token number">1.557318</span> <span class="token operator">-</span><span class="token number">0.158592</span>

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>A
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>   <span class="token operator">-</span><span class="token number">0.514649</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>   <span class="token operator">-</span><span class="token number">2.059045</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>   <span class="token operator">-</span><span class="token number">1.398741</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">0.642856</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>    <span class="token number">0.288924</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>   <span class="token operator">-</span><span class="token number">0.604422</span>
Freq<span class="token punctuation">:</span> D<span class="token punctuation">,</span> Name<span class="token punctuation">:</span> A<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64
            
<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>   <span class="token operator">-</span><span class="token number">0.514649</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>   <span class="token operator">-</span><span class="token number">2.059045</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>   <span class="token operator">-</span><span class="token number">1.398741</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">0.642856</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>    <span class="token number">0.288924</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>   <span class="token operator">-</span><span class="token number">0.604422</span>
Freq<span class="token punctuation">:</span> D<span class="token punctuation">,</span> Name<span class="token punctuation">:</span> A<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64</code></pre>
<ul>
<li>获取多行：使用 <code>[]</code> 做 Slice</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>
                   A         B         C         D
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span> <span class="token operator">-</span><span class="token number">2.059045</span>  <span class="token number">1.715020</span>  <span class="token number">0.607552</span>  <span class="token number">1.145638</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">-</span><span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span> <span class="token operator">-</span><span class="token number">0.167852</span>

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">[</span><span class="token string">'20220102'</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
                   A         B         C         D
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span> <span class="token operator">-</span><span class="token number">2.059045</span>  <span class="token number">1.715020</span>  <span class="token number">0.607552</span>  <span class="token number">1.145638</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">-</span><span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span> <span class="token operator">-</span><span class="token number">0.167852</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.288924</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span> <span class="token operator">-</span><span class="token number">0.604422</span> <span class="token operator">-</span><span class="token number">0.483053</span>  <span class="token number">1.557318</span> <span class="token operator">-</span><span class="token number">0.158592</span></code></pre>
<ul>
<li>按标签索引：使用 <code>.loc[]</code></li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span> <span class="token punctuation">:</span> <span class="token punctuation">,</span> <span class="token punctuation">:</span> <span class="token punctuation">]</span>
                   A         B         C         D
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">-</span><span class="token number">0.514649</span>  <span class="token number">2.198378</span> <span class="token operator">-</span><span class="token number">0.986735</span> <span class="token operator">-</span><span class="token number">0.368712</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span> <span class="token operator">-</span><span class="token number">2.059045</span>  <span class="token number">1.715020</span>  <span class="token number">0.607552</span>  <span class="token number">1.145638</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">-</span><span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span> <span class="token operator">-</span><span class="token number">0.167852</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.288924</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span> <span class="token operator">-</span><span class="token number">0.604422</span> <span class="token operator">-</span><span class="token number">0.483053</span>  <span class="token number">1.557318</span> <span class="token operator">-</span><span class="token number">0.158592</span>

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span> <span class="token string">'20220101'</span> <span class="token punctuation">,</span> <span class="token punctuation">:</span> <span class="token punctuation">]</span>
A   <span class="token operator">-</span><span class="token number">0.514649</span>
B    <span class="token number">2.198378</span>
C   <span class="token operator">-</span><span class="token number">0.986735</span>
D   <span class="token operator">-</span><span class="token number">0.368712</span>
Name<span class="token punctuation">:</span> <span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span> <span class="token string">'20220101'</span> <span class="token punctuation">,</span> <span class="token string">'C'</span> <span class="token punctuation">]</span>
<span class="token operator">-</span><span class="token number">0.9867347785391464</span>

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span> <span class="token string">'20220101'</span> <span class="token punctuation">:</span> <span class="token string">'20220104'</span> <span class="token punctuation">,</span> <span class="token string">'C'</span> <span class="token punctuation">]</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>   <span class="token operator">-</span><span class="token number">0.986735</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>    <span class="token number">0.607552</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>    <span class="token number">1.459097</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">0.378368</span>
Freq<span class="token punctuation">:</span> D<span class="token punctuation">,</span> Name<span class="token punctuation">:</span> C<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span> <span class="token string">'20220101'</span> <span class="token punctuation">:</span> <span class="token string">'20220104'</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span> <span class="token punctuation">]</span>
                   C         B         B         D
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">-</span><span class="token number">0.986735</span>  <span class="token number">2.198378</span>  <span class="token number">2.198378</span> <span class="token operator">-</span><span class="token number">0.368712</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">0.607552</span>  <span class="token number">1.715020</span>  <span class="token number">1.715020</span>  <span class="token number">1.145638</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token number">1.459097</span>  <span class="token number">1.538408</span>  <span class="token number">1.538408</span>  <span class="token number">0.491077</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.378368</span>  <span class="token number">0.670310</span>  <span class="token number">0.670310</span> <span class="token operator">-</span><span class="token number">0.167852</span></code></pre>
<ul>
<li>按整数索引</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">]</span>
                   C         B         B         D
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">0.607552</span>  <span class="token number">1.715020</span>  <span class="token number">1.715020</span>  <span class="token number">1.145638</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token number">1.459097</span>  <span class="token number">1.538408</span>  <span class="token number">1.538408</span>  <span class="token number">0.491077</span></code></pre>
<ul>
<li>Bool 索引</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>B
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>    <span class="token number">2.198378</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>    <span class="token number">1.715020</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>    <span class="token number">1.538408</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">0.670310</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>    <span class="token number">1.131819</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>   <span class="token operator">-</span><span class="token number">0.483053</span>
Freq<span class="token punctuation">:</span> D<span class="token punctuation">,</span> Name<span class="token punctuation">:</span> B<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64
            
<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>B <span class="token operator">></span> <span class="token number">1</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>     <span class="token boolean">True</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>     <span class="token boolean">True</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>     <span class="token boolean">True</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token boolean">False</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>     <span class="token boolean">True</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>    <span class="token boolean">False</span>

Freq<span class="token punctuation">:</span> D<span class="token punctuation">,</span> Name<span class="token punctuation">:</span> B<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> <span class="token builtin">bool</span>
<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">.</span>B <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">]</span>
                   A         B         C         D
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">-</span><span class="token number">0.514649</span>  <span class="token number">2.198378</span> <span class="token operator">-</span><span class="token number">0.986735</span> <span class="token operator">-</span><span class="token number">0.368712</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span> <span class="token operator">-</span><span class="token number">2.059045</span>  <span class="token number">1.715020</span>  <span class="token number">0.607552</span>  <span class="token number">1.145638</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">-</span><span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.288924</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span></code></pre>
<ul>
<li>用 <code>isin()</code>  筛选</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2 <span class="token operator">=</span> df<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2<span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span>

In <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2
Out<span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 
                   A         B         C         D      E
<span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>  <span class="token number">0.469112</span> <span class="token operator">-</span><span class="token number">0.282863</span> <span class="token operator">-</span><span class="token number">1.509059</span> <span class="token operator">-</span><span class="token number">1.135632</span>    one
<span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">1.212112</span> <span class="token operator">-</span><span class="token number">0.173215</span>  <span class="token number">0.119209</span> <span class="token operator">-</span><span class="token number">1.044236</span>    one
<span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">-</span><span class="token number">0.861849</span> <span class="token operator">-</span><span class="token number">2.104569</span> <span class="token operator">-</span><span class="token number">0.494929</span>  <span class="token number">1.071804</span>    two
<span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.721555</span> <span class="token operator">-</span><span class="token number">0.706771</span> <span class="token operator">-</span><span class="token number">1.039575</span>  <span class="token number">0.271860</span>  three
<span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span> <span class="token operator">-</span><span class="token number">0.424972</span>  <span class="token number">0.567020</span>  <span class="token number">0.276232</span> <span class="token operator">-</span><span class="token number">1.087401</span>   four
<span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span> <span class="token operator">-</span><span class="token number">0.673690</span>  <span class="token number">0.113648</span> <span class="token operator">-</span><span class="token number">1.478427</span>  <span class="token number">0.524988</span>  three

In <span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2<span class="token punctuation">[</span>df2<span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
Out<span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 
                   A         B         C         D     E
<span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">-</span><span class="token number">0.861849</span> <span class="token operator">-</span><span class="token number">2.104569</span> <span class="token operator">-</span><span class="token number">0.494929</span>  <span class="token number">1.071804</span>   two
<span class="token number">2013</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span> <span class="token operator">-</span><span class="token number">0.424972</span>  <span class="token number">0.567020</span>  <span class="token number">0.276232</span> <span class="token operator">-</span><span class="token number">1.087401</span>  four</code></pre>
<ul>
<li>赋值</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> df
                   A         B         C         D  E
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">-</span><span class="token number">0.514649</span>  <span class="token number">2.198378</span> <span class="token operator">-</span><span class="token number">0.986735</span> <span class="token operator">-</span><span class="token number">0.368712</span>  <span class="token number">1</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span> <span class="token operator">-</span><span class="token number">2.059045</span>  <span class="token number">1.715020</span>  <span class="token number">0.607552</span>  <span class="token number">1.145638</span>  <span class="token number">2</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">-</span><span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>  <span class="token number">3</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span> <span class="token operator">-</span><span class="token number">0.167852</span>  <span class="token number">4</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.288924</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>  <span class="token number">4</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span> <span class="token operator">-</span><span class="token number">0.604422</span> <span class="token operator">-</span><span class="token number">0.483053</span>  <span class="token number">1.557318</span> <span class="token operator">-</span><span class="token number">0.158592</span>  <span class="token number">4</span>

<span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'20220103'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> s
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>    <span class="token number">6</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">5</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>    <span class="token number">4</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>    <span class="token number">3</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span>    <span class="token number">2</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">08</span>    <span class="token number">1</span>
Freq<span class="token punctuation">:</span> D<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64
        
<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>F <span class="token operator">=</span> s
<span class="token operator">>></span><span class="token operator">></span> df
                   A         B         C         D  E
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">-</span><span class="token number">0.514649</span>  <span class="token number">2.198378</span> <span class="token operator">-</span><span class="token number">0.986735</span> <span class="token operator">-</span><span class="token number">0.368712</span>  <span class="token number">1</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span> <span class="token operator">-</span><span class="token number">2.059045</span>  <span class="token number">1.715020</span>  <span class="token number">0.607552</span>  <span class="token number">1.145638</span>  <span class="token number">2</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">-</span><span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>  <span class="token number">3</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span> <span class="token operator">-</span><span class="token number">0.167852</span>  <span class="token number">4</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.288924</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>  <span class="token number">4</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span> <span class="token operator">-</span><span class="token number">0.604422</span> <span class="token operator">-</span><span class="token number">0.483053</span>  <span class="token number">1.557318</span> <span class="token operator">-</span><span class="token number">0.158592</span>  <span class="token number">4</span>

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span> <span class="token operator">=</span> s
<span class="token operator">>></span><span class="token operator">></span> df
                   A         B         C         D  E    F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">-</span><span class="token number">0.514649</span>  <span class="token number">2.198378</span> <span class="token operator">-</span><span class="token number">0.986735</span> <span class="token operator">-</span><span class="token number">0.368712</span>  <span class="token number">1</span>  NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span> <span class="token operator">-</span><span class="token number">2.059045</span>  <span class="token number">1.715020</span>  <span class="token number">0.607552</span>  <span class="token number">1.145638</span>  <span class="token number">2</span>  NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">-</span><span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>  <span class="token number">3</span>  <span class="token number">6.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span> <span class="token operator">-</span><span class="token number">0.167852</span>  <span class="token number">4</span>  <span class="token number">5.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.288924</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>  <span class="token number">4</span>  <span class="token number">4.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span> <span class="token operator">-</span><span class="token number">0.604422</span> <span class="token operator">-</span><span class="token number">0.483053</span>  <span class="token number">1.557318</span> <span class="token operator">-</span><span class="token number">0.158592</span>  <span class="token number">4</span>  <span class="token number">3.0</span></code></pre>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>at<span class="token punctuation">[</span><span class="token string">'20220105'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">114514</span>
<span class="token operator">>></span><span class="token operator">></span> df
                        A         B         C         D  E    F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>      <span class="token operator">-</span><span class="token number">0.514649</span>  <span class="token number">2.198378</span> <span class="token operator">-</span><span class="token number">0.986735</span> <span class="token operator">-</span><span class="token number">0.368712</span>  <span class="token number">1</span>  NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>      <span class="token operator">-</span><span class="token number">2.059045</span>  <span class="token number">1.715020</span>  <span class="token number">0.607552</span>  <span class="token number">1.145638</span>  <span class="token number">2</span>  NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>      <span class="token operator">-</span><span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>  <span class="token number">3</span>  <span class="token number">6.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>       <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span> <span class="token operator">-</span><span class="token number">0.167852</span>  <span class="token number">4</span>  <span class="token number">5.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">114514.000000</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>  <span class="token number">4</span>  <span class="token number">4.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>      <span class="token operator">-</span><span class="token number">0.604422</span> <span class="token operator">-</span><span class="token number">0.483053</span>  <span class="token number">1.557318</span> <span class="token operator">-</span><span class="token number">0.158592</span>  <span class="token number">4</span>  <span class="token number">3.0</span>

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>at<span class="token punctuation">[</span><span class="token string">'20220105'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">114514</span>
<span class="token operator">>></span><span class="token operator">></span> df
                        A         B         C         D  E    F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>      <span class="token operator">-</span><span class="token number">0.514649</span>  <span class="token number">2.198378</span> <span class="token operator">-</span><span class="token number">0.986735</span> <span class="token operator">-</span><span class="token number">0.368712</span>  <span class="token number">1</span>  NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>      <span class="token operator">-</span><span class="token number">2.059045</span>  <span class="token number">1.715020</span>  <span class="token number">0.607552</span>  <span class="token number">1.145638</span>  <span class="token number">2</span>  NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>      <span class="token operator">-</span><span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>  <span class="token number">3</span>  <span class="token number">6.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>       <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span> <span class="token operator">-</span><span class="token number">0.167852</span>  <span class="token number">4</span>  <span class="token number">5.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">114514.000000</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>  <span class="token number">4</span>  <span class="token number">4.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>      <span class="token operator">-</span><span class="token number">0.604422</span> <span class="token operator">-</span><span class="token number">0.483053</span>  <span class="token number">1.557318</span> <span class="token operator">-</span><span class="token number">0.158592</span>  <span class="token number">4</span>  <span class="token number">3.0</span></code></pre>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df
                   A         B         C         D  E    F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">-</span><span class="token number">0.514649</span>  <span class="token number">2.198378</span> <span class="token operator">-</span><span class="token number">0.986735</span> <span class="token operator">-</span><span class="token number">0.368712</span>  <span class="token number">1</span>  NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span> <span class="token operator">-</span><span class="token number">2.059045</span>  <span class="token number">1.715020</span>  <span class="token number">0.607552</span>  <span class="token number">1.145638</span>  <span class="token number">2</span>  NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">-</span><span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>  <span class="token number">3</span>  <span class="token number">6.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span> <span class="token operator">-</span><span class="token number">0.167852</span>  <span class="token number">4</span>  <span class="token number">5.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span> <span class="token operator">-</span><span class="token number">0.012000</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>  <span class="token number">4</span>  <span class="token number">4.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span> <span class="token operator">-</span><span class="token number">0.604422</span> <span class="token operator">-</span><span class="token number">0.483053</span>  <span class="token number">1.557318</span> <span class="token operator">-</span><span class="token number">0.158592</span>  <span class="token number">4</span>  <span class="token number">3.0</span>

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">[</span>df <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">]</span>
                   A         B         C         D   E   F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">-</span><span class="token number">0.514649</span>       NaN <span class="token operator">-</span><span class="token number">0.986735</span> <span class="token operator">-</span><span class="token number">0.368712</span> NaN NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span> <span class="token operator">-</span><span class="token number">2.059045</span>       NaN       NaN       NaN NaN NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">-</span><span class="token number">1.398741</span>       NaN       NaN       NaN NaN NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>       NaN       NaN       NaN <span class="token operator">-</span><span class="token number">0.167852</span> NaN NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span> <span class="token operator">-</span><span class="token number">0.012000</span>       NaN       NaN       NaN NaN NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span> <span class="token operator">-</span><span class="token number">0.604422</span> <span class="token operator">-</span><span class="token number">0.483053</span>       NaN <span class="token operator">-</span><span class="token number">0.158592</span> NaN NaN

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">[</span>df <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>df
<span class="token operator">>></span><span class="token operator">></span> df
                   A         B         C         D  E    F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>  <span class="token number">0.514649</span>  <span class="token number">2.198378</span>  <span class="token number">0.986735</span>  <span class="token number">0.368712</span>  <span class="token number">1</span>  NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">2.059045</span>  <span class="token number">1.715020</span>  <span class="token number">0.607552</span>  <span class="token number">1.145638</span>  <span class="token number">2</span>  NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>  <span class="token number">3</span>  <span class="token number">6.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span>  <span class="token number">0.167852</span>  <span class="token number">4</span>  <span class="token number">5.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.012000</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>  <span class="token number">4</span>  <span class="token number">4.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>  <span class="token number">0.604422</span>  <span class="token number">0.483053</span>  <span class="token number">1.557318</span>  <span class="token number">0.158592</span>  <span class="token number">4</span>  <span class="token number">3.0</span></code></pre>
<h3 id="缺失值"><a href="#缺失值" class="headerlink" title="缺失值"></a>缺失值</h3><ul>
<li>删除带有缺省值的行</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df1 <span class="token operator">=</span> df<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> df1
                   A         B         C         D  E    F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>  <span class="token number">0.514649</span>  <span class="token number">2.198378</span>  <span class="token number">0.986735</span>  <span class="token number">0.368712</span>  <span class="token number">1</span>  NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">2.059045</span>  <span class="token number">1.715020</span>  <span class="token number">0.607552</span>  <span class="token number">1.145638</span>  <span class="token number">2</span>  NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>  <span class="token number">3</span>  <span class="token number">6.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span>  <span class="token number">0.167852</span>  <span class="token number">4</span>  <span class="token number">5.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.012000</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>  <span class="token number">4</span>  <span class="token number">4.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>  <span class="token number">0.604422</span>  <span class="token number">0.483053</span>  <span class="token number">1.557318</span>  <span class="token number">0.158592</span>  <span class="token number">4</span>  <span class="token number">3.0</span>

<span class="token operator">>></span><span class="token operator">></span> df1<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">)</span>
                   A         B         C         D  E    F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>  <span class="token number">3</span>  <span class="token number">6.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span>  <span class="token number">0.167852</span>  <span class="token number">4</span>  <span class="token number">5.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.012000</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>  <span class="token number">4</span>  <span class="token number">4.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>  <span class="token number">0.604422</span>  <span class="token number">0.483053</span>  <span class="token number">1.557318</span>  <span class="token number">0.158592</span>  <span class="token number">4</span>  <span class="token number">3.0</span>

<span class="token operator">>></span><span class="token operator">></span> df1
                   A         B         C         D  E    F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>  <span class="token number">0.514649</span>  <span class="token number">2.198378</span>  <span class="token number">0.986735</span>  <span class="token number">0.368712</span>  <span class="token number">1</span>  NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">2.059045</span>  <span class="token number">1.715020</span>  <span class="token number">0.607552</span>  <span class="token number">1.145638</span>  <span class="token number">2</span>  NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>  <span class="token number">3</span>  <span class="token number">6.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span>  <span class="token number">0.167852</span>  <span class="token number">4</span>  <span class="token number">5.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.012000</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>  <span class="token number">4</span>  <span class="token number">4.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>  <span class="token number">0.604422</span>  <span class="token number">0.483053</span>  <span class="token number">1.557318</span>  <span class="token number">0.158592</span>  <span class="token number">4</span>  <span class="token number">3.0</span></code></pre>
<ul>
<li>填充缺省值</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df1<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
                   A         B         C         D  E    F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>  <span class="token number">0.514649</span>  <span class="token number">2.198378</span>  <span class="token number">0.986735</span>  <span class="token number">0.368712</span>  <span class="token number">1</span>  <span class="token number">5.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token number">2.059045</span>  <span class="token number">1.715020</span>  <span class="token number">0.607552</span>  <span class="token number">1.145638</span>  <span class="token number">2</span>  <span class="token number">5.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>  <span class="token number">3</span>  <span class="token number">6.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span>  <span class="token number">0.167852</span>  <span class="token number">4</span>  <span class="token number">5.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.012000</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>  <span class="token number">4</span>  <span class="token number">4.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>  <span class="token number">0.604422</span>  <span class="token number">0.483053</span>  <span class="token number">1.557318</span>  <span class="token number">0.158592</span>  <span class="token number">4</span>  <span class="token number">3.0</span></code></pre>
<ul>
<li>获取是否为 Nan</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> pd<span class="token punctuation">.</span>isna<span class="token punctuation">(</span>df1<span class="token punctuation">)</span>
                A      B      C      D      E      F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>   <span class="token boolean">True</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>   <span class="token boolean">True</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span>  <span class="token boolean">False</span></code></pre>
<h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>Pandas 默认用 <code>np.nan</code> 表示缺失数据。下列计算时，默认不包含缺失值。</p>
<ul>
<li>求平均值</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df <span class="token operator">=</span> df1<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> df
                   A         B         C         D  E    F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>  <span class="token number">3</span>  <span class="token number">6.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span>  <span class="token number">0.167852</span>  <span class="token number">4</span>  <span class="token number">5.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.012000</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>  <span class="token number">4</span>  <span class="token number">4.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>  <span class="token number">0.604422</span>  <span class="token number">0.483053</span>  <span class="token number">1.557318</span>  <span class="token number">0.158592</span>  <span class="token number">4</span>  <span class="token number">3.0</span>

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>
A    <span class="token number">0.664505</span>
B    <span class="token number">0.955897</span>
C    <span class="token number">0.981879</span>
D    <span class="token number">0.427724</span>
E    <span class="token number">3.750000</span>
F    <span class="token number">4.500000</span>
dtype<span class="token punctuation">:</span> float64
    
<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>    <span class="token number">2.314554</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">1.809898</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>    <span class="token number">1.761655</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>    <span class="token number">1.633897</span>
Freq<span class="token punctuation">:</span> D<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64</code></pre>
<ul>
<li>作差</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df
                   A         B         C         D  E    F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>  <span class="token number">3</span>  <span class="token number">6.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span>  <span class="token number">0.167852</span>  <span class="token number">4</span>  <span class="token number">5.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.012000</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>  <span class="token number">4</span>  <span class="token number">4.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>  <span class="token number">0.604422</span>  <span class="token number">0.483053</span>  <span class="token number">1.557318</span>  <span class="token number">0.158592</span>  <span class="token number">4</span>  <span class="token number">3.0</span>

<span class="token operator">>></span><span class="token operator">></span> s
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>    <span class="token number">6</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">5</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>    <span class="token number">4</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>    <span class="token number">3</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span>    <span class="token number">2</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">08</span>    <span class="token number">1</span>
Freq<span class="token punctuation">:</span> D<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64

        <span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
            <span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span>  <span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   E   F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>                  NaN                  NaN  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> NaN NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>                  NaN                  NaN  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> NaN NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>                  NaN                  NaN  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> NaN NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>                  NaN                  NaN  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> NaN NaN

<span class="token punctuation">[</span><span class="token number">4</span> rows x <span class="token number">12</span> columns<span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>s<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span>
                   A         B         C         D    E    F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">-</span><span class="token number">4.601259</span> <span class="token operator">-</span><span class="token number">4.461592</span> <span class="token operator">-</span><span class="token number">4.540903</span> <span class="token operator">-</span><span class="token number">5.508923</span> <span class="token operator">-</span><span class="token number">3.0</span>  <span class="token number">0.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span> <span class="token operator">-</span><span class="token number">4.357144</span> <span class="token operator">-</span><span class="token number">4.329690</span> <span class="token operator">-</span><span class="token number">4.621632</span> <span class="token operator">-</span><span class="token number">4.832148</span> <span class="token operator">-</span><span class="token number">1.0</span>  <span class="token number">0.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span> <span class="token operator">-</span><span class="token number">3.988000</span> <span class="token operator">-</span><span class="token number">2.868181</span> <span class="token operator">-</span><span class="token number">3.467266</span> <span class="token operator">-</span><span class="token number">3.106626</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span> <span class="token operator">-</span><span class="token number">2.395578</span> <span class="token operator">-</span><span class="token number">2.516947</span> <span class="token operator">-</span><span class="token number">1.442682</span> <span class="token operator">-</span><span class="token number">2.841408</span>  <span class="token number">1.0</span>  <span class="token number">0.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span>       NaN       NaN       NaN       NaN  NaN  NaN
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">08</span>       NaN       NaN       NaN       NaN  NaN  NaN</code></pre>
<ul>
<li>Apply 函数</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df
                   A         B         C         D  E    F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>  <span class="token number">3</span>  <span class="token number">6.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span>  <span class="token number">0.167852</span>  <span class="token number">4</span>  <span class="token number">5.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.012000</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>  <span class="token number">4</span>  <span class="token number">4.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>  <span class="token number">0.604422</span>  <span class="token number">0.483053</span>  <span class="token number">1.557318</span>  <span class="token number">0.158592</span>  <span class="token number">4</span>  <span class="token number">3.0</span>

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>cumsum<span class="token punctuation">)</span>
                   A         B         C         D   E     F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>   <span class="token number">3</span>   <span class="token number">6.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">2.041597</span>  <span class="token number">2.208717</span>  <span class="token number">1.837465</span>  <span class="token number">0.658930</span>   <span class="token number">7</span>  <span class="token number">11.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">2.053597</span>  <span class="token number">3.340537</span>  <span class="token number">2.370199</span>  <span class="token number">1.552304</span>  <span class="token number">11</span>  <span class="token number">15.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>  <span class="token number">2.658018</span>  <span class="token number">3.823590</span>  <span class="token number">3.927517</span>  <span class="token number">1.710896</span>  <span class="token number">15</span>  <span class="token number">18.0</span>

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
A    <span class="token number">1.386741</span>
B    <span class="token number">1.055355</span>
C    <span class="token number">1.178950</span>
D    <span class="token number">0.734782</span>
E    <span class="token number">1.000000</span>
F    <span class="token number">3.000000</span>
dtype<span class="token punctuation">:</span> float64</code></pre>
<ul>
<li>Series 的频数统计</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df
                   A         B         C         D  E    F
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>  <span class="token number">1.398741</span>  <span class="token number">1.538408</span>  <span class="token number">1.459097</span>  <span class="token number">0.491077</span>  <span class="token number">3</span>  <span class="token number">6.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">0.642856</span>  <span class="token number">0.670310</span>  <span class="token number">0.378368</span>  <span class="token number">0.167852</span>  <span class="token number">4</span>  <span class="token number">5.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">0.012000</span>  <span class="token number">1.131819</span>  <span class="token number">0.532734</span>  <span class="token number">0.893374</span>  <span class="token number">4</span>  <span class="token number">4.0</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>  <span class="token number">0.604422</span>  <span class="token number">0.483053</span>  <span class="token number">1.557318</span>  <span class="token number">0.158592</span>  <span class="token number">4</span>  <span class="token number">3.0</span>

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>E
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">03</span>    <span class="token number">3</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>    <span class="token number">4</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>    <span class="token number">4</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span>    <span class="token number">4</span>
Freq<span class="token punctuation">:</span> D<span class="token punctuation">,</span> Name<span class="token punctuation">:</span> E<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64
            
<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>E<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">4</span>    <span class="token number">3</span>
<span class="token number">3</span>    <span class="token number">1</span>
Name<span class="token punctuation">:</span> E<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64</code></pre>
<h3 id="合并-Merge"><a href="#合并-Merge" class="headerlink" title="合并 Merge"></a>合并 Merge</h3><h4 id="Concat"><a href="#Concat" class="headerlink" title="Concat"></a>Concat</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> df1 <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> df2 <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> df
          <span class="token number">0</span>         <span class="token number">1</span>         <span class="token number">2</span>         <span class="token number">3</span>
<span class="token number">0</span> <span class="token operator">-</span><span class="token number">0.453289</span>  <span class="token number">0.892104</span>  <span class="token number">1.891981</span>  <span class="token number">0.485892</span>
<span class="token number">1</span> <span class="token operator">-</span><span class="token number">2.703414</span> <span class="token operator">-</span><span class="token number">0.685189</span> <span class="token operator">-</span><span class="token number">0.903685</span> <span class="token operator">-</span><span class="token number">0.137809</span>
<span class="token number">2</span>  <span class="token number">0.500884</span>  <span class="token number">0.831745</span> <span class="token operator">-</span><span class="token number">0.757333</span>  <span class="token number">1.997601</span>
<span class="token number">3</span>  <span class="token number">0.939272</span>  <span class="token number">1.907135</span> <span class="token operator">-</span><span class="token number">0.528942</span> <span class="token operator">-</span><span class="token number">0.724512</span>
<span class="token number">4</span>  <span class="token number">0.796412</span>  <span class="token number">0.958696</span>  <span class="token number">1.352733</span>  <span class="token number">1.805198</span>
<span class="token number">5</span> <span class="token operator">-</span><span class="token number">1.141725</span>  <span class="token number">1.591892</span> <span class="token operator">-</span><span class="token number">0.171487</span> <span class="token operator">-</span><span class="token number">0.289578</span>
<span class="token number">6</span>  <span class="token number">0.155887</span> <span class="token operator">-</span><span class="token number">0.646798</span>  <span class="token number">1.151169</span>  <span class="token number">1.051582</span>
<span class="token number">7</span> <span class="token operator">-</span><span class="token number">0.917709</span> <span class="token operator">-</span><span class="token number">0.156452</span>  <span class="token number">0.578088</span>  <span class="token number">0.639791</span>
<span class="token number">8</span>  <span class="token number">0.570383</span> <span class="token operator">-</span><span class="token number">0.513202</span>  <span class="token number">0.891358</span> <span class="token operator">-</span><span class="token number">0.567285</span>
<span class="token number">9</span>  <span class="token number">1.858860</span>  <span class="token number">1.628878</span> <span class="token operator">-</span><span class="token number">1.269917</span> <span class="token operator">-</span><span class="token number">0.396636</span>
<span class="token operator">>></span><span class="token operator">></span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">)</span>
          <span class="token number">0</span>         <span class="token number">1</span>         <span class="token number">2</span>         <span class="token number">3</span>
<span class="token number">0</span> <span class="token operator">-</span><span class="token number">0.453289</span>  <span class="token number">0.892104</span>  <span class="token number">1.891981</span>  <span class="token number">0.485892</span>
<span class="token number">1</span> <span class="token operator">-</span><span class="token number">2.703414</span> <span class="token operator">-</span><span class="token number">0.685189</span> <span class="token operator">-</span><span class="token number">0.903685</span> <span class="token operator">-</span><span class="token number">0.137809</span>
<span class="token number">2</span>  <span class="token number">0.500884</span>  <span class="token number">0.831745</span> <span class="token operator">-</span><span class="token number">0.757333</span>  <span class="token number">1.997601</span>
<span class="token number">7</span> <span class="token operator">-</span><span class="token number">0.917709</span> <span class="token operator">-</span><span class="token number">0.156452</span>  <span class="token number">0.578088</span>  <span class="token number">0.639791</span>
<span class="token number">8</span>  <span class="token number">0.570383</span> <span class="token operator">-</span><span class="token number">0.513202</span>  <span class="token number">0.891358</span> <span class="token operator">-</span><span class="token number">0.567285</span>
<span class="token number">9</span>  <span class="token number">1.858860</span>  <span class="token number">1.628878</span> <span class="token operator">-</span><span class="token number">1.269917</span> <span class="token operator">-</span><span class="token number">0.396636</span></code></pre>
<h4 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h4><p>SQL 风格的合并。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> left <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'lval'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> right <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'rval'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> left
   key  lval
<span class="token number">0</span>  foo     <span class="token number">1</span>
<span class="token number">1</span>  foo     <span class="token number">2</span>

<span class="token operator">>></span><span class="token operator">></span> right
   key  rval
<span class="token number">0</span>  foo     <span class="token number">4</span>
<span class="token number">1</span>  foo     <span class="token number">5</span>

<span class="token operator">>></span><span class="token operator">></span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">)</span>
   key  lval  rval
<span class="token number">0</span>  foo     <span class="token number">1</span>     <span class="token number">4</span>
<span class="token number">1</span>  foo     <span class="token number">1</span>     <span class="token number">5</span>
<span class="token number">2</span>  foo     <span class="token number">2</span>     <span class="token number">4</span>
<span class="token number">3</span>  foo     <span class="token number">2</span>     <span class="token number">5</span></code></pre>
<h4 id="追加-Append"><a href="#追加-Append" class="headerlink" title="追加 Append"></a>追加 Append</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> df
          A         B         C         D
<span class="token number">0</span> <span class="token operator">-</span><span class="token number">0.019536</span>  <span class="token number">1.644399</span>  <span class="token number">1.250679</span>  <span class="token number">0.140385</span>
<span class="token number">1</span>  <span class="token number">0.770806</span>  <span class="token number">1.496631</span>  <span class="token number">0.216141</span>  <span class="token number">0.265806</span>
<span class="token number">2</span>  <span class="token number">1.166252</span>  <span class="token number">0.415610</span> <span class="token operator">-</span><span class="token number">1.166003</span>  <span class="token number">1.359695</span>
<span class="token number">3</span> <span class="token operator">-</span><span class="token number">0.360562</span>  <span class="token number">0.463504</span>  <span class="token number">0.507450</span> <span class="token operator">-</span><span class="token number">0.651677</span>
<span class="token number">4</span> <span class="token operator">-</span><span class="token number">0.459843</span> <span class="token operator">-</span><span class="token number">2.204788</span>  <span class="token number">1.381087</span> <span class="token operator">-</span><span class="token number">0.988501</span>
<span class="token number">5</span>  <span class="token number">0.505702</span> <span class="token operator">-</span><span class="token number">0.213073</span> <span class="token operator">-</span><span class="token number">1.264545</span>  <span class="token number">1.884786</span>
<span class="token number">6</span> <span class="token operator">-</span><span class="token number">0.955691</span>  <span class="token number">0.130868</span> <span class="token operator">-</span><span class="token number">0.722569</span> <span class="token operator">-</span><span class="token number">0.514278</span>
<span class="token number">7</span>  <span class="token number">0.768887</span>  <span class="token number">0.195819</span> <span class="token operator">-</span><span class="token number">0.997779</span> <span class="token operator">-</span><span class="token number">0.707758</span>

<span class="token operator">>></span><span class="token operator">></span> s
A    <span class="token number">0.505702</span>
B   <span class="token operator">-</span><span class="token number">0.213073</span>
C   <span class="token operator">-</span><span class="token number">1.264545</span>
D    <span class="token number">1.884786</span>
Name<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> float64
        
<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
          A         B         C         D
<span class="token number">0</span> <span class="token operator">-</span><span class="token number">0.019536</span>  <span class="token number">1.644399</span>  <span class="token number">1.250679</span>  <span class="token number">0.140385</span>
<span class="token number">1</span>  <span class="token number">0.770806</span>  <span class="token number">1.496631</span>  <span class="token number">0.216141</span>  <span class="token number">0.265806</span>
<span class="token number">2</span>  <span class="token number">1.166252</span>  <span class="token number">0.415610</span> <span class="token operator">-</span><span class="token number">1.166003</span>  <span class="token number">1.359695</span>
<span class="token number">3</span> <span class="token operator">-</span><span class="token number">0.360562</span>  <span class="token number">0.463504</span>  <span class="token number">0.507450</span> <span class="token operator">-</span><span class="token number">0.651677</span>
<span class="token number">4</span> <span class="token operator">-</span><span class="token number">0.459843</span> <span class="token operator">-</span><span class="token number">2.204788</span>  <span class="token number">1.381087</span> <span class="token operator">-</span><span class="token number">0.988501</span>
<span class="token number">5</span>  <span class="token number">0.505702</span> <span class="token operator">-</span><span class="token number">0.213073</span> <span class="token operator">-</span><span class="token number">1.264545</span>  <span class="token number">1.884786</span>
<span class="token number">6</span> <span class="token operator">-</span><span class="token number">0.955691</span>  <span class="token number">0.130868</span> <span class="token operator">-</span><span class="token number">0.722569</span> <span class="token operator">-</span><span class="token number">0.514278</span>
<span class="token number">7</span>  <span class="token number">0.768887</span>  <span class="token number">0.195819</span> <span class="token operator">-</span><span class="token number">0.997779</span> <span class="token operator">-</span><span class="token number">0.707758</span>
<span class="token number">8</span>  <span class="token number">0.505702</span> <span class="token operator">-</span><span class="token number">0.213073</span> <span class="token operator">-</span><span class="token number">1.264545</span>  <span class="token number">1.884786</span></code></pre>
<h3 id="分组-Grouping"><a href="#分组-Grouping" class="headerlink" title="分组 Grouping"></a>分组 Grouping</h3><p>“group by” 指的是涵盖下列一项或多项步骤的处理流程：</p>
<ul>
<li><strong>分割</strong>：按条件把数据分割成多组；</li>
<li><strong>应用</strong>：为每组单独应用函数；</li>
<li><strong>组合</strong>：将处理结果组合成一个数据结构。</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> df
          A         B         C         D  E
<span class="token number">0</span> <span class="token operator">-</span><span class="token number">0.019536</span>  <span class="token number">1.644399</span>  <span class="token number">1.250679</span>  <span class="token number">0.140385</span>  <span class="token number">1</span>
<span class="token number">1</span>  <span class="token number">0.770806</span>  <span class="token number">1.496631</span>  <span class="token number">0.216141</span>  <span class="token number">0.265806</span>  <span class="token number">1</span>
<span class="token number">2</span>  <span class="token number">1.166252</span>  <span class="token number">0.415610</span> <span class="token operator">-</span><span class="token number">1.166003</span>  <span class="token number">1.359695</span>  <span class="token number">1</span>
<span class="token number">3</span> <span class="token operator">-</span><span class="token number">0.360562</span>  <span class="token number">0.463504</span>  <span class="token number">0.507450</span> <span class="token operator">-</span><span class="token number">0.651677</span>  <span class="token number">3</span>
<span class="token number">4</span> <span class="token operator">-</span><span class="token number">0.459843</span> <span class="token operator">-</span><span class="token number">2.204788</span>  <span class="token number">1.381087</span> <span class="token operator">-</span><span class="token number">0.988501</span>  <span class="token number">4</span>
<span class="token number">5</span>  <span class="token number">0.505702</span> <span class="token operator">-</span><span class="token number">0.213073</span> <span class="token operator">-</span><span class="token number">1.264545</span>  <span class="token number">1.884786</span>  <span class="token number">3</span>
<span class="token number">6</span> <span class="token operator">-</span><span class="token number">0.955691</span>  <span class="token number">0.130868</span> <span class="token operator">-</span><span class="token number">0.722569</span> <span class="token operator">-</span><span class="token number">0.514278</span>  <span class="token number">2</span>
<span class="token number">7</span>  <span class="token number">0.768887</span>  <span class="token number">0.195819</span> <span class="token operator">-</span><span class="token number">0.997779</span> <span class="token operator">-</span><span class="token number">0.707758</span>  <span class="token number">2</span>

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'E'</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>pandas<span class="token punctuation">.</span>core<span class="token punctuation">.</span>groupby<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>DataFrameGroupBy <span class="token builtin">object</span> at <span class="token number">0x000001EE0AF69FD0</span><span class="token operator">></span>

<span class="token operator">>></span><span class="token operator">></span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'E'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          A         B         C         D
E
<span class="token number">1</span>  <span class="token number">1.917522</span>  <span class="token number">3.556640</span>  <span class="token number">0.300816</span>  <span class="token number">1.765886</span>
<span class="token number">2</span> <span class="token operator">-</span><span class="token number">0.186804</span>  <span class="token number">0.326687</span> <span class="token operator">-</span><span class="token number">1.720349</span> <span class="token operator">-</span><span class="token number">1.222036</span>
<span class="token number">3</span>  <span class="token number">0.145139</span>  <span class="token number">0.250431</span> <span class="token operator">-</span><span class="token number">0.757095</span>  <span class="token number">1.233109</span>
<span class="token number">4</span> <span class="token operator">-</span><span class="token number">0.459843</span> <span class="token operator">-</span><span class="token number">2.204788</span>  <span class="token number">1.381087</span> <span class="token operator">-</span><span class="token number">0.988501</span></code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.pypandas.cn/docs/">http://www.pypandas.cn/docs/</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/Python应用</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>c7w 的 2021 年度总结</title>
    <url>/summary-2021/</url>
    <content><![CDATA[<p>于 2022 年初，对 2021 的年度总结。</p>
<a id="more"></a>
<p>昨晚九点考完自动机，终于能放松一下。打游戏打到晚上快三点。本来想睡觉，上床上拿起手机玩到快四点。早上七点半就醒了，如果是考试周的话可能会继续睡过去，而考试周过了现在却没有丝毫困意。虽然还有很多活计要做，但是想了想还是姑且先休息整顿半周，然后好好拥抱这日程表稀稀疏疏的生活吧。</p>
<h2 id="学习情况总结"><a href="#学习情况总结" class="headerlink" title="学习情况总结"></a>学习情况总结</h2><p>姑且身份还是个大学生，还是要把课业总结放到最前面的（x</p>
<h3 id="2021-春季学期"><a href="#2021-春季学期" class="headerlink" title="2021 春季学期"></a>2021 春季学期</h3><p><img src="https://s2.loli.net/2022/01/07/AdQDf6OrNu7McKs.png" alt="image-20220107105303474"></p>
<p>这个学期的时候 c7w 对待课业应该还是蛮认真的，也没有翘过什么课，但想要在课业外做些什么的想法却是时不时地涌现。或许是还没有抓住足够多的机会的缘故吧。下面就对选修的课程进行一定程度的总结，或许在一定程度上可以作为后来人的选课指导？</p>
<h4 id="面向对象程序设计基础-OOP"><a href="#面向对象程序设计基础-OOP" class="headerlink" title="面向对象程序设计基础 (OOP)"></a>面向对象程序设计基础 (OOP)</h4><p>除了课件之外在尝试坚持看《C++ Primer》。之所以说在“尝试”坚持，是因为整本书就没有从头到尾完全看过一遍。但聊胜于无，虽说看的还是课件 cover 的大多数部分。周一的早八课，每次都是后排看课件。看到某个机制不太清晰的地方，可能并不是倾向于去问别人“How it works”，而是写段代码让事实验证这东西到底是怎么运作的。</p>
<p>对这门课印象深刻的一点在于，六次编程作业(Programming Assignment)和期末考试。一句话总结：人菜瘾大。刷完成时间榜变成了每两周固定的乐趣之一。</p>
<p>作业仓库：<a href="https://github.com/c7w/2021-Spring-OOP-Homework">https://github.com/c7w/2021-Spring-OOP-Homework</a></p>
<h4 id="大学物理B-1"><a href="#大学物理B-1" class="headerlink" title="大学物理B(1)"></a>大学物理B(1)</h4><p>选课掉了，最后补选了 jsh 老师的课。80 人的课容量，选课人数刚过 30，上到后期教室里一共坐了 8 个人，发现雨课堂签到的竟然有 11 个。期末考试的时候见到很多之前从未见到的面孔。</p>
<p>讲得也不难，作业也不多，考试难度也是跟作业难度类似。可能大家还是倾向于选更加容易拿高分，更加被钻研透套路的老师吧。（后情提要：这个 c7w 到大二的秋季学期就真香了）</p>
<h4 id="体育-2"><a href="#体育-2" class="headerlink" title="体育(2)"></a>体育(2)</h4><p>专项是篮球，考察方式是 4 个三步上篮，丢一个扣 5 分。体育老师人真的特别好。引体向上的话，姑且因为寒假心态转变了许多，其中之一就是完全摒弃掉了鸵鸟心态，所以有在练习。虽然这个 20 分的专项大家的得分分布是，要么爆零，要么接近满分；我却算是拿了一个中间偏上的分数。虽然说有训练，但毕竟高中三年还是养的过于肥了，怎么可能半个学期就恢复比较好的体质呢（x</p>
<p>总评最后 89，然后被老师捞了一把（是的我都不相信我体育能 A-），可以预测会变成这几门体育唯一能过 80 的一次了（x</p>
<h4 id="中国近现代史纲要"><a href="#中国近现代史纲要" class="headerlink" title="中国近现代史纲要"></a>中国近现代史纲要</h4><p>秋季学期选课，all in 夏清。开学第一节课，发现夏清不开课了，两个课堂一个给了 sw，一个给了 lj。而我就在后面那个课堂…因为要组队（这意味着要接触陌生人…），所以果断删课，补选了 whk，仅后八周上课。没想到课堂参与是签到+回答不定项选择题，最佳记录是一节课六道题只对了一道（笑</p>
<p>确实对这种带有政治教育任务的历史课不是很感冒。不过最后的期末论文找了一个感兴趣的话题，去图书馆借了些参考书认真做了两天。总体来说，一个学期，一次 pre 准备半天，一篇论文写了两天，课上没听，在看当周五要讲的高代：两天半的时间水掉 3 学分似乎并不亏（</p>
<h4 id="医学与人类文明的进步"><a href="#医学与人类文明的进步" class="headerlink" title="医学与人类文明的进步"></a>医学与人类文明的进步</h4><p>人文课组，P/F。签到就占 70 分。课上基本在看高代。</p>
<p>有一次去长庚医院实习参观的机会。感觉见识到不少有意思的东西。</p>
<h4 id="光电子-太长了不敲了"><a href="#光电子-太长了不敲了" class="headerlink" title="光电子(太长了不敲了)"></a>光电子(太长了不敲了)</h4><p>艺术课组，P/F。动手做项目的课程，虽然我不懂什么叫做艺术，但创作的过程可能就叫做艺术吧（点头</p>
<p><img src="https://s2.loli.net/2022/01/07/egMo8463SfpWY2h.png" alt="image-20220107112159826"></p>
<p>最后摸了个这东西（原谅图片高糊），想法是通过光带和发光球来模拟某个星系。事实上这东西是可以转起来的。因为是和舍友一起选的课，所以在组队这件事上没有遇到什么困难…</p>
<h4 id="微积分A-2"><a href="#微积分A-2" class="headerlink" title="微积分A(2)"></a>微积分A(2)</h4><p>和大一的秋季学期一样，选的是晏姐姐的微积分。风格和模式都和秋季学期类似。虽说坊间传言晏姐姐作业明显多于其他老师，可我大概没什么感觉。</p>
<p>每周两节微积分课是有去上的。虽然不听课，上课就先自己看课件，看完了写作业。值得一提的是，期末考试之前有人在某个数学讨论群里发了一道有关调和函数的场论证明题，当时和舍友讨论了半个小时把那题推广了一下，最后完美压中期末考试附加题前的最后一题…</p>
<p>附加题写了快一个小时还是寄了（</p>
<p>（这时的 c7w 并没有想到，自己被微积分和线性代数强化后，毫无犹豫地决定要辅修数学会在秋季学期给他带来（）的痛苦x</p>
<h4 id="写作与沟通"><a href="#写作与沟通" class="headerlink" title="写作与沟通"></a>写作与沟通</h4><p>大一的秋季学期隔壁寝的茶园大佬选了唯一的英文写沟。很快啊，我们寝的某位工头同志在这个学期决定也是如此。抱着“dalao带带我”的想法咱也跟着冲了英文写沟。发现课上有接近半数是留学生，而我这种英语水平简直是二哈混进了狼群（x</p>
<p>最初几节课因为是英文授课所以只能说很痛苦很痛苦，后来就逐渐习惯了（安详</p>
<p>不过这课确实我认为很有收获，至少让我明白了一篇 paper 所应该有的 architecture，以及各个部分至少应该怎么写。虽说这门课是在研究人文学科，但在之后迁移到理工科的研究上应该也是大同小异的。</p>
<p>最后 3k words 的长文因为留够了时间所以不是很痛苦，虽然说改了三四版吧，不过一次就被 accepted 确实很开心。五分钟的 pre 准备了快一周，终于最终才脱稿（x（还得靠着演讲者备注苟活</p>
<p>总结一下就是：跟着工头选课，工头在课上复习微积分，写 OOP，跟 npy 贴贴，拿 A+；咱费尽全力听讲，能听到 lecturer 讲的 80%，认真读 paper，做综述，背 pre 的稿子，拿 A（x</p>
<h4 id="英汉互译实践与技巧"><a href="#英汉互译实践与技巧" class="headerlink" title="英汉互译实践与技巧"></a>英汉互译实践与技巧</h4><p>作为曾任的某论坛的翻译官，当时选这课还是想好好修炼下自己的翻译水平和英文水平。但是这东西确实不应是一夕之功，更不用说每周只上一个半小时的课，留一份必须要想办法搞好分数的作业了。</p>
<p>期末考试就是限时英译汉和汉译英，总评分数占 50，可以用笔记本电脑，用网络学堂提交。翻着翻着感觉一个一个不认识的词查太慢，用 deepL 发现翻得比我自己还好，遂直接“润色”摆烂。</p>
<h4 id="离散数学-2"><a href="#离散数学-2" class="headerlink" title="离散数学(2)"></a>离散数学(2)</h4><p>如果能重来——我一定再加倍努力学离散——而不是在那死磕微积分——</p>
<p>回过头来想一想，当时离散数学应该是和微积分的学习模式相同，课上先搞课件，搞完课件还有剩下的时间就写作业。作业写完就高枕无忧，束之高阁。这就导致最后期末考试寄掉的惨状（</p>
<p>我知道自己没有去研究算法的天赋，但是如果仅仅是因为没有天赋，就不去做，就不去尝试，就不去领会痛苦背后带来的快乐，我认为这大概也是一种鸵鸟心态，是我应该摒弃掉的想法。如果自己感觉收获丰富的话，即使没有分数的认可（这里没有 cue 任何课程的意思），我认为这也是有收获的，有价值的。毕竟我们是为了学习知识，领会思想，而不是为了去 fit 那些无聊的期末考试。</p>
<h4 id="高等线性代数选讲"><a href="#高等线性代数选讲" class="headerlink" title="高等线性代数选讲"></a>高等线性代数选讲</h4><p>掉了，补选的 lph。基本每周课上到这个时候，DDL 清得差不多了，当周要讲的高代连带讲义和作业都搞完了。应该有大部分时间在打舟游。期中考试全班满分人数巨多。期末考试让默写张量的定义，没背会。估计学的那点东西现在也差不多忘干净了。</p>
<h3 id="2021-夏季学期"><a href="#2021-夏季学期" class="headerlink" title="2021 夏季学期"></a>2021 夏季学期</h3><h4 id="军事技能"><a href="#军事技能" class="headerlink" title="军事技能"></a>军事技能</h4><p>只能说这种管理模式与我生性不和。如果你没有能力将事务组织好，那请不要用无效的感化、伪装或是强制力来实现这一点。对于大多数时间只讲道理的我来说，这些只不过是掩藏能力不足的面具罢了。</p>
<p>倒也趁这个机会重新认识了不少人，包括在我心里的评价值上升的和下降的。</p>
<p>当时可能还以为这是能够增强团体凝聚力的契机（事实上它当时在某种程度上确实做到了这一点），但现在看来这种凝聚力也只是临时的罢了。</p>
<h4 id="毛概-2"><a href="#毛概-2" class="headerlink" title="毛概(2)"></a>毛概(2)</h4><p>实践课，协助班级策划并组织去上海展开实践调研。过程这里就不详述了，但我认为这段是十分珍贵，十分美好的回忆。尤其是刚经历过上述两周的折磨，简直起到了心灵疗伤的作用。</p>
<p>参与了行程制定与后期视频剪辑的宣传工作。</p>
<p>还记得暑假某天被工头勒令剪视频剪到半夜三点，工头第二天去和 npy 约会的事。（当然后半句只是玩笑，不过可以看到大家都为这个实践付出了很多，也收获了很多</p>
<h4 id="暑培"><a href="#暑培" class="headerlink" title="暑培"></a>暑培</h4><p>之所以将暑培作为一门课…是我觉得它本来就应该是一门课。</p>
<p>一方面是软无自那边的，只参加了前一半；另一方面是贵系自己的。</p>
<p><img src="https://s2.loli.net/2022/01/07/vKW6ZDFdSYcNsxR.png" alt="image-20220107120816500"></p>
<center>三系暑培的内容</center>

<p><img src="https://s2.loli.net/2022/01/07/ySp2MFXAWj67mxu.png" alt="image-20220107122326416"></p>
<center>科协暑培的内容</center>

<p>感觉就是，增长了好多见识，我认为这才是有效的教学方式：将你领到门前，告诉你门在哪，里面大概是什么。这门进不进由你，要进的话研究多少也由你自己决定。</p>
<p>一些认真写的作业：</p>
<ul>
<li><a href="https://github.com/c7w/React-demo-0723">React</a></li>
<li><a href="https://github.com/c7w/Nuxt-handout-0724">Nuxt</a> 博客生成器 &amp; 其对应的<a href="https://github.com/c7w/Nuxt-handout-0724-comment">后端</a></li>
<li><a href="https://github.com/c7w/Express-hasura-0730">Express &amp; Hasura</a></li>
<li><a href="https://github.com/c7w/SastSearch">SastSearch (Django)</a></li>
</ul>
<h4 id="程序设计训练"><a href="#程序设计训练" class="headerlink" title="程序设计训练"></a>程序设计训练</h4><p>选的是 Python 课程。他们的 Java 开发是直接和当时大二小学期一起搞 Android 开发。反正都是造轮子，抄轮子，找不到轮子自己再造轮子。</p>
<p>四周，前两周 Qt，后两周 Python。Qt 作业写了四天，Python 作业写了三天。</p>
<p>规定如果不上课的话，要机房上机，随机签到。xs，我课都不去上，还怕机房签到？八节课一共去了两节，机房去了前两天，然后除了工程验收的时候就没去过。</p>
<ul>
<li><a href="https://github.com/c7w/MilitaryChess">MilitaryChess</a></li>
<li><a href="https://github.com/c7w/BiliSearchCST">BiliSearchCST</a></li>
</ul>
<p>神奇的是签到分就没被扣。看起来助教随机签到比我还摸。</p>
<h3 id="2021-秋季学期"><a href="#2021-秋季学期" class="headerlink" title="2021 秋季学期"></a>2021 秋季学期</h3><p><img src="https://s2.loli.net/2022/01/08/Uw4o5sSPElIbz9C.png" alt="image-20220107122112101"></p>
<p>新鲜出炉的课程，这不得好好吐槽吐槽。虽然只有 24 学分，但是感觉到这学期课业压力明显。可能是少了不少水课的缘故。此外，可能是因为还需要考虑到除了课业之外的其他因素，比如社工，比如志愿等等。半期后更是接近以宿舍为家。</p>
<h4 id="大学物理B-2"><a href="#大学物理B-2" class="headerlink" title="大学物理B(2)"></a>大学物理B(2)</h4><p>因为 jsh 选课时间冲突（1-2, 3-1），所以选了 dst。半期后就没去线下上过课。在宿舍用雨课堂听课，一共边听边睡过去过两次。据去上课的舍友说，即使是最后一节课，到课人数也坐不满教室的前三排。</p>
<p>期末考完试也没弄懂什么是线性厄米算符。// dst 呀 dst，你说你拿着给要修《基础物理学》的学生用的课件来上《大学物理B》，这到底合适嘛（x</p>
<p>考试就是纯拟合。拟合作业。拟合课件。课件上的例题不会，问题不大，只要背住，考试的时候照着写就行。（没错这里就是在 cue 你，薛定谔方程）至于什么玻尔理论的定态推导过程，什么定态能量公式与半径公式，考完试就扔到脑后了。</p>
<p>有大学生物理竞赛白给分。到场我只把会做的题都做了，然后跑路。</p>
<h4 id="汇编语言程序设计"><a href="#汇编语言程序设计" class="headerlink" title="汇编语言程序设计"></a>汇编语言程序设计</h4><p>拿我们这一届当课改的小白鼠，据说下一届就完全按照《CSAPP》的授课模式来讲课了。</p>
<p>可以感受到的是，张老师确实是十分热心的老师，只不过会发生上课的时候讲到激动之处，会把麦克风放到桌子上然后坐在第三排都听不见的局面。至于 PPT 全面照抄 CMU 的课件，最初还把英文翻成中文，后来大规模摆烂直接放大段大段的英文，我认为倒是现在这个局面的最优解。毕竟 CMU 的 15-213 也是比较成熟的教学体系了，花费无效劳动力再做一遍也没有啥必要。</p>
<p>实验的话只有 Attack Lab 和一个 MIPS 汇编编程实验，作业一共六次，都是白送分。期末考试应该说考的比较全面吧，如果做题比较慢或者分析不清的话就会大寄特寄。</p>
<blockquote>
<p>考试后的 pyq：</p>
<p>Cheatsheet 是 TLB，</p>
<p>CSAPP 是 Page Table，</p>
<p>考试就是 Page Fault。</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/01/08/W3isBlYAtPUhHyX.png" alt="image-20220108001638080"></p>
<center>《深入理解计算机系统》</center>

<h4 id="概率论与数理统计"><a href="#概率论与数理统计" class="headerlink" title="概率论与数理统计"></a>概率论与数理统计</h4><p>这门课在培养方案中是大二下必修，这学期提前上了，因为感觉没啥必要放到之后再上。上的是 hjx 老师的概统，这位老师在春季学期并不开课，这学期主要开课是面向大二及大三生命学院及相关书院和院系（？）的同学。</p>
<p>感觉单就知识传授这一点来说，这门课还是起到了它应该起的作用。但是就另外一些方面而言，这门课给人一种很无情的感觉。作业占总评 35 分，前期作业自己认真做，有错题就直接给 31 或者 32. 后期自己先想个思路，然后直接抄书上的参考答案，每次都是 34 或者 35. 而且同学们在群里问问题助教和教师根本不管答疑。我在答疑坊小程序里看到了好多问这门课的题目的同学，如果恰在我能力范围之内还是帮他们解决了。</p>
<p>半期后就没去线下上过课，一直线上腾讯会议。第 13 周课的时候下发查询成绩的密码，一张纸写了所有人的学号和密码在教室里传阅，记下密码直接涂掉，感谢舍友去了帮我签到。后来，期末考完试出成绩，有同学在群里说“密码忘记了”，这下助教可是回了消息，直接往群里丢了一个《清华大学本科生学生手册》的 pdf，把“两周不上课自动退学”那一条标了高亮。只能表示很无语。</p>
<p><img src="https://s2.loli.net/2022/01/08/1fex5FbR2N8gz6S.png" alt="image-20220108003007385"></p>
<p>出分之后一堆人请求调分。期末考卷咱倒是连带附加题一起都全写了，但还是不知道哪被扣了 7 分。估计对于他们更是雪上加霜吧。希望他们复议成功。</p>
<p>期末的那个查成绩的可执行 exe 倒是挺有意思，找了半天没找到破解的技巧。</p>
<blockquote>
<p>考试后的笑话：</p>
<p>有一门祖传的概统课学生总成绩的分布满足 $N(\theta, \sigma^2)$。几年前老师进行抽样检测，发现学生平均成绩满足$N(\mu, \delta^2)$。如今期末考完，已经出分，抽取 $n$ 位同学的成绩，均值为 $\bar x$，求 $\theta$ 的贝叶斯估计值。</p>
</blockquote>
<h4 id="信息科学技术概论"><a href="#信息科学技术概论" class="headerlink" title="信息科学技术概论"></a>信息科学技术概论</h4><p>不明白为什么这课计 0 年级要在大二上。明明应该是给大一新生<s>画大饼</s>展望未来的课程。八节课一共去了五节。听各个院系的专家们表面展望未来，实际在介绍自己的实验室在做什么，拿着明显不是课程 PPT，而是某个总结汇报 PPT 讲一个半小时真的没啥意思。即使在现场，大多数时间也在学概统，写概统作业。这学期大礼堂的麦克风实在是太吵了，感觉学长们介绍的“补觉”的课程功能基本不存在了。</p>
<p>大一的时候参加信息学院新生知识竞赛吃了 9 分的 Bonus。小作业基本就是摆烂了，大的综述是认真写的，选题跟现在在做的实验室项目相关。等课程成绩出了之后可以把综述整理整理放到博客上。</p>
<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>这学期投入足够多精力想要学好的课程之一。选课的时候没上邓公的课堂，一直在 yx 的课堂里面摸鱼。</p>
<p><img src="https://s2.loli.net/2022/01/08/9W513bvmtnVHxpr.png" alt="image-20220108214326956"></p>
<p>PA1 五天，LAB1 半天，PA2 三天，LAB2+LAB3一周，PA3 两天。没打过竞赛，每次 PA 出了之后就靠学堂在线把这一个 Part 的所有部分全部学完。上课就在调代码。感谢这学期有回放，能补到一些学堂在线上没有讲过的内容。虽然最后判断题还是大寄特寄，不过没有回放的话肯定寄得更惨。</p>
<p>在答疑坊线上线下总计《数据结构》答疑时长 34h。记忆犹新的是 LAB3 截止前的那几个星期。因为是 LAB 出了就开始写，咱还不敢直接抄代码，咱的作业完全是照着讲义上的图然后自己实现了具有相同功能的东西。不过那一个周五晚上让我彻底背熟了邓公的 AVL 和 Splay 树的代码，包括哪个地方在 g++ 上编出来有运作问题。看着他们大段 Ctrl+C/V 怀疑自己浪费了大量时间在调自己的三棵树上。红黑树没见到多少人抄，可能是太复杂了。</p>
<blockquote>
<p>我家门口有三棵树，一颗是 AVL 树，一颗是 Splay 树，另一颗是 RedBlack 树。</p>
</blockquote>
<p>期末考试是寄了，左式堆的合并上来画了一个右撇子堆上去（画着画着人就傻了），Splay 的删除折叠根本想不到竟然不是题目白给分，是我白给题目分。判断题“这都哪跟哪啊”。上来做判断题看了两个题心态快没了，写了 KMP 和 Hash。然后过了一遍判断题，填了一半多。把 Splay 送了。又过了一遍选择题，填了剩下的一半多。把左式堆又送了。又过了一遍选择题，剩下的全部 random putchar 了，然后搞最后一题去，只求对了个期望。（事实证明这不是个正确的选择，因为后面的几道大题根本就没拿到多少分数，前面判断题还直接因为 <code>putchar(rand() % 2 ? &#39;O&#39; : &#39;X&#39;);</code> 大型白给）</p>
<h4 id="马克思主义原理"><a href="#马克思主义原理" class="headerlink" title="马克思主义原理"></a>马克思主义原理</h4><p>wfm, yyds. 认真听了每一节课，认真做了每一节课的笔记。因为知道老师就是这个风格，所以倒也是抱着硬逼着自己听政治课的想法选了这个课堂。没想到授课内容真的十分有意思。</p>
<p>虽然不指望说真的把马原理学懂了，但是感觉自己还是掌握了一些基本的方法论。比起那种教条地，直接地，带有政治性的说教，政治课如果是这个样子，带有逻辑推理，层层递进的话，可能能更加吸引我吧。</p>
<p>期末论文反卷工作做的十分好，1k~2k 字，多写无益。因为上课听过课所以思路很快就整理好了。</p>
<h4 id="形式语言与自动机"><a href="#形式语言与自动机" class="headerlink" title="形式语言与自动机"></a>形式语言与自动机</h4><p>选的是 ly 的自动机。ly 和 wsy 肯定是要推荐 ly 的，因为 ly 的 PPT 中例子的数目明显地多于 wsy。感觉听上课 PPT Reader 式的讲解没啥意思，半期后就不去上课了。</p>
<p>但是肯定还是要自己看 PPT 和书的。不去上课是因为我自己看的话比 Reader 读得还快就是了（</p>
<h4 id="复变函数引论"><a href="#复变函数引论" class="headerlink" title="复变函数引论"></a>复变函数引论</h4><p>你大伯还是你大伯。讲课比较侧重例子，平时作业咱也有认真写。最后期末考试前画了题库，最后考试就只顾着拟合和完美复刻就行，训练集和测试集都一样了。不过来选大伯的课的人，估计也没几个想认真动脑子学复分析入门的吧（</p>
<p>时不时有点后悔没有选 ygw 的复变。但看舍友被折磨的样子还是庆幸当时自己没选。</p>
<h4 id="二年级男生游泳"><a href="#二年级男生游泳" class="headerlink" title="二年级男生游泳"></a>二年级男生游泳</h4><p>c7w，旱鸭子，身体就是笨（x</p>
<p>在第七周第八周的时候，大部分班级成员都已经会游泳了的时候，c7w 还不会收翻蹬夹。被体育老师特殊关照。</p>
<p>第十周末开始下定决心，因为第十二周就要考了。</p>
<p>连续十四天，每天都去水里泡，十二周还是翻车了，然后继续泡（</p>
<p>那段时间内 B 站首页的视频推荐都是游泳教程（</p>
<p>Anyway 十三周补考过了。虽然最后只有 2min55s，分数只有游下来的基本分数，不过自己也挺满意了。</p>
<h4 id="常微分方程"><a href="#常微分方程" class="headerlink" title="常微分方程"></a>常微分方程</h4><p>4 月，大一的憨憨 c7w 报了数学辅修，很勇啊。</p>
<p>ODE 第一次退课阶段就扔了，倒不是作业不会做了，也不是课听不懂了，只是因为其他方面的压力一股脑的涌过来，感觉没有任何喘息的机会。这时目光果断移向一周布置两次作业，占用每周时间要大于 8h 的 ODE。快刀斩乱麻，退。</p>
<p>估计数辅也就可能这么咕咕咕了。不过 c7w 并不后悔。因为如果将生活视作是时间有限的一个0/1背包问题，那么舍弃一些可能让自己更有成就感和获得感，但是可能耗费极大的东西至少应该不能说是错的吧（</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>还有一些咱认为不属于上述课程，但是也应该算作是课业部分的东西，这里一并整合过来了吧。</p>
<h4 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h4><p>笔记在逐步整理放在博客上。虽然现在还很乱就是了。</p>
<ul>
<li>3B1B 《But what is a neural network?》</li>
<li>2017，李宏毅《机器学习》</li>
<li>2021，李宏毅《机器学习》</li>
<li>tensorflow/pytorch <s>的安装与卸载</s>的基于复制粘贴代码和敲命令行运行的模型训练</li>
</ul>
<h4 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h4><ul>
<li>三篇论文介绍原理<ul>
<li>LSTM</li>
<li>GPT</li>
<li>BERT</li>
</ul>
</li>
</ul>
<p>我自己都不知道算不算是入门了。总之寒假要做相关的挑战杯项目的话还是要好好补一补。</p>
<h4 id="图形学"><a href="#图形学" class="headerlink" title="图形学"></a>图形学</h4><p>参加了科协组织的“计算机图形学”兴趣小组。笔记在逐步完善并放到博客上。</p>
<ul>
<li>光栅化</li>
<li>着色</li>
<li><p>几何</p>
</li>
<li><p>光线追踪（本来应该学完的，奈何因为期末周停摆了，最近一定补上）</p>
</li>
</ul>
<h2 id="社工志愿总结"><a href="#社工志愿总结" class="headerlink" title="社工志愿总结"></a>社工志愿总结</h2><p>c7w 感觉自己是应该<strong>创造自己的价值</strong>的。如果再像高中那样，每天只是吃饭，睡觉，打游戏，刷视频和刷题的话，必定不会给自己带来什么改变。</p>
<h3 id="计算机系学生科协（SAST9）"><a href="#计算机系学生科协（SAST9）" class="headerlink" title="计算机系学生科协（SAST9）"></a>计算机系学生科协（SAST9）</h3><h4 id="Docs-9"><a href="#Docs-9" class="headerlink" title="Docs 9"></a>Docs 9</h4><p>P.S. 为避免将你系科协与别的系的科协混淆，这里我倾向于称呼其为 SAST9。</p>
<p>进了网络部，跟着 holder 搞技能引导文档。现在也算是有点眉目了吧。 <a href="https://docs.net9.org/">https://docs.net9.org/</a></p>
<p>最初负责整理暑培的讲义资料，整理着整理着 Python 部分自己又加了点新东西和学习感悟进去。</p>
<p>期待各位 dalao 能给文档带来更多的贡献，多多 PR（鞠躬</p>
<p><s>（碎碎念：感觉 holder 就没分给我多少锅做</s></p>
<h4 id="CodePlay"><a href="#CodePlay" class="headerlink" title="CodePlay"></a>CodePlay</h4><p>各位还没看到的一个项目。有一个与下个学期的学生节活动配套的网站。是舍友带头接的宣中的外包项目。</p>
<p>最初分工是我写后端，另外三位写前端。我后端写了两天搞完了，给他们写了个完善的接口调用文档。</p>
<p><img src="https://s2.loli.net/2022/01/08/BYQLOEKsFmrAzP4.png" alt="image-20220108230237366"></p>
<p>一周后我来查看前端完成进度，React 的数据流还是有 Bug，建议他们采用 React Redux。最后我还是参与搞了前端代码，把逻辑修的差不多了，把代码架构重构了一份。但是问题是，前端实在是丑。部件的 style 都是 hard-coding，占用的像素值都是固定的。实在是感觉改起来有心无力。“有心”是指感觉到手里这玩意确实丑的不行，“无力”是指自己确实当时也比较忙，没有时间把整个前端的设计推倒重来一次。</p>
<p>最后还是带着愧疚感地交了任务。虽然前端还是丑丑丑，更不用说移动端适配了。</p>
<p>得到的经验教训是，下学期的《软件工程》课程我一定要先给他们写好设计文档再让他们开工。</p>
<h4 id="一二九人物志"><a href="#一二九人物志" class="headerlink" title="一二九人物志"></a>一二九人物志</h4><p><a href="https://stu.cs.tsinghua.edu.cn/exhibition129/game/">https://stu.cs.tsinghua.edu.cn/exhibition129/game/</a></p>
<p>在系里的公众号上推过。本来想在一二九合唱比赛中摸鱼，进了开发组，没想到比赛停了，开发组倒成了宣发主力。</p>
<p><img src="https://s2.loli.net/2022/01/08/RdaY5SGLuU9P34T.png" alt="image-20220108225849152"></p>
<p>这次前端基本是我一个人在写，也做了不少调试工作。唯一感觉这个游戏完成度不太高的一点是，明明后端是可以应对任意多问题的一个框架，文案组那边却只给了 5 个问题。这就好比像是求数列的前 $5$​​​ 项和，却把 $S_n$​​​​ 给求出来了，然后令 $n \leftarrow 5$​​​​ 一样。美工组的同学们十分给力，<s>我直呼画师太太带带我</s>。</p>
<p>后续加了个后端统计访问次数。学了 Highchart 库，感觉用起来还不错。</p>
<p><img src="https://s2.loli.net/2022/01/08/qxVkZO57ry2oUvn.png" alt="image-20220108225927735"></p>
<p>（我的天呐这游戏怎么期末周访问量还在涨，怎么还在有人看.jpeg</p>
<h3 id="计算机系课咨委"><a href="#计算机系课咨委" class="headerlink" title="计算机系课咨委"></a>计算机系课咨委</h3><p>最初是作为志愿者，协助参与课程改革和对系内氛围的看法的相关访谈调研。也算是借此为契机和舍友以及其他好友好好谈了谈对于系内的氛围，以及某些课程的看法。</p>
<p>然后做的工作就越来越正规化，比如调研计组和网原本学期在修学生对这两门课的看法。不过 c7w 的性格可能还是比较内向，在做相关调研工作的时候还是倾向于找自己认识的人，由此可能会造成结果有一定程度的偏差需要矫正吧。</p>
<p>最后成功留任为了这个新晋社工组织的正式委员。希望在未来可以继续为推动系内的氛围变化尽一份力吧…</p>
<h3 id="答疑坊志愿者"><a href="#答疑坊志愿者" class="headerlink" title="答疑坊志愿者"></a>答疑坊志愿者</h3><p>国庆节假期期间面试，被问了微积分和线性代数。问了微积分一道证明，不会。改换了一道积分。暴力做出来了。线性代数，让我用定义证明单射当且仅当存在左逆。靠着脑中被覆盖刷写过无数遍的离散数学知识磕磕绊绊地讲了出来。本来以为面试肯定无了，没想到最后却被录用了。</p>
<p>截止到目前总答疑次数为 192 次，总志愿工时 114 + 3*10 小时。还记得第一个周五去值班的时候，学弟让我把微分中值定理那节课的所有课后习题都讲了一遍。之后还有讲用黎曼积分的定义证明命题，用早已忘了的线性代数实对称阵的性质解决问题…只有到我自己讲东西的时候，才能理解教师们授课时的感受吧。现在的我，即使是和那些被我称为 PPT Reader 的教师们相比，表达能力上肯定也是不如他们的。更不用说他们的主业是要负责他们自己的科研了。</p>
<p>从某次某个人找不到 DSA 答疑者，来找我调代码的时候，我的主营科目好像发生了一些变化。我发现与其让我当场讲数学，可能调代码更适合我。于是在线下值班的时候，我优先开始答疑程设和 DSA 的 PA/LAB. 当然这并不意味着我丧失了在每个周五的晚上被数学题折磨的机会（悲（这个人的大一数学课到底怎么拿的 A 和 A+ 啊，赶紧重修算了</p>
<p>当然，简单的微积分题，线性代数题，乃至于正在学的概统题等等，这些才是线上答疑订单的主要组成部分。比起把一件事物讲出来，可能我更擅长于用纸和笔把一件事物写明白。</p>
<p><img src="https://s2.loli.net/2022/01/08/twmOcCqurd9VeXP.png" alt="image-20220108232546326"></p>
<p>让我真正意识到我这学期的工作十分具有价值的一个瞬间。也是让我坚持要继续做下去的再一次确认。</p>
<h3 id="心理中心自助项目组后台及常务管理"><a href="#心理中心自助项目组后台及常务管理" class="headerlink" title="心理中心自助项目组后台及常务管理"></a>心理中心自助项目组后台及常务管理</h3><p>从 9 月份开始，在心理中心自助项目组进行勤工工作，总工作时长 160 小时。主要负责的是积极心理云训练营和正念冥想训练营。前者主要是负责后台数据统计分析，以及常务的任务发放和流程管理；后者的话因为新成员的加入，活的话轻了不少，但是前期联络成员和中期的数据统计压力还是比较大的。</p>
<p>寒假一定要写个自动化的程序来帮我做事.jpeg </p>
<p>拉舍友入坑肯定要让他帮我干我不想干的活.jpeg</p>
<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><h3 id="关于性格与心态"><a href="#关于性格与心态" class="headerlink" title="关于性格与心态"></a>关于性格与心态</h3><p>希望自己能够，不说变得外向，至少能够变得开朗一点。要实现起来还是无比地困难呐。</p>
<p>奇怪的一点是，感觉自己在人前的表现力会随着和人的熟识程度成 U 型曲线。如果是陌生人或是已经打成一片的人来说，可能咱并不会感到十分惊恐。可是对于熟识程度适中的人，总是不知道该如何面对才好。</p>
<p>至少在网络上不再是个社恐人了。希望现实中早日也是如此吧…至少请不要在和别人正常交流的过程中感到无力感了吧。</p>
<p>// 这么看来一年变化还是很大的嘛，明明一年前还把自己比作孤岛呢</p>
<p>至于心态，应该是变得敢于去尝试新事物了。面对困难不会束手等死，而可能会想尽自己的一切办法去克服。我觉得这可能是很难能可贵的一点吧。</p>
<h3 id="关于-Minecraft"><a href="#关于-Minecraft" class="headerlink" title="关于 Minecraft"></a>关于 Minecraft</h3><p>我想热爱是不会褪去的，它会以另一种方式继续延续下去。</p>
<div style="display: flex; justify-content: center; align-items: center">    
<iframe src="//player.bilibili.com/player.html?aid=804019066&bvid=BV1sy4y1K72L&cid=367317531&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 600px; height: 400px"> </iframe>
</div>

<p>社团那边不管是线上还是线下活动都一直在摸，好像这一年就没有几次打开过这个游戏呢（叹气</p>
<p>关于 MCBBS，八月乙烯被锤，一气之下退了翻译&amp;新闻群。也许不回头才是正确的选择吧。但我仍然珍惜通过 MCBBS 认识的好友们，倒不如说，感谢 MCBBS 的存在，能够在初中和高中的时候陪我走过一段精神上十分艰难的时期吧。</p>
<p>对于泥潭现在的氛围，我只能说，（精力上）穷者独善其身。泥潭现在的氛围，在某种程度上何尝不是社会的一个缩影。这可能也仅仅是我这个悲观的现实主义者的看法。</p>
<h3 id="关于生活的-BGM"><a href="#关于生活的-BGM" class="headerlink" title="关于生活的 BGM"></a>关于生活的 BGM</h3><p>冬天的时候，听着《<a href="https://music.163.com/song?id=1404798043&amp;userid=304573076">Hello &amp; Bye, Days</a>》度过了一个寒假。暖春回归，听着《<a href="https://music.163.com/song?id=458507422&amp;userid=304573076">春待ちクローバー</a>》(Harumachi Clover)任眼前的四叶草生长，即便知道春天与四叶草终将随风而去。夏天的时候，《<a href="https://music.163.com/song?id=1835620512&amp;userid=304573076">Sing My Pleasure</a>》似乎成为了春季学期后半期和暑假的主旋律。秋天，某部番的 ED《<a href="https://music.163.com/song?id=1423038384&amp;userid=304573076">夜空</a>》是那么的令人徜徉在幻想之中，但是比起在紫操上看繁星点点，也许阴云才更适合我吧。</p>
<h3 id="关于未来"><a href="#关于未来" class="headerlink" title="关于未来"></a>关于未来</h3><p>首先还是希望自己能活过接下来的一年（卑微，希望身体状态不要出啥问题…连着几周没有晚上两点前睡过觉了，总之趁寒假初的几天先好好睡会儿吧。然后是锻炼…但是天好冷，flag 还没立估计就倒了（</p>
<p>然后，希望自己能组织好自己的生活，平衡好自己的生活。</p>
<blockquote>
<p><em>节选自《写在 0x12 的最后一晚》</em></p>
<p>我不再否定我自己的过去，因为恰恰是过去的我塑造了我的现在；</p>
<p>我会努力地在我的生活中创造出一些影响，以让我自己感受到我的价值；</p>
<p>我会努力地控制自己的生活，勇敢地去尝试更多未知的事物，虽然大概率可能失败；</p>
<p>我会尽量不让自己陷入生产队的阿米娅的境地，留出足够的时间给自己，给周围的人。</p>
<p>Hello, 0x13.</p>
<p align="right">c7w</p>
<p align="right">2021-11-17</p>



</blockquote>
<center><p style="font-weight: bold">朝着理想中的自己，加油。</p></center>

<p>Last updated by c7w, 2022-1-9 18:29:50. Revised.</p>
]]></content>
      <categories>
        <category>日志</category>
        <category>日志/总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取《雨课堂》慕课字幕 Tsinghua MOOC Caption Crawler</title>
    <url>/yuketang-caption-crawler/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/30/nkI5B9DcPQzX3Us.png" alt="image-20220130000139599"></p>
<p>GitHub Repo: <a href="https://github.com/c7w/TsinghuaMoocCaptionCrawler">https://github.com/c7w/TsinghuaMoocCaptionCrawler</a></p>
<p>Blog: <a href="https://c7w.tech/yuketang-caption-crawler/">https://c7w.tech/yuketang-caption-crawler/</a></p>
<a id="more"></a>
<h2 id="爬取过程"><a href="#爬取过程" class="headerlink" title="爬取过程"></a>爬取过程</h2><h3 id="乱抓"><a href="#乱抓" class="headerlink" title="乱抓"></a>乱抓</h3><ul>
<li><strong>利用 Break on change 查看脚本运行状况</strong></li>
</ul>
<p>首先自然是取字幕所在的那个 xt-caption 元素，然后打上 Break on change.</p>
<blockquote>
<p>在 Javascript 调试中，我们经常会使用到断点调试。</p>
<p>其实，在 DOM 结构的调试中，我们也可以使用断点方法，这就是 DOM Breakpoint（DOM 断点）。</p>
<p>具体的使用方法：</p>
<p>在 Chrome 浏览器中，打开开发者工具，先选中一个页面元素，然后点击鼠标右键，依次点击菜单中的 “Break on …” —— 勾选 “Attributes modifications”。</p>
<p>刷新页面，当该元素的属性发生变化时，就会暂停脚本的执行，并且定位到改变发生的地方。</p>
<p>除了可以监视 DOM 元素本身的属性变化，Chrome 还可以监视其子元素的变化，以及何时元素被删除。</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/01/29/xYiujWzwTfM7mIv.png" alt="image-20220129222222643"></p>
<ul>
<li><strong>查看调用栈</strong></li>
</ul>
<p>然后是当 Trigger 了字幕更改 Event 之后，逐个检查这里的调用栈。</p>
<p><img src="https://s2.loli.net/2022/01/27/e9qdIOvc2butLP3.png" alt="image-20220127155350265"></p>
<p>逐级查看后，这里（页面加载 caption 属性的时候）看起来像是在发可疑的请求，然后找到了一个地址：</p>
<p><img src="https://s2.loli.net/2022/01/27/NoOutDYEpwHPzy3.png" alt="image-20220127155631381"></p>
<p>然后在 HTML 里面全文检索竟然找到了一样的地址。于是我们就得到了我们的第一个关键词 <code>subtitle_parse</code>。</p>
<p><img src="https://s2.loli.net/2022/01/27/HdU58pV4NkJyASC.png" alt="image-20220127155810865"></p>
<ul>
<li><strong>查看字幕源数据</strong></li>
</ul>
<p>打开这个网页，发现里面就是纯字母数据。</p>
<p><img src="https://s2.loli.net/2022/01/27/uGwhPFHA176dXKy.png" alt="image-20220127160055541"></p>
<p>即使是开无痕浏览也可以打开，说明不记录 Cookies。</p>
<p><img src="https://s2.loli.net/2022/01/29/dJBibYkN9enuEtx.png" alt="image-20220129222439327"></p>
<p>然后本来想直接用 Python 写批量抓取脚本，结果写了一段发现这个字幕元素竟然也是晚加载：</p>
<ul>
<li><code>Crawler.py</code></li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup

<span class="token keyword">def</span> <span class="token function">getCookies</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span>
    result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> entry <span class="token keyword">in</span> data<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token string">'='</span> <span class="token keyword">in</span> entry<span class="token punctuation">:</span>
            entryGroup <span class="token operator">=</span> entry<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span>
            result<span class="token punctuation">[</span>entryGroup<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> entryGroup<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> result

<span class="token keyword">def</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>\
              <span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">fetch_single_video</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string">'https://tsinghua.yuketang.cn/pro/lms/8NpUsbr6GZH/3029907/video/2224317'</span>
    cookies <span class="token operator">=</span> getCookies<span class="token punctuation">(</span><span class="token string">'./cookies'</span><span class="token punctuation">)</span>
    
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span>
                            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                            cookies<span class="token operator">=</span>getCookies<span class="token punctuation">(</span><span class="token string">"./cookies"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>

    html <span class="token operator">=</span> response<span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./a.txt'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    fetch_single_video<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre>
<p>其中 <code>./cookies</code> 里面放的是使用 <code>EditThisCookie</code> extension 导出的 txt 格式的 Cookies.</p>
<p><img src="https://s2.loli.net/2022/01/29/8CIt4g7kFJLoxXp.png" alt="image-20220129222822889"></p>
<p>发现这就是个 Vue 搭的前端网站，而且是晚加载的模式：</p>
<pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width,initial-scale=1,user-scalable=no<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-cache<span class="token punctuation">"</span></span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Pragma<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-transform <span class="token punctuation">"</span></span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Cache-Control<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-siteapp<span class="token punctuation">"</span></span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Cache-Control<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-cache<span class="token punctuation">"</span></span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Cache-Control<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Expires<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>雨课堂, 清华大学, 智慧教学, 翻转课堂, 混合式教学, 教学工具, 教学软件<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>雨课堂是清华大学和学堂在线共同推出的新型智慧教学解决方案，是教育部在线教育研究中心的最新研究成果，致力于快捷免费的为所有教学过程提供数据化、智能化的信息支持。<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Description<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//proxt-cdn.xuetangx.com<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//static-cdn.xuetangx.com<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//qn-next.xuetangx.com<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//s.xuetangx.com<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//storagecdn.xuetangx.com<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/images/favicon.ico<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>J_logo_ico<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//at.alicdn.com/t/font_2914297_aiu6672k7jm.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//at.alicdn.com/t/font_2914297_aiu6672k7jm.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//at.alicdn.com/t/font_956123_fw8xrxx7a4u.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//at.alicdn.com/t/font_956123_fw8xrxx7a4u.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defer<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://code.bdstatic.com/npm/@baiducloud/sdk@1.0.0-rc.19/dist/baidubce-sdk.bundle.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://storagecdn.xuetangx.com/public_assets/xuetangx/aliyun-upload-sdk/lib/aliyun-oss-sdk-5.3.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://storagecdn.xuetangx.com/public_assets/xuetangx/aliyun-upload-sdk/aliyun-upload-sdk-1.5.0.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ssl.captcha.qq.com/TCaptcha.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://web-stat.jiguang.cn/web-janalytics/scripts/janalytics-web.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
   <span class="token selector">.ie-hint</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span>100000<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>40px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span>40px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>16px<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#fff8bf<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>#4a4a4a<span class="token punctuation">&#125;</span><span class="token selector">.ie-hint img</span><span class="token punctuation">&#123;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">&#125;</span><span class="token selector">.ie-hint a</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>#639ef4<span class="token punctuation">&#125;</span><span class="token selector">.ie-hint .icon</span><span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span>19px<span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">&#125;</span><span class="token selector">#close-ie-hint</span><span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>20px<span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> print</span><span class="token punctuation">&#123;</span><span class="token selector">.no-print</span><span class="token punctuation">&#123;</span><span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/styles.929a58a998b9713fd859.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/142.c165ba72220097b7a058.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/572.05955aff5704fb65b9f1.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1281.eb0a92d7006955f1e691.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1269.ecf512d0ea931c4302bf.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1255.a02392a53202a02f00cd.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1300.4c085e415259addde382.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1291.3fe43df5becd9c98e83b.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1301.d0128c8af9fd07b09a38.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1302.d0128c8af9fd07b09a38.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie-hint<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie-hint<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://qn-sfe.yuketang.cn/o_1ecmgnntbah3150231eevqmpja.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
   当前浏览器可能无法正常使用
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>school-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
   ， 推荐使用
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xiazai.sogou.com/detail/34/8/6262355089742005676.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chrome<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    chrome浏览器、
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.firefox.com.cn/download/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>火狐<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    火狐浏览器
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
   或
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://browser.qq.com/?adtag=SEM1<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>QQ浏览器<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    QQ浏览器
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
   。
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close-ie-hint<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://qn-sfe.yuketang.cn/o_1ecmgnntcn761v2p1vcn1i851jqcb.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/x-mathjax-config<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
   window<span class="token punctuation">.</span>MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
				showProcessingMessages<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//关闭js加载过程信息</span>
				messageStyle<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span> <span class="token comment">//不显示信息</span>
				jax<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"input/TeX"</span><span class="token punctuation">,</span> <span class="token string">"output/HTML-CSS"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
				showMathMenu<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//关闭右击菜单显示</span>
				tex2jax<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
				inlineMath<span class="token operator">:</span> <span class="token punctuation">[</span>
					<span class="token punctuation">[</span><span class="token string">'$'</span><span class="token punctuation">,</span><span class="token string">'$'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
					<span class="token punctuation">[</span><span class="token string">"\\("</span><span class="token punctuation">,</span><span class="token string">"\\)"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
					<span class="token punctuation">[</span><span class="token string">'[mathjaxinline]'</span><span class="token punctuation">,</span><span class="token string">'[/mathjaxinline]'</span><span class="token punctuation">]</span>
				<span class="token punctuation">]</span><span class="token punctuation">,</span>
				displayMath<span class="token operator">:</span> <span class="token punctuation">[</span>
					<span class="token punctuation">[</span><span class="token string">'$$'</span><span class="token punctuation">,</span><span class="token string">'$$'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
					<span class="token punctuation">[</span><span class="token string">"\\["</span><span class="token punctuation">,</span><span class="token string">"\\]"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
					<span class="token punctuation">[</span><span class="token string">'[mathjax]'</span><span class="token punctuation">,</span><span class="token string">'[/mathjax]'</span><span class="token punctuation">]</span>
				<span class="token punctuation">]</span><span class="token punctuation">,</span>
				processEscapes<span class="token operator">:</span> <span class="token boolean">true</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
				<span class="token string">"HTML-CSS"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> availableFonts<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"TeX"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://s.xuetangx.com/resource/mathjax/MathJax.js?config=TeX-MML-AM_HTMLorMML-full<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
   <span class="token keyword">var</span> _mtac<span class="token operator">=</span><span class="token punctuation">&#123;</span>performanceMonitor<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>senseQuery<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> t<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">"https://pingjs.qq.com/h5/stats.js?v2.0.4"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"MTAH5"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"sid"</span><span class="token punctuation">,</span><span class="token string">"500535776"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"cid"</span><span class="token punctuation">,</span><span class="token string">"500613279"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> e<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
   window<span class="token punctuation">.</span><span class="token constant">UEDITOR_HOME_URL</span><span class="token operator">=</span><span class="token string">"/vue_images/js/ueditor/"</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
   <span class="token keyword">var</span> ieHint<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ie-hint"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>closeIeHintBtn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"close-ie-hint"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>closeIeHintBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ieHint<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> ua<span class="token operator">=</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">null</span><span class="token operator">==</span>ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">msie</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">null</span><span class="token operator">==</span>ua<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">trident</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>ieHint<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> el<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"school-name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>el<span class="token punctuation">.</span>innerText<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">gdufemooc\.cn|gc\.xuetangonline\.com</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"广财慕课"</span><span class="token operator">:</span><span class="token string">"雨课堂"</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
   window<span class="token punctuation">.</span>JAnalyticsInterface<span class="token operator">&amp;&amp;</span>window<span class="token punctuation">.</span>JAnalyticsInterface<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>appkey<span class="token operator">:</span><span class="token string">"d651262356d93f6497b466bc"</span><span class="token punctuation">,</span>debugMode<span class="token operator">:</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>channel<span class="token operator">:</span><span class="token string">"web"</span><span class="token punctuation">,</span>loc<span class="token operator">:</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>singlePage<span class="token operator">:</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/manifest_c74775d18d54217265e2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/231_38a88de77e34999627ab.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/569_bc3c767e5675a607dbbd.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1282_f9bb16a2941af9a9732e.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/133_78b4a2f4ec1e774e0cd7.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1236_3946732fbcdc70b913ab.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/99_a1791a23a69e2309f9f1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/46_492686a3fb63a70f8537.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/55_29d1ee187d2ac1bf8576.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/63_7e9066f450ffae3dbf1f.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1256_7a55b42b33475074b3d3.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/119_75b24be79cbc0f38e9b5.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/117_59618d0ce41a577cd0a2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/232_5b17f99d4219ca1a5b59.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/339_18c69c22659d338f44af.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/100_29dabc580c2213c93d8c.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/56_ca3e56863eb65145d5ef.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/47_1a6f41d3f0d03e528606.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1264_4f1e99a3b8cdc6a85310.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/336_48448e96f180a901248e.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/101_317e4792ce1ff0603658.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/60_1f97ad5d40dccb242d3c.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/59_0b81e0afe51de42239f4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/48_f696c92ebfa6dbe3a1ac.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/50_9da5f4380a1dd62a4349.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/70_c7d3361bfc7496f5d803.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1265_046603f30d395e0e1099.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/230_43fd774de4f928a81aa1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1283_cdf10be9a5df97cb7d46.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/338_f4f2d394eb1bd2e4a76e.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/116_b722a9793903aa54c4a3.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1266_b1f6eab4866937cd2334.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/335_2f5c77a15099004dd76d.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/132_67afce490fea2dc1441a.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1274_53106a71aa695ff1e11d.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/337_5f023640d90421312cf8.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1258_0513b6935105b9242092.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/187_1d921a816015be88fc98.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/140_1429b54afac3f6055d28.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/189_312d72f77e83bd9f27d2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/236_dd7f542d4cd9f02617d4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1220_07a737b91c2b22ee2d3f.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/137_274aba69f9f08e27032a.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/118_03f55e7d8630c32b7003.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/139_32cd669c513bcc12f0d8.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1239_00c23825dfd87a3592d2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/135_f61430536202b9abeb3f.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/138_e9b0ca84dbbf77e36067.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/141_b23872740ac87e16f8a0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/188_f2c1d703e3c638123d7c.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/136_62c77544e64cd5ab11f5.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1296_9a4770963b01517ef057.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/121_8311183faa6fc009705d.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/134_592e67bb4735225d8109.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/styles_58dd88566a7c28f3ead9.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1235_8188f874883aec589e8d.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1288_777c8223f036e812be31.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/571_10162dcb435848dccc4a.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/234_46302fa6da910e733695.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1289_24f0da49aa9672e5f66b.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/235_9c17d4274dbb108f05a0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/142_5298840037f69140cb58.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1290_37149584899447655329.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/574_83911d6a3fc0bac17622.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/120_4d32aa2ec1486063ffd5.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1237_e7ef338fbf8b5abae028.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1254_e17ce52fb300bba23ecb.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/572_6009ef3a4252cf76550d.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1281_ac1f61a1ceac82ef5c3a.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1269_1f2a8d4c2f0d32f8015c.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1255_64cf7487e3b6ed9cf088.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1300_7963eccd7914586cfe07.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1291_0619decfb4f04b856012.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1301_d74f386080e2a40bf9ed.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1302_a6924788437f7f6a7f03.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://proxt-cdn.xuetangx.com/fe-proxtassets/1287_07a707cc838c899e0e6a.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<h3 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h3><p>于是…想法就是模拟 JS 页面的加载…</p>
<p>仍然心存侥幸，想着不用油猴去写页面加载后运行的抓取脚本，或是不用 <code>PhantomJS</code> 写 JS 模拟（这两者都不够优雅），于是打开 DevTools 的 Network 页面模拟整个页面的加载过程：</p>
<p><img src="https://s2.loli.net/2022/01/29/4OnxEIr7pWPLtUV.png" alt="image-20220129225952673"></p>
<p>我们想要搜索的信息是这个视频的字幕 ID，也就是 <code>https://tsinghua.yuketang.cn/mooc-api/v1/lms/service/subtitle_parse/?c_d=07AA3C78762F81A09C33DC5901307461&amp;lg=0</code> 中的 <code>07AA3C78762F81A09C33DC5901307461</code>。对所有请求全文检索：</p>
<p><img src="https://s2.loli.net/2022/01/29/c8YTzbfE2x9RjNr.png" alt="image-20220129230159693"></p>
<p>首先，因为我们最初并不知道这个 ID 是多少，所以以这个 ID 为目标 URL 的直接略去，因为这个 ID 肯定是以某种方式传到前端的。所以目光就放在了第三个和第四个两个请求上面，其中第三个请求的 URL 似乎很合适：</p>
<p><code>[GET] https://tsinghua.yuketang.cn/mooc-api/v1/lms/learn/leaf_info/3029907/2224317/?sign=8NpUsbr6GZH&amp;term=latest&amp;uv_id=2598</code></p>
<p>对照一下：</p>
<ul>
<li>3029907 是课程 ID</li>
<li>2224317 是这个视频的 ID</li>
<li>8NpUsbr6GZH 似乎是我这个学生的 ID（因为别的课程界面里面也带有这个 ID）</li>
<li>2598 应该是 univ_ID，学校 ID</li>
</ul>
<p>而且是 GET 请求，除了 Cookies 之外不需要别的 POST 参数。</p>
<p>尝试访问：</p>
<p><img src="https://s2.loli.net/2022/01/29/qrRzEHdeusWP72N.png" alt="image-20220129230600173"></p>
<p><code>XTBZ</code> 是个啥？难道 GET 请求还需要验证？回到发请求那里认真看了下 headers：</p>
<p><img src="https://s2.loli.net/2022/01/29/2Ux9jtNVL13raCT.png" alt="image-20220129230701817"></p>
<p>好吧，确实有个 <code>xtbz</code> 字段，于是照着填上去…</p>
<pre class="language-python" data-language="python"><code class="language-python">response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://tsinghua.yuketang.cn/mooc-api/v1/lms/learn/leaf_info/3029907/2224317/?sign=8NpUsbr6GZH&amp;term=latest&amp;uv_id=2598"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span>\
                            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36'</span><span class="token punctuation">,</span>
                            <span class="token string">'xtbz'</span><span class="token punctuation">:</span> <span class="token string">'cloud'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                            cookies <span class="token operator">=</span> getCookies<span class="token punctuation">(</span><span class="token string">"./cookies"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>结果：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>'msg'<span class="token operator">:</span> ''<span class="token punctuation">,</span> 'data'<span class="token operator">:</span> <span class="token punctuation">&#123;</span>'sku_id'<span class="token operator">:</span> <span class="token number">813523</span><span class="token punctuation">,</span> 'is_assessed'<span class="token operator">:</span> False<span class="token punctuation">,</span> 'locked_reason'<span class="token operator">:</span> None<span class="token punctuation">,</span> 'course_id'<span class="token operator">:</span> <span class="token number">1360275</span><span class="token punctuation">,</span> 'classroom_short_name'<span class="token operator">:</span> None<span class="token punctuation">,</span> 'university_id'<span class="token operator">:</span> '<span class="token number">2598</span>'<span class="token punctuation">,</span> 'score_deadline'<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> 'current_price'<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> 'id'<span class="token operator">:</span> <span class="token number">2224317</span><span class="token punctuation">,</span> 'user_id'<span class="token operator">:</span> <span class="token number">20970575</span><span class="token punctuation">,</span> 'content_info'<span class="token operator">:</span> <span class="token punctuation">&#123;</span>'status'<span class="token operator">:</span> 'post'<span class="token punctuation">,</span> 'video_user_play'<span class="token operator">:</span> None<span class="token punctuation">,</span> 'expand_discuss'<span class="token operator">:</span> False<span class="token punctuation">,</span> 'score_evaluation'<span class="token operator">:</span> <span class="token punctuation">&#123;</span>'score_proportion'<span class="token operator">:</span> <span class="token punctuation">&#123;</span>'proportion'<span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 'score'<span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> 'id'<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> 'name'<span class="token operator">:</span> '视 
频单元考核'<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 'download'<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 'is_score'<span class="token operator">:</span> True<span class="token punctuation">,</span> 'is_discuss'<span class="token operator">:</span> True<span class="token punctuation">,</span> 'remark'<span class="token operator">:</span> <span class="token punctuation">&#123;</span>'remark'<span class="token operator">:</span> ''<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 'cover_desc'<span class="token operator">:</span> ''<span class="token punctuation">,</span> 'cover_thumbnail'<span class="token operator">:</span> 'https<span class="token operator">:</span><span class="token comment">//qn-next.xuetangx.com/15659303522988.jpg?imageView2/0/h/500', 'media': </span>
<span class="token punctuation">&#123;</span>'lecturer'<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> 'ccid'<span class="token operator">:</span> '07AA3C78762F81A09C33DC5901307461'<span class="token punctuation">,</span> 'start_time'<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> 'cover'<span class="token operator">:</span> 'https<span class="token operator">:</span><span class="token comment">//qn-next.xuetangx.com/15659303522988.jpg', 'ccurl': '07AA3C78762F81A09C33DC5901307461', 'duration': 550, 'end_time': 0, 'live_palyback_url': '', 'live_url': '', 'type': 'video', 'teacher': []&#125;, 'cover': 'https://qn-next.xuetangx.com/15659303522988.jpg', 'leaf_type_id': None, 'context': '&lt;!DOCTYPE html>&lt;html>&lt;head>&lt;/head>&lt;body>\n&lt;/body>&lt;/html>'&#125;, 'classroom_id': '3029907', 'leaf_type': 0, 'has_classend': True, 'upgrade_sku_status': None, 'price': 0, 'user_role': </span>
<span class="token number">3</span><span class="token punctuation">,</span> 'class_start_time'<span class="token operator">:</span> <span class="token number">1613959200000</span><span class="token punctuation">,</span> 'upgrade_sku_id'<span class="token operator">:</span> None<span class="token punctuation">,</span> 'be_in_force'<span class="token operator">:</span> False<span class="token punctuation">,</span> 'teacher'<span class="token operator">:</span> <span class="token punctuation">&#123;</span>'org_name'<span class="token operator">:</span> '清华大学'<span class="token punctuation">,</span> 'picture'<span class="token operator">:</span> 'https<span class="token operator">:</span><span class="token comment">//qn-next.xuetangx.com/15659303632348.jpg', 'name': '【教师名字】', 'department_name': '【教师院系】', 'intro': '【教师介绍】', 'job_title': '副教授'&#125;, 'is_score': True, 'is_deleted': False, 'name': '开篇的话', 'is_locked': False, 'class_end_time': 1623596400000&#125;, 'success': True&#125;</span></code></pre>
<p>好吧，看到 ccid 我们终于是拿到想要的东西了。这个 Response 里面打码了一些跟课程有关的内容（虽然已经泄露的差不多了吧x）</p>
<p>好的，现在来整理一下思路，截至目前我们已经获得了从一个视频在网页上外显的 ID 转换成其 CCID 的方法，也就是 <code>[GET] https://tsinghua.yuketang.cn/mooc-api/v1/lms/learn/leaf_info/[课程号]/[视频外显ID]/?sign=[学生ID]&amp;term=latest&amp;uv_id=2598</code>，然后<code>CCID = response.json()[&#39;data&#39;][&#39;content_info&#39;][&#39;media&#39;][&#39;ccid&#39;]</code>，接着我们就能通过 <code>[GET] https://tsinghua.yuketang.cn/mooc-api/v1/lms/service/subtitle_parse/?c_d=[CCID]&amp;lg=0</code> 来获取对应视频字幕。</p>
<p>下面我们还想优化，就是怎么把一个课程所有的 <code>[视频外显ID]</code> 全部拿出来，事实上这也是可以做到的，因为我们再仔细检查一下发送的这一堆请求，找到了：</p>
<p><code>[GET] https://tsinghua.yuketang.cn/mooc-api/v1/lms/learn/course/chapter?cid=3029907&amp;sign=8NpUsbr6GZH&amp;term=latest&amp;uv_id=2598</code>，请求了整个课程的信息，我们对其返回的 JSON 解码得到：</p>
<p><img src="https://s2.loli.net/2022/01/29/KftCcXuOY73v5NR.png" alt="image-20220129232309709"></p>
<p>从这个 Response 里面我们能拿到所有视频的外显 ID。</p>
<h3 id="调-API"><a href="#调-API" class="headerlink" title="调 API"></a>调 API</h3><ul>
<li><code>[GET] https://tsinghua.yuketang.cn/mooc-api/v1/lms/learn/course/chapter?cid=[课程ID]&amp;sign=[学生ID]&amp;term=latest&amp;uv_id=2598</code> -&gt; 视频外显 ID 的列表</li>
<li><code>[GET] https://tsinghua.yuketang.cn/mooc-api/v1/lms/learn/leaf_info/[课程ID]/[视频外显ID]/?sign=[学生ID]&amp;term=latest&amp;uv_id=2598</code> -&gt; 视频 CCID</li>
<li><code>[GET] https://tsinghua.yuketang.cn/mooc-api/v1/lms/service/subtitle_parse/?c_d=[CCID]&amp;lg=0</code> -&gt; 视频字幕</li>
</ul>
<p>整理成代码如下：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_course_info</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span> sid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    video_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    
    url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''https://tsinghua.yuketang.cn/mooc-api/v1/lms/learn/course/chapter?cid=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cid<span class="token punctuation">&#125;</span></span><span class="token string">&amp;sign=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sid<span class="token punctuation">&#125;</span></span><span class="token string">&amp;term=latest&amp;uv_id=2598'''</span></span>
    cookies <span class="token operator">=</span> getCookies<span class="token punctuation">(</span><span class="token string">'./cookies'</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span>\
                            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36'</span><span class="token punctuation">,</span>
                            <span class="token string">'xtbz'</span><span class="token punctuation">:</span> <span class="token string">'cloud'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                            cookies <span class="token operator">=</span> getCookies<span class="token punctuation">(</span><span class="token string">"./cookies"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    data <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    chapter_list <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'course_chapter'</span><span class="token punctuation">]</span>
    
    <span class="token keyword">for</span> chapter <span class="token keyword">in</span> chapter_list<span class="token punctuation">:</span>
        leaves <span class="token operator">=</span> chapter<span class="token punctuation">[</span><span class="token string">'section_leaf_list'</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> leaf <span class="token keyword">in</span> leaves<span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                video_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>leaf<span class="token punctuation">[</span><span class="token string">'leaf_list'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">except</span><span class="token punctuation">:</span>
                <span class="token keyword">pass</span>
    
    <span class="token keyword">return</span> video_list

<span class="token keyword">def</span> <span class="token function">get_caption</span><span class="token punctuation">(</span>cid<span class="token punctuation">,</span> sid<span class="token punctuation">,</span> vid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''https://tsinghua.yuketang.cn/mooc-api/v1/lms/learn/leaf_info/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cid<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>vid<span class="token punctuation">&#125;</span></span><span class="token string">/?sign=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sid<span class="token punctuation">&#125;</span></span><span class="token string">&amp;term=latest&amp;uv_id=2598'''</span></span>
    cookies <span class="token operator">=</span> getCookies<span class="token punctuation">(</span><span class="token string">'./cookies'</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span>\
                            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36'</span><span class="token punctuation">,</span>
                            <span class="token string">'xtbz'</span><span class="token punctuation">:</span> <span class="token string">'cloud'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                            cookies <span class="token operator">=</span> getCookies<span class="token punctuation">(</span><span class="token string">"./cookies"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    data <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    video_name <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>
    
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        ccid <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'content_info'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'media'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ccid'</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> ccid<span class="token punctuation">:</span> <span class="token keyword">raise</span> BaseException<span class="token punctuation">(</span><span class="token string">"HTML Introduction. No video."</span><span class="token punctuation">)</span>
        
        url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''https://tsinghua.yuketang.cn/mooc-api/v1/lms/service/subtitle_parse/?c_d=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ccid<span class="token punctuation">&#125;</span></span><span class="token string">&amp;lg=0'''</span></span>
        cookies <span class="token operator">=</span> getCookies<span class="token punctuation">(</span><span class="token string">'./cookies'</span><span class="token punctuation">)</span>
        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span>\
                                <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36'</span><span class="token punctuation">,</span>
                                <span class="token string">'xtbz'</span><span class="token punctuation">:</span> <span class="token string">'cloud'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                                cookies <span class="token operator">=</span> getCookies<span class="token punctuation">(</span><span class="token string">"./cookies"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        
        data <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
        data<span class="token punctuation">[</span><span class="token string">'start'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token string">'start'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        caption_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'start'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        
        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"./output/[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>vid<span class="token punctuation">&#125;</span></span><span class="token string">] </span><span class="token interpolation"><span class="token punctuation">&#123;</span>video_name<span class="token punctuation">&#125;</span></span><span class="token string">.txt"</span></span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
        
        <span class="token keyword">for</span> caption <span class="token keyword">in</span> caption_list<span class="token punctuation">:</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"%-10d  %s\n"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>caption<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> caption<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        
        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span></code></pre>
<p>效果如下：</p>
<p><img src="https://s2.loli.net/2022/01/29/klDeE37nTJ6QPgb.png" alt="image-20220129235837541"></p>
<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>清华雨课堂用来放 MOOC 的这个平台和学堂在线那个平台前端是一样的。</p>
<p>这简直就和 net9.org 和 stu.cs.tsinghua.edu.cn 的后台一样，写一份账户管理工具，一份自己用，另一份拿出去用。</p>
<p>这篇博文仅供练习使用，不保证能复现，更不会提供爬取后的慕课字幕数据。以上。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/Python应用</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>《动手学深度学习》 Pytorch ver. 阅读摘录 Part C</title>
    <url>/dive-into-dl-pytorch-C/</url>
    <content><![CDATA[<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/cover.png" alt=""></p>
<ul>
<li>《动手学深度学习》原书地址：<a href="https://github.com/d2l-ai/d2l-zh">https://github.com/d2l-ai/d2l-zh</a></li>
<li>《动手学深度学习》(Pytorch ver.)：<a href="https://tangshusen.me/Dive-into-DL-PyTorch/#/">https://tangshusen.me/Dive-into-DL-PyTorch/#/</a></li>
</ul>
<p>知识架构：</p>
<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/book-org.svg" alt="封面"></p>
<p>本文的主要作用是在阅读过程中做一些摘录。对于「机器学习」领域， c7w 虽然曾尝试从各个领域入门，也尝试训过一些模型，但是还是缺少系统性、结构性的学习。希望阅读本书能带来更多的收获吧。</p>
<p>与前面的一些笔记相比，本文更加侧重于「实践」。也就是说切实地提升自己的代码能力。</p>
<p>Part C 包含：</p>
<ul>
<li>§ 7 优化算法<ul>
<li>优化与深度学习，优化存在的挑战</li>
<li>梯度下降（略）</li>
<li>Momentum, Adagrad</li>
<li>RMSProp, AdaDelta</li>
<li>Adam</li>
</ul>
</li>
<li>§ 8 计算性能<ul>
<li>多 GPU 计算</li>
<li>多 GPU 计算时模型的保存与加载</li>
</ul>
</li>
<li>§ 10 NLP<ul>
<li>Word2Vec, fastText, GloVe</li>
<li>Encoder-Decoder, Beam Search</li>
<li>Attention</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h2><h3 id="优化与深度学习"><a href="#优化与深度学习" class="headerlink" title="优化与深度学习"></a>优化与深度学习</h3><p>本节将讨论优化与深度学习的关系，以及优化在深度学习中的挑战。</p>
<p>在一个深度学习问题中，我们通常会预先定义一个损失函数。有了损失函数以后，我们就可以使用优化算法试图将其最小化。在优化中，这样的损失函数通常被称作优化问题的<strong>目标函数</strong>。依据惯例，优化算法通常只考虑最小化目标函数。其实，任何最大化问题都可以很容易地转化为最小化问题，只需令目标函数的相反数为新的目标函数即可。</p>
<p>优化的挑战：</p>
<ul>
<li>局部最小值</li>
<li>Saddle Point</li>
</ul>
<h3 id="Gradient-Descent-与-SGD"><a href="#Gradient-Descent-与-SGD" class="headerlink" title="Gradient Descent 与 SGD"></a>Gradient Descent 与 SGD</h3><p>（之前的笔记中记录已十分详细，此处略去）</p>
<h3 id="动量法"><a href="#动量法" class="headerlink" title="动量法"></a>动量法</h3><blockquote>
<p>　指数移动加权平均法，是指<strong>各数值的加权系数随时间呈指数式递减，越靠近当前时刻的数值加权系数就越大</strong>。</p>
<p>　指数移动加权平均较传统的平均法来说，一是不需要保存过去所有的数值；二是计算量显著减小。</p>
</blockquote>
<p>目标函数有关自变量的梯度代表了目标函数在自变量当前位置下降最快的方向。因此，梯度下降也叫作最陡下降。在每次迭代中，梯度下降根据自变量当前位置，沿着当前位置的梯度更新自变量。</p>
<p>然而，如果自变量的迭代方向仅仅取决于自变量当前位置，这可能会带来一些问题。</p>
<p>让我们考虑一个输入和输出分别为二维向量 $\boldsymbol{x} = [x_1, x_2]^\top$​ 和标量的目标函数 $f(\boldsymbol{x})=0.1x_1^2+2x_2^2$​。</p>
<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter07/7.4_output1.png" alt="img"></p>
<p>可以看到，同一位置上，目标函数在竖直方向（$x_2$ 轴方向）比在水平方向（$x_1$ 轴方向）的斜率的绝对值更大。因此，给定学习率，梯度下降迭代自变量时会使自变量在竖直方向比在水平方向移动幅度更大。那么，我们需要一个较小的学习率从而避免自变量在竖直方向上越过目标函数最优解。然而，这会造成自变量在水平方向上朝最优解移动变慢。</p>
<p>但如果我们试着将学习率调得稍大一点，此时自变量在竖直方向不断越过最优解并逐渐发散。</p>
<p>动量法的提出是为了解决梯度下降的上述问题。设时间步 $t$​ 的自变量为 $\boldsymbol{x}_t$​，学习率为 $\eta_t$​，对应梯度为 $\boldsymbol  g_t$​。<br>在时间步 $0$​，动量法创建速度变量 $\boldsymbol{v}_0$​，并将其元素初始化成 0。在时间步 $t&gt;0$​，动量法对每次迭代的步骤做如下修改：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\boldsymbol{v}_t &\leftarrow \gamma \boldsymbol{v}_{t-1} + \eta_t \boldsymbol{g}_t, \\
\boldsymbol{x}_t &\leftarrow \boldsymbol{x}_{t-1} - \boldsymbol{v}_t,
\end{aligned}</script><p>其中，动量超参数$\gamma$满足$0 \leq \gamma &lt; 1$。当$\gamma=0$时，动量法等价于小批量随机梯度下降。</p>
<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter07/7.4_output3.png" alt="img"></p>
<p>在动量法中，自变量在各个方向上的移动幅度不仅取决当前梯度，还取决于过去的各个梯度在各个方向上是否一致。</p>
<p>实现的话也是大调库：</p>
<pre class="language-python" data-language="python"><code class="language-python">d2l<span class="token punctuation">.</span>train_pytorch_ch7<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'lr'</span><span class="token punctuation">:</span> <span class="token number">0.004</span><span class="token punctuation">,</span> <span class="token string">'momentum'</span><span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                    features<span class="token punctuation">,</span> labels<span class="token punctuation">)</span></code></pre>
<h3 id="Adagrad"><a href="#Adagrad" class="headerlink" title="Adagrad"></a>Adagrad</h3><p>AdaGrad 算法根据自变量在每个维度的梯度值的大小来调整各个维度上的学习率，从而避免统一的学习率难以适应所有维度的问题。</p>
<p>AdaGrad 算法会使用一个小批量随机梯度 $\boldsymbol{g}_t$​​ 按元素平方的累加变量 $\boldsymbol{s}_t$​​。在时间步 0，AdaGrad 将 $\boldsymbol{s}_0$​​ 中每个元素初始化为 0。在时间步 $t$​​，首先将小批量随机梯度 $\boldsymbol{g}_t$​​ 按元素平方后累加到变量 $\boldsymbol{s}_t$​​：</p>
<script type="math/tex; mode=display">
\boldsymbol{s}_t \leftarrow \boldsymbol{s}_{t-1} + \boldsymbol{g}_t \odot \boldsymbol{g}_t</script><p>接着，我们将目标函数自变量中每个元素的学习率通过按元素运算重新调整一下：</p>
<script type="math/tex; mode=display">
\boldsymbol{x}_t \leftarrow \boldsymbol{x}_{t-1} - \frac{\eta}{\sqrt{\boldsymbol{s}_t + \epsilon}} \odot \boldsymbol{g}_t</script><p>其中 $\eta$​ 是学习率，$\epsilon$​ 是为了维持数值稳定性而添加的常数，如 $10^{-6}$​​​。这里开方、除法和乘法的运算都是按元素运算的。这些按元素运算使得目标函数自变量中每个元素都分别拥有自己的学习率。</p>
<p>由于 $\boldsymbol{s}_t$ 一直在累加按元素平方的梯度，自变量中每个元素的学习率在迭代过程中一直在降低（或不变）。所以，当学习率在迭代早期降得较快且当前解依然不佳时，AdaGrad算法在迭代后期由于学习率过小，可能较难找到一个有用的解。</p>
<p>通过名称为 <code>Adagrad</code> 的优化器方法，我们便可使用 PyTorch 提供的 AdaGrad 算法来训练模型。</p>
<pre class="language-python" data-language="python"><code class="language-python">d2l<span class="token punctuation">.</span>train_pytorch_ch7<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adagrad<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'lr'</span><span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> features<span class="token punctuation">,</span> labels<span class="token punctuation">)</span></code></pre>
<h3 id="RMSProp"><a href="#RMSProp" class="headerlink" title="RMSProp"></a>RMSProp</h3><p>针对最后我们提出的 Adagrad 算法存在的迭代后期 learning_rate 过小问题，RMSProp 算法被提出。</p>
<p>不同于 AdaGrad 算法里状态变量 $\boldsymbol{s}_t$ 是截至时间步 $t$ 所有小批量随机梯度 $\boldsymbol{g}_t$ 按元素平方和，RMSProp 算法将这些梯度按元素平方做指数加权移动平均。具体来说，给定超参数 $0 \leq \gamma &lt; 1$，RMSProp 算法在时间步 $t&gt;0$ 计算 $\boldsymbol{s}_t \leftarrow \gamma \boldsymbol{s}_{t-1} + (1 - \gamma) \boldsymbol{g}_t \odot \boldsymbol{g}_t$​.</p>
<p>和 AdaGrad 算法一样，RMSProp 算法将目标函数自变量中每个元素的学习率通过按元素运算重新调整，然后更新自变量 $\boldsymbol{x}_t \leftarrow \boldsymbol{x}_{t-1} - \frac{\eta}{\sqrt{\boldsymbol{s}_t + \epsilon}} \odot \boldsymbol{g}_t $.</p>
<p>因为 RMSProp 算法的状态变量 $\boldsymbol{s}_t$ 是对平方项 $\boldsymbol{g}_t \odot \boldsymbol{g}_t$ 的指数加权移动平均，所以可以看作是最近 $ \dfrac 1 {1-\gamma}$ 个时间步的小批量随机梯度平方项的加权平均。如此一来，自变量每个元素的学习率在迭代过程中就不再一直降低（或不变）。</p>
<pre class="language-python" data-language="python"><code class="language-python">d2l<span class="token punctuation">.</span>train_pytorch_ch7<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>RMSprop<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'lr'</span><span class="token punctuation">:</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token string">'alpha'</span><span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                    features<span class="token punctuation">,</span> labels<span class="token punctuation">)</span></code></pre>
<h3 id="AdaDelta"><a href="#AdaDelta" class="headerlink" title="AdaDelta"></a>AdaDelta</h3><p>除了 RMSProp 算法以外，另一个常用优化算法 AdaDelta 算法也针对 AdaGrad 算法在迭代后期可能较难找到有用解的问题做了改进。有意思的是，<strong>AdaDelta 算法没有学习率这一超参数</strong>。</p>
<p>AdaDelta 算法也像 RMSProp 算法一样，使用了小批量随机梯度 $\boldsymbol{g}_t$ 按元素平方的指数加权移动平均变量 $\boldsymbol{s}_t$。在时间步 0，它的所有元素被初始化为 0。给定超参数 $0 \leq \rho &lt; 1$（对应RMSProp算法中的 $\gamma$），在时间步 $t&gt;0$，同RMSProp算法一样计算 $ \boldsymbol{s}_t \leftarrow \rho \boldsymbol{s}_{t-1} + (1 - \rho) \boldsymbol{g}_t \odot \boldsymbol{g}_t $。​</p>
<p>与 RMSProp 算法不同的是，AdaDelta 算法还维护一个额外的状态变量 $\Delta\boldsymbol{x}_t$，其元素同样在时间步 0 时被初始化为 0。我们使用 $\Delta\boldsymbol{x}_{t-1}$ 来计算自变量的变化量：$ \boldsymbol{g}_t’ \leftarrow \sqrt{\frac{\Delta\boldsymbol{x}_{t-1} + \epsilon}{\boldsymbol{s}_t + \epsilon}}   \odot \boldsymbol{g}_t $​，其中 $\epsilon$ 是为了维持数值稳定性而添加的常数，如$10^{-5}$。</p>
<p>接着更新自变量：$ \boldsymbol{x}_t \leftarrow \boldsymbol{x}_{t-1} - \boldsymbol{g}’_t $​。</p>
<p>最后，我们使用 $\Delta\boldsymbol{x}_t$ 来记录自变量变化量 $\boldsymbol{g}’_t$ 按元素平方的指数加权移动平均：$\Delta\boldsymbol{x}_t \leftarrow \rho \Delta\boldsymbol{x}_{t-1} + (1 - \rho) \boldsymbol{g}’_t \odot \boldsymbol{g}’_t$。</p>
<p>可以看到，如不考虑 $\epsilon$​ 的影响，<strong>AdaDelta 算法跟 RMSProp 算法的不同之处在于使用 $\sqrt{\Delta\boldsymbol{x}_{t-1}}$​ 来替代学习率 $\eta$​</strong>。</p>
<pre class="language-python" data-language="python"><code class="language-python">d2l<span class="token punctuation">.</span>train_pytorch_ch7<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adadelta<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'rho'</span><span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> features<span class="token punctuation">,</span> labels<span class="token punctuation">)</span></code></pre>
<h3 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h3><p>Adam 算法在 RMSProp 算法基础上对小批量随机梯度也做了指数加权移动平均，所以 Adam 算法可以看做是 RMSProp 算法与动量法的结合。</p>
<p>Adam 算法使用了动量变量 $\boldsymbol{v}_t$ 和 RMSProp 算法中小批量随机梯度按元素平方的指数加权移动平均变量 $\boldsymbol{s}_t$，并在时间步 0 将它们中每个元素初始化为 0。</p>
<p>给定超参数 $0 \leq \beta_1 &lt; 1$（算法作者建议设为 0.9），时间步 $t$ 的动量变量 $\boldsymbol{v}_t$ 即小批量随机梯度 $\boldsymbol{g}_t$ 的指数加权移动平均：$\boldsymbol{v}_t \leftarrow \beta_1 \boldsymbol{v}_{t-1} + (1 - \beta_1) \boldsymbol{g}_t $。​</p>
<p>和 RMSProp 算法中一样，给定超参数 $0 \leq \beta_2 &lt; 1$（算法作者建议设为0.999），<br>将小批量随机梯度按元素平方后的项 $\boldsymbol{g}_t \odot \boldsymbol{g}_t$ 做指数加权移动平均得到 $\boldsymbol{s}_t$：$\boldsymbol{s}_t \leftarrow \beta_2 \boldsymbol{s}_{t-1} + (1 - \beta_2) \boldsymbol{g}_t \odot \boldsymbol{g}_t$</p>
<ul>
<li>偏差修正</li>
</ul>
<p>由于我们将 $\boldsymbol{v}_0$ 和 $\boldsymbol{s}_0$ 中的元素都初始化为 0，在时间步 $t$ 我们得到 $\boldsymbol{v}_t =  (1-\beta_1) \sum_{i=1}^t \beta_1^{t-i} \boldsymbol{g}_i$。</p>
<p>将过去各时间步小批量随机梯度的权值相加，得到 $(1-\beta_1) \sum_{i=1}^t \beta_1^{t-i} = 1 - \beta_1^t$。</p>
<p>需要注意的是，当 $t$ 较小时，过去各时间步小批量随机梯度权值之和会较小。例如，当 $\beta_1 = 0.9$ 时，$\boldsymbol{v}_1 = 0.1\boldsymbol{g}_1$。</p>
<p>为了消除这样的影响，对于任意时间步 $t$，我们可以将 $\boldsymbol{v}_t$ 再除以 $1 - \beta_1^t$​，从而使过去各时间步小批量随机梯度权值之和为 1。这也叫作偏差修正。</p>
<p>在 Adam 算法中，我们对变量 $\boldsymbol{v}_t$ 和 $\boldsymbol{s}_t$ 均作偏差修正：</p>
<script type="math/tex; mode=display">
\hat{\boldsymbol{v}}_t \leftarrow \frac{\boldsymbol{v}_t}{1 - \beta_1^t}, \\ 
\hat{\boldsymbol{s}}_t \leftarrow \frac{\boldsymbol{s}_t}{1 - \beta_2^t}.</script><p>接下来，Adam 算法使用以上偏差修正后的变量 $\hat{\boldsymbol{v}}_t$ 和 $\hat{\boldsymbol{s}}_t$，将模型参数中每个元素的学习率通过按元素运算重新调整：$\boldsymbol{g}_t’ \leftarrow \frac{\eta \hat{\boldsymbol{v}}_t}{\sqrt{\hat{\boldsymbol{s}}_t} + \epsilon}$。​​其中 $\eta$ ​是学习率，$\epsilon$ ​是为了维持数值稳定性而添加的常数，如 $10^{-8}$​。</p>
<p>和 AdaGrad 算法、RMSProp 算法以及 AdaDelta 算法一样，目标函数自变量中每个元素都分别拥有自己的学习率。最后，使用 $\boldsymbol{g}_t’$ ​迭代自变量：$\boldsymbol{x}_t \leftarrow \boldsymbol{x}_{t-1} - \boldsymbol{g}_t’$。</p>
<pre class="language-python" data-language="python"><code class="language-python">d2l<span class="token punctuation">.</span>train_pytorch_ch7<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'lr'</span><span class="token punctuation">:</span> <span class="token number">0.01</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> features<span class="token punctuation">,</span> labels<span class="token punctuation">)</span></code></pre>
<h2 id="计算性能：多-GPU-计算"><a href="#计算性能：多-GPU-计算" class="headerlink" title="计算性能：多 GPU 计算"></a>计算性能：多 GPU 计算</h2><ul>
<li>多 GPU 计算</li>
</ul>
<p>先定义一个模型：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
net <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span> <span class="token comment"># Linear(in_features=10, out_features=1, bias=True)</span></code></pre>
<p>要想使用 PyTorch 进行多 GPU 计算，最简单的方法是直接用 <code>torch.nn.DataParallel</code> 将模型wrap一下即可：<br><pre class="language-python" data-language="python"><code class="language-python">net <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>DataParallel<span class="token punctuation">(</span>net<span class="token punctuation">)</span>
net</code></pre><br>输出：<br><pre class="language-none"><code class="language-none">DataParallel(
  (module): Linear(in_features&#x3D;10, out_features&#x3D;1, bias&#x3D;True)
)</code></pre><br>这时，默认所有存在的 GPU 都会被使用。</p>
<p>如果我们机子中有很多 GPU (例如上面显示我们有 4 张显卡，但是只有第 0、3 块还剩下一点点显存)，但我们只想使用 0、3 号显卡，那么我们可以用参数 <code>device_ids</code> 指定即可：<code>torch.nn.DataParallel(net, device_ids=[0, 3])</code>。</p>
<ul>
<li>多 GPU 模型的保存与加载</li>
</ul>
<p>按之前的方法，被 <code>DataParallel</code> 包围的模型保存时正常，但加载时会出问题。</p>
<p>正确的方法是保存的时候只保存 <code>net.module</code>:</p>
<pre class="language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>net<span class="token punctuation">.</span>module<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"./8.4_model.pt"</span><span class="token punctuation">)</span>
new_net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"./8.4_model.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 加载成功</span></code></pre>
<p>或者先将 <code>new_net</code> 用 <code>DataParallel</code> 包括以下再用上面报错的方法进行模型加载:<br><pre class="language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"./8.4_model.pt"</span><span class="token punctuation">)</span>
new_net <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
new_net <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>DataParallel<span class="token punctuation">(</span>new_net<span class="token punctuation">)</span>
new_net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"./8.4_model.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 加载成功</span></code></pre></p>
<h2 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h2><h3 id="Word2Vec"><a href="#Word2Vec" class="headerlink" title="Word2Vec"></a>Word2Vec</h3><p>Word2vec 是 Google 于 2013 年推出的开源的获取词向量 word2vec 的工具包。它包括了一组用于 word embedding 的模型，这些模型通常都是用浅层（两层）神经网络训练词向量。</p>
<p>Word2vec 的模型以大规模语料库作为输入，然后生成一个向量空间（通常为几百维）。词典中的每个词都对应了向量空间中的一个独一的向量，而且<strong>语料库中拥有共同上下文的词映射到向量空间中的距离会更近</strong>。</p>
<p>本节参考 <a href="https://www.zybuluo.com/Dounm/note/591752，梳理其发展历程及原理。">https://www.zybuluo.com/Dounm/note/591752，梳理其发展历程及原理。</a></p>
<ul>
<li><strong>神经概率语言模型</strong></li>
</ul>
<p><img src="https://raw.githubusercontent.com/Dounm/TheFarmOfDounm/master/resources/images/word2vec/1.png" alt="1"></p>
<ul>
<li>训练样本为 <code>(Context(w), w)</code>，其中 $w \in Corpus$, $Context(w)$ 为其前面的 $n-1$ 个词</li>
<li>$X_w$ 为直接将 $Context(w)$​ 收尾顺次相接得到的 $(n-1) \cdot m$ 长度的向量，其中 $m$ 为词向量长度</li>
<li>$Z_w = \tanh (WX_w + p), \, y_w = Uz_w + q$.</li>
</ul>
<p>于是在对 $y_w$ Softmax 归一化之后，$y_w$ 在对应维度的分量就是对应词的预测概率。</p>
<p>这个模型存在的问题：计算量太大。假设 $n \sim  5, m \sim 10^2, |Z_w| \sim 10^2, |y_w| = | \Sigma| \sim 10^5$，那么<strong>隐层和输出层之间的矩阵运算</strong>，以及<strong>输出层的 Softmax 运算</strong>会大大增加模型的计算量。</p>
<ul>
<li><strong>Word2vec 对网格结构的优化</strong></li>
</ul>
<p><img src="https://raw.githubusercontent.com/Dounm/TheFarmOfDounm/master/resources/images/word2vec/2.png" alt="7"></p>
<p>网格结构删除了隐藏层，而且 Projection Layer 也由“拼接”变成了“求和”，因此 Projection Layer 的结点数为词向量对应维数；输出层规模仍然是词典中词的个数。</p>
<p>但是，对于神经网络而言，我们的输入层的参数是中各个词的词向量，那么这个词向量是怎么来的呢？</p>
<p>事实上，我们在给定 $x$ 计算 $y_i$ 的时候，采用的方法是 $Y = Wx$，即 $y_i = w_i^Tx$，即矩阵 $W$ 第 $i$ 行与投影层做点积。于是这个词向量就可以直接用输出层和映射层之间的参数 $W$ 的第 $i$ 行 $w_i$ 来表示。</p>
<p>这样一来的话，我们训练神经网络的参数，就相当于训练了每个词的词向量，也就得到了词典中每个词的词向量。</p>
<ul>
<li><strong>对 Softmax 归一化的优化</strong></li>
</ul>
<p>但是这样我们还是没有绕开 Softmax 对计算量的消耗。</p>
<script type="math/tex; mode=display">
\begin {align}
p(y_i | Context(w)) &= \dfrac {e^{y_i}}{\sum_{k=1}^{|C|} e^{y_k} } \\ 
&=\dfrac {e^{w_i^Tx}} { \sum_{k=1}^{|C|} e^{w_k^T x}}
\end {align}</script><p>上述式子的计算瓶颈在于分母。分母需要枚举一遍词典中所有的词，而词典中的词的数目在 $10^5$ 的量级。同时，我们需要对语料库中的每个词进行训练并按照这个公式计算所有 $y_i$ 的归一化概率，而语料库中的词的数量级通常在 million 甚至 billion 量级，这样一来的话，训练复杂度就无法接受。</p>
<p>因此，Word2vec 提出了两种优化 Softmax 计算过程的方法，同样也对应着 Word2vec 的两种框架，即： Hieraichical Softmax 和 Negative Sampling。</p>
<ul>
<li><strong>Hierarchical Softmax</strong></li>
</ul>
<p>本框架之所以叫 Hierarchical Softmax，是因为它利用了树实现了分层的 Softmax，即用树形结构替代了输出层的结构。</p>
<p>其具体作用原理我们会在后续介绍 CBOW 模型时介绍。</p>
<ul>
<li><strong>Negative Sampling</strong></li>
</ul>
<p>除了使用上述 Hierarchical Softmax 方法之外，也可以使用 Noise Contrastive Estimation 来优化。</p>
<blockquote>
<p>NCE posits that a good model should <strong>be able to differentiate data from noise</strong> by means of <strong>logistic regression</strong>.</p>
</blockquote>
<p>Word2vec 采用的 Negative Sampling 是 NCE 的一种简化版本，目的是为了提高训练速度以及改善所得词的质量。相比于 Hierarchical Softmax，Negative Sampling 不再采用 Huffman 树，而是采用<strong>随机负采样</strong>。</p>
<p>考虑：</p>
<script type="math/tex; mode=display">
\begin {align}
p(y_i | Context(w)) &= \dfrac {e^{y_i}}{\sum_{k=1}^{|C|} e^{y_k} } \\ 
&=\dfrac {e^{w_i^Tx}} { \sum_{k=1}^{|C|} e^{w_k^T x}}
\end {align}</script><p>我们要让这个值最大化，也就是说要最大化 $w_i$ 和 $x$ 的余弦相似度，最小化非 $w_i$ 与 $x$ 的余弦相似度。</p>
<p>我们可以将分子的 $(Context(w), w_i)$​​ 看做一个正样本，将分母的 $(Context(w), w_k)$​​ 看做负样本，这里 $k \ne i$。</p>
<p>问题在于，上面公式将词典里的几乎所有词都看做了负样本，因此计算分母太耗时间。所以，我们使用 Negative Sampling 的思路，每次只从词典里随机选一些词作为当前词 $w$​ 的负样本（称为 $NCE(w)$​​），而不是以所有的字典里的其他词作为负样本。</p>
<p>Word2vec 的作者们测试发现，<strong>最佳的分布是 $\frac 3 4$ 次幂的 Unigram Distribution</strong>，也就是说，选中语料库中词 $w$ 的概率为 $\dfrac {count(w)^{3/4}} {\sum_{u \in D}count(u)^{3/4}}$. </p>
<p>其实在做出随机选取负样本的动作之后，我们就已经抛弃了 Softmax 这个函数所代表的归一化的意思了。也就代表了我们已经不再关注求解<strong>语言模型</strong>的问题，而只关注求解<strong>词向量</strong>的问题。</p>
<ul>
<li><strong>Continous Bag-of-words</strong></li>
</ul>
<p>这里我们以 CBOW（Continous Bag-of-words）模型来说明 Hierarchical Softmax 的作用方法。</p>
<p><img src="https://raw.githubusercontent.com/Dounm/TheFarmOfDounm/master/resources/images/word2vec/3.png" alt="2"></p>
<p>这里首先对上图进行一定的解释：</p>
<ul>
<li>$Context(w)$: 由 $w$ 前后各 $c$ 个词构成</li>
<li>输入层：包含 $2c$ 个词的词向量</li>
<li>投影层：将 $2c$ 个词向量累加求和得到的 $X_w$</li>
<li>输出层：输出层对应的是一棵 Huffman 树。该 Huffman 树以语料中出现的词为叶子节点，以各词在语料中<strong>出现的次数当做权值</strong>构造出来的。该树中，叶子节点总共有 $N$ 个（$N = |D| := |Corpus|$）。</li>
</ul>
<p>首先定义以下符号：</p>
<ul>
<li>$p^w$：从根节点到 $w$ 对应的那个叶子结点在树中的路径</li>
<li>$l^w$：路径 $p^w$ 上包含的结点数目</li>
<li>$p^w_1, p^w_2, \cdots, p^w_{l^w}$：路径 $p^w$ 上对应的结点</li>
<li>$d^w_2, d^w_3, \cdots, d^w_{l^w}$：路径 $p^w$ 上的结点对应的 Huffman 编码</li>
<li>$\theta^w_1, \theta^w_2, \cdots, \theta^w_{l^w}$：路径 $p^w$ 上非叶子结点对应的词向量</li>
</ul>
<p>从根节点出发到某个叶子节点的路径上，每次分支都可视为进行了一次<strong>二分类</strong>。以下的推导过程中，我们默认左边（编码为0）是负类，右边（编码为1）是正类。于是有：</p>
<ul>
<li>分为正类的概率：$\sigma(X_w^T\theta) = \dfrac 1 {1 + e^{-X_w^T\theta}}$</li>
<li>分为负类的概率：$1-\sigma(X_w^T\theta)$</li>
</ul>
<p>其中 $\theta$ 即为当前非叶子结点的对应词向量。</p>
<p>所以 Hierarchical Softmax 的思想就是：<strong>对于词典 $D$ 中的任意词 $w$，Huffman 树中必存在一条从根节点到词对应叶子节点 $w$ 的路径 $p^w$。这条路径 $p^w$ 上存在 $l^w-1$ 个分支，将每个分支看做一次二分类，每次分类就产生一个概率，将这些概率连乘，即得到我们所需近似的 $p(w | Context(w))$</strong>。</p>
<p>然后我们就可以使用极大似然法，只需将这个近似的条件概率最大化，就可以达到我们想要的训练效果。这里我们略去对其求梯度的推导过程。</p>
<ul>
<li><strong>Skip-gram</strong></li>
</ul>
<p>Skip-gram 模型是已知当前词 $w$，对其上下文中的词 $Context(w)$ 进行预测。</p>
<p>举个例子，假设文本序列是 “the”“man”“loves”“his”“son”。以 “loves” 作为中心词，设背景窗口大小为 2。Skip-gram 模型所关心的是，给定中心词 “loves”，生成与它距离不超过 2 个词的背景词 “the”“man”“his”“son” 的条件概率，即</p>
<script type="math/tex; mode=display">
P(the, man, his, son | loves) \\
= P(the |loves) P(man | loves) P(his | loves) P(son | loves)</script><p>我们要做的就是使用极大似然法最大化这个条件概率。</p>
<h3 id="fastText"><a href="#fastText" class="headerlink" title="fastText"></a>fastText</h3><p>在 Word2Vec 中，我们并没有直接利用构词学中的信息。无论是在跳字模型还是连续词袋模型中，我们都将形态不同的单词用不同的向量来表示。例如，“dog” 和 “dogs” 分别用两个不同的向量表示，而模型中并未直接表达这两个向量之间的关系。鉴于此，fastText 提出了子词嵌入的方法，从而试图将构词信息引入 Word2Vec 中的跳字模型。</p>
<p>在 fastText 中，每个中心词被表示成子词的集合。下面我们用单词 “where” 作为例子来了解子词是如何产生的。首先，我们在单词的首尾分别添加特殊字符 “&lt;” 和 “&gt;” 以区分作为前后缀的子词。然后，将单词当成一个由字符构成的序列来提取 $n$​ 元语法。例如，当 $n=3$​ 时，我们得到所有长度为3的子词：<code>“&lt;wh&gt;”“whe”“her”“ere”“&lt;re&gt;”</code> 以及特殊子词 <code>“&lt;where&gt;”</code>。</p>
<p>在 fastText 中，对于一个词 $w$​​，我们将它所有长度在 $3 \sim 6$​ ​的子词和特殊子词的并集记为 $\mathcal{G}_w$​​。那么词典则是所有词的子词集合的并集。假设词典中子词 $g$​​ 的向量为 $\boldsymbol{z}_g$​​，那么跳字模型中词 $w$​​ 的作为中心词的向量 $\boldsymbol{v}_w$ ​​​则表示成</p>
<script type="math/tex; mode=display">
\boldsymbol{v}_w = \sum_{g\in\mathcal{G}_w} \boldsymbol{z}_g.</script><h3 id="GloVe"><a href="#GloVe" class="headerlink" title="GloVe"></a>GloVe</h3><ul>
<li>在有些情况下，交叉熵损失函数有劣势。GloVe 模型采用了平方损失，并通过词向量拟合预先基于整个数据集计算得到的全局统计信息。</li>
<li>任意词的中心词向量和背景词向量在 GloVe 模型中是等价的。</li>
</ul>
<h3 id="Encoder-Decoder"><a href="#Encoder-Decoder" class="headerlink" title="Encoder-Decoder"></a>Encoder-Decoder</h3><ul>
<li>总览</li>
</ul>
<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter10/10.9_seq2seq.svg" alt="img"></p>
<p>图中描述了使用编码器—解码器将上述英语句子翻译成法语句子的一种方法。</p>
<p>在训练数据集中，我们可以在每个句子后附上特殊符号“&lt;eos&gt;”（end of sequence）以表示序列的终止。</p>
<p>编码器每个时间步的输入依次为英语句子中的单词、标点和特殊符号“&lt;eos&gt;”。图中使用了编码器在最终时间步的隐藏状态作为输入句子的表征或编码信息。</p>
<p>解码器在各个时间步中使用输入句子的编码信息和上个时间步的输出以及隐藏状态作为输入。我们希望解码器在各个时间步能正确依次输出翻译后的法语单词、标点和特殊符号”&lt;eos&gt;”。</p>
<p>需要注意的是，解码器在最初时间步的输入用到了一个表示序列开始的特殊符号”&lt;bos&gt;”（beginning of sequence）。</p>
<ul>
<li>Encoder (Usually RNN)</li>
</ul>
<p>编码器的作用是把一个不定长的输入序列变换成一个定长的背景变量 $\boldsymbol{c}$，并在该背景变量中编码输入序列信息。常用的编码器是循环神经网络。</p>
<p>让我们考虑批量大小为 1 的时序数据样本。假设输入序列是 $x_1,\ldots,x_T$，$x_i$ 是输入句子中的第 $i$ 个词。在时间步 $t$，循环神经网络将输入 $x_t$ 的特征向量 $\boldsymbol{x}_t$ 和上个时间步的隐藏状态 $\boldsymbol{h}_{t-1}$ 变换为当前时间步的隐藏状态 $\boldsymbol{h}_t$。我们可以用函数 $f$ 表达循环神经网络隐藏层的变换：</p>
<script type="math/tex; mode=display">
\boldsymbol{h}_t = f(\boldsymbol{x}_t, \boldsymbol{h}_{t-1})</script><p>接下来，编码器通过自定义函数 $q$ 将各个时间步的隐藏状态变换为背景变量</p>
<script type="math/tex; mode=display">
\boldsymbol{c} =  q(\boldsymbol{h}_1, \ldots, \boldsymbol{h}_T)</script><p>例如，当选择 $q(\boldsymbol{h}_1, \ldots, \boldsymbol{h}_T) = \boldsymbol{h}_T$ 时，背景变量是输入序列最终时间步的隐藏状态 $\boldsymbol{h}_T$。</p>
<p>以上描述的编码器是一个单向的循环神经网络，每个时间步的隐藏状态只取决于该时间步及之前的输入子序列。我们也可以使用双向循环神经网络构造编码器。在这种情况下，编码器每个时间步的隐藏状态同时取决于该时间步之前和之后的子序列（包括当前时间步的输入），并编码了整个序列的信息。</p>
<ul>
<li>Decoder</li>
</ul>
<p>刚刚已经介绍，编码器输出的背景变量 $\boldsymbol{c}$ 编码了整个输入序列 $x_1, \ldots, x_T$ 的信息。给定训练样本中的输出序列 $y_1, y_2, \ldots, y_{T’}$，对每个时间步 $t’$（符号与输入序列或编码器的时间步 $t$ 有区别），解码器输出 $y_{t’}$ 的条件概率将基于之前的输出序列 $y_1,\ldots,y_{t’-1}$ 和背景变量 $\boldsymbol{c}$，即$P(y_{t’} \mid y_1, \ldots, y_{t’-1}, \boldsymbol{c})$。</p>
<p>为此，我们可以使用另一个循环神经网络作为解码器。在输出序列的时间步 $t^\prime$，解码器将上一时间步的输出 $y_{t^\prime-1}$ 以及背景变量 $\boldsymbol{c}$ 作为输入，并将它们与上一时间步的隐藏状态 $\boldsymbol{s}_{t^\prime-1}$ 变换为当前时间步的隐藏状态 $\boldsymbol{s}_{t^\prime}$。因此，我们可以用函数 $g$ 表达解码器隐藏层的变换：</p>
<script type="math/tex; mode=display">
\boldsymbol{s}_{t^\prime} = g(y_{t^\prime-1}, \boldsymbol{c}, \boldsymbol{s}_{t^\prime-1})</script><p>有了解码器的隐藏状态后，我们可以使用自定义的输出层和 softmax 运算来计算 $P(y_{t^\prime} \mid y_1, \ldots, y_{t^\prime-1}, \boldsymbol{c})$，例如，基于当前时间步的解码器隐藏状态 $\boldsymbol{s}_{t^\prime}$、上一时间步的输出 $y_{t^\prime-1}$ 以及背景变量 $\boldsymbol{c}$ 来计算当前时间步输出$y_{t^\prime}$的概率分布。</p>
<h4 id="Beam-Search"><a href="#Beam-Search" class="headerlink" title="Beam Search"></a>Beam Search</h4><ul>
<li>输出层的贪婪搜索不一定能得到最优输出序列</li>
</ul>
<p>上一节里已经提到，在准备训练数据集时，我们通常会在样本的输入序列和输出序列后面分别附上一个特殊符号 “&lt;eos&gt;” 表示序列的终止。我们在接下来的讨论中也将沿用上一节的全部数学符号。为了便于讨论，假设解码器的输出是一段文本序列。设输出文本词典 $\mathcal{Y}$（包含特殊符号 “&lt;eos&gt;” ）的大小为 $\left|\mathcal{Y}\right|$，输出序列的最大长度为 $T’$。所有可能的输出序列一共有 $\mathcal{O}(\left|\mathcal{Y}\right|^{T’})$ 种。这些输出序列中所有特殊符号 “&lt;eos&gt;” 后面的子序列将被舍弃。</p>
<p>让我们先来看一个简单的解决方案：贪婪搜索（greedy search）。对于输出序列任一时间步 $t’$​​，我们从 $|\mathcal{Y}|$​​ 个词中搜索出条件概率最大的词</p>
<script type="math/tex; mode=display">
y _ { t ^ { \prime } } = \underset { y \in \mathcal { Y } } { \operatorname { argmax } } P \left( y | y _ { 1 } , \ldots , y _ { t ^ { \prime } - 1 } , c \right)</script><p>作为输出。一旦搜索出 “&lt;eos&gt;” 符号，或者输出序列长度已经达到了最大长度 $T’$​，便完成输出。</p>
<p>这样做的问题是，这样“逐层贪心”的策略不一定能够得到最优输出序列。</p>
<ul>
<li>穷举搜索的开销过于庞大</li>
<li>Beam Search!</li>
</ul>
<p>束搜索（beam search）是对贪婪搜索的一个改进算法。</p>
<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter10/10.10_beam_search.svg" alt="img"></p>
<p>它有一个束宽（beam size）超参数。我们将它设为 $k$​​。在时间步1时，选取当前时间步条件概率最大的 $k$​​ 个词，分别组成 $k$​​ 个候选输出序列的首词。在之后的每个时间步，基于上个时间步的 $k$ ​​个候选输出序列，从 $k\left|\mathcal{Y}\right|$​​ 个可能的输出序列中选取条件概率最大的 $k$​ ​​个，作为该时间步的候选输出序列。最终，我们从各个时间步的候选输出序列中筛选出包含特殊符号 “&lt;eos&amp; gt;”的序列，并将它们中所有特殊符号 “&lt;eos&gt;” 后面的子序列舍弃，得到最终候选输出序列的集合。</p>
<p>在最终候选输出序列的集合中，我们取以下分数最高的序列作为输出序列：</p>
<script type="math/tex; mode=display">
\frac{1}{L^\alpha} \log P(y_1, \ldots, y_{L}) = \frac{1}{L^\alpha} \sum_{t'=1}^L \log P(y_{t'} \mid y_1, \ldots, y_{t'-1}, \boldsymbol{c})</script><p>其中 $L$​​ 为最终候选序列长度，$\alpha$​​ 一般可选为0.75。分母上的 $L^\alpha$ ​​是为了惩罚较长序列在以上分数中较多的对数相加项。分析可知，束搜索的计算开销为 $\mathcal{O}(k\left|\mathcal{Y}\right|T’)$​​。这介于贪婪搜索和穷举搜索的计算开销之间。此外，贪婪搜索可看作是束宽为 1 的束搜索。束搜索通过灵活的束宽 $k$ ​​来权衡计算开销和搜索质量。</p>
<h3 id="Attention-Mechanism"><a href="#Attention-Mechanism" class="headerlink" title="Attention Mechanism"></a>Attention Mechanism</h3><p>现在，让我们再次思考上一节提到的翻译例子：输入为英语序列 “They”“are”“watching”“.”，输出为法语序列 “Ils”“regardent”“.”。</p>
<p>不难想到，解码器在生成输出序列中的每一个词时可能只需利用输入序列某一部分的信息。例如，在输出序列的时间步 1，解码器可以主要依赖 “They”“are” 的信息来生成 “Ils”，在时间步 2 则主要使用来自 “watching” 的编码信息生成 “regardent”，最后在时间步3则直接映射句号 “.”。这看上去就像是在解码器的每一时间步对输入序列中不同时间步的表征或编码信息分配不同的注意力一样。这也是注意力机制的由来。</p>
<p>仍然以循环神经网络为例，注意力机制通过对编码器所有时间步的隐藏状态做加权平均来得到背景变量。解码器在每一时间步调整这些权重，即注意力权重，从而能够在不同时间步分别关注输入序列中的不同部分并编码进相应时间步的背景变量。本节我们将讨论注意力机制是怎么工作的。</p>
<p>在上一节里我们区分了输入序列或编码器的索引 $t$ ​与输出序列或解码器的索引 $t’$​。该节中，解码器在时间步 $t’$ ​的隐藏状态 $\boldsymbol{s}_{t’} = g(\boldsymbol{y}_{t’-1}, \boldsymbol{c}, \boldsymbol{s}_{t’-1})$，其中 $\boldsymbol{y}_{t’-1}$​ 是上一时间步 $t’-1$​ 的输出 $y_{t’-1}$ ​的表征，且任一时间步 $t’$ ​使用相同的背景变量 $\boldsymbol{c}$​。</p>
<p>但在注意力机制中，解码器的每一时间步将使用可变的背景变量。记 $\boldsymbol{c}_{t’}$ ​是解码器在时间步 $t’$ ​的背景变量，那么解码器在该时间步的隐藏状态可以改写为：$\boldsymbol{s}_{t’} = g(\boldsymbol{y}_{t’-1}, \boldsymbol{c}_{t’}, \boldsymbol{s}_{t’-1})$。</p>
<p>这里的关键是如何计算背景变量 $\boldsymbol{c}_{t’}$ ​和如何利用它来更新隐藏状态 $\boldsymbol{s}_{t’}$​。下面将分别描述这两个关键点。</p>
<ul>
<li><strong>计算背景变量</strong></li>
</ul>
<p>我们先描述第一个关键点，即计算背景变量。</p>
<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter10/10.11_attention.svg" alt="img"></p>
<p>图中描绘了注意力机制如何为解码器在时间步 2 计算背景变量。</p>
<p>首先，函数 $a$​​​ 根据解码器在时间步 1 的隐藏状态和编码器在各个时间步的隐藏状态计算 softmax 运算的输入。softmax 运算输出概率分布并对编码器各个时间步的隐藏状态做加权平均，从而得到背景变量。</p>
<p>具体来说，令编码器在时间步 $t$ 的隐藏状态为 $\boldsymbol{h}_t$，且总时间步数为 $T$。那么解码器在时间步 $t’$ ​的背景变量为所有编码器隐藏状态的加权平均：</p>
<script type="math/tex; mode=display">
\boldsymbol{c}_{t'} = \sum_{t=1}^T \alpha_{t' t} \boldsymbol{h}_t,</script><p>其中给定 $t’$​ 时，权重 $\alpha_{t’ t}$ ​在 $t=1,\ldots,T$ ​的值是一个概率分布。为了得到概率分布，我们可以使用 softmax 运算:</p>
<script type="math/tex; mode=display">
\alpha_{t' t} = \frac{\exp(e_{t' t})}{ \sum_{k=1}^T \exp(e_{t' k}) },\quad t=1,\ldots,T.</script><p>现在，我们需要定义如何计算上式中 softmax 运算的输入 $e_{t’ t}$​​。由于 $e_{t’ t} $ ​​同时取决于解码器的时间步 $t’$​​ 和编码器的时间步 $t$​​，我们不妨以解码器在时间步 $t’-1$ ​​的隐藏状态 $\boldsymbol{s}_{t’ - 1}$ ​​与编码器在时间步 $t$​​ 的隐藏状态 $\boldsymbol{h}_t$​​ 为输入，并通过函数 $a$ ​​计算$e_{t’ t}$​​：</p>
<script type="math/tex; mode=display">
e_{t' t} = a(\boldsymbol{s}_{t' - 1}, \boldsymbol{h}_t).</script><p>这里函数 $a$ ​有多种选择，如果两个输入向量长度相同，一个简单的选择是计算它们的内积 $a(\boldsymbol{s}, \boldsymbol{h})=\boldsymbol{s}^\top \boldsymbol{h}$​。而最早提出注意力机制的论文则将输入连结后通过含单隐藏层的多层感知机变换：</p>
<script type="math/tex; mode=display">
a(\boldsymbol{s}, \boldsymbol{h}) = \boldsymbol{v}^\top \tanh(\boldsymbol{W}_s \boldsymbol{s} + \boldsymbol{W}_h \boldsymbol{h}),</script><p>其中$\boldsymbol{v}$​、$\boldsymbol{W}_s$​、$\boldsymbol{W}_h$​都是可以学习的模型参数。</p>
<ul>
<li><strong>矢量化计算</strong> (Query, Key &amp; Value)</li>
</ul>
<p>广义上，注意力机制的输入包括 query 以及对应的 key 和 value，其中 value 是需要加权平均的一组项。在加权平均中，value 的权重来自 $a(query, key)$。</p>
<p>在上面的例子中，查询项为解码器的隐藏状态 $s_{t’-1}$，Key 和 Value 均为编码器的隐藏状态 $h_t$。</p>
<p>让我们考虑一个常见的简单情形，即编码器和解码器的隐藏单元个数均为 $h$，且函数$a(\boldsymbol{s}, \boldsymbol{h})=\boldsymbol{s}^\top \boldsymbol{h}$。</p>
<p>假设我们希望根据解码器单个隐藏状态 $\boldsymbol{s}_{t’ - 1} \in \mathbb{R}^{h}$ 和编码器所有隐藏状态 $\boldsymbol{h}_t \in \mathbb{R}^{h}, t = 1,\ldots,T$ 来计算背景向量$\boldsymbol{c}_{t’}\in \mathbb{R}^{h}$。</p>
<p>我们可以将查询项矩阵 $\boldsymbol{Q} \in \mathbb{R}^{1 \times h}$ 设为 $\boldsymbol{s}_{t’ - 1}^\top$，并令键项矩阵 $\boldsymbol{K} \in \mathbb{R}^{T \times h}$ 和值项矩阵 $\boldsymbol{V} \in \mathbb{R}^{T \times h}$ 相同且第 $t$ 行均为 $\boldsymbol{h}_t^\top$​。</p>
<p>此时，我们只需要通过矢量化计算 $\text{softmax}(\boldsymbol{Q}\boldsymbol{K}^\top)\boldsymbol{V}$​​ 即可算出转置后的背景向量 $\boldsymbol{c}_{t’}^\top$。</p>
<p>当查询项矩阵 $\boldsymbol{Q}$ 的行数为 $n$ 时，上式将得到 $n$ 行的输出矩阵。输出矩阵与查询项矩阵在相同行上一一对应。</p>
<ul>
<li><strong>更新隐藏状态</strong> (GRU)</li>
</ul>
<p>以门控循环单元为例，在解码器中我们可以对 GRU 中门控循环单元的设计稍作修改，从而变换上一时间步 $t’-1$ 的输出 $\boldsymbol{y}_{t’-1}$、隐藏状态 $\boldsymbol{s}_{t’ - 1}$ 和当前时间步 $t’$ 的含注意力机制的背景变量 $\boldsymbol{c}_{t’}$。</p>
<p>解码器在时间步 $t’$ 的隐藏状态为：$\boldsymbol{s}_{t’} = \boldsymbol{z}_{t’} \odot \boldsymbol{s}_{t’-1}  + (1 - \boldsymbol{z}_{t’}) \odot \tilde{\boldsymbol{s}}_{t’}$.​</p>
<p>其中的重置门、更新门和候选隐藏状态分别为</p>
<script type="math/tex; mode=display">
\begin{aligned}
\boldsymbol{r}_{t'} &= \sigma(\boldsymbol{W}_{yr} \boldsymbol{y}_{t'-1} + \boldsymbol{W}_{sr} \boldsymbol{s}_{t' - 1} + \boldsymbol{W}_{cr} \boldsymbol{c}_{t'} + \boldsymbol{b}_r),\\
\boldsymbol{z}_{t'} &= \sigma(\boldsymbol{W}_{yz} \boldsymbol{y}_{t'-1} + \boldsymbol{W}_{sz} \boldsymbol{s}_{t' - 1} + \boldsymbol{W}_{cz} \boldsymbol{c}_{t'} + \boldsymbol{b}_z),\\
\tilde{\boldsymbol{s}}_{t'} &= \text{tanh}(\boldsymbol{W}_{ys} \boldsymbol{y}_{t'-1} + \boldsymbol{W}_{ss} (\boldsymbol{s}_{t' - 1} \odot \boldsymbol{r}_{t'}) + \boldsymbol{W}_{cs} \boldsymbol{c}_{t'} + \boldsymbol{b}_s),
\end{aligned}</script><p>其中含下标的 $\boldsymbol{W}$ ​和 $\boldsymbol{b}$ ​分别为门控循环单元的权重参数和偏差参数。</p>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>OOP 课程笔记</title>
    <url>/oop-note/</url>
    <content><![CDATA[<p>《面向对象程序设计基础》课程笔记的主要部分。内含：</p>
<ul>
<li>创建与销毁</li>
<li>引用与复制</li>
<li>组合与继承</li>
<li>虚函数</li>
<li>多态与模板</li>
<li>STL 初步</li>
</ul>
<a id="more"></a>
<h2 id="Week-05-创建和销毁"><a href="#Week-05-创建和销毁" class="headerlink" title="Week 05 创建和销毁"></a>Week 05 创建和销毁</h2><h3 id="5-0-Overview"><a href="#5-0-Overview" class="headerlink" title="5.0 Overview"></a>5.0 Overview</h3><ul>
<li>5.1 友元</li>
<li>5.2 静态成员与常量成员</li>
<li>5.3 常量/静态/参数对象的构造与析构时机</li>
<li>5.4 对象的new和delete</li>
</ul>
<h3 id="5-1-友元"><a href="#5-1-友元" class="headerlink" title="5.1 友元"></a>5.1 友元</h3><ul>
<li><p>友元</p>
<ul>
<li>被声明为友元的函数或类，具有对出现友元声明的类的private及protected成员的访问权限，即可以访问该类的一切成员。</li>
<li>友元的声明只能在类内进行。</li>
</ul>
</li>
<li><p>可以声明别的类的成员函数，包括构造和析构函数，为当前类的友元。</p>
</li>
<li>友元的声明与当前所在域是否为private或public无关。</li>
</ul>
<h3 id="5-2-静态成员与常量成员"><a href="#5-2-静态成员与常量成员" class="headerlink" title="5.2 静态成员与常量成员"></a>5.2 静态成员与常量成员</h3><h4 id="5-2-1-static"><a href="#5-2-1-static" class="headerlink" title="5.2.1 static"></a>5.2.1 static</h4><ol>
<li>静态变量与静态函数</li>
</ol>
<ul>
<li>静态变量：使用static修饰的变量<ul>
<li>初始化：初次定义时需要初始化，且只能初始化一次。</li>
<li>静态局部变量存储在静态存储区，生命周期将持续到整个程序结束</li>
<li>静态全局变量是<strong>内部可链接</strong>的，作用域仅限其声明的文件，不能被其他文件所用，可以避免和其他文件中的同名变量冲突</li>
</ul>
</li>
<li>静态函数：使用static修饰的函数<ul>
<li>静态函数是<strong>内部可链接</strong>的，作用域仅限其声明的文件，不能被其他文件所用，可以避免和其他文件中的同名函数冲突</li>
</ul>
</li>
</ul>
<ol>
<li>静态数据成员与静态成员函数</li>
</ol>
<ul>
<li><p>静态数据成员：使用static修饰的数据成员，是隶属于类的，称为类的静态数据成员，也称“类变量”</p>
<ul>
<li>静态数据成员被该类的所有对象共享（即所有对象中的这个数据域处在同一内存位置）</li>
<li>类的静态成员（数据、函数）既可以通过对象来访问，也可以通过类名来访问，如<code>ClassName::static_var</code>或者<code>a.static_var</code>（a为ClassName类的对象）</li>
<li>类的静态数据成员要在实现文件中赋初值，格式为：<code>Type ClassName::static_var = Value;</code></li>
<li>和全局变量一样，类的静态数据成员在程序开始前初始化</li>
</ul>
</li>
<li><p>静态成员函数：在返回值前面添加static修饰的成员函数，称为类的静态成员函数</p>
<ul>
<li>和静态数据成员类似，类的静态成员函数既可以通过对象来访问，也可以通过类名来访问，如<code>ClassName::static_function</code>或者<code>a.static_function</code>(a为ClassName类的对象）</li>
</ul>
</li>
<li><p><strong>静态成员函数不能访问非静态成员</strong>。（原因：分配时序）</p>
</li>
</ul>
<h4 id="5-2-2-const"><a href="#5-2-2-const" class="headerlink" title="5.2.2 const"></a>5.2.2 const</h4><ol>
<li>常量</li>
</ol>
<ul>
<li>修饰变量时（如<code>const int n = 1;</code>），必须就地初始化，该变量的值在其生命周期内都不会发生变化</li>
<li>修饰引用/指针时（如<code>int a=1; const int&amp; b=a;</code>），不能通过该引用/指针修改相应变量的值，常用于函数参数以保证函数体中无法修改参数的值</li>
<li>修饰函数返回值时（如<code>const int* func() &#123;…&#125;</code>），函数返回值的内容（或其指向的内容）不能被修改</li>
</ul>
<ol>
<li>常量数据成员和常量成员函数</li>
</ol>
<ul>
<li><p>常量数据成员：使用const修饰的数据成员，称为类的常量数据成员，在对象的整个生命周期里不可更改</p>
<ul>
<li>常量数据成员可以在<ul>
<li>构造函数的初始化列表中被初始化</li>
<li>就地初始化</li>
<li><strong>不允许</strong>在构造函数的函数体中通过赋值来设置</li>
</ul>
</li>
</ul>
</li>
<li><p>常量成员函数</p>
<ul>
<li>成员函数也能用const来修饰，称为常量成员函数。</li>
<li>常量成员函数的访问权限：实现语句不能修改类的数据成员，即不能改变对象状态（内容）<br><code>ReturnType Func(…) const &#123;…&#125;</code></li>
<li>注意区别：<code>const ReturnType Func(…) &#123;…&#125;</code></li>
<li>若对象被定义为常量(<code>const ClassName a;</code>)，则它只能调用以const修饰的成员函数<ul>
<li>常量对象：对象中的“数据”不能变</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>常量静态变量</li>
</ol>
<ul>
<li>当然，我们可以定义既是常量也是静态的变量<ul>
<li>作为类的常量变量</li>
</ul>
</li>
<li>常量静态变量需要在类外进行定义，但有两个例外：int和enum类型可以就地初始化</li>
<li>常量静态变量和静态变量一样，满足访问权限的任意函数均可访问，但都不能修改</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">foo</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> cs<span class="token punctuation">;</span> <span class="token comment">// 不可就地初始化</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 可以就地初始化</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// 也可以在类外定义</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> foo<span class="token double-colon punctuation">::</span>cs <span class="token operator">=</span> <span class="token string">"foo C string"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> foo<span class="token double-colon punctuation">::</span>j <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></code></pre>
<h3 id="5-3-常量-静态-参数对象的构造与析构时机"><a href="#5-3-常量-静态-参数对象的构造与析构时机" class="headerlink" title="5.3 常量/静态/参数对象的构造与析构时机"></a>5.3 常量/静态/参数对象的构造与析构时机</h3><h4 id="5-3-1-常量对象的构造与析构"><a href="#5-3-1-常量对象的构造与析构" class="headerlink" title="5.3.1 常量对象的构造与析构"></a>5.3.1 常量对象的构造与析构</h4><ul>
<li><strong>常量全局/局部对象</strong>的构造与析构时机和<strong>普通全局/局部对象</strong>相同</li>
<li>常量全局对象：在main()函数调用之前进行初始化，在main()函数执行完return，程序结束时，对象被析构<br>常量局部对象：在程序执行到该局部对象的代码时被初始化。在局部对象生命周期结束、即所在作用域结束后被析构</li>
</ul>
<h4 id="5-3-2-静态对象的构造与析构"><a href="#5-3-2-静态对象的构造与析构" class="headerlink" title="5.3.2 静态对象的构造与析构"></a>5.3.2 静态对象的构造与析构</h4><ol>
<li>静态全局对象</li>
</ol>
<ul>
<li>静态全局对象的构造与析构时机和普通全局对象相同</li>
</ul>
<ol>
<li>函数中静态对象</li>
</ol>
<ul>
<li><p>函数内部定义的静态局部对象</p>
</li>
<li><p>在程序执行到该静态局部对象的代码时被初始化，离开作用域不析构。</p>
</li>
<li>第二次执行到该对象代码时，不再初始化，直接使用上一次的对象。</li>
<li>在main()函数结束后被析构。</li>
</ul>
<ol>
<li>类静态对象</li>
</ol>
<ul>
<li>类A的对象a作为类B的静态变量</li>
<li>a的构造与析构表现和全局对象类似，即在main()函数调用之前进行初始化，在main()函数执行完return，程序结束时，对象被析构</li>
<li>和B是否实例化无关</li>
</ul>
<h4 id="5-3-3-参数对象的构造和析构"><a href="#5-3-3-参数对象的构造和析构" class="headerlink" title="5.3.3 参数对象的构造和析构"></a>5.3.3 参数对象的构造和析构</h4><h3 id="5-4-对象的new和delete"><a href="#5-4-对象的new和delete" class="headerlink" title="5.4 对象的new和delete"></a>5.4 对象的new和delete</h3><h2 id="Week-06-引用与复制"><a href="#Week-06-引用与复制" class="headerlink" title="Week 06 引用与复制"></a>Week 06 引用与复制</h2><h3 id="6-0-Overview"><a href="#6-0-Overview" class="headerlink" title="6.0 Overview"></a>6.0 Overview</h3><ul>
<li>6.1 常量引用</li>
<li>6.2 拷贝构造函数</li>
<li>6.3 右值引用</li>
<li>6.4 移动构造函数</li>
<li>6.5 赋值运算符</li>
<li>6.6 类型转换</li>
</ul>
<h3 id="6-1-常量引用"><a href="#6-1-常量引用" class="headerlink" title="6.1 常量引用"></a>6.1 常量引用</h3><ul>
<li>最小特权原则：给函数足够的权限去完成相应的任务，但不要给予他多余的权限。<ul>
<li>例如函数<code>void add(int&amp; a, int&amp; b)</code>，如果将参数类型定义为<code>int&amp;</code>，则给予该函数在函数体内修改a和b的值的权限</li>
<li>如果我们不想给予函数修改权限，则可以在参数中使用常量/常量引用</li>
<li><code>void add(const int&amp; a, const int&amp; b)</code></li>
<li>此时函数中仅能读取a和b的值，无法对a, b进行任何修改操作。</li>
</ul>
</li>
</ul>
<h3 id="6-2-拷贝构造函数"><a href="#6-2-拷贝构造函数" class="headerlink" title="6.2 拷贝构造函数"></a>6.2 拷贝构造函数</h3><ul>
<li>拷贝构造函数是一种特殊的构造函数，它的参数是语言规定的，是同类对象的常量引用</li>
<li><code>MyClass(const MyClass&amp;) &#123;&#125;</code></li>
<li>拷贝构造函数被调用的三种常见情况<ul>
<li>用一个类对象定义另一个新的类对象</li>
<li>函数调用时以类的对象为形参</li>
<li>函数返回类对象</li>
</ul>
</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 6.2.1</span>

<span class="token comment">// a</span>
Test a<span class="token punctuation">;</span> <span class="token comment">// NO</span>
Test <span class="token function">b</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//YES</span>
Test c <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">//YES</span>

<span class="token comment">// b</span>
<span class="token function">Func</span><span class="token punctuation">(</span>Test a<span class="token punctuation">)</span>

<span class="token comment">// c</span>
<span class="token keyword">return</span> a<span class="token punctuation">;</span></code></pre>
<ul>
<li>如果<strong>调用拷贝构造函数</strong>且当前<strong>没有</strong>给类<strong>显式定义</strong>拷贝构造函数，编译器将自动合成“<strong>隐式定义</strong>的拷贝构造函数”，其功能是<strong>调用所有数据成员的拷贝构造函数或拷贝赋值运算符</strong>。</li>
<li>隐式定义拷贝构造函数在遇到<strong>指针类型</strong>成员时可能会出错,导致多个指针类型的变量指向同一个地址。</li>
<li>拷贝构造函数的频繁调用会降低程序运行的效率，解决方法：<ul>
<li>使用引用/常量引用来传参或返回对象</li>
<li>将拷贝构造函数声明为 <code>private</code> ，或使用 <code>delete</code> 取消拷贝构造函数的隐式合成</li>
</ul>
</li>
</ul>
<h3 id="6-3-右值引用"><a href="#6-3-右值引用" class="headerlink" title="6.3 右值引用"></a>6.3 右值引用</h3><ul>
<li>左值和右值<ul>
<li>左值：可以取地址、有名字的值。</li>
<li>右值：不能取地址、没有名字的值; 常见于常值、函数返回值、表达式</li>
</ul>
</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 6.3.1</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token comment">// 其中a、b、c为左值，1、func函数返回值、a+b的结果为右值。</span></code></pre>
<ul>
<li>右值引用<ul>
<li>虽然右值无法取地址，但可以被&amp;&amp;引用(右值引用)<ul>
<li><code>int &amp;&amp;e = a+b;</code></li>
</ul>
</li>
<li>右值引用无法绑定左值<ul>
<li><code>int &amp;&amp;e = a; //Compile Error</code></li>
</ul>
</li>
<li>例外：常量左值引用能也绑定右值<ul>
<li><code>const int &amp;e = 3;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-4-移动构造函数"><a href="#6-4-移动构造函数" class="headerlink" title="6.4 移动构造函数"></a>6.4 移动构造函数</h3><ul>
<li>移动构造函数<ul>
<li>右值引用可以延续即将销毁变量的生命周期，用于构造函数可以<strong>提升处理效率</strong>，在此过程中尽可能少地进行拷贝。</li>
<li>使用右值引用作为参数的构造函数叫做移动构造函数。</li>
</ul>
</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 6.4.1</span>

<span class="token comment">// 拷贝构造函数</span>
<span class="token function">ClassName</span><span class="token punctuation">(</span><span class="token keyword">const</span> ClassName<span class="token operator">&amp;</span> VariableName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 移动构造函数</span>
<span class="token function">ClassName</span><span class="token punctuation">(</span>ClassName<span class="token operator">&amp;&amp;</span> VariableName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>移动构造函数与拷贝构造函数最主要的差别就是类中堆内存是重新开辟并拷贝，还是直接将指针指向那块地址。</li>
<li>对于一些即将析构的临时类，移动构造函数直接利用了原来临时对象中的堆内存，新的对象无需开辟内存，临时对象无需释放内存，从而大大提高计算效率。</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 6.4.2</span>

<span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">int</span> <span class="token operator">*</span> buf<span class="token punctuation">;</span> <span class="token comment">//// only for demo.</span>
	<span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//申请一块内存</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Test(): this->buf @ "</span> <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token operator">~</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~Test(): this->buf @ "</span> <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">const</span> Test<span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">buf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
			buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">.</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//拷贝数据</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Test(const Test&amp;) called. this->buf @ "</span>
			<span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">Test</span><span class="token punctuation">(</span>Test<span class="token operator">&amp;&amp;</span> t<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">buf</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//直接复制地址，避免拷贝</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Test(Test&amp;&amp;) called. this->buf @ "</span>
			<span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		t<span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token comment">//将t.buf改为nullptr，使其不再指向原来内存区域</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

Test <span class="token function">GetTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Test tmp<span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"GetTemp(): tmp.buf @ "</span>
		<span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> tmp<span class="token punctuation">.</span>buf <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>Test t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"fun(Test t): t.buf @ "</span>
		<span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span>buf <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Test a <span class="token operator">=</span> <span class="token function">GetTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"main() : a.buf @ "</span> <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span>buf <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// g++ test.cpp --std=c++11 -fno-elide-constructors -o test</span></code></pre>
<ul>
<li>移动语义<ul>
<li><code>std::move</code> 函数<ul>
<li>输入：左值（包括变量等，该左值一般不再使用）</li>
<li>返回值：该左值对应的右值</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-5-赋值运算符"><a href="#6-5-赋值运算符" class="headerlink" title="6.5 赋值运算符"></a>6.5 赋值运算符</h3><ul>
<li>拷贝复制运算符</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 6.5.1</span>

<span class="token comment">// 区分</span>
ClassName a<span class="token punctuation">;</span>
ClassName b<span class="token punctuation">;</span>
a <span class="token operator">=</span> b<span class="token punctuation">;</span>

ClassName a <span class="token operator">=</span> b<span class="token punctuation">;</span>

<span class="token comment">// 前者调用</span>
ClassName<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> ClassName<span class="token operator">&amp;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 避免自己赋值给自己</span>
		<span class="token comment">// 将right对象中的内容拷贝到当前对象中...</span>
	<span class="token punctuation">&#125;</span>
   <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>移动赋值运算符</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 6.5.2</span>
Test<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span>Test<span class="token operator">&amp;&amp;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> <span class="token operator">&amp;</span>right<span class="token punctuation">)</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"same obj!\n"</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>	
		<span class="token keyword">this</span><span class="token operator">-></span>buf <span class="token operator">=</span> right<span class="token punctuation">.</span>buf<span class="token punctuation">;</span>  <span class="token comment">//直接赋值地址</span>
		right<span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"operator=(Test&amp;&amp;) called.\n"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="6-6-类型转换"><a href="#6-6-类型转换" class="headerlink" title="6.6 类型转换"></a>6.6 类型转换</h3><ol>
<li>在源类中定义<strong>目标类型转换运算符</strong></li>
</ol>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 6.6.1</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">Dst</span> <span class="token punctuation">&#123;</span> <span class="token comment">//目标类Destination</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Dst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Dst::Dst()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>



<span class="token keyword">class</span> <span class="token class-name">Src</span> <span class="token punctuation">&#123;</span> <span class="token comment">//源类Source</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Src</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Src::Src()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">operator</span> <span class="token function">Dst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> 
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Src::operator Dst() called"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">Dst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<ol>
<li>在目标类中定义“源类对象作参数的构造函数”</li>
</ol>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 6.6.2</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Src</span><span class="token punctuation">;</span>	<span class="token comment">// 前置类型声明，因为在Dst中要用到Src类</span>
<span class="token keyword">class</span> <span class="token class-name">Dst</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Dst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Dst::Dst()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token function">Dst</span><span class="token punctuation">(</span><span class="token keyword">const</span> Src<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Dst::Dst(const Src&amp;)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Src</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Src</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Src::Src()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<ul>
<li><p>注意：两种自动类型转换的方法不能同时使用，使用时请任选其中一种。</p>
</li>
<li><p>禁止自动类型转换</p>
<ul>
<li>如果用 <code>explicit</code> 修饰类型转换运算符或类型转换构造函数，则相应的类型转换必须显式地进行</li>
</ul>
</li>
</ul>
<h2 id="Week-08-组合与继承"><a href="#Week-08-组合与继承" class="headerlink" title="Week 08 组合与继承"></a>Week 08 组合与继承</h2><h3 id="8-0-Overview"><a href="#8-0-Overview" class="headerlink" title="8.0 Overview"></a>8.0 Overview</h3><ul>
<li>组合</li>
<li>继承</li>
<li>成员访问权限</li>
<li>重写隐藏与重载</li>
<li>多重继承</li>
</ul>
<h3 id="8-1-组合"><a href="#8-1-组合" class="headerlink" title="8.1 组合"></a>8.1 组合</h3><ul>
<li>对象组合的两种实现方法：<ul>
<li>已有类的对象作为新类的公有数据成员，这样通过允许直接访问子对象而“提供”旧类接口</li>
<li>已有类的对象作为新类的私有数据成员。新类可以调整旧类的对外接口，可以不使用旧类原有的接口（相当于对接口作了转换）</li>
</ul>
</li>
<li>对象拷贝与赋值运算<ul>
<li>如果调用拷贝构造函数且没有给类显式定义拷贝构造函数，编译器将自动合成：<ul>
<li>对有显式定义拷贝构造函数的子对象调用该拷贝构造函数</li>
<li>对无显式定义拷贝构造函数的子对象采用位拷贝</li>
</ul>
</li>
<li>赋值的默认操作类似</li>
</ul>
</li>
</ul>
<h3 id="8-2-继承"><a href="#8-2-继承" class="headerlink" title="8.2 继承"></a>8.2 继承</h3><ul>
<li><p>基本概念</p>
<ul>
<li>被继承的已有类，被称为基类 <strong>base class</strong>，也称“父类”。</li>
<li>通过继承得到的新类，被为派生类 <strong>derived class</strong>，也称“子类”、“扩展类”。</li>
</ul>
</li>
<li><p>继承方式</p>
<ul>
<li>常见的继承方式：public, private<ul>
<li><code>class Derived : [private] Base &#123; .. &#125;;</code> 缺省继承方式</li>
<li><code>class Derived : public Base &#123; ... &#125;;</code></li>
</ul>
</li>
<li>protected 继承很少被使用<ul>
<li><code>class Derived : protected Base &#123; ... &#125;;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>什么不能被继承？</p>
<ul>
<li>构造函数：创建派生类对象时，必须调用派生类的构造函数，派生类构造函数调用基类的构造函数，以创建派生对象的基类部分。C++11新增了继承构造函数的机制（使用using），但默认不继承</li>
<li>析构函数：释放对象时，先调用派生类析构函数，再调用基类析构函数</li>
<li>赋值运算符：因为赋值运算符包含一个类型为其所属类的形参</li>
<li>友元函数：不是类成员</li>
</ul>
</li>
<li>派生类对象的构造与析构过程</li>
<li><p>调用基类构造函数</p>
<ul>
<li>若没有显式调用，则编译器会自动生成一个对基类的默认构造函数的调用。</li>
<li>若想要显式调用，则<strong>只能</strong>在派生类构造函数的<strong>初始化成员列表</strong>中进行。</li>
</ul>
</li>
<li><p>继承基类构造函数</p>
<ul>
<li>在派生类中使用 <code>using Base::Base;</code> 来继承基类构造函数，相当于给派生类“定义”了相应参数的构造函数，如下例 8.2.1.</li>
</ul>
</li>
<li>当基类存在多个构造函数时，使用using会给派生类自动构造多个相应的构造函数，如下例 8.2.2.<ul>
<li>如果基类的某个构造函数被声明为私有成员函数，则不能在派生类中声明继承该构造函数。</li>
<li>如果派生类使用了继承构造函数，编译器就不会再为派生类生成默认构造函数。</li>
</ul>
</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 8.2.1</span>
<span class="token keyword">class</span> <span class="token class-name">Base</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> data<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::Base("</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">")\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derive</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">using</span> Base<span class="token double-colon punctuation">::</span>Base<span class="token punctuation">;</span> 		<span class="token comment">///相当于 Derive(int i):Base(i)&#123;&#125;;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Derive <span class="token function">obj</span><span class="token punctuation">(</span><span class="token number">356</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </code></pre>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 8.2.2</span>
<span class="token keyword">class</span> <span class="token class-name">Base</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> data<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::Base("</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">")\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> 
		<span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::Base("</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> “<span class="token punctuation">,</span><span class="token string">" &lt;&lt; j &lt;&lt; "</span><span class="token punctuation">)</span>\n"<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derive</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">using</span> Base<span class="token double-colon punctuation">::</span>Base<span class="token punctuation">;</span> 		<span class="token comment">///相当于 Derive(int i):Base(i)&#123;&#125;;</span>
                     <span class="token comment">///加上 Derive(int i, int j):Base(i，j)&#123;&#125;;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Derive <span class="token function">obj</span><span class="token punctuation">(</span><span class="token number">356</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Derive <span class="token function">obj</span><span class="token punctuation">(</span><span class="token number">356</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>继承方式<ul>
<li>public 继承：基类中公有成员仍能在派生类中保持公有。（图 8.2.3）</li>
<li>private 继承：用基类接口实现派生类功能。（图 8.2.4）</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/04/12/EwhXWMB2RUrOzkT.png" alt="image-20210412091000928"></p>
<p>（图 8.2.3）</p>
<p><img src="https://i.loli.net/2021/04/12/5Q9VMBnZk7YUHpq.png" alt="image-20210412091010013"></p>
<p>（图 8.2.4）</p>
<h3 id="8-3-成员访问权限"><a href="#8-3-成员访问权限" class="headerlink" title="8.3 成员访问权限"></a>8.3 成员访问权限</h3><ul>
<li>基类中的私有成员<ul>
<li>不允许在派生类成员函数中访问</li>
<li>不允许派生类的对象访问它们</li>
</ul>
</li>
<li>基类中的公有成员<ul>
<li>允许在派生类成员函数中被访问</li>
<li>若是使用<code>public</code>继承方式，则成为派生类公有成员，可以被派生类的对象访问</li>
<li>若是使用 <code>private/protected</code> 继承方式，则成为派生类私有/保护成员，不能被派生类的对象访问<ul>
<li>若想让某成员能被派生类的对象访问，可在派生类 <code>public</code> 部分用关键字 <code>using</code>  声明它的名字（例 8.3.1）</li>
</ul>
</li>
</ul>
</li>
<li>基类中的保护成员<ul>
<li>与基类中的私有成员的不同在于：保护成员允许在派生类成员函数中被访问。</li>
</ul>
</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 8.3.1</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span> 
  <span class="token keyword">void</span> <span class="token function">baseFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"in Base::baseFunc()..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derive3</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span><span class="token comment">// B的私有继承</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token comment">/// 私有继承时，在派生类public部分声明基类成员名字</span>
  <span class="token keyword">using</span> Base<span class="token double-colon punctuation">::</span>baseFunc<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  Derive3 obj3<span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"calling obj3.baseFunc()..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  obj3<span class="token punctuation">.</span><span class="token function">baseFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//基类接口在派生类public部分声明，则派生类对象可调用</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>基类成员的访问权限<ul>
<li>public 继承：基类的公有成员，保护成员，私有成员作为派生类的成员时，都保持原有的状态。</li>
<li>private 继承：基类的公有成员，保护成员，私有成员作为派生类的成员时，都作为私有成员。</li>
<li>protected 继承：基类的公有成员，保护成员作为派生类的成员时，都成为保护成员，基类的私有成员仍然是私有的。</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/04/12/Wsf9mCAqRuQMdHz.png" alt="image-20210412091900016"></p>
<p>（表 8.3.2）</p>
<h3 id="8-4-重写隐藏与重载"><a href="#8-4-重写隐藏与重载" class="headerlink" title="8.4 重写隐藏与重载"></a>8.4 重写隐藏与重载</h3><ul>
<li>重载(overload)：<ul>
<li>目的：提供同名函数的不同实现，属于静态多态。</li>
<li>函数名必须相同，函数参数必须不同，作用域相同（如位于同一个类中；或同名全局函数）。</li>
</ul>
</li>
<li>重写隐藏(redefining)：<ul>
<li>目的：在派生类中重新定义基类函数，实现派生类的特殊功能。</li>
<li>屏蔽了基类的所有其它同名函数。（例 8.4.1）</li>
<li>函数名必须相同，函数参数可以不同</li>
<li>可以在派生类中通过 <code>using 类名::成员函数名;</code> 在派生类中“恢复”指定的基类成员函数（即去掉屏蔽），使之重新可用（例 8.4.2）</li>
</ul>
</li>
</ul>
<blockquote>
<p>程序编译时系统就能决定调用哪个函数，因此静态多态性又称为编译时的多态性。</p>
<p>多态分为两类：静态多态性和动态多态性，以前学过的函数重载和运算符重载实现的多态性属于静态多态性，在程序编译时系统就能决定调用哪个函数，因此静态多态性又称为编译时的多态性。静态多态性是通过函数的重载实现的。动态多态性是在程序运行过程中才动态地确定操作所针对的对象。它又称运行时的多态性。动态多态性是通过虚函数实现的。</p>
</blockquote>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 8.4.1</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B::f()\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::f("</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">")\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">/// 重载</span>
  <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::f("</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> <span class="token string">")\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">///重载</span>
  <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::f(T)\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">///重载</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derive</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Derive::f("</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">")\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">///重写隐藏</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  Derive d<span class="token punctuation">;</span>
  d<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  d<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">4.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">/// 编译警告。执行自动类型转换。</span>
  <span class="token comment">//  d.f();		/// 被屏蔽，编译错误</span>
  <span class="token comment">//  d.f(T());	/// 被屏蔽，编译错误</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 8.4.2</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::f()\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::f("</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">")\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::f("</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> <span class="token string">")\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::f(T)\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derive</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">using</span> Base<span class="token double-colon punctuation">::</span>f<span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Derive::f("</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">")\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  Derive d<span class="token punctuation">;</span>
  d<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  d<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">4.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  d<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  d<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li><code>using</code> 关键字<ul>
<li>继承基类构造函数</li>
<li>恢复被屏蔽的基类成员函数</li>
<li>还可用于：<ul>
<li>指示命名空间，<code>using namespace std;</code></li>
<li>将另一个命名空间的成员引入当前命名空间<code>using std::cout; cout &lt;&lt; endl;</code></li>
<li>定义类型别名，<code>using a = int;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="8-5-多重继承"><a href="#8-5-多重继承" class="headerlink" title="8.5 多重继承"></a>8.5 多重继承</h3><ul>
<li>派生类同时继承多个基类</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">File</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
<span class="token keyword">class</span> <span class="token class-name">InputFile</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">File</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
<span class="token keyword">class</span> <span class="token class-name">OutputFile</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">File</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
<span class="token keyword">class</span> <span class="token class-name">IOFile</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">InputFile</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">OutputFile</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p><img src="https://i.loli.net/2021/04/12/jCy49k6pKcM7XhE.png" alt="image-20210412092825715"></p>
<p>（图 8.5.1）</p>
<ul>
<li>数据存储<ul>
<li>如果派生类D继承的两个基类A,B，是同一基类Base的不同继承，则A,B中继承自Base的数据成员会在D有两份独立的副本，可能带来数据冗余。</li>
</ul>
</li>
<li>二义性<ul>
<li>如果派生类D继承的两个基类A,B，有同名成员a，则访问D中a时，编译器无法判断要访问的哪一个基类成员。</li>
</ul>
</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 8.5.2</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">int</span> a<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MiddleA</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">addA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a="</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A::bar"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MiddleB</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">addB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a="</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B::bar"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derive</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">MiddleA</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">MiddleB</span></span><span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  Derive d<span class="token punctuation">;</span>
  d<span class="token punctuation">.</span><span class="token function">addA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token comment">/// 输出 a=1。</span>
  d<span class="token punctuation">.</span><span class="token function">addB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token comment">/// 仍然输出 a=1。</span>
  cout <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span>a<span class="token punctuation">;</span> 	<span class="token comment">/// 编译错误，A和B都有成员a</span>
  cout <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span>A<span class="token double-colon punctuation">::</span>a<span class="token punctuation">;</span> <span class="token comment">/// 输出A中的成员a的值</span>
  d<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token comment">/// 编译错误，A和B都有成员函数bar</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h2 id="Week-09-虚函数"><a href="#Week-09-虚函数" class="headerlink" title="Week 09 虚函数"></a>Week 09 虚函数</h2><h3 id="9-0-Overview"><a href="#9-0-Overview" class="headerlink" title="9.0 Overview"></a>9.0 Overview</h3><ul>
<li>向上类型转换</li>
<li>对象切片</li>
<li>函数调用捆绑</li>
<li>虚函数和虚函数表</li>
<li>虚函数和构造函数、析构函数</li>
<li>重写覆盖，override和final</li>
</ul>
<h3 id="9-1-向上类型转换"><a href="#9-1-向上类型转换" class="headerlink" title="9.1 向上类型转换"></a>9.1 向上类型转换</h3><ul>
<li><strong>派生类</strong>对象/引用/指针<strong>转换成基类</strong>对象/引用/指针，称为向上类型转换。只对<code>public</code>继承有效，在继承图上是上升的；对<code>private</code>、<code>protected</code>继承无效。</li>
<li>向上类型转换（派生类到基类）可以由编译器自动完成，是一种隐式类型转换。</li>
<li>凡是<strong>接受基类对象/引用/指针的地方</strong>（如函数参数），都可以<strong>使用派生类对象/引用/指针</strong>，编译器会自动将派生类对象转换为基类对象以便使用。</li>
</ul>
<h3 id="9-2-对象切片"><a href="#9-2-对象切片" class="headerlink" title="9.2 对象切片"></a>9.2 对象切片</h3><ul>
<li><p>当<strong>派生类的对象</strong><code>(不是指针或引用)</code>被通过<strong>传参或赋值</strong>的方式转换为<strong>基类的对象</strong>时，派生类的对象被<strong>切片</strong>为对应基类的子对象。</p>
<ul>
<li><img src="https://i.loli.net/2021/04/19/2tVMgrhZ3GPT1cI.png" alt="image-20210419081125275"></li>
<li>派生类的新数据和新方法丢失（图 9.2.1）</li>
</ul>
</li>
<li><p>当派生类的<code>指针（引用）</code>被通过<strong>传参或赋值</strong>的方式转换为基类<code>指针（引用）</code>时，不会创建新的对象，但只保留基类的接口。</p>
</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 9.2.2 私有继承“照此实现”</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> data<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> data <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">D1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">B</span></span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">using</span> B<span class="token double-colon punctuation">::</span>getData<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    D1 d1<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> d1<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">// d1.setData(10) //隐藏了基类的setData函数，不可访问 </span>
    <span class="token comment">// B&amp; b = d1;     //不允许私有继承的向上转换</span>
    <span class="token comment">// b.setData(10); //否则可以绕过D1，调用基类的setData函数</span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="9-3-函数调用捆绑"><a href="#9-3-函数调用捆绑" class="headerlink" title="9.3 函数调用捆绑"></a>9.3 函数调用捆绑</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 9.3.1</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Instrument</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Instrument::play"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Wind</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Instrument</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token comment">// Redefine interface function:</span>
  <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Wind::play"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">tune</span><span class="token punctuation">(</span>Instrument<span class="token operator">&amp;</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  i<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  Wind flute<span class="token punctuation">;</span>
  <span class="token function">tune</span><span class="token punctuation">(</span>flute<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//引用的向上类型转换(传参)，编译器早绑定，无对象切片产生</span>
  Instrument <span class="token operator">&amp;</span>inst <span class="token operator">=</span> flute<span class="token punctuation">;</span>  <span class="token comment">// 引用的向上类型转换(赋值)</span>
  inst<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>把函数体与函数调用相联系称为<strong>捆绑</strong>(binding)。<ul>
<li>即将函数体实现代码的入口地址，与调用的函数名绑定。执行到调用代码时进入函数体内部。</li>
</ul>
</li>
<li>当捆绑在程序运行之前（由编译器和连接器）完成时，称为<strong>早捆绑</strong>(early binding)。<ul>
<li>运行之前已经决定了函数调用代码到底进入哪个函数。</li>
<li>上面程序中的问题是早捆绑引起的，编译器将tune中的函数调用i.play()与Instrument::play()绑定。</li>
</ul>
</li>
<li>当捆绑根据对象的实际类型(上例中即子类Wind而非Instrument)，发生在程序运行时，称为<strong>晚捆绑</strong>(late binding)，又称动态捆绑或运行时捆绑。<ul>
<li>要求在运行时能确定对象的实际类型，并绑定正确的函数。</li>
<li>晚捆绑只对类中的虚函数起作用，使用 virtual 关键字声明虚函数。</li>
</ul>
</li>
</ul>
<h3 id="9-4-虚函数与虚函数表"><a href="#9-4-虚函数与虚函数表" class="headerlink" title="9.4 虚函数与虚函数表"></a>9.4 虚函数与虚函数表</h3><ul>
<li>对于被派生类重新定义的成员函数，若它<strong>在基类中被声明为虚函数</strong>，则通过基类<strong><code>指针或引用</code></strong>调用该成员函数时，编译器将根据所指（或引用）对象的实际类型决定是调用基类中的函数，还是调用派生类重写的函数。</li>
<li>若某成员函数在基类中声明为虚函数，当派生类重写覆盖(同名，同参数函数)它时，无论是否声明为虚函数，该成员函数都仍然是虚函数。</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 9.4.1</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Instrument</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Instrument::play"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Wind</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Instrument</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Wind::play"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
     <span class="token comment">/// 重写覆盖(稍后：重写隐藏和重写覆盖的区别）</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">tune</span><span class="token punctuation">(</span>Instrument<span class="token operator">&amp;</span> ins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  ins<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/// 由于 Instrument::play 是虚函数，编译时不再直接绑定，运行时根据 ins 的实际类型调用。</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  Wind flute<span class="token punctuation">;</span>
  <span class="token function">tune</span><span class="token punctuation">(</span>flute<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/// 向上类型转换</span>
<span class="token punctuation">&#125;</span>
</code></pre>
<ul>
<li><p>一般来说，派生类虚函数的返回类型应该和基类相同。</p>
<ul>
<li><p>或者，是协变(Covariant)的，例如</p>
<ul>
<li>基类和派生类的指针是协变的</li>
<li>基类和派生类的引用是协变的</li>
</ul>
</li>
<li><p>```cpp<br>// Example 9.4.2</p>
<h1 id="include"><a href="#include" class="headerlink" title="include "></a>include <iostream></h1><p>using namespace std;</p>
<p>class Instrument {<br>public:<br>  virtual Instrument&amp; getObj() { return *this; }<br>};</p>
<p>class Wind : public Instrument {<br>public:<br>  virtual Wind&amp; getObj() { return *this;}<br>  //Wind&amp;和Instrument&amp;协变<br>};</p>
<pre class="language-none"><code class="language-none">
+ 虚函数表
  + 对象自身要包含自己实际类型的信息：用虚函数表表示。运行时通过虚函数表确定对象的实际类型。
  + **虚函数表**(VTABLE)：每个包含虚函数的类用于存储虚函数地址的表(虚函数表有唯一性，即使没有重写虚函数)。
  + 每个**包含虚函数的类对象**中，编译器秘密地放一个**指针**，称为**虚函数指针**(vpointer&#x2F;VPTR)，指向这个类的VTABLE。
  + 当通过基类指针做虚函数调用时，编译器静态地插入能取得这个VPTR并在VTABLE表中查找函数地址的代码，这样就能调用正确的函数并引起晚捆绑的发生。
    + **编译**期间：**建立虚函数表VTABLE**，记录每个类或该类的基类中所有已声明的虚函数入口地址。
    + **运行**期间：**建立虚函数指针VPTR**，在构造函数中发生，指向相应的VTABLE。

&#96;&#96;&#96;cpp
&#x2F;&#x2F; Example 9.4.3
#include &lt;iostream&gt;
using namespace std;
class B &#123;
   public:
    virtual void fun1() &#123; cout &lt;&lt; &quot;B::fun1()&quot; &lt;&lt; endl; &#125;
    virtual void fun2() &#123; cout &lt;&lt; &quot;B::fun2()&quot; &lt;&lt; endl; &#125;

   private:
    int i;
    float j;
&#125;;
class D : public B &#123;
   public:
    virtual void fun1() &#123;
        cout &lt;&lt; &quot;D::fun1()&quot; &lt;&lt; endl;
    &#125;  &#x2F;&#x2F;&#x2F;对fun1重写覆盖，对fun2没有，则fun2使用基类的虚函数地址
    double k;
&#125;;
int main() &#123;
    B b;
    D d;
    B* pB &#x3D; &amp;d;
    pB-&gt;fun1();
&#125;</code></pre>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/04/19/LEmhf6Y7igcUnPT.png" alt="image-20210419083950089"></p>
<p>（图 9.4.4）</p>
<h3 id="9-5-虚函数与构造函数、析构函数"><a href="#9-5-虚函数与构造函数、析构函数" class="headerlink" title="9.5 虚函数与构造函数、析构函数"></a>9.5 虚函数与构造函数、析构函数</h3><ul>
<li><p>虚函数与构造函数</p>
<ul>
<li>当创建一个包含有虚函数的对象时，必须初始化它的VPTR以指向相应的VTABLE。设置VPTR的工作由构造函数完成。编译器在构造函数的开头秘密的插入能初始化VPTR的代码。</li>
<li>构造函数不能也不必是虚函数。<ul>
<li>不能：如果构造函数是虚函数，则创建对象时需要先知道VPTR，而在构造函数调用前，VPTR未初始化。</li>
<li>不必：构造函数的作用是提供类中成员初始化，调用时明确指定要创建对象的类型，没有必要是虚函数。</li>
</ul>
</li>
<li>在构造函数中调用一个虚函数，被调用的只是这个函数的本地版本(即当前类的版本)，即虚机制在构造函数中不工作。</li>
<li>初始化顺序：(与构造函数初始化列表顺序无关)<ul>
<li>基类初始化</li>
<li>对象成员初始化</li>
<li>构造函数体</li>
</ul>
</li>
<li>原因：基类的构造函数比派生类先执行，调用基类构造函数时派生类中的数据成员还没有初始化。如果允许调用实际对象的虚函数，则可能会用到未初始化的派生类成员。</li>
</ul>
</li>
<li><p>虚函数与析构函数</p>
<ul>
<li>析构函数能是虚的，且常常是虚的。虚析构函数仍需定义函数体。</li>
<li>虚析构函数的用途：当删除基类对象指针时，编译器将根据指针所指对象的实际类型，调用相应的析构函数。</li>
<li>若基类析构不是虚函数，则删除基类指针所指派生类对象时，编译器仅自动调用基类的析构函数，而不会考虑实际对象是不是基类的对象。这可能会导致内存泄漏。</li>
<li>在析构函数中调用一个虚函数，被调用的只是这个函数的本地版本，即虚机制在析构函数中不工作。 </li>
</ul>
</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 9.5.1</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Base1</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token operator">~</span><span class="token function">Base1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~Base1()\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derived1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base1</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token operator">~</span><span class="token function">Derived1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~Derived1()\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Base2</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Base2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~Base2()\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derived2</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base2</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token operator">~</span><span class="token function">Derived2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~Derived2()\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  Base1<span class="token operator">*</span> bp <span class="token operator">=</span> <span class="token keyword">new</span> Derived1<span class="token punctuation">;</span>
  <span class="token keyword">delete</span> bp<span class="token punctuation">;</span> <span class="token comment">/// 只调用了基类的虚析构函数</span>
  Base2<span class="token operator">*</span> b2p <span class="token operator">=</span> <span class="token keyword">new</span> Derived2<span class="token punctuation">;</span>
  <span class="token keyword">delete</span> b2p<span class="token punctuation">;</span> <span class="token comment">/// 派生类虚析构函数调用完后调用基类的虚析构函数</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output</span>
<span class="token operator">~</span><span class="token function">Base1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">~</span><span class="token function">Derived2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">~</span><span class="token function">Base2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<ul>
<li>重要原则：总是将基类的析构函数设置为虚析构函数</li>
</ul>
<h3 id="9-6-重载、重写覆盖与重写隐藏"><a href="#9-6-重载、重写覆盖与重写隐藏" class="headerlink" title="9.6 重载、重写覆盖与重写隐藏"></a>9.6 重载、重写覆盖与重写隐藏</h3><ul>
<li><strong>重载(overload)：</strong><ul>
<li>函数名必须相同，函数参数必须不同，作用域相同(同一个类)，返回值可以相同或不同。</li>
</ul>
</li>
<li><strong>重写覆盖(override)：</strong><ul>
<li>派生类重新定义基类中的<strong>虚函数</strong>，<strong>函数名必须相同</strong>，函数<strong>参数必须相同</strong>，<strong>返回值一般情况应相同</strong>。</li>
<li>派生类的虚函数表中原基类的虚函数指针会被派生类中重新定义的虚函数指针覆盖掉。</li>
</ul>
</li>
<li><strong>重写隐藏(redefining)：</strong><ul>
<li>派生类重新定义基类中的函数，<strong>函数名相同</strong>，但是<strong>参数不同或者基类的函数不是虚函数</strong>。</li>
<li>虚函数表不会发生覆盖。</li>
</ul>
</li>
<li><p>重写覆盖和重写隐藏：</p>
<ul>
<li>相同点：<ul>
<li>都要求派生类定义的函数与基类同名。</li>
<li>都会屏蔽基类中的同名函数，即派生类的实例无法调用基类的同名函数。</li>
</ul>
</li>
<li>不同点：<ul>
<li>重写覆盖要求基类的函数是虚函数，且函数参数相同，返回值一般情况应相同；重写隐藏要求基类的函数不是虚函数或者函数参数不同。</li>
<li>重写覆盖会使派生类虚函数表中基类的虚函数的指针被派生类的虚函数指针覆盖。重写隐藏不会。</li>
</ul>
</li>
</ul>
</li>
<li><p>override与final关键字</p>
<ul>
<li>重写覆盖要满足的条件很多，很容易写错，可以使用override关键字辅助检查。</li>
<li>override关键字明确地告诉编译器一个函数是对基类中一个虚函数的重写覆盖，编译器将对重写覆盖要满足的条件进行检查，正确的重写覆盖才能通过编译。</li>
<li>如果没有override关键字，但是满足了重写覆盖的各项条件，也能实现重写覆盖。它只是编译器的一个检查，正确实现override时，对编译结果没有影响。</li>
</ul>
</li>
<li><p>不想让使用者继承？-&gt; final关键字!</p>
<ul>
<li>在虚函数声明或定义中使用时，final确保函数为虚且不可被派生类重写。可在继承关系链的“中途”进行设定，禁止后续派生类对指定虚函数重写。</li>
<li>在类定义中使用时，final指定此类不可被继承。</li>
</ul>
</li>
</ul>
<h2 id="Week-10-多态与模板"><a href="#Week-10-多态与模板" class="headerlink" title="Week 10 多态与模板"></a>Week 10 多态与模板</h2><h3 id="10-0-Overview"><a href="#10-0-Overview" class="headerlink" title="10.0 Overview"></a>10.0 Overview</h3><ul>
<li>纯虚函数与抽象类</li>
<li>向下类型转换</li>
<li>多重继承的虚函数表，多重继承的利弊</li>
<li>多态</li>
<li>函数模板与类模板</li>
</ul>
<h3 id="10-1-纯虚函数与抽象类"><a href="#10-1-纯虚函数与抽象类" class="headerlink" title="10.1 纯虚函数与抽象类"></a>10.1 纯虚函数与抽象类</h3><ul>
<li><p>虚函数还可以进一步声明为纯虚函数，包含纯虚函数的类，通常被称为“抽象类”。</p>
<ul>
<li><code>virtual 返回类型 函数名(形式参数) = 0;</code></li>
</ul>
</li>
<li><p>抽象类不允许定义对象，定义基类为抽象类的主要用途是为派生类规定共性“接口”</p>
</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 10.1.1</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/// 可在类外定义函数体提供默认实现。派生类通过 A::f() 调用</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
A obj<span class="token punctuation">;</span> <span class="token comment">/// 不准抽象类定义对象！编译不通过！</span></code></pre>
<ul>
<li><p>抽象类</p>
<ul>
<li>定义：含有至少一个纯虚函数。</li>
<li>特点：<ul>
<li>不允许定义对象。</li>
<li>只能为派生类提供接口。</li>
<li>能避免对象切片：保证只有指针和引用能被向上类型转换。</li>
</ul>
</li>
</ul>
</li>
<li><p>基类纯虚函数被派生类重写覆盖之前仍是纯虚函数。因此当继承一个抽象类时，必须实现所有纯虚函数，否则继承出的类也是抽象类。</p>
</li>
<li><strong>纯虚析构函数除外</strong><ul>
<li>对于纯虚析构函数而言，即便派生类中不显式实现，编译器也会自动合成默认析构函数。因此，即使派生类不覆盖纯虚析构函数，派生类可以不是抽象类，可以定义派生类对象。</li>
<li>回顾：虚函数与析构函数<ul>
<li>析构函数能是虚的，且常常是虚的。<strong>虚析构函数仍需定义函数体</strong>。</li>
<li>虚析构函数的用途：当删除基类对象指针时，编译器将根据指针所指对象的实际类型，调用相应的析构函数。</li>
</ul>
</li>
<li>析构函数也可以是纯虚函数<ul>
<li>纯虚析构函数仍然需要函数体</li>
<li>目的：使基类成为抽象类，不能创建基类的对象。如果有其他函数是纯虚函数，则析构函数不必是纯虚的。</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 10.1.2</span>
<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span><span class="token operator">:</span> 
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">Base</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">/// 必须有函数体</span>
<span class="token keyword">class</span> <span class="token class-name">Derive</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Base b<span class="token punctuation">;</span> <span class="token comment">/// 编译错误，基类是抽象类</span>
    Derive d1<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="10-2-向下类型转换"><a href="#10-2-向下类型转换" class="headerlink" title="10.2 向下类型转换"></a>10.2 向下类型转换</h3><ul>
<li>基类指针/引用转换成派生类指针/引用，则称为向下类型转换。（类层次中向下移动）</li>
<li>如何确保转换的正确性？<ul>
<li>如何保证基类指针指向的对象也可以被要转换的派生类的指针指向？—— 借助虚函数表进行动态类型检查！</li>
</ul>
</li>
<li>C++提供了一个特殊的显式类型转换，称为<code>dynamic_cast</code>，是一种安全类型向下类型转换。<ul>
<li>使用dynamic_cast的对象必须有虚函数，因为它使用了存储在虚函数表中的信息判断实际的类型。使用方法：<ul>
<li>obj_p，obj_r分别是T1类型的指针和引用<ul>
<li><code>T2* pObj = dynamic_cast&lt;T2*&gt;(obj_p);</code>//转换为T2指针，运行时失败返回 <code>nullptr</code></li>
<li><code>T2&amp; refObj = dynamic_cast&lt;T2&amp;&gt;(obj_r);</code> //转换为T2引用，运行时失败抛出 <code>bad_cast</code> 异常</li>
</ul>
</li>
<li>T1必须是多态类型（声明或继承了至少一个虚函数的类），否则不过编译；T2不必。T1,T2没有继承关系也能通过编译，只不过运行时会转换失败。</li>
</ul>
</li>
<li>如果我们知道正在处理的是哪些类型，可以使用static_cast来避免这种开销。<ul>
<li>static_cast在编译时静态浏览类层次，只检查继承关系。没有继承关系的类之间，必须具有转换途径才能进行转换（要么自定义，要么是语言语法支持），否则不过编译。运行时无法确认是否正确转换。</li>
<li>static_cast使用方法：<ul>
<li>obj_p，obj_r分别是T1类型的指针和引用</li>
<li><code>T2* pObj = static_cast&lt;T2*&gt;(obj_p);</code>   //转换为T2指针</li>
<li><code>T2&amp; refObj = static_cast&lt;T2&amp;&gt;(obj_r);</code>   //转换为T2引用</li>
<li>不安全：不保证转换后的目标是T2类型的，可能导致非法内存访问。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 10.2.1</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span></span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> i<span class="token punctuation">&#123;</span><span class="token number">2018</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    D d<span class="token punctuation">;</span>
    B b<span class="token punctuation">;</span>
    <span class="token comment">//    D d1 = static_cast&lt;D>(b); ///未定义类型转换方式</span>
    <span class="token comment">//    D d2 = dynamic_cast&lt;D>(b); ///只允许指针和引用转换</span>

    D<span class="token operator">*</span> pd1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>D<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/// 有继承关系，允许转换</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pd1 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"static_cast, B*(B) --> D*: OK"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"D::i="</span> <span class="token operator">&lt;&lt;</span> pd1<span class="token operator">-></span>i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/// 但是不安全：对D中成员i可能非法访问</span>

    D<span class="token operator">*</span> pd2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>D<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pd2 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>  <span class="token comment">/// 不允许不安全的转换</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"dynamic_cast, B*(B) --> D*: FAILED"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">static_cast</span><span class="token punctuation">,</span> B<span class="token operator">*</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> D<span class="token operator">*</span><span class="token operator">:</span>OK
<span class="token operator">>></span><span class="token operator">></span> D<span class="token double-colon punctuation">::</span>i<span class="token operator">=</span><span class="token number">124455624</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">dynamic_cast</span><span class="token punctuation">,</span> B<span class="token operator">*</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> D<span class="token operator">*</span><span class="token operator">:</span> FAILED</code></pre>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 10.2.2</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span></span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> i<span class="token punctuation">&#123;</span><span class="token number">2018</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    D d<span class="token punctuation">;</span>
    B b<span class="token punctuation">;</span>
    <span class="token comment">//    D d1 = static_cast&lt;D>(b); ///未定义类型转换</span>
    <span class="token comment">//    D d2 = dynamic_cast&lt;D>(b); ///只允许指针和引用转换</span>
    B<span class="token operator">*</span> pb <span class="token operator">=</span> <span class="token operator">&amp;</span>d<span class="token punctuation">;</span>
    D<span class="token operator">*</span> pd3 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>D<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pd3 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"static_cast, B*(D) --> D*: OK"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"D::i="</span> <span class="token operator">&lt;&lt;</span> pd3<span class="token operator">-></span>i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    D<span class="token operator">*</span> pd4 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>D<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pd4 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"dynamic_cast, B*(D) --> D*: OK"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"D::i="</span> <span class="token operator">&lt;&lt;</span> pd4<span class="token operator">-></span>i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">static_cast</span><span class="token punctuation">,</span> B<span class="token operator">*</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> D<span class="token operator">*</span><span class="token operator">:</span> OK
<span class="token operator">>></span><span class="token operator">></span> D<span class="token double-colon punctuation">::</span>i<span class="token operator">=</span><span class="token number">2018</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">dynamic_cast</span><span class="token punctuation">,</span> B<span class="token operator">*</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> D<span class="token operator">*</span><span class="token operator">:</span> OK
<span class="token operator">>></span><span class="token operator">></span> D<span class="token double-colon punctuation">::</span>i<span class="token operator">=</span><span class="token number">2018</span></code></pre>
<ul>
<li><p>重要原则(清楚指针所指向的真正对象)：<br>1）指针或引用的向上转换总是安全的；<br>2）向下转换时用dynamic_cast，安全检查；<br>3）避免对象之间的转换。</p>
</li>
<li><p>对于基类中有虚函数的情况：</p>
<ul>
<li>向上类型转换：<ul>
<li>转换为基类指针或引用，则对应虚函数表仍为派生类的虚函数表（晚绑定）。</li>
<li>转换为基类对象，则对应虚函数表是基类的虚函数表（早绑定）。</li>
</ul>
</li>
<li>向下类型转换：<br>dynamic_cast通过虚函数表来判断是否能进行向下类型转换。</li>
</ul>
</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 10.2.3</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Pet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Pet</span></span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"dog run"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Pet</span></span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"bird fly"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span>Pet<span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">auto</span> d <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dog<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/// 向下类型转换</span>
    <span class="token keyword">auto</span> b <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Bird<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/// 向下类型转换</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span>  <span class="token comment">/// 运行时根据实际类型表现特性</span>
        d<span class="token operator">-></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>
        b<span class="token operator">-></span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Pet<span class="token operator">*</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> Dog<span class="token punctuation">;</span>   <span class="token comment">/// 向上类型转换</span>
    p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> Bird<span class="token punctuation">;</span>  <span class="token comment">/// 向上类型转换</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">action</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="10-3-多重继承的虚函数表与利弊"><a href="#10-3-多重继承的虚函数表与利弊" class="headerlink" title="10.3 多重继承的虚函数表与利弊"></a>10.3 多重继承的虚函数表与利弊</h3><ul>
<li>多重继承中的虚函数<ul>
<li>最多继承一个非抽象类 <strong>避免</strong> 多重继承的二义性</li>
<li>可以集成多个抽象类 <strong>利用</strong> 一个对象可以实现多个接口</li>
</ul>
</li>
</ul>
<h3 id="10-4-多态"><a href="#10-4-多态" class="headerlink" title="10.4 多态"></a>10.4 多态</h3><ul>
<li><p>按照基类的接口定义，调用指针或引用所指对象的接口函数，函数执行过程因对象实际所属派生类的不同而呈现不同的效果（表现），这个现象被称为“多态”。</p>
<ul>
<li>当利用基类指针/引用调用函数时<ul>
<li>虚函数在运行时确定执行哪个版本，取决于引用或指针对象的真实类型</li>
<li>非虚函数在编译时绑定</li>
</ul>
</li>
<li>当利用类的对象直接调用函数时<ul>
<li>无论什么函数，均在编译时绑定</li>
</ul>
</li>
<li>产生多态效果的条件：继承 &amp;&amp; 虚函数 &amp;&amp; (引用 || 指针)</li>
</ul>
</li>
<li><p>应用：TEMPLATE METHOD设计模式</p>
<ul>
<li>在接口的一个方法中定义算法的骨架</li>
<li>将一些步骤的实现延迟到子类中</li>
<li>使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</li>
</ul>
</li>
<li>模板方法是一种源代码重用的基本技术，在类库的设计实现中应用十分广泛，因为这个设计模式能有效地解决 “类库提供公共行为”与“用户定制特殊细节”之间的折中平衡。</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 10.4.1</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">step3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::step1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::step2"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">step3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::step3"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derived1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Derived1::step1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Derived2</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Derived2::step2"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Base<span class="token operator">*</span> ba<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> Base<span class="token punctuation">,</span> <span class="token keyword">new</span> Derived1<span class="token punctuation">,</span> <span class="token keyword">new</span> Derived2<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ba<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"==="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">>></span><span class="token operator">></span>
Base<span class="token double-colon punctuation">::</span>step1
Base<span class="token double-colon punctuation">::</span>step2
Base<span class="token double-colon punctuation">::</span>step3
<span class="token operator">==</span><span class="token operator">=</span>
Derived1<span class="token double-colon punctuation">::</span>step1
Base<span class="token double-colon punctuation">::</span>step2
Base<span class="token double-colon punctuation">::</span>step3
<span class="token operator">==</span><span class="token operator">=</span>
Base<span class="token double-colon punctuation">::</span>step1
Derived2<span class="token double-colon punctuation">::</span>step2
Base<span class="token double-colon punctuation">::</span>step3
<span class="token operator">==</span><span class="token operator">=</span></code></pre>
<h3 id="10-5-函数模板与类模板"><a href="#10-5-函数模板与类模板" class="headerlink" title="10.5 函数模板与类模板"></a>10.5 函数模板与类模板</h3><ol>
<li>函数模板</li>
</ol>
<ul>
<li>有些算法实现与类型无关，所以可以将函数的参数类型也定义为一种特殊的“参数”，这样就得到了“函数模板”。</li>
<li>定义函数模板的方法<ul>
<li><code>template &lt;typename T&gt; ReturnType Func(Args)；</code></li>
<li>如：任意类型两个变量相加的“函数模板”</li>
<li><code>template &lt;typename T&gt;  T sum(T a, T b) &#123; return a + b; &#125;</code></li>
<li>注：typename也可换为class</li>
</ul>
</li>
<li>函数模板在调用时，编译器能自动推导出实际参数的类型（这个过程叫做实例化）。<ul>
<li>所以，形式上调用一个函数模板与普通函数没有区别。</li>
<li>当多个参数的类型不一致时，无法推导：<ul>
<li><code>cout &lt;&lt; sum(9, 2.1);</code> //编译错误</li>
<li>手工指定调用类型：<code>sum&lt;int&gt;(9, 2.1);</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>类模板</li>
</ol>
<ul>
<li>在定义类时也可以将一些类型信息抽取出来，用模板参数来替换，从而使类更具通用性。这种类被称为“类模板”。</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 10.5.1</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
    T data<span class="token punctuation">;</span>

   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> data <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    A<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">;</span>
    a<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>类模板中成员函数的类外定义</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 10.5.2</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
    T data<span class="token punctuation">;</span>

   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">A</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    cout <span class="token operator">&lt;&lt;</span> data <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    A<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">;</span>
    a<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>类模板的“模板参数”<ul>
<li>类型参数：使用typename或class标记</li>
<li>非类型参数：整数，枚举，指针（指向对象或函数），引用（引用对象或引用函数）。整数型比较常用。</li>
</ul>
</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 10.5.3</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> size<span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">array</span> <span class="token punctuation">&#123;</span>
    T elems<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

array<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">></span> array0<span class="token punctuation">;</span></code></pre>
<ul>
<li>模板与多态<ul>
<li>模板使用泛型标记，使用同一段代码，来关联不同但相似的特定行为，最后可以获得不同的结果。模板也是多态的一种体现。</li>
<li>但模板的关联是在编译期处理，称为静多态。<ul>
<li>往往和函数重载同时使用</li>
<li>高效，省去函数调用</li>
<li>编译后代码增多</li>
</ul>
</li>
<li>基于继承和虚函数的多态在运行期处理，称为动多态<ul>
<li>运行时，灵活方便</li>
<li>侵入式，必须继承</li>
<li>存在函数调用</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Week-11-模板与STL初步"><a href="#Week-11-模板与STL初步" class="headerlink" title="Week 11 模板与STL初步"></a>Week 11 模板与STL初步</h2><h3 id="11-0-Overview"><a href="#11-0-Overview" class="headerlink" title="11.0 Overview"></a>11.0 Overview</h3><ul>
<li><s>类模板与函数模板特化</s></li>
<li>命名空间</li>
<li>STL初步——容器与迭代器</li>
</ul>
<h3 id="11-1-命名空间"><a href="#11-1-命名空间" class="headerlink" title="11.1 命名空间"></a>11.1 命名空间</h3><ul>
<li>为了避免在大规模程序的设计中，以及在程序员使用各种各样的C++库时，标识符的命名发生冲突，标准C++引入了关键字namespace（命名空间），可以更好地控制标识符的作用域。</li>
<li>标准C++库（不包括标准C库）中所包含的所有内容（包括常量、变量、结构、类和函数等）都被定义在命名空间std（standard标准）中。</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Example 11.1.1</span>
<span class="token comment">// 定义命名空间</span>
<span class="token keyword">namespace</span> A <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 使用命名空间</span>
A<span class="token double-colon punctuation">::</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
A<span class="token double-colon punctuation">::</span>y <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>使用using声明简化命名空间使用</li>
<li>使用整个命名空间：所有成员都直接可用<code>using namespace A;</code> <code>x = 3; y = 6;</code></li>
<li>使用部分成员：所选成员可直接使用  <code>using A::x;</code> <code>x = 3; A::y = 6;</code></li>
<li>任何情况下，都不应出现命名冲突</li>
</ul>
<h3 id="11-2-STL初步"><a href="#11-2-STL初步" class="headerlink" title="11.2 STL初步"></a>11.2 STL初步</h3><ul>
<li><p>标准模板库（英文：Standard Template Library，缩写：STL），是一个高效的C++软件库，它被容纳于C++ 标准程序库C++ Standard Library中。其中包含4个组件，分别为算法、容器、函数、迭代器。基于模板编写。关键理念：将“在数据上执行的操作”与“要执行操作的数据”分离。</p>
</li>
<li><p>简单容器</p>
<ul>
<li>容器是包含、放置数据的工具。通常为数据结构。<ul>
<li>简单容器（simple container）</li>
<li>序列容器（sequence container）</li>
<li>关系容器（associative container）</li>
</ul>
</li>
</ul>
</li>
<li><code>std::pair</code></li>
<li><code>std::tuple</code></li>
<li><p><code>std::vector</code></p>
<ul>
<li>创建：<code>std::vector&lt;int&gt; x;</code></li>
<li>当前数组长度： <code>x.size();</code></li>
<li>清空： <code>x.clear();</code></li>
<li>在末尾添加/删除：（高速）<code>x.push_back(1); x.pop_back();</code></li>
<li>在中间添加/删除：（使用迭代器，低速）<code>x.insert(x.begin()+1, 5);</code> <code>x.erase(x.begin()+1);</code></li>
</ul>
</li>
<li><p>迭代器</p>
<ul>
<li>一种检查容器内元素并遍历元素的数据类型。</li>
<li>提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。</li>
<li>为遍历不同的聚合结构（需拥有相同的基类）提供一个统一的接口。</li>
<li>使用上类似指针。</li>
</ul>
</li>
<li><p>迭代器：失效</p>
</li>
<li><p>当迭代器不再指向本应指向的元素时，称此迭代器失效。</p>
<ul>
<li>vector中什么情况下会发生迭代器失效？</li>
<li>看作纯粹的指针<ul>
<li>调用insert/erase后，所修改位置之后的所有迭代器失效。（原先的内存空间存储的元素被改变）</li>
<li>调用push_back等修改vector大小的方法时，可能会使所有迭代器失效（Push_back到了一定程度之后，可能会造成数组的整体移动，导致所有的内存地址发生改变。）</li>
</ul>
</li>
</ul>
</li>
<li><p><code>std::list</code></p>
</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 插入前端：</span>
 l<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 插入末端：</span>
 l<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 查询：</span>
 std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回迭代器</span>
<span class="token comment">// 插入指定位置：</span>
 l<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//it为迭代器</span></code></pre>
<ul>
<li><p><code>std::list</code></p>
<ul>
<li>不支持下标等随机访问</li>
<li>支持高速的在任意位置插入/删除数据</li>
<li>其访问主要依赖迭代器</li>
<li>操作不会导致迭代器失效（除指向被删除的元素的迭代器外）</li>
</ul>
</li>
<li><p><code>std::set</code></p>
</li>
</ul>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 插入：</span>
 s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 查询：</span>
 s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回迭代器</span>
<span class="token comment">// 删除：</span>
 s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//导致被删除元素的迭代器失效</span>
<span class="token comment">// 统计：</span>
 s<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//1的个数，总是0或1</span></code></pre>
<ul>
<li><code>std::map</code><ul>
<li>其值类型为pair<Key, T>。</li>
<li>map中的元素key互不相同，需要key存在比较器。</li>
<li>可以通过下标访问（即使key不是整数）。下标访问时如果元素不存在，则创建对应元素。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/面向对象</category>
      </categories>
      <tags>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Solving Wordle Using Information Theory 字幕及截图</title>
    <url>/solving-wordle-using-infomation-theory/</url>
    <content><![CDATA[<p>视频链接：<a href="https://www.youtube.om/watch?v=v68zYyaEmEA">https://www.youtube.om/watch?v=v68zYyaEmEA</a></p>
<p>The game Wordle has gone pretty viral in the last month or two, and never one to overlook an opportunity for a math lesson, it occurs to me that this game makes for a very good central example in a lesson about information theory, and in particular a topic known as entropy.</p>
<p><img src="https://s2.loli.net/2022/02/09/qEurwPIfFleZXxH.png" alt="image-20220209153901098"></p>
<p>You see like a lot of people I got kind of sucked into the puzzle, and like a lot of programmers I also got sucked into trying to write an algorithm that would play the game as optimally as it could.</p>
<a id="more"></a>
<p>What I thought I’d do here is just talk through with you some of my process in that, and explain some of the math that went into it, since the whole algorithm centers on this idea of entropy.</p>
<p><img src="https://s2.loli.net/2022/02/09/ZRVUzqtEAgydulF.png" alt="image-20220209153936071"></p>
<h2 id="What-is-Wordle"><a href="#What-is-Wordle" class="headerlink" title="What is Wordle?"></a>What is Wordle?</h2><p>First things first, in case you haven’t heard of it, what is Wordle? And to kill two birds with one stone here while we go through the rules of the game, let me also preview where we’re going with this, which is to develop a little algorithm that will basically play the game for us.</p>
<p>I haven’t done today’s Wordle, this is February 4th, and we’ll see how the bot does.</p>
<p><strong>The goal of Wordle is to guess a mystery five-letter word, and you’re given six different chances to guess.</strong></p>
<p>For example, my wordlebot suggests that I start with the guess “crane”.</p>
<p><strong>Each time that you make a guess, you get some information about how close your guess is to the true answer.</strong></p>
<p><img src="https://s2.loli.net/2022/02/09/VcihA67oex9HlEK.png" alt="image-20220209154123515"></p>
<p><strong>Here the gray box is telling me there’s no c in the actual answer, the yellow box is telling me there is an r but it’s not in that position. The green box is telling me that the secret word does have an a and it’s in the third position. And then there’s no ‘n’ and there’s no ‘e’.</strong></p>
<p>Let me just go in and tell the wordlebot about that information… we started with “crane”, we got gray yellow green grey grey…</p>
<p><img src="https://s2.loli.net/2022/02/09/yYrJl2hP39o8kMV.png" alt="image-20220209154314214"></p>
<p>Don’t worry about all the data that it’s showing right now, I’ll explain that in due time. Its top suggestion for our second pick is “shtik”. Your guess does have to be an actual five-letter word, but as you’ll see it’s pretty liberal with what it will actually let you guess.</p>
<p>In this case we try stick and…all right! Things are looking pretty good.</p>
<p>We hit the ‘s’ and the ‘h’, so we know the first three letters, and we know that there’s an ‘r’.</p>
<p>So it’s going to be like s-h-a something r or s-h-a-r-something.</p>
<p>And it looks like the Wordle-bot knows that it’s down to just two possibilities, either “shard” or “sharp”.</p>
<p><img src="https://s2.loli.net/2022/02/09/K2LFqOyxtXe1njI.png" alt="image-20220209154423328"></p>
<p>I’s kind of a toss-up between them at this point, so I guess probably just because it’s alphabetical it goes with shard, which…hooray! It is the actual answer.</p>
<p><img src="https://s2.loli.net/2022/02/09/Nk1zK8PglIqtGno.png" alt="image-20220209154457213"></p>
<p>So we got it in three. If you’re wondering if that’s any good, the way I heard one person phrase it is that with Wordle, four is par and three is birdie, which I think is a pretty apt analogy.</p>
<p>You have to be consistently on your game to be getting four but it’s certainly not crazy. But when you get it in three, it just feels great. </p>
<h2 id="Initial-Ideas"><a href="#Initial-Ideas" class="headerlink" title="Initial Ideas"></a>Initial Ideas</h2><p>If you’re down for it what I’d like to do here is just talk through my thought process from the beginning for how I approach the wordlebot. And like I said really it’s an excuse for an information theory lesson, <strong>the main goal is to explain what is information and what is entropy</strong>. </p>
<p>My first thought in approaching this was to take a look at the relative frequencies of different letters in the english language.</p>
<p><img src="https://s2.loli.net/2022/02/09/tTjM6GAB5wrPKmV.png" alt="image-20220209154730755"></p>
<p>I thought, okay, is there an opening guess or an opening pair of guesses that hits a lot of these most frequent letters.</p>
<p>Once that I was pretty fond of was doing “other” followed by “nails”.</p>
<p><img src="https://s2.loli.net/2022/02/09/gYUZmdHpfyucPz6.png" alt="image-20220209154803058"></p>
<p>The thought is that if you hit a letter, you know you get a green or a yellow, that always feels good, it feels like you’re getting information.But in these cases even if you don’t hit and you always get greys, that’s still giving you a lot of information, since it’s pretty rare to find a word that doesn’t have any of these letters.</p>
<p>But even still that doesn’t feel super systematic, because for example it does nothing to consider the order of the letters.</p>
<p>Why type “nails” when I could type “snail”.</p>
<p>Is it better to have that s at the end? I’m not really sure. Now a friend of mine said that he liked to open with the word “weary”, which kind of surprised me because it has some uncommon letters in there like the ‘w’ and the ‘y’.</p>
<p>But who knows, maybe that is a better opener.</p>
<p><strong>Is there some kind of quantitative score that we can give to judge the quality of a potential guess?</strong> To set up for the way that we’re going to rank possible guesses, let’s go back and add a little clarity to how exactly the game is set up.</p>
<p>There’s a list of words that it will allow you to enter, that are considered valid guesses, that’s just about 13,000 words long.</p>
<p>But when you look at it there’s a lot of really uncommon things things like “aahed” or “aalii” and “aargh”.</p>
<p>The kind of words that bring about family arguments in a game of Scrabble.</p>
<p>But the vibe of the game is that the answer is always going to be a decently common word, and in fact there’s another list of around 2,300 words that are the possible answers.</p>
<p><img src="https://s2.loli.net/2022/02/09/KrcWQZMwJhz73mq.png" alt="image-20220209154934933"></p>
<p>This is a human-curated list, I think specifically by the game creator’s girlfriend which is kind of fun. <strong>But what I would like to do, our challenge for this project, is to see if we can write a program solving Wordle that doesn’t incorporate previous knowledge about this list (Answer list).</strong></p>
<p>For one thing there’s plenty of pretty common five letter words that you won’t find in that list, so it would be better to write a program that’s a little more resilient and would play Wordle against anyone, not just what happens to be the official website.</p>
<p>And also, the reason that we know what this list of possible answers is is because it’s visible in the source code, but the way that it’s visible in the source code is in the specific order in which answers come up from day to day, so you could always just look up what tomorrow’s answer will be.</p>
<p>So clearly there’s some sense in which using the list is cheating, and what makes for a more interesting puzzle and a richer information theory lesson is to instead use some more universal data, like relative word frequencies in general, to capture this intuition of having a preference for more common words.</p>
<p>So! Of these 13,000 possibilities, how should we choose the opening guess? For example if my friend proposes “weary”, how should we analyze its quality? Well the reason he said he likes that unlikely ‘w’ is that he likes the long shot nature of just how good it feels if you do hit that ‘w’.</p>
<p>For example if the first pattern revealed was something like this, then it turns out there are only 58 words in this giant lexicon that match that pattern, so that’s a huge reduction from 13,000.</p>
<p>But the flip side of that, of course, is that it’s very uncommon to get a pattern like this.</p>
<p>Specifically, if each word was equally likely to be the answer, the probability of hitting this pattern would be 58 divided by around 13,000. Of course, they’re not equally likely to be answers, most of these are very obscure and even questionable words, but at least for our first pass at all of this let’s assume that they’re all equally likely, then refine that a bit later.</p>
<p>The point is the pattern with a lot of information is by its very nature unlikely to occur.</p>
<p><strong>In fact what it means to be informative is that it’s unlikely.</strong></p>
<p>A much more probable pattern to see with this opening would be something like this, where of course there’s not a ‘w’ in it, maybe there’s an ‘e’ and maybe there’s no ‘a’, there’s no ‘r’, and there’s no ‘y’.</p>
<p>In this case there are 1,400 possible matches.</p>
<p>So if all were equally likely, it works out to be a probability of about 11% that this is the pattern you would see.</p>
<p><strong>So the most likely outcomes are also the least informative.</strong> To get a more global view here, let me show you the full distribution of probabilities across all of the different patterns that you might see.</p>
<p><img src="https://s2.loli.net/2022/02/09/Wf9udeVOsp76Phm.png" alt="image-20220209155232751"></p>
<p>Each bar that you’re looking at corresponds to a possible pattern of colors that could be revealed, of which there are 3^5 possibilities. And they’re organized from left to right, most common to least common.</p>
<p>So the most common possibility here is that you get all grays, that happens about 14% of the time.</p>
<p>What you’re hoping for when you make a guess is that you end up somewhere out in this long tail, like over here where there’s only 18 possibilities for what matches this pattern, that evidently look like this.</p>
<p>Or if we venture a little farther to the left…you know maybe we go all the way over here…okay here’s a good puzzle for you.</p>
<p>What are the three words in the english language that start with a ‘w’ end with a ‘y’ and have an ‘r’ somewhere in them? It turns out the answers are…</p>
<p>let’s see…”wordy” “wormy” and “wrily”. </p>
<p>To judge how good this word is overall, we want some kind of measure of the expected amount of information that you’re going to get from this distribution.</p>
<p>If we go through each pattern and we multiply its probability of occurring times something that measures how informative it is, that can maybe give us an objective score.</p>
<p><img src="https://s2.loli.net/2022/02/09/Av92qkau3UCL5Vn.png" alt="image-20220209155405454"></p>
<p>Now your first instinct for what that something should be might be the number of matches, you know you want a lower average number of matches, but instead I’d like to use a more universal measurement that we often ascribe to information, and one that will be more flexible once we have a different probability assigned to each of these 13,000 words for whether or not they’re actually the answer.</p>
<h2 id="Information-Theory-Basics"><a href="#Information-Theory-Basics" class="headerlink" title="Information Theory Basics"></a>Information Theory Basics</h2><p>The standard unit of information is the bit, which has a little bit of a funny formula, but it’s really intuitive if we just look at examples.</p>
<p>If you have an observation that cuts your space of possibilities in half, we say that it has one bit of information. In our example the space of possibilities is all possible words, and it turns out about half of the five letter words have an ‘s’, a little less than that but about half.</p>
<p><img src="https://s2.loli.net/2022/02/09/pnDBUbVrWLX87zO.png" alt="image-20220209155501486"></p>
<p>So that observation would give you one bit of information.</p>
<p>If instead a new fact chops down that space of possibilities by a factor of four, we say that it has two bits of information.</p>
<p>For example it turns out about a quarter of these words have a ‘t’.</p>
<p>If the observation cuts that space by a factor of eight, we say it has three bits of information, and so on and so forth.</p>
<p>Four bits cuts it into a sixteenth, five bits cuts it into a 32nd.</p>
<p><img src="https://s2.loli.net/2022/02/09/EZtzMDXKNHLu1bj.png" alt="image-20220209155530333"></p>
<p>So now is when you might want to take a moment to pause and ask for yourself, what is the formula for information, for the number of bits in terms of the probability of an occurrence? Well, what we’re saying here is basically that when you take one half to the number of bits, that’s the same thing as the probability, which is the same thing as saying 2 to the power of the number of bits is 1 over the probability, which rearranges further to saying the information is the log base 2 of 1 divided by the probability.</p>
<p><img src="https://s2.loli.net/2022/02/09/r9mxnBdh6Kv7tpQ.png" alt="image-20220209155601625"></p>
<p>And sometimes you see this with one more rearrangement still, where the information is the negative log base 2 of the probability.</p>
<script type="math/tex; mode=display">
I = - \log_2(p)</script><p>Expressed like this it can look a little bit weird to the uninitiated, but it really is just the very intuitive idea of asking how many times you’ve cut down your possibilities in half.</p>
<p>Now if you’re wondering, you know, I thought we were just playing a fun word game why are logarithms entering the picture? One reason this is a nicer unit is it just a lot easier to talk about very unlikely events.</p>
<p>Much easier to say that an observation has 20 bits of information than it is to say that the probability of such and such occurring is 0.00000095.</p>
<p>But a more substantive reason that this logarithmic expression turned out to be a very useful addition to the theory of probability is the way that <strong>information adds together</strong>.</p>
<p>For example if one observation gives you two bits of information, cutting your space down by four, and then a second observation, like your second guess in Wordle, gives you another three bits of information, chopping you down further by another factor of eight, the two together give you five bits of information.</p>
<p><img src="https://s2.loli.net/2022/02/09/26ZwfmLz4W7CDIE.png" alt="image-20220209155733905"></p>
<p>In the same way that probabilities like to multiply, Information likes to add.</p>
<p>So as soon as we’re in the realm of something like an expected value, where we’re adding a bunch of numbers up, the logs make it a lot nicer to deal with.Let’s go back to our distribution for weary and add another little tracker on here showing us how much information there is for each pattern.</p>
<p>The main thing I want you to notice is that <strong>the higher the probability, as we get to those more likely patterns, the lower the information, the fewer bits you gain.</strong></p>
<p><img src="https://s2.loli.net/2022/02/09/Jj7mgwP2xGFpV8d.png" alt="image-20220209155818230"></p>
<p>The way we measure the quality of this guess will be to take the expected value of this information, where we go through each pattern, we say how probable is it, and then we multiply that by how many bits of information do we get.</p>
<p><img src="https://s2.loli.net/2022/02/09/obpnzMEUHyArOs6.png" alt="image-20220209155839919"></p>
<p>And in the example of weary, that turns out to be 4.9 bits. So on average, the information you get from this opening guess is as good as chopping your space of possibilities in half about five times.</p>
<p>By contrast, an example of a guess with a higher expected information value would be something like “slate”.</p>
<p>In this case you’ll notice the distribution looks a lot flatter, in particular the most probable occurrence of all grays only has about a 6% chance of occurring.</p>
<p><img src="https://s2.loli.net/2022/02/09/rnp6IsjAbRkEHae.png" alt="image-20220209155905333"></p>
<p>So at minimum you’re getting, evidently, 3.9 bits of information. But that’s a minimum, more typically you’d get something better than that.</p>
<p>And it turns out when you crunch the numbers on this one and you add up all of the relevant terms, the average information is about 5.8.</p>
<p><img src="https://s2.loli.net/2022/02/09/jq79CUDv3tNucnp.png" alt="image-20220209160058972"></p>
<p>So in contrast with weary your space of possibilities will be about half as big after this first guess, on average. There’s actually a fun story about the name for this expected value of information quantity.</p>
<p>You see information theory was developed by Claude Shannon, who was working at Bell labs in the 1940s.</p>
<p>He was talking about some of his yet-to-be-published ideas with John von Neumann, who was this intellectual giant of the time, a very prominent in math and physics and the beginnings of what was becoming computer science.</p>
<p>And when he mentioned that he didn’t really have a good name for this expected value of information quantity, von Neumann supposedly said, so the story goes, “well you should call it <strong>Entropy</strong>, and for two reasons.</p>
<p>In the first place your uncertainty function has been used in statistical mechanics under that name, so it already has a name.</p>
<p>And in the second place, and more important, nobody knows what entropy really is, so in a debate you’ll always have the advantage.”So if the name seems a little bit mysterious, and if this story is to be believed, that’s kind of by design.</p>
<p>Also, if you’re wondering about its relation to all of that second law of thermodynamics stuff from physics, there definitely is a connection, but in its origins Shannon was just dealing with pure probability theory.</p>
<p>And for our purposes here, when I use the word entropy, I just want you to think the expected information value of a particular guess.You can think of entropy as measuring two things simultaneously.</p>
<p>The first one is how flat is the distribution. The closer a distribution is to uniform, the higher that entropy will be.</p>
<p>In our case, where there are 3^5 total patterns, for a uniform distribution, observing any one of them would have information log_2(3^5), which happens to be 7.92.</p>
<p>So that is the absolute maximum that you could possibly have for this entropy.</p>
<p><img src="https://s2.loli.net/2022/02/09/nA6pmjhPRetwYLD.png" alt="image-20220209160237737"></p>
<p>But entropy is also kind of a measure of how many possibilities there are in the first place.</p>
<p>For example if you happen to have some word where there’s only 16 possible patterns, and each one is equally likely, this entropy, this expected information, would be four bits.</p>
<p>But if you have another word where there are 64 possible patterns that could come up, and they’re all equally likely, then the entropy would work out to be six bits.</p>
<p>So if you see some distribution out in the wild that has an entropy of six bits, it’s sort of like it’s saying there’s as much variation and uncertainty in what’s about to happen as if there were 64 equally likely outcomes.</p>
<p>For my first pass at the worldbot, I basically had it just do this. It goes through all of the different possible guesses that you could have, all 13,000 words.</p>
<p><strong>It computes the entropy for each one, or more specifically the entropy of the distribution across all patterns that you might see for each one, and then it picks the highest, since that’s the one that’s likely to chop down your space of possibilities as much as possible. And even though I’ve only been talking about the first guess here it does the same thing for the next few guesses.</strong></p>
<p>For example, after you see some pattern on that first guess, which would restrict you to a smaller number of possible words based on what matches with that, you just play the same game with respect to that smaller set of words.</p>
<p>For a proposed second guess, you look at the distribution of all patterns that could occur from that more restricted set of words.</p>
<p>You search through all 13,000 possibilities, and you find the one that maximizes that entropy. To show you how this works in action let me just pull up a little variant of Wordle that I wrote that shows the highlights of this analysis in the margins.</p>
<p>So after doing all its entropy calculations, on the right here it’s showing us which ones have the highest expected information.</p>
<p><img src="https://s2.loli.net/2022/02/09/psOiFTtw4RazxgV.png" alt="image-20220209160445358"></p>
<p>It turns out the top answer, at least at the moment we’ll refine this later, is “tares”, which means…um…of course, a vetch the most common vetch.Each time we make a guess here, where maybe I kind of ignore its recommendations and go with slate, because I like slate, we can see how much expected information it had.</p>
<p>But then on the right of the word here it’s showing us how much actual information we got given this particular pattern.</p>
<p>So here it looks like we were a little unlucky.</p>
<p>We were expected to get 5.8, but we happened to get something with less than that.</p>
<p>And then on the left side here it’s showing us all of the different possible words given where we are now.</p>
<p>The blue bars are telling us how likely it thinks each word is, so at the moment it’s assuming each word is equally likely to occur, but we’ll refine that in a moment.</p>
<p><img src="https://s2.loli.net/2022/02/09/p1UQW4CPo7uyMLD.png" alt="image-20220209160549360"></p>
<p>And then this uncertainty measurement is telling us the entropy of this distribution across the possible words, which right now, because it’s a uniform distribution, is just a needlessly complicated way to count the number of possibilities.</p>
<p>For example, if we were to take 2 to the power of 13.66, that should be around the 13,000 possibilities.</p>
<p>It’ a little bit off here, but only because I’m not showing all the decimal places.At the moment that might feel redundant, and like it’s overly complicating things, but you’ll see why it’s useful to have both numbers in a minute. Here it looks like it’s suggesting the highest entropy for our second guess is “ramin”, which again…just really doesn’t feel like a word.</p>
<p>So to take the moral high ground here I’m going to go ahead and type in “rains”.</p>
<p>Again it looks like we were a little unlucky, we were expecting 4.3 bits and we only got 3.39 bits of information.</p>
<p>So that takes us down to 55 possibilities. And here maybe I’ll just actually go with what it’s suggesting, which is “kombu”, whatever that means.</p>
<p>Okay! This is actually a good chance for a puzzle.</p>
<p>It’s telling us this pattern gives us 4.78 bits of information, but over on the left before we see that pattern there were 5.78 bits of uncertainty.</p>
<p><img src="https://s2.loli.net/2022/02/09/JlVRyZmhEcN7g9K.png" alt="image-20220209160719833"></p>
<p>So as a quiz for you, what does that mean about the number of remaining possibilities? Well it means that we’re reduced down to 1 bit of uncertainty, which is the same thing as saying that there’s two possible answers, it’s a 50/50 choice.</p>
<p>And from here, because you and I know which words are more common, we know that the answer should be “abyss”.</p>
<p>But as it’s written right now the program doesn’t know that, so it just keeps going trying to gain as much information as it can until there’s only one possibility left, and then it guesses it.</p>
<p>So obviously we need a better endgame strategy, but let’s say we call this version one of our Wordle solver and then we go and run some simulations to see how it does.</p>
<p>The way this is working is it’s playing every possible Wordle game, it’s going through all of those 2,315 words that are the actual Wordle answers, it’s basically using that as a testing set, and with this naive method of not considering how common a word is and just trying to maximize the information at each step along the way until it gets down to one and only one choice, by the end of the simulation the average score works out to be about 4.124.</p>
<p>Which…you know it’s not bad.</p>
<p>To be honest I kind of expected to do worse. But the people who play Wordle will tell you that they can usually get it in four.</p>
<p>The real challenge is to get as many in three as you can.</p>
<p>It’s a pretty big jump between the score four and the score of three.</p>
<p>The obvious low-hanging fruit here is to somehow incorporate whether or not a word is common, and how exactly do we do that?</p>
<h2 id="Incorporating-Word-Frequencies"><a href="#Incorporating-Word-Frequencies" class="headerlink" title="Incorporating Word Frequencies"></a>Incorporating Word Frequencies</h2><p>The way I approached it is to get a list of the relative frequencies for all of the words in the english language.</p>
<p>I just used Mathematica’s word frequency data function, which itself pulls from the google books english n-gram public dataset.</p>
<p>And it’s kind of fun to look at, for example if we sort it from the most common words to the least common words, evidently these are the most common five letter words in the english language.</p>
<p><img src="https://s2.loli.net/2022/02/09/WKVlt4IXGFPySqD.png" alt="image-20220209161017067"></p>
<p>Or rather, “these” is the eighth most common.</p>
<p>First is “which” after which there’s “there” and “their”.</p>
<p>“First” itself is not first but ninth, and it makes sense that these other words could come about more often, where those after “first” are “after,” “where”, and “those”, being just a little bit less common.</p>
<p>Now, in using this data to model how likely each of these words is to be the final answer, it shouldn’t just be proportional to the frequency.</p>
<p>Because for example “which” is given a score of 0.002 in this data set, whereas the word “braid” is in some sense about a thousand times less likely.</p>
<p><img src="https://s2.loli.net/2022/02/09/g2QwhfeLoIFs3Ak.png" alt="image-20220209161048640"></p>
<p>But both of these are common enough words that they’re almost certainly worth considering, so we want more of a binary cutoff.</p>
<p>The way I went about it is to imagine taking this whole sorted list of words, and then arranging it on an x-axis, and then applying the sigmoid function, which is the standard way to have a function whose output is basically binary, it’s either zero or it’s one, but there’s a smoothing in between for that region of uncertainty.</p>
<p><img src="https://s2.loli.net/2022/02/09/iNd4FsV3zk2ZtoD.png" alt="image-20220209161137592"></p>
<p>So essentially the probability that I’m assigning to each word for being in the final list will be the value of the sigmoid function above wherever it sits on the x-axis.</p>
<p>Now obviously this depends on a few parameters, for example how wide a space on the x-axis those words fill determines how gradually or steeply we drop off from one to zero, and where we situate them left to right determines the cut off. (取决于输入维度的区间宽度及范围)</p>
<p>And to be honest the way I did this was kind of just licking my finger and sticking it into the wind.</p>
<p>I looked through the sorted list and tried to find a window where when I looked at it, I figured about half of these words are more likely than not to be the final answer. And I use that as the cutoff. </p>
<p><img src="https://s2.loli.net/2022/02/09/MTYE4pyde8aNinZ.png" alt="image-20220209161310497"></p>
<p>Now once we have a distribution like this across the words, it gives us another situation where entropy becomes this really useful measurement. For example let’s say we were playing a game and we start with my old openers which were “other” and “nails”, and we end up with a situation where there’s four possible words that match it.</p>
<p>And let’s say we consider them all equally likely.</p>
<p><img src="https://s2.loli.net/2022/02/09/DwzTrXiO8jM241U.png" alt="image-20220209161353273"></p>
<p>Let me ask you, what is the entropy of this distribution? Well the information associated with each one of these possibilities is going to be the log_2(4), since each one is 1/4, and that’s 2.</p>
<p>It’s two bits of information, 4 possibilities, all very well and good. But! What if I told you that actually there are more than four matches.</p>
<p>In reality, when we look through the full word list, there are 16 words that match it.</p>
<p>But suppose our model puts a really low probability on those other 12 words of actually being the final answer, something like one in a thousand, because they’re really obscure.</p>
<p>Now let me ask you, what is the entropy of this distribution? If entropy was purely measuring the number of matches here, then you might expect it to be something like the log_2(16), which would be 4. Two more bits of uncertainty than we had before.</p>
<p>But of course, the actual uncertainty is not really that different from what we had before.</p>
<p>Just because there’s these 12 really obscure words doesn’t mean that it would be all that more surprising to learn that the final answer is “charm”, for example.</p>
<p>So when you actually do the calculation here, and you add up the probability of each occurrence times the corresponding information, what you get is 2.11 bits.</p>
<p><img src="https://s2.loli.net/2022/02/09/lfBS7JXdjD2M4ao.png" alt="image-20220209161502273"></p>
<p>It’s saying it’s basically two bits, it’s basically those four possibilities, but there’s a little more uncertainty because of all of those highly unlikely events though if you did learn them you’d get a ton of information from it.</p>
<p>So zooming out, this is part of what makes Wordle such a nice example for an information theory lesson.</p>
<p><strong>We have these two distinct feeling applications for entropy, the first one telling us what’s the expected information we’ll get from a given guess, and the second one saying can we measure the remaining uncertainty among all of the words that are possible.</strong></p>
<p>And I should emphasize, in that first case where we’re looking at the expected information of a guess, once we have an unequal weighting to the words, that affects the entropy calculation.</p>
<p>For example let me pull up that same case we were looking at earlier of the distribution associated with “weary”, but this time using a non-uniform distribution across all possible words.</p>
<p>So let me see if I can find a part here that illustrates it pretty well…uh okay, here, this is pretty good.</p>
<p>Here we have two adjacent patterns that are about equally likely but one of them, we’re told, has 32 possible words that match it.</p>
<p>And if we check what they are, these are those 32, which are all just very unlikely words.</p>
<p><img src="https://s2.loli.net/2022/02/09/GDQVr1hBYo5P7W6.png" alt="image-20220209161706837"></p>
<p>As you scan your eyes over them it’s hard to find any that feel like plausible answers.</p>
<p>Maybe “yells”? But if we look at the neighboring pattern in the distribution, which is considered just about as likely, we’re told that it only has eight possible matches.</p>
<p>So a quarter as many matches, but it’s about as likely.</p>
<p>And when we pull up those matches, we can see why.</p>
<p><img src="https://s2.loli.net/2022/02/09/ayRoFKzOZTmAWjH.png" alt="image-20220209161727181"></p>
<p>Some of these are actual plausible answers like “wring” or “wrath” or “wraps”.</p>
<p>To illustrate how we incorporate all that, let me pull up version 2 of the wordlebot here. There are two or three main differences from the first one that we saw.</p>
<p>First off, like I just said, the way that we’re computing these entropies, these expected values of information, is now using the more refined distributions across the patterns that incorporates the probability that a given word would actually be the answer. As it happens, “tares” is still number one, though the ones following are a bit different. </p>
<p><img src="https://s2.loli.net/2022/02/09/HevyU5hxcwrXpKQ.png" alt="image-20220209161825240"></p>
<p>Second, when it ranks its top picks, it’s now going to keep a model of the probability that each word is the actual answer, and it’ll incorporate that into its decision, which is easier to see once we have a few guesses on the table.</p>
<p>Again ignoring its recommendation, because we can’t let machines rule our lives…And I suppose I should mention another thing different here is over on the left, that uncertainty value, that number of bits, is no longer just redundant with the number of possible matches.</p>
<p>Now if we pull it up, and you know, we calculated, say, 2 to the 8.02, which would be a little above 256…I guess 259.</p>
<p><img src="https://s2.loli.net/2022/02/09/2jCnzwULoJIKV1i.png" alt="image-20220209161923324"></p>
<p>What it’s saying is even though there are 526 total words that actually match this pattern, the amount of uncertainty it has is more akin to what it would be if there were 259 equally likely outcomes.</p>
<p>You could think of it like this, it knows “borks” is not the answer same with “yortz” and “zoril” and “zorus”.</p>
<p>So it’s a little less uncertain than it was in the previous case, this number of bits will be smaller.</p>
<p>And if I keep playing the game, I’ll refining this down with a couple guesses that are apropos of what I would like to explain here…By the fourth guess, if you look over at its top picks, you can see it’s no longer just maximizing the entropy.</p>
<p>At this point, there’s technically seven possibilities, but the only ones with a meaningful chance are “dorms” and “words”, and you can see it ranks choosing both of those above all of these other values that, strictly speaking, would give more information.</p>
<p><img src="https://s2.loli.net/2022/02/09/wpbVlZ5EDegxfOY.png" alt="image-20220209162134927"></p>
<p>The very first time I did this I just added up these two numbers to measure the quality of each guess, which actually worked better than you might suspect.</p>
<p>But it really didn’t feel systematic.</p>
<p>I’m sure there are other approaches people could take, but here’s the one I landed on.</p>
<p>If we’re considering the prospect of a next guess, like in this case “words”, what we really care about is the expected score of our game if we do that.</p>
<p>And to calculate that expected score, we say “what’s the probability that ‘words’ is the actual answer?”, which at the moment it ascribes 58% to.</p>
<p>So we say with a 58% chance, our score in this game would be four, and then with the probability of one minus that 58 percent, our score will be more than that four.How much more? We don’t know, but we can estimate it based on how much uncertainty there’s likely to be once we get to that point.</p>
<p><img src="https://s2.loli.net/2022/02/09/SKobMxvZHJB4pP2.png" alt="image-20220209162242496"></p>
<p>Specifically, at the moment there are 1.44 bits of uncertainty, if we guess “words” it’s telling us the expected information we’ll get is 1.27 bits, so if we guess “words” this difference represents how much uncertainty we’re likely to be left with after that happens.</p>
<p>What we need is some kind of function, which I’m calling $f$ here, that associates this uncertainty with an expected score.</p>
<p>The way I went about this was to just plot a bunch of the data from previous games based on version one of the bot, to say “hey what was the actual score after various points with certain very measurable amounts of uncertainty?” For example, these data points here that are sitting above a value that’s around 8.7 or so are saying “for some games, after a point at which there were 8.7 bits of uncertainty, it took two guesses to get the final answer.</p>
<p><img src="https://s2.loli.net/2022/02/09/CH8We4Z9a7hm2PS.png" alt="image-20220209162411016"></p>
<p>For other games it took three guesses, for other games it took four guesses.”If we shift over to the left here, all the points over zero are saying “whenever there are zero bits of uncertainty, which is to say there’s only one possibility, then the number of guesses required is always just one”, which is reassuring.</p>
<p>Whenever there was one bit of uncertainty, meaning it was essentially just down to two possibilities, then sometimes it required one more guess sometimes it required two more guesses, and so on and so forth.</p>
<p>Here, maybe a slightly easier way to visualize this data is to bucket it together and take averages.</p>
<p><img src="https://s2.loli.net/2022/02/09/Kcf2tdrQmqRPC3l.png" alt="image-20220209162433488"></p>
<p>For example, this bar here is saying “among all the points where we had one bit of uncertainty, on average the number of new guesses required was about 1.5.”And the bar over here saying “among all of the different games were at some point the uncertainty was a little above 4 bits, which is like narrowing it down to 16 different possibilities, then on average it requires a little more than two guesses from that point forward”.</p>
<p>And from here I just did a regression to fit a function that seemed reasonable to this.And remember the whole point of doing any of that is so that we can quantify this intuition that the more information we gain from a word, the lower the expected score will be.</p>
<h2 id="Final-Performance"><a href="#Final-Performance" class="headerlink" title="Final Performance"></a>Final Performance</h2><p>So with this as version 2.0, if we go back and we run the same set of simulations, having it play against all 2,315 possible Wordle answers, how does it do? Well in contrast to our first version, it’s definitely better, which is reassuring. All said and done, the average is around 3.6.</p>
<p>Although unlike the first version, there are a couple times that it loses and requires more than six in this circumstance, presumably because there are times when it’s making that trade-off to actually go for the goal, rather than maximizing information.</p>
<p>So can we do better than 3.6? We definitely can. I said at the start that it’s most fun to try not incorporating the true list of Wordle answers into the way that it builds its model.</p>
<p>But if we do incorporate it, the best performance I could get was around 3.43.</p>
<p><img src="https://s2.loli.net/2022/02/09/KPkag9GVXID2nlW.png" alt="image-20220209162714823"></p>
<p>So if we try to get more sophisticated than just using word frequency data to choose this prior distribution, this 3.43 probably gives a max at how good we could get with that. Or at least how good I could get with that.</p>
<p>That best performance essentially just uses the ideas that I’ve been talking about here, but it goes a little farther.</p>
<p>Like it does a search for the expected information two steps forward, rather than just one.</p>
<p>Originally I was planning on talking more about that, but I realize we’ve actually gone quite long as it is.</p>
<p><img src="https://s2.loli.net/2022/02/09/rOoiW9mEnjU7PRu.png" alt="image-20220209162754003"></p>
<p>The one thing I’ll say is after doing this two-step search, and then running a couple sample simulations in the top candidates, so far for me at least it’s looking like “crane” is the best opener.</p>
<p>Who would have guessed?Also if you use the true word list to determine your space of possibilities then the uncertainty you start with is a little over 11 bits.</p>
<p>And it turns out, just from a brute force search, the maximum possible expected information after the first two guesses is around 10 bits, which suggests that, best case scenario after your first two guesses, with perfectly optimal play, you’ll be left with around one bit of uncertainty, which is the same as being down to two possible guesses.</p>
<p>So I think it’s fair, and probably pretty conservative, to say that you could never possibly write an algorithm that gets this average as low as 3, because with the words available to you there’s simply not room to get enough information after only two steps to be able to guarantee the answer in the third slot every single time without fail.</p>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/信息论</category>
      </categories>
      <tags>
        <tag>信息论</tag>
      </tags>
  </entry>
  <entry>
    <title>《动手学深度学习》 Pytorch ver. 阅读摘录 Part A</title>
    <url>/dive-into-dl-pytorch-A/</url>
    <content><![CDATA[<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/cover.png" alt=""></p>
<ul>
<li>《动手学深度学习》原书地址：<a href="https://github.com/d2l-ai/d2l-zh">https://github.com/d2l-ai/d2l-zh</a></li>
<li>《动手学深度学习》(Pytorch ver.)：<a href="https://tangshusen.me/Dive-into-DL-PyTorch/#/">https://tangshusen.me/Dive-into-DL-PyTorch/#/</a></li>
</ul>
<p>知识架构：</p>
<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/book-org.svg" alt="封面"></p>
<p>本文的主要作用是在阅读过程中做一些摘录。对于「机器学习」领域， c7w 虽然曾尝试从各个领域入门，也尝试训过一些模型，但是还是缺少系统性、结构性的学习。希望阅读本书能带来更多的收获吧。</p>
<p>与前面的一些笔记相比，本文更加侧重于「实践」。也就是说切实地提升自己的代码能力。</p>
<p>Part A 包含：</p>
<ul>
<li>§ 1 深度学习简介</li>
<li>§ 2 预备知识：Pytorch</li>
<li>§ 3 深度学习基础<ul>
<li>线性回归，Softmax 回归，多层感知机三类基本模型</li>
<li>权重衰减和 Dropout 两类应对过拟合的方法</li>
</ul>
</li>
<li>§ 4 深度学习计算<ul>
<li>构造 Pytorch 模型的方式</li>
<li>模型参数的访问、初始化与共享</li>
<li>自定义 Layer</li>
<li>读取与存储</li>
<li>GPU 计算</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="深度学习简介"><a href="#深度学习简介" class="headerlink" title="深度学习简介"></a>深度学习简介</h2><ul>
<li><strong>机器学习与深度学习的关系</strong></li>
</ul>
<p><strong>机器学习</strong>研究如何使计算机系统利用经验改善性能。它是人工智能领域的分支，也是实现人工智能的一种手段。</p>
<p>在机器学习的众多研究方向中，<strong>表征学习关注如何自动找出表示数据的合适方式</strong>，以便更好地将输入变换为正确的输出。</p>
<p>而本书要重点探讨的<strong>深度学习是具有多级表示的表征学习方法</strong>。</p>
<p>在每一级（从原始数据开始），深度学习通过简单的函数将该级的表示变换为更高级的表示。因此，深度学习模型也可以看作是由许多简单函数复合而成的函数。当这些复合的函数足够多时，深度学习模型就可以表达非常复杂的变换。</p>
<ul>
<li><strong>深度学习的一个外在特点：End-to-end</strong></li>
</ul>
<p>深度学习的一个外在特点是<strong>端到端的训练</strong>。也就是说，并不是将单独调试的部分拼凑起来组成一个系统，而是将整个系统组建好之后一起训练。</p>
<p>比如说，计算机视觉科学家之前曾一度将特征抽取与机器学习模型的构建分开处理，像是Canny边缘探测 [20] 和SIFT特征提取 [21] 曾占据统治性地位达10年以上，但这也就是人类能找到的最好方法了。</p>
<p>当深度学习进入这个领域后，这些特征提取方法就被性能更强的自动优化的逐级过滤器替代了。</p>
<h2 id="预备知识-Pytorch"><a href="#预备知识-Pytorch" class="headerlink" title="预备知识: Pytorch"></a>预备知识: Pytorch</h2><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><ul>
<li><strong>对 Tensor 的操作：Tensor 的创建</strong></li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>Tensor(*sizes)</code></td>
<td style="text-align:center">基础构造函数</td>
</tr>
<tr>
<td style="text-align:center"><code>tensor(data,)</code></td>
<td style="text-align:center">类似 <code>np.array</code> 的构造函数</td>
</tr>
<tr>
<td style="text-align:center"><code>ones(*sizes)</code></td>
<td style="text-align:center">全 1 Tensor</td>
</tr>
<tr>
<td style="text-align:center"><code>zeros(*sizes)</code></td>
<td style="text-align:center">全 0 Tensor</td>
</tr>
<tr>
<td style="text-align:center"><code>eye(*sizes)</code></td>
<td style="text-align:center">对角线为 1，其他为 0</td>
</tr>
<tr>
<td style="text-align:center"><code>arange(s,e,step)</code></td>
<td style="text-align:center">从 s 到 e，步长为 step</td>
</tr>
<tr>
<td style="text-align:center"><code>linspace(s,e,steps)</code></td>
<td style="text-align:center">从 s 到 e，均匀切分成 steps 份</td>
</tr>
<tr>
<td style="text-align:center"><code>rand/randn(*sizes)</code></td>
<td style="text-align:center">均匀/标准分布</td>
</tr>
<tr>
<td style="text-align:center"><code>normal(mean,std)/uniform(from,to)</code></td>
<td style="text-align:center">正态分布/均匀分布</td>
</tr>
<tr>
<td style="text-align:center"><code>randperm(m)</code></td>
<td style="text-align:center">随机排列</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><strong>对 Tensor 进行操作时注意其可能的数据共享</strong></li>
</ul>
<p>如使用 <code>view()</code> 改变 Tensor 的形状的时候，注意返回的新 Tensor 与源 Tensor 虽然可能有不同的 size，但是是共享 data 的。</p>
<p>所以如果我们想返回一个真正新的副本（即不共享 data 内存）该怎么办呢？Pytorch 还提供了一个 <code>reshape()</code> 可以改变形状，但是此函数并不能保证返回的是其拷贝，所以不推荐使用。推荐先用 <code>clone</code> 创造一个副本然后再使用 <code>view</code>。</p>
<p>注：虽然 <code>view</code> 返回的 <code>Tensor</code> 与源 <code>Tensor</code> 是共享 <code>data</code> 的，但是依然是一个新的 <code>Tensor</code>（因为 <code>Tensor</code> 除了包含 <code>data</code> 外还有一些其他属性），二者 <code>id</code>（内存地址）并不一致。</p>
<p>另外一个常用的函数就是 <code>item()</code>, 它可以将一个标量 <code>Tensor</code> 转换成一个 Python Number。</p>
<ul>
<li><strong>广播机制</strong> Broadcasting</li>
</ul>
<p>当对两个形状不同的 <code>Tensor</code> 按元素运算时，可能会触发广播（broadcasting）机制：先适当复制元素使这两个 <code>Tensor</code> 形状相同后再按元素运算。例如：</p>
<pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
y <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span>

Output<span class="token punctuation">:</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># x</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># y</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># x+y</span></code></pre>
<ul>
<li><strong><code>Tensor</code> 与 <code>ndarray</code></strong> 的转换</li>
</ul>
<p>很容易用 <code>numpy()</code> 和 <code>from_numpy()</code> 将 <code>Tensor</code> 和 NumPy 中的数组相互转换。但是需要注意的一点是：两个函数所产生的 <code>Tensor</code> 和 NumPy 中的数组共享相同的内存（所以它们之间的转换很快），改变其中一个时另一个也会改变。</p>
<p>与之相对比，还有一个常用的将 NumPy 中的 array 转换成 <code>Tensor</code> 的方法就是 <code>torch.tensor()</code>, 需要注意的是，此方法总是会进行数据拷贝（就会消耗更多的时间和空间），所以返回的 <code>Tensor</code>和原来的数据不再共享内存。</p>
<p>所有在CPU上的 <code>Tensor</code>（除了 <code>CharTensor</code>）都支持与 NumPy 数组相互转换。</p>
<ul>
<li><strong><code>Tensor</code> on GPU</strong></li>
</ul>
<p>用方法 <code>to()</code> 可以将 <code>Tensor</code> 在 CPU 和 GPU（需要硬件支持）之间相互移动。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 以下代码只有在PyTorch GPU版本上才会执行</span>
<span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span><span class="token punctuation">)</span>          <span class="token comment"># GPU</span>
    y <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>x<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>  <span class="token comment"># 直接创建一个在GPU上的Tensor</span>
    x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>                       <span class="token comment"># 等价于 .to("cuda")</span>
    z <span class="token operator">=</span> x <span class="token operator">+</span> y
    <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">"cpu"</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>double<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># to()还可以同时更改数据类型</span></code></pre>
<h3 id="Autograd"><a href="#Autograd" class="headerlink" title="Autograd"></a>Autograd</h3><ul>
<li><strong><code>Tensor</code> 的 <code>requires_grad</code> 与 <code>Function</code></strong></li>
</ul>
<p>上一节介绍的 <code>Tensor</code> 是这个包的核心类，如果将其属性 <code>requires_grad</code> 设置为 <code>True</code>，它将开始追踪（track）在其上的所有操作（这样就可以利用链式法则进行梯度传播了）。</p>
<p>完成计算后，可以调用 <code>backward()</code> 来完成所有梯度计算。此 <code>Tensor</code> 的梯度将累积到 <code>.grad</code> 属性中。</p>
<p>如果不想要被继续追踪，可以调用 <code>.detach()</code> 将其从追踪记录中分离出来，这样就可以防止将来的计算被追踪，这样梯度就传不过去了。此外，还可以用 <code>with torch.no_grad()</code> 将不想被追踪的操作代码块包裹起来，这种方法在评估模型的时候很常用，因为在评估模型时，我们并不需要计算可训练参数（<code>requires_grad=True</code>）的梯度。</p>
<p><code>Function</code> 是另外一个很重要的类。<code>Tensor</code> 和 <code>Function</code> 互相结合就可以构建一个记录有整个计算过程的有向无环图。每个 <code>Tensor</code> 都有一个 <code>grad_fn</code> 属性，该属性即创建该 <code>Tensor</code> 的 <code>Function</code> , 就是说该 <code>Tensor</code> 是不是通过某些运算得到的，若是，则 <code>grad_fn</code> 返回一个与这些运算相关的对象，否则是 None。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>grad_fn<span class="token punctuation">)</span>
<span class="token boolean">None</span>

<span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">2</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grad_fn<span class="token operator">=</span><span class="token operator">&lt;</span>AddBackward0<span class="token operator">></span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>grad_fn<span class="token punctuation">)</span>
<span class="token operator">&lt;</span>AddBackward0 <span class="token builtin">object</span> at <span class="token number">0x7fbb003b4250</span><span class="token operator">></span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>is_leaf<span class="token punctuation">,</span> y<span class="token punctuation">.</span>is_leaf<span class="token punctuation">)</span>
<span class="token boolean">True</span> <span class="token boolean">False</span>

<span class="token operator">>></span><span class="token operator">></span> z <span class="token operator">=</span> y <span class="token operator">*</span> y <span class="token operator">*</span> <span class="token number">3</span>
<span class="token operator">>></span><span class="token operator">></span> out <span class="token operator">=</span> z<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> out<span class="token punctuation">)</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grad_fn<span class="token operator">=</span><span class="token operator">&lt;</span>MulBackward0<span class="token operator">></span><span class="token punctuation">)</span> tensor<span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">.</span><span class="token punctuation">,</span> grad_fn<span class="token operator">=</span><span class="token operator">&lt;</span>MeanBackward0<span class="token operator">></span><span class="token punctuation">)</span></code></pre>
<p>注意 x 是直接创建的，所以它没有 <code>grad_fn</code>, 而 y 是通过一个加法操作创建的，所以它有一个为 <code>&lt;AddBackward&gt;</code> 的 <code>grad_fn</code>。像 x 这种直接创建的称为叶子节点，叶子节点对应的 <code>grad_fn</code> 是 <code>None</code>。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 缺失情况下默认 requires_grad = False</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span> <span class="token comment"># False</span>
<span class="token boolean">False</span>

<span class="token comment"># 通过 .requires_grad_() 来用 in-place 的方式改变 requires_grad 属性</span>
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.0261</span><span class="token punctuation">,</span>  <span class="token number">0.6281</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span> <span class="token number">1.1572</span><span class="token punctuation">,</span>  <span class="token number">6.8756</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span> <span class="token comment"># True</span>
<span class="token boolean">True</span>

<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>grad_fn<span class="token punctuation">)</span>
<span class="token operator">&lt;</span>SumBackward0 <span class="token builtin">object</span> at <span class="token number">0x7fba80387730</span><span class="token operator">></span></code></pre>
<ul>
<li><strong><code>backward()</code></strong></li>
</ul>
<p>因为 <code>out</code> 是一个标量，所以调用 <code>backward()</code> 时不需要指定求导变量：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> out<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 等价于 out.backward(torch.tensor(1.))</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">)</span> <span class="token comment"># Out 关于 x 的梯度, d(out)/dx</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4.5000</span><span class="token punctuation">,</span> <span class="token number">4.5000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">4.5000</span><span class="token punctuation">,</span> <span class="token number">4.5000</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>本质上，反向传播的过程是在计算一系列 Jacobi 矩阵的乘积。</p>
<p>注意：grad 在反向传播过程中是累加的，这意味着每一次运行反向传播，梯度都会累加之前的梯度，所以<strong>一般在反向传播之前需把梯度清零</strong>。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># 再来反向传播一次，注意grad是累加的</span>
<span class="token operator">>></span><span class="token operator">></span> out2 <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> out2<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5.5000</span><span class="token punctuation">,</span> <span class="token number">5.5000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">5.5000</span><span class="token punctuation">,</span> <span class="token number">5.5000</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> out3 <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> out3<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>注：PyTorch 的 <code>backward</code> 为什么有一个 <code>grad_variables</code> 参数？</p>
<p>假设 x 经过一番计算得到 y，那么 <code>y.backward(w)</code> 求的不是 y 对 x 的导数，而是 <code>l = torch.sum(y*w)</code> 对 x 的导数。w 可以视为 y 的各分量的权重，也可以视为遥远的损失函数 l 对 y 的偏导数（这正是函数说明文档的含义）。特别地，若 y 为标量，w 取默认值 1.0，才是按照我们通常理解的那样，求 y 对 x 的导数。</p>
<ul>
<li><strong>中断梯度传播</strong></li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
y1 <span class="token operator">=</span> x <span class="token operator">**</span> <span class="token number">2</span> 
<span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    y2 <span class="token operator">=</span> x <span class="token operator">**</span> <span class="token number">3</span>
y3 <span class="token operator">=</span> y1 <span class="token operator">+</span> y2

<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span> y1<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span> <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y2<span class="token punctuation">,</span> y2<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span> <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y3<span class="token punctuation">,</span> y3<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span> <span class="token comment"># True</span>

Output<span class="token punctuation">:</span>
<span class="token boolean">True</span>
tensor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> grad_fn<span class="token operator">=</span><span class="token operator">&lt;</span>PowBackward0<span class="token operator">></span><span class="token punctuation">)</span> <span class="token boolean">True</span>
tensor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token boolean">False</span>
tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> grad_fn<span class="token operator">=</span><span class="token operator">&lt;</span>ThAddBackward<span class="token operator">></span><span class="token punctuation">)</span> <span class="token boolean">True</span></code></pre>
<p>可以看到，上面的 <code>y2</code> 是没有 <code>grad_fn</code> 而且 <code>y2.requires_grad=False</code> 的，而 <code>y3</code> 是有 <code>grad_fn</code> 的。如果我们将<code>y3</code>对<code>x</code>求梯度的话：</p>
<pre class="language-python" data-language="python"><code class="language-python">y3<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>

Output<span class="token punctuation">:</span>
tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">)</span></code></pre>
<p>正如我们所理解的，$y_3 = y_1 + y_2 = x^2 + x^3$，其中 $y_2$ 的梯度不被回传，因此 $\dfrac {d y_3} {dx} = 2x$.</p>
<p>此外，如果我们想要修改 <code>Tensor</code> 的数值，但是又不希望被 <code>autograd</code> 记录（即不会影响反向传播），那么我么可以对 <code>tensor.data</code> 进行操作。</p>
<pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment"># 还是一个tensor</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span> <span class="token comment"># 但是已经是独立于计算图之外</span>

y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x
x<span class="token punctuation">.</span>data <span class="token operator">*=</span> <span class="token number">100</span> <span class="token comment"># 只改变了值，不会记录在计算图，所以不会影响梯度传播</span>

y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># 更改data的值也会影响tensor的值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>

Output<span class="token punctuation">:</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<h2 id="深度学习基础"><a href="#深度学习基础" class="headerlink" title="深度学习基础"></a>深度学习基础</h2><h3 id="基础模型"><a href="#基础模型" class="headerlink" title="基础模型"></a>基础模型</h3><h4 id="Linear-Regression"><a href="#Linear-Regression" class="headerlink" title="Linear Regression"></a>Linear Regression</h4><p>首先，回归问题的输出是连续值，而分类问题的输出是离散值，这是二者的区别。</p>
<ul>
<li><strong>模型定义</strong>：假设我们采集的样本数为 $n$​，索引为 $i$​ 的样本的特征为 $x_1^{(i)}$​ 和 $x_2^{(i)}$​，标签为 $y^{(i)}$​。对于索引为 $i$​ 的房屋，线性回归模型的房屋价格预测表达式为 <script type="math/tex">\hat{y}^{(i)} = x_1^{(i)} w_1 + x_2^{(i)} w_2 + b</script>​</li>
<li><strong>损失函数</strong>：$\ell^{(i)}(w_1, w_2, b) = \frac{1}{2} \left(\hat{y}^{(i)} - y^{(i)}\right)^2$​, $ \ell(w_1, w_2, b) =\frac{1}{n} \sum_{i=1}^n \ell^{(i)}(w_1, w_2, b) =\frac{1}{n} \sum_{i=1}^n \frac{1}{2}\left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right)^2$​</li>
</ul>
<p>在模型训练中，我们希望找出一组模型参数，记为 $w_1^<em>, w_2^</em>, b^<em>$，来使训练样本平均损失最小：$ w_1^</em>, w_2^<em>, b^</em> = \underset{w_1, w_2, b}{\arg\min} \ell(w_1, w_2, b) $</p>
<ul>
<li><strong>优化算法</strong></li>
</ul>
<p>当模型和损失函数形式较为简单时，上面的误差最小化问题的解可以直接用公式表达出来。这类解叫作<strong>解析解</strong>。本节使用的线性回归和平方误差刚好属于这个范畴。然而，大多数深度学习模型并没有解析解，只能通过优化算法有限次迭代模型参数来尽可能降低损失函数的值。这类解叫作<strong>数值解</strong>。</p>
<p>在求数值解的优化算法中，<strong>小批量随机梯度下降</strong>（Mini-batch SGD, mini-batch stochastic gradient descent）在深度学习中被广泛使用。它的算法很简单：先选取一组模型参数的初始值，如随机选取；接下来对参数进行多次迭代，使每次迭代都可能降低损失函数的值。在每次迭代中，先随机均匀采样一个由固定数目训练数据样本所组成的小批量（mini-batch）$\mathcal{B}$​，然后求小批量中数据样本的平均损失有关模型参数的导数（梯度），最后用此结果与预先设定的一个正数 learning_rate $\eta$ 的乘积作为模型参数在本次迭代的减小量。</p>
<p>在训练本节讨论的线性回归模型的过程中，模型的每个参数将作如下迭代：</p>
<script type="math/tex; mode=display">
\begin{aligned} w_1 &\leftarrow w_1 - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \frac{ \partial \ell^{(i)}(w_1, w_2, b) }{\partial w_1} = w_1 - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}x_1^{(i)} \left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right), \\
w_2 &\leftarrow w_2 - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \frac{ \partial \ell^{(i)}(w_1, w_2, b) }{\partial w_2} = w_2 - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}x_2^{(i)} \left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right), \\
b &\leftarrow b - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \frac{ \partial \ell^{(i)}(w_1, w_2, b) }{\partial b} = b - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}\left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right). \end{aligned}</script><p>在上式中，$|\mathcal{B}|$ 代表每个小批量中的样本个数（批量大小，batch size），$\eta$ 称作学习率（learning rate）并取正数。需要强调的是，这里的批量大小和学习率的值是人为设定的，并不是通过模型训练学出的，因此叫作超参数（hyperparameter）。我们通常所说的“调参”指的正是调节超参数，例如通过反复试错来找到超参数合适的值。</p>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><ul>
<li>生成数据集</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python">num_inputs <span class="token operator">=</span> <span class="token number">2</span>
num_examples <span class="token operator">=</span> <span class="token number">1000</span>
true_w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.4</span><span class="token punctuation">]</span>
true_b <span class="token operator">=</span> <span class="token number">4.2</span>
features <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num_examples<span class="token punctuation">,</span> num_inputs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>
labels <span class="token operator">=</span> true_w<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> features<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> true_w<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> features<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> true_b
labels <span class="token operator">+=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">,</span> size<span class="token operator">=</span>labels<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span></code></pre>
<ul>
<li>读取数据</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> Data

batch_size <span class="token operator">=</span> <span class="token number">10</span>
<span class="token comment"># 将训练数据的特征和标签组合</span>
dataset <span class="token operator">=</span> Data<span class="token punctuation">.</span>TensorDataset<span class="token punctuation">(</span>features<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>
<span class="token comment"># 随机读取小批量</span>
data_iter <span class="token operator">=</span> Data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> X<span class="token punctuation">,</span> y <span class="token keyword">in</span> data_iter<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
    <span class="token keyword">break</span>

tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2.7723</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.6627</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.1058</span><span class="token punctuation">,</span>  <span class="token number">0.7688</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span> <span class="token number">0.4901</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.2260</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.7227</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.2664</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.3390</span><span class="token punctuation">,</span>  <span class="token number">0.1162</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span> <span class="token number">1.6705</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.7930</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span> <span class="token number">0.2576</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.2928</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span> <span class="token number">2.0475</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.7440</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span> <span class="token number">1.0685</span><span class="token punctuation">,</span>  <span class="token number">1.1920</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span> <span class="token number">1.0996</span><span class="token punctuation">,</span>  <span class="token number">0.5106</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
 tensor<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">0.9066</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.6247</span><span class="token punctuation">,</span>  <span class="token number">9.3383</span><span class="token punctuation">,</span>  <span class="token number">3.6537</span><span class="token punctuation">,</span>  <span class="token number">3.1283</span><span class="token punctuation">,</span> <span class="token number">17.0213</span><span class="token punctuation">,</span>  <span class="token number">5.6953</span><span class="token punctuation">,</span> <span class="token number">17.6279</span><span class="token punctuation">,</span>
         <span class="token number">2.2809</span><span class="token punctuation">,</span>  <span class="token number">4.6661</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 可以看到，对迭代器进行迭代每次拿到的数据也是以 batch 的形式封装成 array</span></code></pre>
<ul>
<li>定义模型</li>
</ul>
<p>首先，导入 <code>torch.nn</code> 模块。实际上，“nn”是neural networks（神经网络）的缩写。</p>
<p>顾名思义，该模块定义了大量神经网络的层。之前我们已经用过了 <code>autograd</code>，而 <code>nn</code> 就是利用 <code>autograd</code> 来定义模型。</p>
<p><code>nn</code> 的核心数据结构是 <code>Module</code>，它是一个抽象概念，既可以表示神经网络中的某个层（layer），也可以表示一个包含很多层的神经网络。在实际使用中，最常见的做法是继承 <code>nn.Module</code>，撰写自己的网络/层。</p>
<p>一个 <code>nn.Module</code> 实例应该包含一些层以及返回输出的前向传播（forward）方法。下面先来看看如何用 <code>nn.Module</code> 实现一个线性回归模型。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LinearNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_feature<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>LinearNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_feature<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment"># forward 定义前向传播</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        y <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> y

net <span class="token operator">=</span> LinearNet<span class="token punctuation">(</span>num_inputs<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span> <span class="token comment"># 使用print可以打印出网络的结构</span>

<span class="token comment"># Output:</span>
LinearNet<span class="token punctuation">(</span>
  <span class="token punctuation">(</span>linear<span class="token punctuation">)</span><span class="token punctuation">:</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span></code></pre>
<p>事实上我们还可以用<code>nn.Sequential</code>来更加方便地搭建网络，<code>Sequential</code>是一个有序的容器，网络层将按照在传入<code>Sequential</code>的顺序依次被添加到计算图中。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 写法一</span>
net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment"># 此处还可以传入其他层</span>
    <span class="token punctuation">)</span>

<span class="token comment"># 写法二</span>
net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>
net<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">'linear'</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># net.add_module ......</span>

<span class="token comment"># 写法三</span>
<span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict
net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>
          <span class="token punctuation">(</span><span class="token string">'linear'</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token comment"># ......</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

Output<span class="token punctuation">:</span>
Sequential<span class="token punctuation">(</span>
  <span class="token punctuation">(</span>linear<span class="token punctuation">)</span><span class="token punctuation">:</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>
<p>可以通过 <code>net.parameters()</code> 来查看模型所有的可学习参数，此函数将返回一个生成器。<br><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> param <span class="token keyword">in</span> net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span></code></pre><br>输出：<br><pre class="language-none"><code class="language-none">Parameter containing:
tensor([[-0.0277,  0.2771]], requires_grad&#x3D;True)
Parameter containing:
tensor([0.3395], requires_grad&#x3D;True)</code></pre></p>
<p>注意：<code>torch.nn</code> <strong>仅支持输入一个 batch 的样本</strong>，而不支持单个样本输入，如果只有单个样本，可使用 <code>input.unsqueeze(0)</code> 来添加一维。</p>
<p>附：<code>unsqueeze()</code> 的使用：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.6444</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5408</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.6239</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
         <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.8880</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.7358</span><span class="token punctuation">,</span>  <span class="token number">0.7287</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
         <span class="token punctuation">[</span> <span class="token number">1.1660</span><span class="token punctuation">,</span>  <span class="token number">1.3125</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.4676</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
         <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.4620</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.1572</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.4755</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
         <span class="token punctuation">[</span> <span class="token number">0.6389</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.4514</span><span class="token punctuation">,</span>  <span class="token number">0.3339</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 最外层加壳</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.6444</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5408</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.6239</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.8880</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.7358</span><span class="token punctuation">,</span>  <span class="token number">0.7287</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span> <span class="token number">1.1660</span><span class="token punctuation">,</span>  <span class="token number">1.3125</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.4676</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.4620</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.1572</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.4755</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span> <span class="token number">0.6389</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.4514</span><span class="token punctuation">,</span>  <span class="token number">0.3339</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 次外层元素</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.6444</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5408</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.6239</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.8880</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.7358</span><span class="token punctuation">,</span>  <span class="token number">0.7287</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span> <span class="token number">1.1660</span><span class="token punctuation">,</span>  <span class="token number">1.3125</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.4676</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.4620</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.1572</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.4755</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span> <span class="token number">0.6389</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.4514</span><span class="token punctuation">,</span>  <span class="token number">0.3339</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.6444</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5408</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.6239</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

         <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.8880</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.7358</span><span class="token punctuation">,</span>  <span class="token number">0.7287</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

         <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.1660</span><span class="token punctuation">,</span>  <span class="token number">1.3125</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.4676</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

         <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.4620</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.1572</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.4755</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

         <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.6389</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.4514</span><span class="token punctuation">,</span>  <span class="token number">0.3339</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.6444</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.5408</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.6239</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

         <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.8880</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.7358</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span> <span class="token number">0.7287</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

         <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.1660</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span> <span class="token number">1.3125</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3.4676</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

         <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.4620</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.1572</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.4755</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

         <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.6389</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2.4514</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span> <span class="token number">0.3339</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
IndexError<span class="token punctuation">:</span> Dimension out of <span class="token builtin">range</span> <span class="token punctuation">(</span>expected to be <span class="token keyword">in</span> <span class="token builtin">range</span> of <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> but got <span class="token number">4</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 最内层</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.6444</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.5408</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.6239</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

         <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.8880</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.7358</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span> <span class="token number">0.7287</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

         <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.1660</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span> <span class="token number">1.3125</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3.4676</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

         <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.4620</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.1572</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.4755</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

         <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.6389</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2.4514</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span> <span class="token number">0.3339</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 一直到最内层</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.6444</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5408</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.6239</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.8880</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.7358</span><span class="token punctuation">,</span>  <span class="token number">0.7287</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span> <span class="token number">1.1660</span><span class="token punctuation">,</span>  <span class="token number">1.3125</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.4676</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.4620</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.1572</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.4755</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span> <span class="token number">0.6389</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.4514</span><span class="token punctuation">,</span>  <span class="token number">0.3339</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 某一层</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.6444</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5408</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.6239</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
         <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.8880</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.7358</span><span class="token punctuation">,</span>  <span class="token number">0.7287</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
         <span class="token punctuation">[</span> <span class="token number">1.1660</span><span class="token punctuation">,</span>  <span class="token number">1.3125</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.4676</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
         <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.4620</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.1572</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.4755</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
         <span class="token punctuation">[</span> <span class="token number">0.6389</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.4514</span><span class="token punctuation">,</span>  <span class="token number">0.3339</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<ul>
<li>初始化模型参数</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> init
init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>net<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>
init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>net<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bias<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 也可以直接修改bias的data: net[0].bias.data.fill_(0)</span></code></pre>
<ul>
<li>定义损失函数</li>
</ul>
<p>PyTorch 在 <code>nn</code> 模块中提供了各种损失函数，这些损失函数可看作是一种特殊的层，PyTorch 也将这些损失函数实现为 <code>nn.Module</code> 的子类。我们现在使用它提供的均方误差损失作为模型的损失函数。</p>
<pre class="language-python" data-language="python"><code class="language-python">loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<ul>
<li>定义优化算法</li>
</ul>
<p>同样，我们也无须自己实现小批量随机梯度下降算法。<code>torch.optim</code> 模块提供了很多常用的优化算法比如 SGD、Adam 和 RMSProp 等。下面我们创建一个用于优化 <code>net</code> 所有参数的优化器实例，并指定学习率为 0.03 的小批量随机梯度下降（SGD）为优化算法。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim
optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.03</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>optimizer<span class="token punctuation">)</span></code></pre>
<p>输出：<br><pre class="language-none"><code class="language-none">SGD (
Parameter Group 0
    dampening: 0
    lr: 0.03
    momentum: 0
    nesterov: False
    weight_decay: 0
)</code></pre></p>
<p>我们还可以为不同子网络设置不同的学习率，这在 fine-tune 时经常用到。例：<br><pre class="language-python" data-language="python"><code class="language-python">optimizer <span class="token operator">=</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span><span class="token punctuation">[</span>
                <span class="token comment"># 如果对某个参数不指定学习率，就使用最外层的默认学习率</span>
                <span class="token punctuation">&#123;</span><span class="token string">'params'</span><span class="token punctuation">:</span> net<span class="token punctuation">.</span>subnet1<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment"># lr=0.03</span>
                <span class="token punctuation">&#123;</span><span class="token string">'params'</span><span class="token punctuation">:</span> net<span class="token punctuation">.</span>subnet2<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'lr'</span><span class="token punctuation">:</span> <span class="token number">0.01</span><span class="token punctuation">&#125;</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.03</span><span class="token punctuation">)</span></code></pre></p>
<p>有时候我们不想让学习率固定成一个常数，那如何调整学习率呢？主要有两种做法。一种是修改 <code>optimizer.param_groups</code> 中对应的学习率，另一种是更简单也是较为推荐的做法 —— <strong>新建优化器</strong>，由于optimizer十分轻量级，构建开销很小，故而可以构建新的 optimizer。但是后者对于使用动量的优化器（如 Adam），会丢失动量等状态信息，可能会造成损失函数的收敛出现震荡等情况。<br><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 调整学习率</span>
<span class="token keyword">for</span> param_group <span class="token keyword">in</span> optimizer<span class="token punctuation">.</span>param_groups<span class="token punctuation">:</span>
    param_group<span class="token punctuation">[</span><span class="token string">'lr'</span><span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token number">0.1</span> <span class="token comment"># 学习率为之前的0.1倍</span></code></pre></p>
<ul>
<li>训练模型</li>
</ul>
<p>通过调用 <code>optim</code> 实例的 <code>step</code> 函数来迭代模型参数。按照小批量随机梯度下降的定义，我们在 <code>step</code> 函数中指明批量大小，从而对批量中样本梯度求平均。</p>
<pre class="language-python" data-language="python"><code class="language-python">num_epochs <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num_epochs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> X<span class="token punctuation">,</span> y <span class="token keyword">in</span> data_iter<span class="token punctuation">:</span>
        output <span class="token operator">=</span> net<span class="token punctuation">(</span>X<span class="token punctuation">)</span>
        l <span class="token operator">=</span> loss<span class="token punctuation">(</span>output<span class="token punctuation">,</span> y<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 梯度清零，等价于net.zero_grad()</span>
        l<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'epoch %d, loss: %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> l<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>输出：<br><pre class="language-none"><code class="language-none">epoch 1, loss: 0.000457
epoch 2, loss: 0.000081
epoch 3, loss: 0.000198</code></pre></p>
<h4 id="Softmax-Regression"><a href="#Softmax-Regression" class="headerlink" title="Softmax Regression"></a>Softmax Regression</h4><p>线性回归模型适用于<strong>输出为连续值</strong>的情景。</p>
<p>在另一类情景中，模型输出可以是一个像图像类别这样的<strong>离散值</strong>。对于这样的离散值预测问题，我们可以使用诸如 softmax 回归在内的<strong>分类模型</strong>。</p>
<p>和线性回归不同，softmax 回归的<strong>输出单元从一个变成了多个</strong>，且引入了 softmax 运算使输出更适合离散值的预测和训练。本节以 softmax 回归模型为例，介绍神经网络中的分类模型。</p>
<p>softmax 回归跟线性回归一样将输入特征与权重做线性叠加。与线性回归的一个主要不同在于，softmax 回归的<strong>输出值个数等于标签里的类别数</strong>。</p>
<ul>
<li>模型定义</li>
</ul>
<script type="math/tex; mode=display">
\begin{aligned} 
o_1 &= x_1 w_{11} + x_2 w_{21} + x_3 w_{31} + x_4 w_{41} + b_1,\\ 
o_2 &= x_1 w_{12} + x_2 w_{22} + x_3 w_{32} + x_4 w_{42} + b_2,\\ 
o_3 &= x_1 w_{13} + x_2 w_{23} + x_3 w_{33} + x_4 w_{43} + b_3. \\
\end{aligned}</script><script type="math/tex; mode=display">
\hat{y}_1, \hat{y}_2, \hat{y}_3 = \text{softmax}(o_1, o_2, o_3)</script><p>其中：</p>
<script type="math/tex; mode=display">
\hat{y_1} = \frac{ \exp(o_1)}{\sum_{i=1}^3 \exp(o_i)},\quad 
\hat{y_2} = \frac{ \exp(o_2)}{\sum_{i=1}^3 \exp(o_i)},\quad 
\hat{y_3} = \frac{ \exp(o_3)}{\sum_{i=1}^3 \exp(o_i)}.</script><ul>
<li>损失函数：Cross Entropy</li>
</ul>
<script type="math/tex; mode=display">
H\left(\boldsymbol y^{(i)}, \boldsymbol {\hat y}^{(i)}\right ) = -\sum_{j=1}^q y_j^{(i)} \log \hat y_j^{(i)},</script><p>交叉熵只关心<strong>对正确类别</strong>的预测概率，因为只要其值足够大，就可以确保分类结果正确。</p>
<p>假设训练数据集的样本数为 $n$​，交叉熵损失函数定义为 $\ell(\boldsymbol{\Theta}) = \frac{1}{n} \sum_{i=1}^n H\left(\boldsymbol y^{(i)}, \boldsymbol {\hat y}^{(i)}\right ) $​. 其中$\boldsymbol{\Theta}$​​代表模型参数。</p>
<p>注意：这里的交叉熵是 H = - [ 实际值 * log(预测值) ] 的求和。而 log(预测值) 却又可以替换为是预测时的 logits $o_i$​​​，二者之间只差了一个系数。因此背后实现可以直接用 logits 参与简化计算。</p>
<blockquote>
<p>数据集与相关包的介绍：Fashion-MNIST</p>
<p>本节我们将使用 torchvision 包，它是服务于 PyTorch 深度学习框架的，主要用来构建计算机视觉模型。 torchvision 主要由以下几部分构成：</p>
<ol>
<li><code>torchvision.datasets</code>: 一些加载数据的函数及常用的数据集接口；</li>
<li><code>torchvision.models</code>: 包含常用的模型结构（含预训练模型），例如 AlexNet、VGG、ResNet 等；</li>
<li><code>torchvision.transforms</code>: 常用的图片变换，例如裁剪、旋转等；</li>
<li><code>torchvision.utils</code>: 其他的一些有用的方法。</li>
</ol>
</blockquote>
<h4 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h4><ul>
<li>仅添加隐藏层：即便再添加更多的隐藏层，将线性隐藏层间彼此相接依然只能与仅含输出层的单层神经网络等价。</li>
</ul>
<p>上述问题的根源在于全连接层只是对数据做仿射变换（affine transformation），而多个仿射变换的叠加仍然是一个仿射变换。</p>
<p>解决问题的一个方法是引入非线性变换，例如对隐藏变量使用按元素运算的非线性函数进行变换，然后再作为下一个全连接层的输入。</p>
<p>这个非线性函数被称为激活函数（activation function）。下面我们介绍几个常用的激活函数。</p>
<ul>
<li>$Relu(x) = \max(0, x)$.</li>
<li>$sigmoid(x) =\sigma(x) = \dfrac 1 {1 + e^{-x}}$.</li>
<li>$\text{tanh}(x) = \frac{1 - \exp(-2x)}{1 + \exp(-2x)}$.</li>
</ul>
<p>多层感知机就是含有至少一个隐藏层的由全连接层组成的神经网络，且每个隐藏层的输出通过激活函数进行变换。多层感知机的层数和各隐藏层中隐藏单元个数都是超参数。</p>
<h3 id="应对过拟合"><a href="#应对过拟合" class="headerlink" title="应对过拟合"></a>应对过拟合</h3><h4 id="L2-Regularization"><a href="#L2-Regularization" class="headerlink" title="L2 Regularization"></a>L2 Regularization</h4><ul>
<li><strong>权重衰减</strong>是一种应对过拟合的方法</li>
<li>权重衰减等价于 $L_2$ 范数正则化（regularization）。正则化通过为模型损失函数添加惩罚项使学出的模型参数值较小，是应对过拟合的常用手段。我们先描述 $L_2$ 范数正则化，再解释它为何又称权重衰减。</li>
</ul>
<p>$L_2$ 范数正则化在模型原损失函数基础上添加 $L_2$ 范数惩罚项，从而得到训练所需要最小化的函数。</p>
<p>$L_2$ 范数惩罚项指的是模型权重参数每个元素的平方和与一个正的常数的乘积。即定义新的 Loss Function 为：</p>
<script type="math/tex; mode=display">
\ell(w, b) + \frac{\lambda}{2n} \|\boldsymbol{w}\|^2</script><p>为什么 $L_2$ Regularization 能起到“权重衰减”的作用呢？我们考虑 Optimizer 的迭代方式…</p>
<script type="math/tex; mode=display">
\begin{aligned} w_1 &\leftarrow \left(1- \frac{\eta\lambda}{|\mathcal{B}|} \right)w_1 - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}x_1^{(i)} \left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right),\\ 

w_2 &\leftarrow \left(1- \frac{\eta\lambda}{|\mathcal{B}|} \right)w_2 - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}x_2^{(i)} \left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right). \end{aligned}</script><p>这是因为如果我们对损失函数求梯度，就必然带有了和原有的 $w$ 有关的一项。然后我们在做优化迭代的过程中，$L_2$ 范数正则化令权重 $w_1$ 和 $w_2$ 先自乘小于 1 的数，再减去不含惩罚项的梯度。因此，$L_2$ 范数正则化又叫权重衰减。</p>
<p>权重衰减通过惩罚绝对值较大的模型参数为需要学习的模型增加了限制，这可能对过拟合有效。实际场景中，我们有时也在惩罚项中添加偏差元素的平方和。</p>
<h5 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h5><ul>
<li>定义 L2 范数惩罚项</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">l2_penalty</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>w<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span></code></pre>
<ul>
<li>Train (From scratch)</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fit_and_plot</span><span class="token punctuation">(</span>lambd<span class="token punctuation">)</span><span class="token punctuation">:</span>
    w<span class="token punctuation">,</span> b <span class="token operator">=</span> init_params<span class="token punctuation">(</span><span class="token punctuation">)</span>
    train_ls<span class="token punctuation">,</span> test_ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> X<span class="token punctuation">,</span> y <span class="token keyword">in</span> train_iter<span class="token punctuation">:</span>
            <span class="token comment"># 添加了L2范数惩罚项</span>
            l <span class="token operator">=</span> loss<span class="token punctuation">(</span>net<span class="token punctuation">(</span>X<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">+</span> lambd <span class="token operator">*</span> l2_penalty<span class="token punctuation">(</span>w<span class="token punctuation">)</span>
            l <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

            <span class="token keyword">if</span> w<span class="token punctuation">.</span>grad <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                w<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>
                b<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>
            l<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
            d2l<span class="token punctuation">.</span>sgd<span class="token punctuation">(</span><span class="token punctuation">[</span>w<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>
        train_ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">(</span>net<span class="token punctuation">(</span>train_features<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> train_labels<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        test_ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">(</span>net<span class="token punctuation">(</span>test_features<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> test_labels<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    d2l<span class="token punctuation">.</span>semilogy<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num_epochs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> train_ls<span class="token punctuation">,</span> <span class="token string">'epochs'</span><span class="token punctuation">,</span> <span class="token string">'loss'</span><span class="token punctuation">,</span>
                 <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num_epochs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test_ls<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'L2 norm of w:'</span><span class="token punctuation">,</span> w<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<ul>
<li>Train (Simple)</li>
</ul>
<p>这里我们直接在构造优化器实例时通过 <code>weight_decay</code> 参数来指定权重衰减超参数。默认下，PyTorch 会对权重和偏差同时衰减。我们可以分别对权重和偏差构造优化器实例，从而只对权重衰减。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fit_and_plot_pytorch</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 对权重参数衰减。权重名称一般是以weight结尾</span>
    net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>net<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>net<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    optimizer_w <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>params<span class="token operator">=</span><span class="token punctuation">[</span>net<span class="token punctuation">.</span>weight<span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>wd<span class="token punctuation">)</span> <span class="token comment"># 对权重参数衰减</span>
    optimizer_b <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>params<span class="token operator">=</span><span class="token punctuation">[</span>net<span class="token punctuation">.</span>bias<span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">)</span>  <span class="token comment"># 不对偏差参数衰减</span>

    train_ls<span class="token punctuation">,</span> test_ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> X<span class="token punctuation">,</span> y <span class="token keyword">in</span> train_iter<span class="token punctuation">:</span>
            l <span class="token operator">=</span> loss<span class="token punctuation">(</span>net<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>
            optimizer_w<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>
            optimizer_b<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>

            l<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>

            <span class="token comment"># 对两个 optimizer 实例分别调用 step 函数，从而分别更新权重和偏差</span>
            optimizer_w<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>
            optimizer_b<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>
        train_ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">(</span>net<span class="token punctuation">(</span>train_features<span class="token punctuation">)</span><span class="token punctuation">,</span> train_labels<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        test_ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">(</span>net<span class="token punctuation">(</span>test_features<span class="token punctuation">)</span><span class="token punctuation">,</span> test_labels<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    d2l<span class="token punctuation">.</span>semilogy<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num_epochs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> train_ls<span class="token punctuation">,</span> <span class="token string">'epochs'</span><span class="token punctuation">,</span> <span class="token string">'loss'</span><span class="token punctuation">,</span>
                 <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num_epochs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test_ls<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'L2 norm of w:'</span><span class="token punctuation">,</span> net<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h4 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h4><p>除了前一节介绍的权重衰减以外，深度学习模型常常使用丢弃法（Dropout）来应对过拟合问题。丢弃法有一些不同的变体。本节中提到的丢弃法特指倒置丢弃法（inverted dropout）。</p>
<p>当对某个隐藏层使用丢弃法时，该层的隐藏单元将有一定概率被丢弃掉。设丢弃概率为 $p$，那么有 $p$ 的概率其输出 $h_i$ 会被清零，有 $1-p$ 的概率 $h_i$ 会除以 $1-p$ 做拉伸。</p>
<p>丢弃概率是丢弃法的超参数。具体来说，设随机变量 $\xi_i$ 为 0 和 1 的概率分别为 $p$ 和 $1-p$ 。使用丢弃法时我们计算新的隐藏单元 $ h_i’ = \frac{\xi_i}{1-p} h_i $，由于 $E(\xi_i) = 1-p$，因此</p>
<script type="math/tex; mode=display">
E(h_i') = \frac{E(\xi_i)}{1-p}h_i = h_i</script><p>即<strong>丢弃法不改变其输入的期望值</strong>。</p>
<ul>
<li>实现（Simple）</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python">net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
        d2l<span class="token punctuation">.</span>FlattenLayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span> num_hiddens1<span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>drop_prob1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># Here</span>
        nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_hiddens1<span class="token punctuation">,</span> num_hiddens2<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>drop_prob2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># Here</span>
        nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_hiddens2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>

<span class="token keyword">for</span> param <span class="token keyword">in</span> net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>param<span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span></code></pre>
<blockquote>
<ul>
<li><strong>数值稳定性</strong></li>
</ul>
<p>深度模型有关数值稳定性的典型问题是衰减（vanishing）和爆炸（explosion）。</p>
<p>当神经网络的层数较多时，模型的数值稳定性容易变差。假设一个层数为 $L$ 的多层感知机的第 $l$ 层 $\boldsymbol{H}^{(l)}$ 的权重参数为 $\boldsymbol{W}^{(l)}$，输出层 $\boldsymbol{H}^{(L)}$ 的权重参数为 $\boldsymbol{W}^{(L)}$。</p>
<p>为了便于讨论，不考虑偏差参数，且设所有隐藏层的激活函数为恒等映射 $\phi(x) = x$。</p>
<p>给定输入 $\boldsymbol{X}$，多层感知机的第 $l$ 层的输出 $\boldsymbol{H}^{(l)} = \boldsymbol{X} \boldsymbol{W}^{(1)} \boldsymbol{W}^{(2)} \ldots \boldsymbol{W}^{(l)}$。</p>
<p>此时，如果层数$l$较大，$\boldsymbol{H}^{(l)}$ 的计算可能会出现衰减或爆炸。</p>
<p>举个例子，假设输入和所有层的权重参数都是标量，如权重参数为 0.2 和 5，多层感知机的第 30 层输出为输入 $\boldsymbol{X}$ 分别与 $0.2^{30} \approx 1 \times 10^{-21}$（衰减）和 $5^{30} \approx 9 \times 10^{20}$（爆炸）的乘积。</p>
<p>类似地，当层数较多时，梯度的计算也更容易出现衰减或爆炸。</p>
<ul>
<li><strong>模型初始化</strong></li>
</ul>
<p>在神经网络中，通常需要随机初始化模型参数。下面我们来解释这样做的原因。</p>
<p>考虑多层感知机模型。如果将每个隐藏单元的参数都初始化为相等的值，那么在正向传播时每个隐藏单元将根据相同的输入计算出相同的值，并传递至输出层。</p>
<p>在反向传播中，每个隐藏单元的参数梯度值相等。因此，这些参数在使用基于梯度的优化算法迭代后值依然相等。</p>
<p>之后的迭代也是如此。在这种情况下，无论隐藏单元有多少，隐藏层本质上只有 1 个隐藏单元在发挥作用。</p>
<p>因此，正如在前面的实验中所做的那样，我们通常将神经网络的模型参数，特别是权重参数，进行随机初始化。</p>
<p>PyTorch 中 <code>nn.Module</code> 的模块参数都采取了较为合理的初始化策略。</p>
</blockquote>
<h2 id="深度学习计算"><a href="#深度学习计算" class="headerlink" title="深度学习计算"></a>深度学习计算</h2><h3 id="模型构造"><a href="#模型构造" class="headerlink" title="模型构造"></a>模型构造</h3><ul>
<li>可以通过继承<code>Module</code>类来构造模型，重载 <code>__init__</code> 函数和 <code>forward</code> 函数。</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MLP</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 声明带有模型参数的层，这里声明了两个全连接层</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 调用 MLP 父类 Module 的构造函数来进行必要的初始化。这样在构造实例时还可以指定其他函数</span>
        <span class="token comment"># 参数，如“模型参数的访问、初始化和共享”一节将介绍的模型参数 params</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>MLP<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>hidden <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token comment"># 隐藏层</span>
        self<span class="token punctuation">.</span>act <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>output <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 输出层</span>


    <span class="token comment"># 定义模型的前向计算，即如何根据输入 x 计算返回所需要的模型输出</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        a <span class="token operator">=</span> self<span class="token punctuation">.</span>act<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>output<span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre>
<ul>
<li><code>Sequential</code>、<code>ModuleList</code>、<code>ModuleDict</code>类都继承自<code>Module</code>类。</li>
</ul>
<p><strong><code>Sequential</code></strong></p>
<pre class="language-python" data-language="python"><code class="language-python">net <span class="token operator">=</span> MySequential<span class="token punctuation">(</span>
        nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span>
net<span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre>
<p><strong><code>ModuleList</code></strong></p>
<pre class="language-python" data-language="python"><code class="language-python">net <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleList<span class="token punctuation">(</span><span class="token punctuation">[</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
net<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># # 类似 List 的 append 操作</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 类似 List 的索引访问</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span>
<span class="token comment"># net(torch.zeros(1, 784)) # 会报 NotImplementedError</span></code></pre>
<p><code>ModuleList</code>仅仅是一个储存各种模块的列表，这些模块之间没有联系也没有顺序（所以不用保证相邻层的输入输出维度匹配），而且没有实现 <code>forward</code> 功能需要自己实现，所以上面执行 <code>net(torch.zeros(1, 784))</code> 会报<code>NotImplementedError</code>；而 <code>Sequential</code> 内的模块需要按照顺序排列，要保证相邻层的输入输出大小相匹配，内部 <code>forward</code> 功能已经实现。此外，<code>ModuleList</code> 不同于一般的 Python 的 <code>list</code>，加入到 <code>ModuleList</code> 里面的所有模块的参数会被自动添加到整个网络中。</p>
<p><strong><code>ModuleDict</code></strong></p>
<p><code>ModuleDict</code> 接收一个子模块的字典作为输入, 然后也可以类似字典那样进行添加访问操作。</p>
<pre class="language-python" data-language="python"><code class="language-python">net <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleDict<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token string">'linear'</span><span class="token punctuation">:</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">'act'</span><span class="token punctuation">:</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
net<span class="token punctuation">[</span><span class="token string">'output'</span><span class="token punctuation">]</span> <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 添加</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">[</span><span class="token string">'linear'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 访问</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>output<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span>
<span class="token comment"># net(torch.zeros(1, 784)) # 会报NotImplementedError</span>
</code></pre>
<p>和 <code>ModuleList</code> 一样，<code>ModuleDict</code> 实例仅仅是存放了一些模块的字典，并没有定义 <code>forward</code> 函数需要自己定义。同样，<code>ModuleDict</code> 也与Python的 <code>Dict</code> 有所不同，<code>ModuleDict</code> 里的所有模块的参数会被自动添加到整个网络中。</p>
<ul>
<li>与<code>Sequential</code>不同，<code>ModuleList</code>和<code>ModuleDict</code>并没有定义一个完整的网络，它们只是将不同的模块存放在一起，需要自己定义<code>forward</code>函数。</li>
<li>虽然<code>Sequential</code>等类可以使模型构造更加简单，但直接继承<code>Module</code>类可以极大地拓展模型构造的灵活性。</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">FancyMLP</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>FancyMLP<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>rand_weight <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># 不可训练参数（常数参数）</span>
        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token comment"># 使用创建的常数参数，以及 nn.functional 中的 relu 函数和 mm 函数</span>
        x <span class="token operator">=</span> nn<span class="token punctuation">.</span>functional<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>rand_weight<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

        <span class="token comment"># 复用全连接层。等价于两个全连接层共享参数</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token comment"># 控制流，这里我们需要调用 item 函数来返回标量进行比较</span>
        <span class="token keyword">while</span> x<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>
            x <span class="token operator">/=</span> <span class="token number">2</span>
        <span class="token keyword">if</span> x<span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.8</span><span class="token punctuation">:</span>
            x <span class="token operator">*=</span> <span class="token number">10</span>
        <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h3 id="模型参数的访问、初始化与共享"><a href="#模型参数的访问、初始化与共享" class="headerlink" title="模型参数的访问、初始化与共享"></a>模型参数的访问、初始化与共享</h3><p>本节用到的模型：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> init

net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># pytorch 已进行默认初始化</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span>
X <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
Y <span class="token operator">=</span> net<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

Output<span class="token punctuation">:</span>
Sequential<span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
  <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span></code></pre>
<ul>
<li><strong>访问模型参数</strong></li>
</ul>
<p>对于 <code>Sequential</code> 实例（派生自 <code>Module</code>）中含模型参数的层，我们可以通过 <code>Module</code> 类的 <code>parameters()</code> 或者 <code>named_parameters</code> 方法来访问所有参数（以迭代器的形式返回），后者除了返回参数 <code>Tensor</code> 外还会返回其名字。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'generator'</span><span class="token operator">></span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> param<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">0.</span>weight torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">0.</span>bias torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">2.</span>weight torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">2.</span>bias torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>接下来访问单层的参数。对于使用 <code>Sequential</code> 类构造的神经网络，我们可以通过方括号 <code>[]</code> 来访问网络的任一层。索引 0 表示隐藏层为 <code>Sequential</code> 实例最先添加的层。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> param <span class="token keyword">in</span> net<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> param<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
weight torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'torch.nn.parameter.Parameter'</span><span class="token operator">></span>
bias torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'torch.nn.parameter.Parameter'</span><span class="token operator">></span></code></pre>
<p>返回的 <code>param</code> 的类型为 <code>torch.nn.parameter.Parameter</code>，其实这是 <code>Tensor</code> 的子类，和 <code>Tensor</code> 不同的是如果一个 <code>Tensor</code> 是 <code>Parameter</code>，那么它会自动被添加到模型的参数列表里。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>MyModel<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>weight1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>weight2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

n <span class="token operator">=</span> MyModel<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> name<span class="token punctuation">,</span> param <span class="token keyword">in</span> n<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    
Output<span class="token punctuation">:</span>
weight1</code></pre>
<ul>
<li><strong>初始化模型参数</strong></li>
</ul>
<p>PyTorch 中 <code>nn.Module</code> 的模块参数都采取了较为合理的初始化策略，但我们经常需要使用其他方法来初始化权重。</p>
<p>PyTorch 的 <code>init</code> 模块里提供了多种预设的初始化方法。在下面的例子中，我们将权重参数初始化成均值为 0、标准差为 0.01 的正态分布随机数，并依然将偏差参数清零。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> name<span class="token punctuation">,</span> param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">'weight'</span> <span class="token keyword">in</span> name<span class="token punctuation">:</span>
        init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>param<span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> param<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

Output<span class="token punctuation">:</span>
<span class="token number">0.</span>weight tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.0030</span><span class="token punctuation">,</span>  <span class="token number">0.0094</span><span class="token punctuation">,</span>  <span class="token number">0.0070</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0010</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span> <span class="token number">0.0001</span><span class="token punctuation">,</span>  <span class="token number">0.0039</span><span class="token punctuation">,</span>  <span class="token number">0.0105</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0126</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span> <span class="token number">0.0105</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0135</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0047</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0006</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">2.</span>weight tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.0074</span><span class="token punctuation">,</span>  <span class="token number">0.0051</span><span class="token punctuation">,</span>  <span class="token number">0.0066</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>下面使用常数来初始化权重参数。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> name<span class="token punctuation">,</span> param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">'bias'</span> <span class="token keyword">in</span> name<span class="token punctuation">:</span>
        init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>param<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> param<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

Output<span class="token punctuation">:</span>
<span class="token number">0.</span>bias tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">2.</span>bias tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>有时候我们需要的初始化方法并没有在 <code>init</code> 模块中提供。这时，可以实现一个初始化方法，从而能够像使用其他初始化方法那样使用它。</p>
<p>首先参考 normal_ 的实现：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">normal_</span><span class="token punctuation">(</span>tensor<span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> tensor<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>mean<span class="token punctuation">,</span> std<span class="token punctuation">)</span></code></pre>
<p>类似地，我们可以实现自定义的初始化方法：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">init_weight_</span><span class="token punctuation">(</span>tensor<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        tensor<span class="token punctuation">.</span>uniform_<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        tensor <span class="token operator">*=</span> <span class="token punctuation">(</span>tensor<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> name<span class="token punctuation">,</span> param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">'weight'</span> <span class="token keyword">in</span> name<span class="token punctuation">:</span>
        init_weight_<span class="token punctuation">(</span>param<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> param<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre>
<p>此外，我们还可以通过直接改变这些参数的 <code>data</code> 来达到改写模型参数值的同时不会影响梯度的效果。</p>
<ul>
<li><strong>共享模型参数</strong></li>
</ul>
<p>在有些情况下，我们希望在多个层之间共享模型参数。</p>
<p>共享模型参数的方法: <code>Module</code> 类的 <code>forward</code> 函数里多次调用同一个层。</p>
<p>此外，如果我们传入 <code>Sequential</code> 的模块是同一个 <code>Module</code> 实例的话参数也是共享的。</p>
<pre class="language-python" data-language="python"><code class="language-python">linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>linear<span class="token punctuation">,</span> linear<span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span>
<span class="token keyword">for</span> name<span class="token punctuation">,</span> param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>param<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> param<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

Output<span class="token punctuation">:</span>
Sequential<span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
  <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token number">0.</span>weight tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 这里只输出了一次参数列表，证明二者共享</span></code></pre>
<p>因为模型参数里包含了梯度，所以在反向传播计算时，这些共享的参数的梯度是累加的。</p>
<h3 id="自定义-Layer"><a href="#自定义-Layer" class="headerlink" title="自定义 Layer"></a>自定义 Layer</h3><p>本节将介绍如何使用 <code>Module</code>来自定义层，从而可以被重复调用。</p>
<ul>
<li><strong>不含模型参数的自定义层</strong></li>
</ul>
<p>事实上，自定义层和自定义模型类似，因为我们可以直接把一个 Packed 的模型视为是一个 Layer。</p>
<p>举个例子，下面的 <code>CenteredLayer</code> 类通过继承 <code>Module</code> 类自定义了一个将输入减掉均值后输出的层，并将层的计算定义在了 <code>forward</code> 函数里。这个层里不含模型参数。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn

<span class="token keyword">class</span> <span class="token class-name">CenteredLayer</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>CenteredLayer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> x <span class="token operator">-</span> x<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>然后，我们就可以实例化这个 Layer，然后做 Forward Feeding.</p>
<pre class="language-python" data-language="python"><code class="language-python">layer <span class="token operator">=</span> CenteredLayer<span class="token punctuation">(</span><span class="token punctuation">)</span>
layer<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

Output<span class="token punctuation">:</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<ul>
<li><strong>含模型参数的自定义层</strong></li>
</ul>
<p>之前我们介绍了 <code>Parameter</code> 类其实是 <code>Tensor</code> 的子类，如果一个 <code>Tensor</code> 是 <code>Parameter</code>，那么它会自动被添加到模型的参数列表里。 // 在这里可以推测这个参数列表是 <code>nn.Module</code> 的数据成员…?</p>
<p>所以在自定义含模型参数的层时，我们应该将参数定义成 <code>Parameter</code>。</p>
<p>除了直接定义成 <code>Parameter</code> 类外，还可以使用 <code>ParameterList</code> 和 <code>ParameterDict</code> 分别定义参数的列表和字典。</p>
<ul>
<li><strong><code>ParameterList</code></strong></li>
</ul>
<p><code>ParameterList</code>接收一个 <code>Parameter</code> 实例的列表作为输入然后得到一个参数列表，使用的时候可以用索引来访问某个参数，另外也可以使用 <code>append</code> 和 <code>extend</code> 在列表后面新增参数。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyDense</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>MyDense<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>params <span class="token operator">=</span> nn<span class="token punctuation">.</span>ParameterList<span class="token punctuation">(</span><span class="token punctuation">[</span>nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>params<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            x <span class="token operator">=</span> torch<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> x
net <span class="token operator">=</span> MyDense<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span></code></pre>
<p>Output:</p>
<pre class="language-none"><code class="language-none">MyDense(
  (params): ParameterList(
      (0): Parameter containing: [torch.FloatTensor of size 4x4]
      (1): Parameter containing: [torch.FloatTensor of size 4x4]
      (2): Parameter containing: [torch.FloatTensor of size 4x4]
      (3): Parameter containing: [torch.FloatTensor of size 4x1]
  )
)</code></pre>
<ul>
<li><strong><code>ParameterDict</code></strong></li>
</ul>
<p><code>ParameterDict</code> 接收一个 <code>Parameter</code> 实例的字典作为输入然后得到一个参数字典，然后可以按照字典的规则使用了。</p>
<p>例如使用 <code>update()</code> 新增参数，使用 <code>keys()</code> 返回所有键值，使用 <code>items()</code> 返回所有键值对等等。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyDictDense</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>MyDictDense<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>params <span class="token operator">=</span> nn<span class="token punctuation">.</span>ParameterDict<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                <span class="token string">'linear1'</span><span class="token punctuation">:</span> nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token string">'linear2'</span><span class="token punctuation">:</span> nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>params<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'linear3'</span><span class="token punctuation">:</span> nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment"># 新增</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> choice<span class="token operator">=</span><span class="token string">'linear1'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span>choice<span class="token punctuation">]</span><span class="token punctuation">)</span>

net <span class="token operator">=</span> MyDictDense<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span></code></pre>
<p>Output:</p>
<pre class="language-none"><code class="language-none">MyDictDense(
  (params): ParameterDict(
      (linear1): Parameter containing: [torch.FloatTensor of size 4x4]
      (linear2): Parameter containing: [torch.FloatTensor of size 4x1]
      (linear3): Parameter containing: [torch.FloatTensor of size 4x2]
  )
)</code></pre>
<p>于是我们可以根据不同的 key 进行不同的 forward feeding.</p>
<pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'linear1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'linear2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'linear3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

Output<span class="token punctuation">:</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.5082</span><span class="token punctuation">,</span> <span class="token number">1.5574</span><span class="token punctuation">,</span> <span class="token number">2.1651</span><span class="token punctuation">,</span> <span class="token number">1.2409</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grad_fn<span class="token operator">=</span><span class="token operator">&lt;</span>MmBackward<span class="token operator">></span><span class="token punctuation">)</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.8783</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grad_fn<span class="token operator">=</span><span class="token operator">&lt;</span>MmBackward<span class="token operator">></span><span class="token punctuation">)</span>
tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">2.2193</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.6539</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grad_fn<span class="token operator">=</span><span class="token operator">&lt;</span>MmBackward<span class="token operator">></span><span class="token punctuation">)</span></code></pre>
<h3 id="读取与存储"><a href="#读取与存储" class="headerlink" title="读取与存储"></a>读取与存储</h3><p>到目前为止，我们介绍了如何处理数据以及如何构建、训练和测试深度学习模型。</p>
<p>然而在实际中，我们有时需要把训练好的模型部署到很多不同的设备。</p>
<p>在这种情况下，我们可以把内存中训练好的模型参数存储在硬盘上供后续读取使用。</p>
<ul>
<li><strong>读写 <code>Tensor</code></strong></li>
</ul>
<p>我们可以直接使用 <code>save</code> 函数和 <code>load</code> 函数分别存储和读取 <code>Tensor</code>。</p>
<p><code>save</code> 使用 Python 的 pickle 库将对象进行序列化，然后将序列化的对象保存到硬盘。</p>
<p>使用 <code>save</code> 可以保存各种对象，包括 <code>nn.Module</code>, <code>Tensor</code>, <code>dict</code> 等等。</p>
<p>而 <code>load</code> 使用 unpickle 工具将 pickle 的对象文件反序列化为内存。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn

x <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'x.pt'</span><span class="token punctuation">)</span>

x2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'x.pt'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span> <span class="token comment"># tensor([1., 1., 1.])</span>

y <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'xy.pt'</span><span class="token punctuation">)</span>
xy_list <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'xy.pt'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>xy_list<span class="token punctuation">)</span> <span class="token comment"># [tensor([1., 1., 1.]), tensor([0., 0., 0., 0.])]</span>

torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'x'</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> y<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'xy_dict.pt'</span><span class="token punctuation">)</span>
xy <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'xy_dict.pt'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>xy<span class="token punctuation">)</span> <span class="token comment"># &#123;'x': tensor([1., 1., 1.]), 'y': tensor([0., 0., 0., 0.])&#125;</span></code></pre>
<ul>
<li><strong>读写模型</strong></li>
</ul>
<p>PyTorch 中保存和加载训练模型有两种常见的方法:</p>
<ol>
<li>仅保存和加载模型参数(<code>state_dict</code>)；</li>
<li>保存和加载整个模型。</li>
</ol>
<p><strong>保存和加载模型的 <code>state_dict()</code> 成员（Recommended）</strong></p>
<p>保存：</p>
<pre class="language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> PATH<span class="token punctuation">)</span> <span class="token comment"># 推荐的文件后缀名是 pt 或 pth</span></code></pre>
<p>加载：</p>
<pre class="language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> TheModelClass<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>PATH<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h3 id="GPU-计算"><a href="#GPU-计算" class="headerlink" title="GPU 计算"></a>GPU 计算</h3><p>到目前为止，我们一直在使用 CPU 计算。</p>
<p>对复杂的神经网络和大规模的数据来说，使用 CPU 来计算可能不够高效。</p>
<p>在本节中，我们将介绍如何使用单块 NVIDIA GPU 来计算。</p>
<p>可以通过 <code>nvidia-smi</code> 命令来查看显卡信息。</p>
<pre class="language-none"><code class="language-none">Wed Jan 26 11:48:28 2022
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 457.49       Driver Version: 457.49       CUDA Version: 11.1     |
|-------------------------------+----------------------+----------------------+
| GPU  Name            TCC&#x2F;WDDM | Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage&#x2F;Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|
|   0  GeForce GTX 1650   WDDM  | 00000000:01:00.0 Off |                  N&#x2F;A |
| N&#x2F;A   43C    P8     4W &#x2F;  N&#x2F;A |    359MiB &#x2F;  4096MiB |      8%      Default |
|                               |                      |                  N&#x2F;A |
+-------------------------------+----------------------+----------------------+</code></pre>
<ul>
<li><strong>计算设备</strong></li>
</ul>
<p>PyTorch 可以指定用来存储和计算的设备，如使用内存的 CPU 或者使用显存的 GPU。</p>
<p>默认情况下，PyTorch 会将数据创建在内存，然后利用 CPU 来计算。</p>
<p>用 <code>torch.cuda.is_available()</code> 查看 GPU 是否可用:<br><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 输出 True</span></code></pre></p>
<p>GPU 的相关信息查询：<br><pre class="language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>device_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 查看 GPU 数量，输出 1</span>
torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>current_device<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 查看当前 GPU 索引号，输出 0</span>
torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>get_device_name<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 根据索引号查看 GPU 名字，输出 'GeForce GTX 1050'</span></code></pre></p>
<ul>
<li><strong><code>Tensor</code> 的 GPU 计算</strong></li>
</ul>
<p>默认情况下，<code>Tensor</code> 会被存在内存上。因此，之前我们每次打印 <code>Tensor</code> 的时候看不到 GPU 相关标识。<br><pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># tensor([1, 2, 3])</span></code></pre><br>使用 <code>.cuda()</code> 可以将CPU上的 <code>Tensor</code> 转换（复制）到GPU上。</p>
<p>如果有多块GPU，我们用 <code>.cuda(i)</code>来表示第 $i$ 块 GPU 及相应的显存（$i$ 从 0 开始）且 <code>cuda(0)</code> 和 <code>cuda()</code> 等价。</p>
<pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> x<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># tensor([1, 2, 3], device='cuda:0')</span></code></pre>
<p>可以通过 <code>Tensor</code> 的 <code>device</code> 属性来查看该 <code>Tensor</code> 所在的设备。<br><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>device<span class="token punctuation">)</span> <span class="token comment"># device(type='cuda', index=0)</span></code></pre><br>可以直接在创建的时候就指定设备。<br><pre class="language-python" data-language="python"><code class="language-python">device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>
<span class="token comment"># or</span>
x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># tensor([1, 2, 3], device='cuda:0')</span></code></pre><br>如果对在 GPU 上的数据进行运算，那么结果还是存放在 GPU 上。<br><pre class="language-python" data-language="python"><code class="language-python">y <span class="token operator">=</span> x<span class="token operator">**</span><span class="token number">2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment"># tensor([1, 4, 9], device='cuda:0')</span></code></pre><br>需要注意的是，<strong>存储在不同位置中的数据是不可以直接进行计算的</strong>。即存放在 CPU 上的数据不可以直接与存放在 GPU 上的数据进行运算，位于不同 GPU 上的数据也是不能直接进行计算的。</p>
<ul>
<li><strong>模型的 GPU 计算</strong></li>
</ul>
<p>同 <code>Tensor</code> 类似，PyTorch 模型也可以用类似的方式转移到 GPU 上。</p>
<ul>
<li><code>.cuda(i)</code></li>
<li><code>.cpu()</code></li>
<li><code>.to(device)</code></li>
</ul>
<p>我们也可以通过检查模型的参数的 <code>device</code> 属性来查看存放模型的设备。</p>
<p>同样的，需要保证模型输入的 <code>Tensor</code> 和模型都在同一设备上，否则会报错。</p>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>《动手学深度学习》 Pytorch ver. 阅读摘录 Part B</title>
    <url>/dive-into-dl-pytorch-B/</url>
    <content><![CDATA[<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/cover.png" alt=""></p>
<ul>
<li>《动手学深度学习》原书地址：<a href="https://github.com/d2l-ai/d2l-zh">https://github.com/d2l-ai/d2l-zh</a></li>
<li>《动手学深度学习》(Pytorch ver.)：<a href="https://tangshusen.me/Dive-into-DL-PyTorch/#/">https://tangshusen.me/Dive-into-DL-PyTorch/#/</a></li>
</ul>
<p>知识架构：</p>
<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/book-org.svg" alt="封面"></p>
<p>本文的主要作用是在阅读过程中做一些摘录。对于「机器学习」领域， c7w 虽然曾尝试从各个领域入门，也尝试训过一些模型，但是还是缺少系统性、结构性的学习。希望阅读本书能带来更多的收获吧。</p>
<p>与前面的一些笔记相比，本文更加侧重于「实践」。也就是说切实地提升自己的代码能力。</p>
<p>Part B 包含：</p>
<ul>
<li>§ 5 CNN<ul>
<li>基本概念：卷积层、填充与步长、多通道、池化、批量归一化</li>
<li>模型的例子：LeNet、AlexNet、VGG、NiN、GoogLeNet、ResNet、DenseNet</li>
</ul>
</li>
<li>§ 6 RNN<ul>
<li>语言模型及其计算，N-gram 的概念</li>
<li>RNN 基本模型及其实现，字符数据集的制作</li>
<li>GRU, LSTM 的原理</li>
<li>Deep-RNN, bi-RNN</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h4><ul>
<li><strong>二维互相关运算</strong></li>
</ul>
<p><img src="http://tangshusen.me/Dive-into-DL-PyTorch/img/chapter05/5.1_correlation.svg" alt="img"></p>
<p>如图所示，输入是一个高和宽均为3的二维数组。我们将该数组的形状记为 $3 \times 3$ 或$（3，3）$。</p>
<p>核数组的高和宽分别为 2。该数组在卷积计算中又称卷积核或过滤器（filter）。</p>
<p>卷积核窗口（又称卷积窗口）的形状取决于卷积核的高和宽，即 $2 \times 2$。</p>
<p>图中的阴影部分为第一个输出元素及其计算所使用的输入和核数组元素：</p>
<p>$0\times0+1\times1+3\times2+4\times3=19$​​​​。</p>
<p>在二维互相关运算中，卷积窗口从输入数组的最左上方开始，按从左往右、从上往下的顺序，按照特定的步长，依次在输入数组上滑动。</p>
<p>当卷积窗口滑动到某一位置时，窗口中的输入子数组与核数组按元素相乘并求和，得到输出数组中相应位置的元素。</p>
<ul>
<li><strong>从互相关运算到卷积运算</strong></li>
</ul>
<p>实际上，卷积运算与互相关运算类似。<strong>为了得到卷积运算的输出，我们只需将核数组左右翻转并上下翻转，再与输入数组做互相关运算</strong>。</p>
<ul>
<li><strong>Feature Map 与 Receptive Field</strong></li>
</ul>
<p>二维卷积层输出的二维数组可以看作是输入在空间维度（宽和高）上某一级的表征，也叫特征图（feature map）。</p>
<p>影响元素 $x$ 的前向计算的所有可能输入区域（可能大于输入的实际尺寸）叫做的 $x$ 感受野（receptive field）。</p>
<p>以图为例，输入中阴影部分的四个元素是输出中阴影部分元素的感受野。</p>
<p>我们将图中形状为 $2 \times 2$​​​ 的输出记为 $Y$​​，并考虑一个更深的卷积神经网络：将 $Y$ 与另一个形状为 $2 \times 2$ 的核数组做互相关运算，输出单个元素 $z$。那么，$z$ 在 $Y$ 上的 Receptive Field 为 $Y$ 的全部四个元素，在 $x$ 上的感受野包括其中全部 9 个元素。</p>
<p>可见，我们可以<strong>通过更深的卷积神经网络使特征图中单个元素的感受野变得更加广阔，从而捕捉输入上更大尺寸的特征</strong>。</p>
<h4 id="Padding-amp-Stride"><a href="#Padding-amp-Stride" class="headerlink" title="Padding &amp; Stride"></a>Padding &amp; Stride</h4><p>本节我们将介绍卷积层的两个超参数，即填充和步幅。它们可以对给定形状的输入和卷积核改变输出形状。</p>
<ul>
<li><strong>Padding</strong></li>
</ul>
<p>填充（padding）是指在输入高和宽的两侧填充元素（通常是 0 元素）。</p>
<p><img src="http://tangshusen.me/Dive-into-DL-PyTorch/img/chapter05/5.2_conv_pad.svg" alt="img"></p>
<p>图中我们在原输入高和宽的两侧分别添加了值为 0 的元素，使得输入高和宽从 3 变成了 5 ，并导致输出高和宽由 2 增加到 4。</p>
<p>一般来说，如果在高的两侧一共填充 $p_h$ 行，在宽的两侧一共填充 $p_w$ 列，在很多情况下，我们会设置 $p_h=k_h-1$ 和 $p_w=k_w-1$ 来使输入和输出具有相同的高和宽，其中 $k_h\times k_w$ 是卷积核窗口形状。这样会方便在构造网络时推测每个层的输出形状。</p>
<p>假设这里 $k_h$ 是奇数，我们会在高的两侧分别填充 $p_h/2$ 行。如果 $k_h$ 是偶数，一种可能是在输入的顶端一侧填充 $\lceil p_h/2\rceil$ 行，而在底端一侧填充 $\lfloor p_h/2\rfloor$​ 行。在宽的两侧填充同理。卷积神经网络经常使用<strong>奇数高宽的卷积核</strong> $k_h \times k_w$，如 1、3、5 和 7，所以两端上的填充个数相等。</p>
<p>对任意的二维数组 <code>X</code>，设它的第 <code>i</code> 行第 <code>j</code> 列的元素为 <code>X[i,j]</code>。当两端上的填充个数相等，并使输入和输出具有相同的高和宽时，我们就知道输出 <code>Y[i,j]</code> 是由输入以 <code>X[i,j]</code> 为中心的窗口同卷积核进行互相关计算得到的。</p>
<ul>
<li><strong>Stride</strong></li>
</ul>
<p>在上一节里我们介绍了二维互相关运算。卷积窗口从输入数组的最左上方开始，按从左往右、从上往下的顺序，依次在输入数组上滑动。我们将每次滑动的行数和列数称为步幅（stride）。</p>
<p><img src="http://tangshusen.me/Dive-into-DL-PyTorch/img/chapter05/5.2_conv_stride.svg" alt="img"></p>
<p>目前我们看到的例子里，在高和宽两个方向上步幅均为1。我们也可以使用更大步幅。</p>
<p>图中展示了在高上步幅为 3、在宽上步幅为 2 的二维互相关运算。可以看到，输出第一列第二个元素时，卷积窗口向下滑动了 3 行，而在输出第一行第二个元素时卷积窗口向右滑动了 2 列。当卷积窗口在输入上再向右滑动 2 列时，由于输入元素无法填满窗口，无结果输出。</p>
<h4 id="多通道"><a href="#多通道" class="headerlink" title="多通道"></a>多通道</h4><p>前面两节里我们用到的输入和输出都是二维数组，但真实数据的维度经常更高。</p>
<p>例如，彩色图像在高和宽 2 个维度外还有 RGB（红、绿、蓝）3 个颜色通道。</p>
<p>假设彩色图像的高和宽分别是 $h$ 和 $w$（像素），那么它可以表示为一个 $3\times h\times w$ 的多维数组。</p>
<p>我们将大小为 3 的这一维称为通道（channel）维。</p>
<p>本节我们将介绍含多个输入通道或多个输出通道的卷积核。</p>
<ul>
<li><strong>多输入通道</strong></li>
</ul>
<p><img src="http://tangshusen.me/Dive-into-DL-PyTorch/img/chapter05/5.3_conv_multi_in.svg" alt="img"></p>
<p>当输入数据含多个通道时，我们需要构造一个输入通道数与输入数据的通道数相同的卷积核，从而能够与含多通道的输入数据做互相关运算。</p>
<p>含多个通道的输入数据与多输入通道的卷积核做二维互相关运算的输出：在各个通道上对输入的二维数组和卷积核的二维核数组做互相关运算，再将这些互相关运算的输出相加。</p>
<ul>
<li><strong>多输出通道</strong></li>
</ul>
<p>当输入通道有多个时，因为我们对各个通道的结果做了累加，所以不论输入通道数是多少，输出通道数总是为 1。设卷积核输入通道数和输出通道数分别为 $c_i$ 和 $c_o$，高和宽分别为 $k_h$ 和 $k_w$。</p>
<p>如果希望得到含多个通道的输出，我们可以为每个输出通道分别创建形状为 $c_i\times k_h\times k_w$ 的核数组。将它们在输出通道维上连结，卷积核的形状即 $c_o\times c_i\times k_h\times k_w$。</p>
<ul>
<li><strong>1 x 1 卷积层</strong></li>
</ul>
<p><img src="http://tangshusen.me/Dive-into-DL-PyTorch/img/chapter05/5.3_conv_1x1.svg" alt="img"></p>
<p>因为使用了最小窗口，$1\times 1$ 卷积失去了卷积层可以识别高和宽维度上相邻元素构成的模式的功能。实际上，$1\times 1$ 卷积的主要计算发生在通道维上。</p>
<p>值得注意的是，输入和输出具有相同的高和宽。输出中的每个元素来自输入中在高和宽上相同位置的元素<strong>在不同通道之间的按权重累加</strong>。</p>
<p>假设我们将通道维当作特征维，将高和宽维度上的元素当成数据样本，<strong>那么 $1\times 1$​ 卷积层的作用与全连接层等价</strong>。</p>
<h4 id="Pooling"><a href="#Pooling" class="headerlink" title="Pooling"></a>Pooling</h4><p>设任意二维数组 <code>X</code> 的 <code>i</code>行 <code>j</code> 列的元素为 <code>X[i, j]</code>。如果我们构造的 $1 \times 2$卷积核 $[1, -1]$ 输出 <code>Y[i, j]=1</code>，那么说明输入中 <code>X[i, j]</code> 和 <code>X[i, j+1]</code> 数值不一样。这可能意味着物体边缘通过这两个元素之间。</p>
<p>实际图像里，我们感兴趣的物体不会总出现在固定位置：即使我们连续拍摄同一个物体也极有可能出现像素位置上的偏移。这会导致同一个边缘对应的输出可能出现在卷积输出 <code>Y</code> 中的不同位置，进而对后面的模式识别造成不便。</p>
<p>在本节中我们介绍池化（pooling）层，它的提出是<strong>为了缓解卷积层对位置的过度敏感性</strong>。</p>
<ul>
<li><strong>2D-MaxPooling &amp; Mean Pooling</strong></li>
</ul>
<p><img src="http://tangshusen.me/Dive-into-DL-PyTorch/img/chapter05/5.4_pooling.svg" alt="img"></p>
<p>同卷积层一样，池化层每次对输入数据的一个固定形状窗口（又称池化窗口）中的元素计算输出。</p>
<p>不同于卷积层里计算输入和核的互相关性，池化层直接计算池化窗口内元素的最大值或者平均值。该运算也分别叫做最大池化或平均池化。</p>
<p>让我们再次回到本节开始提到的物体边缘检测的例子。现在我们将卷积层的输出作为 $2\times 2$ 最大池化的输入。设该卷积层输入是 <code>X</code>、池化层输出为 <code>Y</code>。无论是 <code>X[i, j]</code> 和 <code>X[i, j+1]</code> 值不同，还是 <code>X[i, j+1]</code> 和 <code>X[i, j+2]</code> 不同，池化层输出均有 <code>Y[i, j]=1</code>。也就是说，使用 $2\times 2$ 最大池化层时，只要卷积层识别的模式在高和宽上移动不超过一个元素，我们依然可以将它检测出来。</p>
<ul>
<li><strong>Padding &amp; Stride</strong></li>
</ul>
<p>同卷积层一样，池化层也可以在输入的高和宽两侧的填充并调整窗口的移动步幅来改变输出形状。池化层填充和步幅与卷积层填充和步幅的工作机制一样。我们将通过 <code>nn</code> 模块里的二维最大池化层 <code>MaxPool2d</code> 来演示池化层填充和步幅的工作机制。</p>
<pre class="language-python" data-language="python"><code class="language-python">X <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># C_o * C_i * K_h * K_w</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre>
<p>输出：<br><pre class="language-none"><code class="language-none">tensor([[[[ 0.,  1.,  2.,  3.],
          [ 4.,  5.,  6.,  7.],
          [ 8.,  9., 10., 11.],
          [12., 13., 14., 15.]]]])</code></pre></p>
<p>默认情况下，<code>MaxPool2d</code> 实例里步幅和池化窗口形状相同。下面使用形状为 $(3, 3)$ 的池化窗口，默认获得形状为 $(3, 3)$ 的步幅。</p>
<pre class="language-python" data-language="python"><code class="language-python">pool2d <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
pool2d<span class="token punctuation">(</span>X<span class="token punctuation">)</span> </code></pre>
<p>输出：<br><pre class="language-none"><code class="language-none">tensor([[[[10.]]]])</code></pre></p>
<p>我们可以手动指定步幅和填充。</p>
<pre class="language-python" data-language="python"><code class="language-python">pool2d <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
pool2d<span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre>
<p>输出：<br><pre class="language-none"><code class="language-none">tensor([[[[ 5.,  7.],
          [13., 15.]]]])</code></pre></p>
<p>当然，我们也可以指定非正方形的池化窗口，并分别指定高和宽上的填充和步幅。</p>
<pre class="language-python" data-language="python"><code class="language-python">pool2d <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
pool2d<span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre>
<p>输出：<br><pre class="language-none"><code class="language-none">tensor([[[[ 1.,  3.],
          [ 9., 11.],
          [13., 15.]]]])</code></pre></p>
<ul>
<li><strong>多通道</strong></li>
</ul>
<p>在处理多通道输入数据时，<strong>池化层对每个输入通道分别池化，而不是像卷积层那样将各通道的输入按通道相加</strong>。</p>
<p>这意味着池化层的输出通道数与输入通道数相等。下面将数组 <code>X</code> 和 <code>X+1</code> 在通道维上连结来构造通道数为 2 的输入。</p>
<pre class="language-python" data-language="python"><code class="language-python">X <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> X <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
X</code></pre>
<p>输出：<br><pre class="language-none"><code class="language-none">tensor([[[[ 0.,  1.,  2.,  3.],
          [ 4.,  5.,  6.,  7.],
          [ 8.,  9., 10., 11.],
          [12., 13., 14., 15.]],
         [[ 1.,  2.,  3.,  4.],
          [ 5.,  6.,  7.,  8.],
          [ 9., 10., 11., 12.],
          [13., 14., 15., 16.]]]])</code></pre></p>
<p>池化后，我们发现输出通道数仍然是2。</p>
<pre class="language-python" data-language="python"><code class="language-python">pool2d <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
pool2d<span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre>
<p>输出：<br><pre class="language-none"><code class="language-none">tensor([[[[ 5.,  7.],
          [13., 15.]],
         [[ 6.,  8.],
          [14., 16.]]]])</code></pre></p>
<h4 id="批量归一化"><a href="#批量归一化" class="headerlink" title="批量归一化"></a>批量归一化</h4><p>本节我们介绍批量归一化（batch normalization）层，它能让较深的神经网络的训练变得更加容易。</p>
<ul>
<li>为什么要有 Batch Normalization?</li>
</ul>
<p>在预测回归问题里，我们对输入数据做了标准化处理：处理后的任意一个特征在数据集中所有样本上的均值为 0、标准差为 1。标准化处理输入数据使各个特征的分布相近：这往往更容易训练出有效的模型。</p>
<p>通常来说，数据标准化预处理对于浅层模型就足够有效了。随着模型训练的进行，当每层中参数更新时，靠近输出层的输出较难出现剧烈变化。但对深层神经网络来说，即使输入数据已做标准化，训练中模型参数的更新依然很容易造成靠近输出层输出的剧烈变化。这种计算数值的不稳定性通常令我们难以训练出有效的深度模型。</p>
<p>批量归一化的提出正是为了应对深度模型训练的挑战。在模型训练时，批量归一化利用小批量上的均值和标准差，不断调整神经网络中间输出，从而使整个神经网络在各层的中间输出的数值更稳定。<strong>批量归一化和下一节将要介绍的残差网络为训练和设计深度模型提供了两类重要思路</strong>。</p>
<ul>
<li>怎么做 Batch Normalization?</li>
</ul>
<p>对全连接层和卷积层做批量归一化的方法稍有不同。下面我们将分别介绍这两种情况下的批量归一化。</p>
<p><strong>对 Fully Connected Layer 的 Batch Normalization</strong></p>
<p>我们先考虑如何对全连接层做批量归一化。通常，我们将批量归一化层置于全连接层中的仿射变换和激活函数之间。设全连接层的输入为 $\boldsymbol{u}$​​，权重参数和偏差参数分别为 $\boldsymbol{W}$​ ​和 $\boldsymbol{b}$​​，激活函数为 $\phi$​​。设批量归一化的运算符为 $\text{BN}$​​。那么，使用批量归一化的全连接层的输出为 $\phi(\text{BN}(\boldsymbol{Wu+b}))$​。</p>
<p>下面我们解释 $\text{BN}$​ 算符是什么。</p>
<p>考虑一个由 $m$​​ 个样本组成的 Mini-batch，仿射变换的输出为一个新的 Mini-batch $\mathcal{B} = {\boldsymbol{x}^{(1)}, \ldots, \boldsymbol{x}^{(m)} }$​​。它们正是批量归一化层的输入。对于小批量 $\mathcal{B}$​ ​中任意样本 $\boldsymbol{x}^{(i)} \in \mathbb{R}^d, 1 \leq i \leq m$​​，批量归一化层的输出同样是 $d$​ ​维向量$\boldsymbol{y}^{(i)} = \text{BN}(\boldsymbol{x}^{(i)})$​，并由以下几步求得。</p>
<script type="math/tex; mode=display">
\boldsymbol{\mu}_\mathcal{B} \leftarrow \frac{1}{m}\sum_{i = 1}^{m} \boldsymbol{x}^{(i)} \\
\boldsymbol{\sigma}_\mathcal{B}^2 \leftarrow \frac{1}{m} \sum_{i=1}^{m}(\boldsymbol{x}^{(i)} - \boldsymbol{\mu}_\mathcal{B})^2 \\ 
\hat{\boldsymbol{x}}^{(i)} \leftarrow \frac{\boldsymbol{x}^{(i)} - \boldsymbol{\mu}_\mathcal{B}}{\sqrt{\boldsymbol{\sigma}_\mathcal{B}^2 + \epsilon}}</script><p>这里 $\epsilon &gt; 0$ 是一个很小的常数，是为了保证分母大于 0。在上面标准化的基础上，批量归一化层引入了两个可以学习的模型参数，拉伸（scale）参数 $\boldsymbol{\gamma}$ 和偏移（shift）参数 $\boldsymbol{\beta}$。这两个参数和 $\boldsymbol{x}^{(i)}$ 形状相同，皆为 $d$ 维向量。它们与 $\boldsymbol{x}^{(i)}$ 分别做 Hadamard Product（符号$\odot$​）和加法计算：</p>
<script type="math/tex; mode=display">
{\boldsymbol{y}}^{(i)} \leftarrow \boldsymbol{\gamma} \odot \hat{\boldsymbol{x}}^{(i)} + \boldsymbol{\beta}</script><p>至此，我们得到了 $\boldsymbol{x}^{(i)}$​ ​的批量归一化的输出 $\boldsymbol{y}^{(i)}$​​。值得注意的是，可学习的拉伸和偏移参数保留了不对 $\hat{\boldsymbol{x}}^{(i)}$ ​​做批量归一化的可能：此时只需学出 $\boldsymbol{\gamma} = \sqrt{\boldsymbol{\sigma}_\mathcal{B}^2 + \epsilon}$ ​​和 $\boldsymbol{\beta} = \boldsymbol{\mu}_\mathcal{B}$​​。我们可以对此这样理解：如果批量归一化无益，理论上，学出的模型可以不使用批量归一化。</p>
<p><strong>对 Conv. Layer 的 Batch Normalization</strong></p>
<p>对卷积层来说，批量归一化发生在卷积计算之后、应用激活函数之前。</p>
<p>如果卷积计算输出多个通道，我们需要对这些通道的输出分别做批量归一化，且<strong>每个通道都拥有独立的拉伸和偏移参数，并均为标量</strong>。</p>
<p>设小批量中有 $m$ 个样本，在单个通道上，假设卷积计算输出的高和宽分别为 $p$ 和 $q$。我们需要对该通道中 $m \times p \times q$ 个元素同时做批量归一化。对这些元素做标准化计算时，我们使用相同的均值和方差，即该通道中 $m \times p \times q$​ 个元素的均值和方差。</p>
<p><strong>预测时的 Batch Normalization</strong></p>
<p>使用批量归一化训练时，我们可以将批量大小设得大一点，从而使批量内样本的均值和方差的计算都较为准确。将训练好的模型用于预测时，我们希望模型对于任意输入都有确定的输出。因此，<strong>单个样本的输出不应取决于批量归一化所需要的随机小批量中的均值和方差</strong>。一种常用的方法是通过移动平均<strong>估算整个训练数据集的样本均值和方差</strong>，并在预测时使用它们得到确定的输出。可见，和丢弃层一样，批量归一化层在训练模式和预测模式下的计算结果也是不一样的。</p>
<ul>
<li>实现（Simple ver.）</li>
</ul>
<p>与我们刚刚自己定义的 <code>BatchNorm</code> 类相比，Pytorch 中 <code>nn</code> 模块定义的 <code>BatchNorm1d</code> 和 <code>BatchNorm2d</code> 类使用起来更加简单，二者分别用于全连接层和卷积层，都需要指定输入的 <code>num_features</code> 参数值。下面我们用 PyTorch 实现使用批量归一化的 LeNet。</p>
<pre class="language-python" data-language="python"><code class="language-python">net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># in_channels, out_channels, kernel_size</span>
            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    
            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># kernel_size, stride</span>
    
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    
            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    
            d2l<span class="token punctuation">.</span>FlattenLayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span></code></pre>
<h3 id="CNN-的例子"><a href="#CNN-的例子" class="headerlink" title="CNN 的例子"></a>CNN 的例子</h3><h4 id="LeNet"><a href="#LeNet" class="headerlink" title="LeNet"></a>LeNet</h4><p>之前我们曾使用 MLP 对 Fashion-MNIST 数据集中的图像进行分类。每张图像高和宽均是 28 像素。我们将图像中的像素逐行展开，得到长度为 784 的向量，并输入进全连接层中。然而，这种分类方法有一定的局限性。</p>
<ol>
<li>图像在同一列邻近的像素在这个向量中可能相距较远。它们构成的模式可能难以被模型识别。</li>
<li>对于大尺寸的输入图像，使用全连接层容易造成模型过大。假设输入是高和宽均为 1000 像素的彩色照片（含 3 个通道）。即使全连接层输出个数仍是 256，该层权重参数的形状是$ 3,000,000\times 256$​：它占用了大约 3 GB 的内存或显存。这带来过复杂的模型和过高的存储开销。</li>
</ol>
<p>卷积层尝试解决这两个问题。一方面，卷积层保留输入形状，使图像的像素在高和宽两个方向上的相关性均可能被有效识别；另一方面，卷积层通过滑动窗口将同一卷积核与不同位置的输入重复计算，从而避免参数尺寸过大。</p>
<p>卷积神经网络就是含卷积层的网络。本节里我们将介绍一个早期用来识别手写数字图像的卷积神经网络：LeNet。</p>
<p><img src="http://tangshusen.me/Dive-into-DL-PyTorch/img/chapter05/5.5_lenet.png" alt="img"></p>
<p>LeNet分为卷积层块和全连接层块两个部分。下面我们分别介绍这两个模块。</p>
<p>卷积层块里的基本单位是<strong>卷积层后接最大池化层</strong>：</p>
<ul>
<li>卷积层用来识别图像里的空间模式，如线条和物体局部</li>
<li>之后的最大池化层则用来降低卷积层对位置的敏感性</li>
</ul>
<p>卷积层块由两个这样的基本单位重复堆叠构成。在卷积层块中，每个卷积层都使用 $5\times 5$​ 的窗口，并在输出上使用 sigmoid 激活函数。第一个卷积层输出通道数为 6，第二个卷积层输出通道数则增加到 16。这是因为第二个卷积层比第一个卷积层的输入的高和宽要小，所以增加输出通道使两个卷积层的参数尺寸类似。卷积层块的两个最大池化层的窗口形状均为 $2\times 2$​​，且步幅为 2。由于池化窗口与步幅形状相同，池化窗口在输入上每次滑动所覆盖的区域互不重叠。</p>
<p>卷积层块的输出形状为 (批量大小, 通道, 高, 宽)。当卷积层块的输出传入全连接层块时，全连接层块会将小批量中每个样本变平（flatten）。也就是说，全连接层的输入形状将变成二维，其中第二维是每个样本变平后的向量表示，且向量长度为通道、高和宽的乘积。全连接层块含 3 个全连接层。它们的输出个数分别是 120、84 和 10，其中 10 为输出的类别个数。</p>
<p>下面我们通过 <code>Sequential</code> 类来实现 LeNet 模型。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LeNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>LeNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># in_channels, out_channels, kernel_size</span>
            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># kernel_size, stride</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">:</span>
        feature <span class="token operator">=</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
        output <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>feature<span class="token punctuation">.</span>view<span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> output</code></pre>
<p>这里使用 GPU 进行计算，对相关函数的修改如下：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 本函数已保存在d2lzh_pytorch包中方便以后使用</span>
<span class="token keyword">def</span> <span class="token function">train_ch5</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> train_iter<span class="token punctuation">,</span> test_iter<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> device<span class="token punctuation">,</span> num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    net <span class="token operator">=</span> net<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"training on "</span><span class="token punctuation">,</span> device<span class="token punctuation">)</span>
    loss <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        train_l_sum<span class="token punctuation">,</span> train_acc_sum<span class="token punctuation">,</span> n<span class="token punctuation">,</span> batch_count<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> X<span class="token punctuation">,</span> y <span class="token keyword">in</span> train_iter<span class="token punctuation">:</span>
            X <span class="token operator">=</span> X<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
            y <span class="token operator">=</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
            y_hat <span class="token operator">=</span> net<span class="token punctuation">(</span>X<span class="token punctuation">)</span>
            l <span class="token operator">=</span> loss<span class="token punctuation">(</span>y_hat<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>
            l<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>
            train_l_sum <span class="token operator">+=</span> l<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>
            train_acc_sum <span class="token operator">+=</span> <span class="token punctuation">(</span>y_hat<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>
            n <span class="token operator">+=</span> y<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            batch_count <span class="token operator">+=</span> <span class="token number">1</span>
        test_acc <span class="token operator">=</span> evaluate_accuracy<span class="token punctuation">(</span>test_iter<span class="token punctuation">,</span> net<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'epoch %d, loss %.4f, train acc %.3f, test acc %.3f, time %.1f sec'</span>
              <span class="token operator">%</span> <span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> train_l_sum <span class="token operator">/</span> batch_count<span class="token punctuation">,</span> train_acc_sum <span class="token operator">/</span> n<span class="token punctuation">,</span> test_acc<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 本函数已保存在d2lzh_pytorch包中方便以后使用。该函数将被逐步改进。</span>
<span class="token keyword">def</span> <span class="token function">evaluate_accuracy</span><span class="token punctuation">(</span>data_iter<span class="token punctuation">,</span> net<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> device <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">and</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 如果没指定device就使用net的device</span>
        device <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>device
    acc_sum<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0</span>
    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> X<span class="token punctuation">,</span> y <span class="token keyword">in</span> data_iter<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
                net<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 评估模式, 这会关闭 dropout</span>
                acc_sum <span class="token operator">+=</span> <span class="token punctuation">(</span>net<span class="token punctuation">(</span>X<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>
                net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 改回训练模式</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># 自定义的模型, 3.13节之后不会用到, 不考虑GPU</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'is_training'</span> <span class="token keyword">in</span> net<span class="token punctuation">.</span>__code__<span class="token punctuation">.</span>co_varnames<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 如果有 is_training 这个参数</span>
                    <span class="token comment"># 将 is_training 设置成 False</span>
                    acc_sum <span class="token operator">+=</span> <span class="token punctuation">(</span>net<span class="token punctuation">(</span>X<span class="token punctuation">,</span> is_training<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> 
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    acc_sum <span class="token operator">+=</span> <span class="token punctuation">(</span>net<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> 
            n <span class="token operator">+=</span> y<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> acc_sum <span class="token operator">/</span> n</code></pre>
<h4 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h4><p><img src="http://tangshusen.me/Dive-into-DL-PyTorch/img/chapter05/5.6_alexnet.png" alt="img"></p>
<ul>
<li>Larger parameter size</li>
<li>Use ReLU instead of sigmoid</li>
<li>Introducing Dropout</li>
<li>Data augmentation</li>
</ul>
<h4 id="VGG"><a href="#VGG" class="headerlink" title="VGG"></a>VGG</h4><p>VGG 提出了可以通过重复使用简单的基础块来构建深度模型的思路。</p>
<p>VGG块的组成规律是：连续使用数个相同的填充为 1、窗口形状为 $3\times 3$ 的卷积层后接上一个步幅为 2、窗口形状为 $2\times 2$​ ​的最大池化层。卷积层保持输入的高和宽不变，而池化层则对其减半。我们使用<code>vgg_block</code>函数来实现这个基础的VGG 块，它可以指定卷积层的数量和输入输出通道数。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">vgg_block</span><span class="token punctuation">(</span>num_convs<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>
    blk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_convs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            blk<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            blk<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        blk<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    blk<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 这里会使宽高减半</span>
    <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>blk<span class="token punctuation">)</span></code></pre>
<p>现在我们构造一个 VGG 网络。它有 5 个 <code>vgg_block</code>，前 2 块使用单卷积层 <code>num_convs=1</code>，而后 3 块使用双卷积层 <code>num_convs=2</code>。第一块的输入输出通道分别是 1（因为下面要使用的 Fashion-MNIST 数据的通道数为 1）和 64，之后每次对输出通道数翻倍，直到变为 512。因为这个网络使用了 8 个卷积层和 3 个全连接层，所以经常被称为 VGG-11。</p>
<pre class="language-python" data-language="python"><code class="language-python">conv_arch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 经过5个 vgg_block, 宽高会减半5次, 变成 224/32 = 7</span>
fc_features <span class="token operator">=</span> <span class="token number">512</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token comment"># c * w * h</span>
fc_hidden_units <span class="token operator">=</span> <span class="token number">4096</span> <span class="token comment"># 任意</span>

<span class="token keyword">def</span> <span class="token function">vgg</span><span class="token punctuation">(</span>conv_arch<span class="token punctuation">,</span> fc_features<span class="token punctuation">,</span> fc_hidden_units<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 卷积层部分</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>num_convs<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>conv_arch<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 每经过一个vgg_block都会使宽高减半</span>
        net<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"vgg_block_"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vgg_block<span class="token punctuation">(</span>num_convs<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 全连接层部分</span>
    net<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"fc"</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>d2l<span class="token punctuation">.</span>FlattenLayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                 nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>fc_features<span class="token punctuation">,</span> fc_hidden_units<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                 nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                 nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                 nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>fc_hidden_units<span class="token punctuation">,</span> fc_hidden_units<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                 nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                 nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                 nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>fc_hidden_units<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
                                <span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> net</code></pre>
<h4 id="NiN"><a href="#NiN" class="headerlink" title="NiN"></a>NiN</h4><p>前几节介绍的 LeNet、AlexNet 和 VGG 在设计上的共同之处是：先以由卷积层构成的模块充分抽取空间特征，再以由全连接层构成的模块来输出分类结果。其中，AlexNet 和 VGG 对 LeNet 的改进主要在于如何对这两个模块加宽（增加通道数）和加深。</p>
<p>本节我们介绍网络中的网络（NiN）。它提出了另外一个思路，即串联多个由卷积层和“全连接”层构成的小网络来构建一个深层网络。NiN使用 $1\times 1$ 卷积层来替代全连接层，从而使空间信息能够自然传递到后面的层中去。</p>
<p><img src="http://tangshusen.me/Dive-into-DL-PyTorch/img/chapter05/5.8_nin.svg" alt="img"></p>
<p>左图是 AlexNet 和 VGG 的网络结构局部，右图是 NiN 的网络结构局部。</p>
<p><strong>NiN 块</strong>是 NiN 中的基础块。它由一个卷积层加两个充当全连接层的 $1\times 1$ 卷积层串联而成。其中第一个卷积层的超参数可以自行设置，而第二和第三个卷积层的超参数一般是固定的。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">nin_block</span><span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> padding<span class="token punctuation">)</span><span class="token punctuation">:</span>
    blk <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> padding<span class="token punctuation">)</span><span class="token punctuation">,</span>
                        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> blk</code></pre>
<p><strong>NiN 模型</strong>使用卷积窗口形状分别为 $11\times 11$​、$5\times 5$​ 和 $3\times 3$ ​的卷积层，相应的输出通道数也与 AlexNet 中的一致。每个 NiN 块后接一个步幅为 2、窗口形状为 $3\times 3$​​ 的最大池化层。</p>
<p>除使用 NiN 块以外，NiN 还有一个设计与 AlexNet 显著不同：NiN 去掉了 AlexNet 最后的3个全连接层，取而代之地，NiN 使用了输出通道数等于标签类别数的NiN 块，然后使用全局平均池化层对每个通道中所有元素求平均并直接用于分类。这里的全局平均池化层即窗口形状等于输入空间维形状的平均池化层。NiN 的这个设计的好处是可以显著减小模型参数尺寸，从而缓解过拟合。然而，该设计有时会造成获得有效模型的训练时间的增加。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F
<span class="token keyword">class</span> <span class="token class-name">GlobalAvgPool2d</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 全局平均池化层可通过将池化窗口形状设置成输入的高和宽实现</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>GlobalAvgPool2d<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> F<span class="token punctuation">.</span>avg_pool2d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
    nin_block<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    nin_block<span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    nin_block<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment"># 标签类别数是10</span>
    nin_block<span class="token punctuation">(</span><span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    GlobalAvgPool2d<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token comment"># 将四维的输出转成二维的输出，其形状为(批量大小, 10)</span>
    d2l<span class="token punctuation">.</span>FlattenLayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h4 id="GoogLeNet"><a href="#GoogLeNet" class="headerlink" title="GoogLeNet"></a>GoogLeNet</h4><p><img src="http://tangshusen.me/Dive-into-DL-PyTorch/img/chapter05/5.9_inception.svg" alt="img"></p>
<p>图为 Inception 块的结构。从这里我们可以意识到的一点是，以 Block 为单位来拼凑模型的这种方法逐渐火热…</p>
<h4 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h4><p>让我们先思考一个问题：对神经网络模型添加新的层，充分训练后的模型是否只可能更有效地降低训练误差？</p>
<p>理论上，原模型解的空间只是新模型解的空间的子空间。也就是说，如果我们能将新添加的层训练成恒等映射 $f(x) = x$​，新模型和原模型将同样有效。由于新模型可能得出更优的解来拟合训练数据集，因此添加层似乎更容易降低训练误差。</p>
<p>然而在实践中，添加过多的层后训练误差往往不降反升。即使利用批量归一化带来的数值稳定性使训练深层模型更加容易，该问题仍然存在。针对这一问题，残差网络被提出。</p>
<ul>
<li>残差块</li>
</ul>
<p>让我们聚焦于神经网络局部。如图所示，设输入为 $\boldsymbol{x}$。假设我们希望学出的理想映射为 $f(\boldsymbol{x})$，从而作为图上方激活函数的输入。左图虚线框中的部分需要直接拟合出该映射 $f(\boldsymbol{x})$，而右图虚线框中的部分则需要拟合出有关恒等映射的残差映射 $f(\boldsymbol{x})-\boldsymbol{x}$​。</p>
<p><img src="http://tangshusen.me/Dive-into-DL-PyTorch/img/chapter05/5.11_residual-block.svg" alt="img"></p>
<p>残差映射在实际中往往更容易优化。以本节开头提到的恒等映射作为我们希望学出的理想映射 $f(\boldsymbol{x})$。我们只需将图中右图虚线框内上方的加权运算（如仿射）的权重和偏差参数学成 0，那么 $f(\boldsymbol{x})$ 即为恒等映射。</p>
<p>实际中，当理想映射 $f(\boldsymbol{x})$ 极接近于恒等映射时，残差映射也易于捕捉恒等映射的细微波动。右图也是 ResNet 的基础块，即<strong>残差块</strong>（residual block）。在残差块中，输入可通过跨层的数据线路更快地向前传播。</p>
<p>ResNet 沿用了 VGG 全 $3\times 3$ 卷积层的设计。残差块里首先有 2 个有相同输出通道数的 $3\times 3$ 卷积层。每个卷积层后接一个批量归一化层和ReLU激活函数。然后我们将输入跳过这两个卷积运算后直接加在最后的ReLU激活函数前。这样的设计要求两个卷积层的输出与输入形状一样，从而可以相加。如果想改变通道数，就需要引入一个额外的 $1\times 1$​​ 卷积层来将输入变换成需要的形状后再做相加运算。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Residual</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 本类已保存在d2lzh_pytorch包中方便以后使用</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> use_1x1conv<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Residual<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> use_1x1conv<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>
        Y <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        Y <span class="token operator">=</span> self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>conv3<span class="token punctuation">:</span>
            X <span class="token operator">=</span> self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>X<span class="token punctuation">)</span>
        <span class="token keyword">return</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>Y <span class="token operator">+</span> X<span class="token punctuation">)</span></code></pre>
<ul>
<li>ResNet 模型</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python">net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
        nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">resnet_block</span><span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> num_residuals<span class="token punctuation">,</span> first_block<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> first_block<span class="token punctuation">:</span>
        <span class="token keyword">assert</span> in_channels <span class="token operator">==</span> out_channels <span class="token comment"># 第一个模块的通道数同输入通道数一致</span>
    blk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_residuals<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token keyword">not</span> first_block<span class="token punctuation">:</span>
            blk<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Residual<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> use_1x1conv<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            blk<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Residual<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>blk<span class="token punctuation">)</span>

net<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"resnet_block1"</span><span class="token punctuation">,</span> resnet_block<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> first_block<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
net<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"resnet_block2"</span><span class="token punctuation">,</span> resnet_block<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
net<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"resnet_block3"</span><span class="token punctuation">,</span> resnet_block<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
net<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"resnet_block4"</span><span class="token punctuation">,</span> resnet_block<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

net<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"global_avg_pool"</span><span class="token punctuation">,</span> d2l<span class="token punctuation">.</span>GlobalAvgPool2d<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># GlobalAvgPool2d的输出: (Batch, 512, 1, 1)</span>
net<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"fc"</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>d2l<span class="token punctuation">.</span>FlattenLayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre>
<h4 id="DenseNet"><a href="#DenseNet" class="headerlink" title="DenseNet"></a>DenseNet</h4><p>ResNet 中的跨层连接设计引申出了数个后续工作。本节我们介绍其中的一个：稠密连接网络。</p>
<p><img src="http://tangshusen.me/Dive-into-DL-PyTorch/img/chapter05/5.12_densenet.svg" alt="img"></p>
<p>图中将部分前后相邻的运算抽象为模块 A 和模块 B。</p>
<p>与 ResNet 的主要区别在于，DenseNet 里模块 B 的输出不是像 ResNet 那样和模块 A 的输出相加，而是在通道维上连结。这样模块 A 的输出可以直接传入模块 B 后面的层。在这个设计里，模块 A 直接跟模块 B 后面的所有层连接在了一起。这也是它被称为“稠密连接”的原因。</p>
<ul>
<li>DenseBlock</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">conv_block</span><span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>
    blk <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">)</span><span class="token punctuation">,</span> 
                        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> blk

<span class="token keyword">class</span> <span class="token class-name">DenseBlock</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_convs<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>DenseBlock<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        net <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_convs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            in_c <span class="token operator">=</span> in_channels <span class="token operator">+</span> i <span class="token operator">*</span> out_channels
            net<span class="token punctuation">.</span>append<span class="token punctuation">(</span>conv_block<span class="token punctuation">(</span>in_c<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleList<span class="token punctuation">(</span>net<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>out_channels <span class="token operator">=</span> in_channels <span class="token operator">+</span> num_convs <span class="token operator">*</span> out_channels <span class="token comment"># 计算输出通道数</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> blk <span class="token keyword">in</span> self<span class="token punctuation">.</span>net<span class="token punctuation">:</span>
            Y <span class="token operator">=</span> blk<span class="token punctuation">(</span>X<span class="token punctuation">)</span>
            X <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 在通道维上将输入和输出连结</span>
        <span class="token keyword">return</span> X</code></pre>
<ul>
<li>过渡层</li>
</ul>
<p>由于每个稠密块都会带来通道数的增加，使用过多则会带来过于复杂的模型。过渡层用来控制模型复杂度。它通过 $1\times1$ ​卷积层来减小通道数，并使用步幅为 2 的平均池化层减半高和宽，从而进一步降低模型复杂度。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">transition_block</span><span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>
    blk <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">)</span><span class="token punctuation">,</span> 
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>AvgPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> blk</code></pre>
<ul>
<li>DenseNet 模型</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python">net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
        nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

num_channels<span class="token punctuation">,</span> growth_rate <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">32</span>  <span class="token comment"># num_channels为当前的通道数</span>
num_convs_in_dense_blocks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> i<span class="token punctuation">,</span> num_convs <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>num_convs_in_dense_blocks<span class="token punctuation">)</span><span class="token punctuation">:</span>
    DB <span class="token operator">=</span> DenseBlock<span class="token punctuation">(</span>num_convs<span class="token punctuation">,</span> num_channels<span class="token punctuation">,</span> growth_rate<span class="token punctuation">)</span>
    net<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"DenseBlock_%d"</span> <span class="token operator">%</span> i<span class="token punctuation">,</span> DB<span class="token punctuation">)</span>
    <span class="token comment"># 上一个稠密块的输出通道数</span>
    num_channels <span class="token operator">=</span> DB<span class="token punctuation">.</span>out_channels
    <span class="token comment"># 在稠密块之间加入通道数减半的过渡层</span>
    <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_convs_in_dense_blocks<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
        net<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"transition_block_%d"</span> <span class="token operator">%</span> i<span class="token punctuation">,</span> transition_block<span class="token punctuation">(</span>num_channels<span class="token punctuation">,</span> num_channels <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        num_channels <span class="token operator">=</span> num_channels <span class="token operator">//</span> <span class="token number">2</span>

net<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"BN"</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>num_channels<span class="token punctuation">)</span><span class="token punctuation">)</span>
net<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"relu"</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
net<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"global_avg_pool"</span><span class="token punctuation">,</span> d2l<span class="token punctuation">.</span>GlobalAvgPool2d<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># GlobalAvgPool2d的输出: (Batch, num_channels, 1, 1)</span>
net<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"fc"</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>d2l<span class="token punctuation">.</span>FlattenLayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_channels<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre>
<h2 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h2><h3 id="语言模型"><a href="#语言模型" class="headerlink" title="语言模型"></a>语言模型</h3><p>语言模型（language model）是自然语言处理的重要技术。自然语言处理中最常见的数据是文本数据。</p>
<p>我们可以把一段自然语言文本看作一段离散的时间序列。假设一段长度为 $T$ 的文本中的词依次为 $w_1, w_2, \ldots, w_T$，那么在离散的时间序列中，$w_t$（$1 \leq t \leq T$）可看作在时间步（time step）$t$ 的输出或标签。</p>
<p>给定一个长度为 $T$ 的词的序列 $w_1, w_2, \ldots, w_T$，语言模型将计算该序列的概率：$P(w_1, w_2, \ldots, w_T)$.</p>
<p>语言模型可用于提升语音识别和机器翻译的性能。</p>
<p>例如，在语音识别中，给定一段“厨房里食油用完了”的语音，有可能会输出“厨房里食油用完了”和“厨房里石油用完了”这两个读音完全一样的文本序列。如果语言模型判断出前者的概率大于后者的概率，我们就可以根据相同读音的语音输出“厨房里食油用完了”的文本序列。</p>
<p>在机器翻译中，如果对英文“you go first”逐词翻译成中文的话，可能得到“你走先”“你先走”等排列方式的文本序列。如果语言模型判断出“你先走”的概率大于其他排列方式的文本序列的概率，我们就可以把“you go first”翻译成“你先走”。</p>
<h4 id="语言模型的计算"><a href="#语言模型的计算" class="headerlink" title="语言模型的计算"></a>语言模型的计算</h4><p>根据《概率论》课程学过的有关知识，我们不难理解：</p>
<script type="math/tex; mode=display">
P(w_1, w_2, \ldots, w_T) = \prod_{t=1}^T P(w_t \mid w_1, \ldots, w_{t-1})</script><p>那么，这些概率该如何获得呢？</p>
<p>设训练数据集为一个大型文本语料库，如维基百科的所有条目。词的概率可以通过<strong>该词在训练数据集中的相对词频来计算</strong>。例如，$P(w_1)$ 可以计算为 $w_1$ 在训练数据集中的词频（词出现的次数）与训练数据集的总词数之比。因此，根据条件概率定义，一个词在给定前几个词的情况下的条件概率也可以通过训练数据集中的相对词频计算。再例如，$P(w_2 \mid w_1)$ 可以计算为 $w_1, w_2$ 两词相邻的频率与 $w_1$ 词频的比值，因为该比值即 $P(w_1, w_2)$ 与 $P(w_1)$ 之比；而 $P(w_3 \mid w_1, w_2)$ 同理可以计算为 $w_1$、$w_2$ 和 $w_3$ 三词相邻的频率与 $w_1$ 和 $w_2$ 两词相邻的频率的比值。以此类推。</p>
<h4 id="N-grams"><a href="#N-grams" class="headerlink" title="N-grams"></a>N-grams</h4><p>当序列长度增加时，计算和存储多个词共同出现的概率的复杂度会呈指数级增加。$n$​ 元语法通过马尔可夫假设（虽然并不一定成立）简化了语言模型的计算。这里的马尔可夫假设是指，<strong>一个词的出现只与前面 $n$ ​个词相关</strong>。</p>
<p>如果 $n=1$，那么有 $P(w_3 \mid w_1, w_2) = P(w_3 \mid w_2)$。</p>
<p>如果基于 $n-1$ 阶马尔可夫链，我们可以将语言模型改写为：$P(w_1, w_2, \ldots, w_T) \approx \prod_{t=1}^T P(w_t \mid w_{t-(n-1)}, \ldots, w_{t-1}) $。</p>
<p>当 $n$ 分别为 1、2 和 3 时，我们将其分别称作一元语法（unigram）、二元语法（bigram）和三元语法（trigram）。</p>
<p>当 $n$ 较小时，$n$ 元语法往往并不准确。然而，当 $n$ 较大时，$n$ 元语法需要计算并存储大量的词频和多词相邻频率。那么，有没有方法在语言模型中更好地平衡以上这两点呢？我们将在本章探究这样的方法。</p>
<h3 id="RNN-1"><a href="#RNN-1" class="headerlink" title="RNN"></a>RNN</h3><p>本节将介绍循环神经网络。它并非刚性地记忆所有固定长度的序列，而是通过隐藏状态来存储之前时间步的信息。首先我们回忆一下前面介绍过的多层感知机，然后描述如何添加隐藏状态来将它变成循环神经网络。</p>
<ul>
<li>不含隐藏状态的神经网络</li>
</ul>
<p>让我们考虑一个含单隐藏层的多层感知机。给定样本数为 $n$、输入个数（特征数或特征向量维度）为 $d$ 的小批量数据样本 $\boldsymbol{X} \in \mathbb{R}^{n \times d}$。设隐藏层的激活函数为 $\phi$，那么隐藏层的输出 $\boldsymbol{H} \in \mathbb{R}^{n \times h}$ 计算为</p>
<script type="math/tex; mode=display">
\boldsymbol{H} = \phi(\boldsymbol{X} \boldsymbol{W}_{xh} + \boldsymbol{b}_h)</script><p>其中隐藏层权重参数 $\boldsymbol{W}_{xh} \in \mathbb{R}^{d \times h}$，隐藏层偏差参数 $\boldsymbol{b}_h \in \mathbb{R}^{1 \times h}$，$h$ 为隐藏单元个数。上式相加的两项形状不同，因此将按照广播机制相加。把隐藏变量 $\boldsymbol{H}$ 作为输出层的输入，且设输出个数为 $q$​​（如分类问题中的类别数），输出层的输出为 $\boldsymbol{O} = \boldsymbol{H} \boldsymbol{W}_{hq} + \boldsymbol{b}_q$.​ 其中输出变量 $\boldsymbol{O} \in \mathbb{R}^{n \times q}$, 输出层权重参数 $\boldsymbol{W}_{hq} \in \mathbb{R}^{h \times q}$, 输出层偏差参数 $\boldsymbol{b}_q \in \mathbb{R}^{1 \times q}$。如果是分类问题，我们可以使用 $\text{softmax}(\boldsymbol{O})$ 来计算输出类别的概率分布。</p>
<ul>
<li>含隐藏状态的 RNN</li>
</ul>
<p>现在我们考虑输入数据存在时间相关性的情况。假设 $\boldsymbol{X}_t \in \mathbb{R}^{n \times d}$ 是序列中时间步 $t$ 的小批量输入，$\boldsymbol{H}_t \in \mathbb{R}^{n \times h}$ 是该时间步的隐藏变量。</p>
<p>与多层感知机不同的是，这里我们保存上一时间步的隐藏变量 $\boldsymbol{H}_{t-1}$，并引入一个新的权重参数 $\boldsymbol{W}_{hh} \in \mathbb{R}^{h \times h}$，该参数用来描述在当前时间步如何使用上一时间步的隐藏变量。</p>
<p>具体来说，时间步 $t$ 的隐藏变量的计算由当前时间步的输入和上一时间步的隐藏变量共同决定：</p>
<script type="math/tex; mode=display">
\boldsymbol{H}_t = \phi(\boldsymbol{X}_t \boldsymbol{W}_{xh} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hh} + \boldsymbol{b}_h)</script><p>与多层感知机相比，我们在这里添加了 $\boldsymbol{H}_{t-1} \boldsymbol{W}_{hh}$ 一项。由上式中相邻时间步的隐藏变量 $\boldsymbol{H}_t$ ​和 $\boldsymbol{H}_{t-1}$ ​之间的关系可知，这里的隐藏变量能够捕捉截至当前时间步的序列的历史信息，就像是神经网络当前时间步的状态或记忆一样。因此，该隐藏变量也称为隐藏状态。</p>
<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter06/6.2_rnn.svg" alt="img"></p>
<p>由于隐藏状态在当前时间步的定义使用了上一时间步的隐藏状态，上式的计算是循环的。使用循环计算的网络即循环神经网络（recurrent neural network）。</p>
<p>而在时间步 $t$，输出层的输出和多层感知机中的计算类似：$\boldsymbol{O}_t = \boldsymbol{H}_t \boldsymbol{W}_{hq} + \boldsymbol{b}_q$.</p>
<h3 id="字符数据集的制作"><a href="#字符数据集的制作" class="headerlink" title="字符数据集的制作"></a>字符数据集的制作</h3><ul>
<li>读取数据集</li>
<li><p>建立字符索引 idx_to_char 与 char_to_idx</p>
</li>
<li><p>时序数据的采样</p>
<ul>
<li>随机采样：在随机采样中，每个样本是原始序列上任意截取的一段序列。相邻的两个随机小批量在原始序列上的位置不一定相毗邻。因此，我们无法用一个小批量最终时间步的隐藏状态来初始化下一个小批量的隐藏状态。在训练模型时，每次随机采样前都需要重新初始化隐藏状态。</li>
<li>相邻采样：令相邻的两个随机小批量在原始序列上的位置相毗邻。这时候，我们就可以用一个小批量最终时间步的隐藏状态来初始化下一个小批量的隐藏状态，从而使下一个小批量的输出也取决于当前小批量的输入，并如此循环下去。<ul>
<li>在训练模型时，我们只需在每一个迭代周期开始时初始化隐藏状态。</li>
<li>当多个相邻小批量通过传递隐藏状态串联起来时，模型参数的梯度计算将依赖所有串联起来的小批量序列。同一迭代周期中，随着迭代次数的增加，梯度的计算开销会越来越大。为了使模型参数的梯度计算只依赖一次迭代读取的小批量序列，我们可以在每次读取小批量前将隐藏状态从计算图中分离出来。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="RNN-的实现"><a href="#RNN-的实现" class="headerlink" title="RNN 的实现"></a>RNN 的实现</h3><h4 id="From-scratch"><a href="#From-scratch" class="headerlink" title="From scratch"></a>From scratch</h4><ul>
<li>单个词的表示：One-hot 向量</li>
<li>初始化模型参数与模型定义</li>
<li>预测函数的定义</li>
<li>裁剪梯度</li>
<li>模型评估：困惑度<ul>
<li>困惑度是对交叉熵损失函数做指数运算后得到的值<ul>
<li>最佳情况下，模型总是把标签类别的概率预测为1，此时困惑度为1；</li>
<li>最坏情况下，模型总是把标签类别的概率预测为0，此时困惑度为正无穷；</li>
<li>基线情况下，模型总是预测所有类别的概率都相同，此时困惑度为类别个数。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Simple"><a href="#Simple" class="headerlink" title="Simple"></a>Simple</h4><p>Pytorch 实现：大调库</p>
<pre class="language-python" data-language="python"><code class="language-python">num_hiddens <span class="token operator">=</span> <span class="token number">256</span>
<span class="token comment"># rnn_layer = nn.LSTM(input_size=vocab_size, hidden_size=num_hiddens) # 已测试</span>
rnn_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>RNN<span class="token punctuation">(</span>input_size<span class="token operator">=</span>vocab_size<span class="token punctuation">,</span> hidden_size<span class="token operator">=</span>num_hiddens<span class="token punctuation">)</span></code></pre>
<p>与上一节中实现的循环神经网络不同，这里 <code>rnn_layer</code> 的输入形状为 <code>(时间步数, 批量大小, 输入个数)</code>。其中输入个数即 one-hot 向量长度（词典大小）。</p>
<p>此外，<code>rnn_layer</code> 作为 <code>nn.RNN</code> 实例，在前向计算后会分别返回<strong>隐藏层的输出 $H$</strong> 和<strong>隐藏状态 $h$</strong>。</p>
<ul>
<li>$H$​ 指的是隐藏层在<strong>各个时间步</strong>上计算并输出的隐藏状态，它们通常作为后续输出层的输入，形状为 <code>(时间步数, 批量大小, 隐藏单元个数)</code>。</li>
<li>$h$ 指的是隐藏层在<strong>最后时间步</strong>的隐藏状态：当隐藏层有多层时，每一层的隐藏状态都会记录在该变量中；对于像长短期记忆（LSTM），隐藏状态是一个元组 $(h, c)$，即 hidden state 和 cell state。</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 本类已保存在d2lzh_pytorch包中方便以后使用</span>
<span class="token keyword">class</span> <span class="token class-name">RNNModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> rnn_layer<span class="token punctuation">,</span> vocab_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>RNNModel<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>rnn <span class="token operator">=</span> rnn_layer
        self<span class="token punctuation">.</span>hidden_size <span class="token operator">=</span> rnn_layer<span class="token punctuation">.</span>hidden_size <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">if</span> rnn_layer<span class="token punctuation">.</span>bidirectional <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span> 
        self<span class="token punctuation">.</span>vocab_size <span class="token operator">=</span> vocab_size
        self<span class="token punctuation">.</span>dense <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> vocab_size<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># inputs: (batch, seq_len)</span>
        <span class="token comment"># 获取 one-hot 向量表示</span>
        X <span class="token operator">=</span> d2l<span class="token punctuation">.</span>to_onehot<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> self<span class="token punctuation">.</span>vocab_size<span class="token punctuation">)</span> <span class="token comment"># X 是个 list</span>
        Y<span class="token punctuation">,</span> self<span class="token punctuation">.</span>state <span class="token operator">=</span> self<span class="token punctuation">.</span>rnn<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span>
        <span class="token comment"># 全连接层会首先将 Y 的形状变成 (num_steps * batch_size, num_hiddens)，它的输出</span>
        <span class="token comment"># 形状为 (num_steps * batch_size, vocab_size)</span>
        output <span class="token operator">=</span> self<span class="token punctuation">.</span>dense<span class="token punctuation">(</span>Y<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> Y<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> output<span class="token punctuation">,</span> self<span class="token punctuation">.</span>state</code></pre>
<p>在前面两节中，如果不裁剪梯度，模型将无法正常训练。当总的时间步数较大或者当前时间步较小时，循环神经网络的梯度较容易出现衰减或爆炸。</p>
<h3 id="RNN-的改进"><a href="#RNN-的改进" class="headerlink" title="RNN 的改进"></a>RNN 的改进</h3><h4 id="GRU"><a href="#GRU" class="headerlink" title="GRU"></a>GRU</h4><p>虽然裁剪梯度可以应对梯度爆炸，但无法解决梯度衰减的问题。通常由于这个原因，循环神经网络在实际中较难捕捉时间序列中时间步距离较大的依赖关系。</p>
<p>门控循环神经网络（gated recurrent neural network）的提出，正是为了更好地捕捉时间序列中时间步距离较大的依赖关系。它通过可以学习的门来控制信息的流动。</p>
<ul>
<li>门控循环单元</li>
</ul>
<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter06/6.7_gru_3.svg" alt="img"></p>
<script type="math/tex; mode=display">
\begin{aligned}
\boldsymbol{R}_t & = \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xr} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hr} + \boldsymbol{b}_r),\\
\boldsymbol{Z}_t & = \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xz} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hz} + \boldsymbol{b}_z), \\ 
\tilde{\boldsymbol{H}}_t & = \text{tanh}(\boldsymbol{X}_t \boldsymbol{W}_{xh} + \left(\boldsymbol{R}_t \odot \boldsymbol{H}_{t-1}\right) \boldsymbol{W}_{hh} + \boldsymbol{b}_h), \\ 
\boldsymbol{H}_t & = \boldsymbol{Z}_t \odot \boldsymbol{H}_{t-1}  + (1 - \boldsymbol{Z}_t) \odot \tilde{\boldsymbol{H}}_t.

\end{aligned}</script><ul>
<li>重置门有助于捕捉时间序列里短期的依赖关系<ul>
<li>重置门控制了上一时间步的隐藏状态如何流入当前时间步的候选隐藏状态</li>
<li>上一时间步的隐藏状态可能包含了时间序列截至上一时间步的全部历史信息</li>
<li>重置门可以用来丢弃与预测无关的历史信息</li>
</ul>
</li>
<li>更新门有助于捕捉时间序列里长期的依赖关系<ul>
<li>更新门可以控制隐藏状态应该如何被包含当前时间步信息的候选隐藏状态所更新</li>
<li>假设更新门在时间步 $t’$ 到 $t$（$t’ &lt; t$）之间一直近似 1。那么，在时间步 $t’$ 到 $t$ 之间的输入信息几乎没有流入时间步 $t$ 的隐藏状态 $\boldsymbol{H}_t$。实际上，这可以看作是较早时刻的隐藏状态 $\boldsymbol{H}_{t’-1}$ 一直通过时间保存并传递至当前时间步 $t$。这个设计可以应对循环神经网络中的梯度衰减问题，并更好地捕捉时间序列中时间步距离较大的依赖关系。</li>
</ul>
</li>
</ul>
<p>实现也可以直接大调库：</p>
<pre class="language-python" data-language="python"><code class="language-python">lr <span class="token operator">=</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">2</span> <span class="token comment"># 注意调整学习率</span>
gru_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>GRU<span class="token punctuation">(</span>input_size<span class="token operator">=</span>vocab_size<span class="token punctuation">,</span> hidden_size<span class="token operator">=</span>num_hiddens<span class="token punctuation">)</span>
model <span class="token operator">=</span> d2l<span class="token punctuation">.</span>RNNModel<span class="token punctuation">(</span>gru_layer<span class="token punctuation">,</span> vocab_size<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
d2l<span class="token punctuation">.</span>train_and_predict_rnn_pytorch<span class="token punctuation">(</span>model<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">,</span> vocab_size<span class="token punctuation">,</span> device<span class="token punctuation">,</span>
                                corpus_indices<span class="token punctuation">,</span> idx_to_char<span class="token punctuation">,</span> char_to_idx<span class="token punctuation">,</span>
                                num_epochs<span class="token punctuation">,</span> num_steps<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> clipping_theta<span class="token punctuation">,</span>
                                batch_size<span class="token punctuation">,</span> pred_period<span class="token punctuation">,</span> pred_len<span class="token punctuation">,</span> prefixes<span class="token punctuation">)</span></code></pre>
<h4 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h4><p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter06/6.8_lstm_3.svg" alt="img"></p>
<script type="math/tex; mode=display">
\begin{aligned}
\boldsymbol{I}_t &= \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xi} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hi} + \boldsymbol{b}_i),\\
\boldsymbol{F}_t &= \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xf} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hf} + \boldsymbol{b}_f),\\
\boldsymbol{O}_t &= \sigma(\boldsymbol{X}_t \boldsymbol{W}_{xo} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{ho} + \boldsymbol{b}_o), \\ 
\tilde{\boldsymbol{C}}_t &= \text{tanh}(\boldsymbol{X}_t \boldsymbol{W}_{xc} + \boldsymbol{H}_{t-1} \boldsymbol{W}_{hc} + \boldsymbol{b}_c), \\ 
\boldsymbol{C}_t & = \boldsymbol{F}_t \odot \boldsymbol{C}_{t-1} + \boldsymbol{I}_t \odot \tilde{\boldsymbol{C}}_t, \\ 
\boldsymbol{H}_t &= \boldsymbol{O}_t \odot \text{tanh}(\boldsymbol{C}_t).
\end{aligned}</script><ul>
<li>遗忘门控制上一时间步的记忆细胞 $\boldsymbol{C}_{t-1}$ 中的信息是否传递到当前时间步，而输入门则控制当前时间步的输入 $\boldsymbol{X}_t$ 通过候选记忆细胞 $\tilde{\boldsymbol{C}}_t$ 如何流入当前时间步的记忆细胞。<ul>
<li>如果遗忘门一直近似 1 且输入门一直近似 0，过去的记忆细胞将一直通过时间保存并传递至当前时间步。这个设计可以应对循环神经网络中的梯度衰减问题，并更好地捕捉时间序列中时间步距离较大的依赖关系。</li>
</ul>
</li>
<li>当输出门近似 1 时，记忆细胞信息将传递到隐藏状态供输出层使用；当输出门近似 0 时，记忆细胞信息只自己保留。</li>
</ul>
<p>实现也是大调库。</p>
<pre class="language-python" data-language="python"><code class="language-python">lr <span class="token operator">=</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">2</span> <span class="token comment"># 注意调整学习率</span>
lstm_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>input_size<span class="token operator">=</span>vocab_size<span class="token punctuation">,</span> hidden_size<span class="token operator">=</span>num_hiddens<span class="token punctuation">)</span>
model <span class="token operator">=</span> d2l<span class="token punctuation">.</span>RNNModel<span class="token punctuation">(</span>lstm_layer<span class="token punctuation">,</span> vocab_size<span class="token punctuation">)</span>
d2l<span class="token punctuation">.</span>train_and_predict_rnn_pytorch<span class="token punctuation">(</span>model<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">,</span> vocab_size<span class="token punctuation">,</span> device<span class="token punctuation">,</span>
                                corpus_indices<span class="token punctuation">,</span> idx_to_char<span class="token punctuation">,</span> char_to_idx<span class="token punctuation">,</span>
                                num_epochs<span class="token punctuation">,</span> num_steps<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> clipping_theta<span class="token punctuation">,</span>
                                batch_size<span class="token punctuation">,</span> pred_period<span class="token punctuation">,</span> pred_len<span class="token punctuation">,</span> prefixes<span class="token punctuation">)</span></code></pre>
<h4 id="Deep-RNN"><a href="#Deep-RNN" class="headerlink" title="Deep-RNN"></a>Deep-RNN</h4><p>本章到目前为止介绍的循环神经网络只有一个单向的隐藏层，在深度学习应用里，我们通常会用到含有多个隐藏层的循环神经网络，也称作深度循环神经网络。</p>
<p>图中演示了一个有 $L$ 个隐藏层的深度循环神经网络，每个隐藏状态不断传递至当前层的下一时间步和当前时间步的下一层。</p>
<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter06/6.9_deep-rnn.svg" alt="img"></p>
<script type="math/tex; mode=display">
\begin{align}
\boldsymbol{H}_t^{(1)} &= \phi(\boldsymbol{X}_t \boldsymbol{W}_{xh}^{(1)} + \boldsymbol{H}_{t-1}^{(1)} \boldsymbol{W}_{hh}^{(1)}  + \boldsymbol{b}_h^{(1)}), \\ 
\boldsymbol{H}_t^{(\ell)} & = \phi(\boldsymbol{H}_t^{(\ell-1)} \boldsymbol{W}_{xh}^{(\ell)} + \boldsymbol{H}_{t-1}^{(\ell)} \boldsymbol{W}_{hh}^{(\ell)}  + \boldsymbol{b}_h^{(\ell)}), 1 \lt \ell \le L, \\ 
\boldsymbol{O}_t &= \boldsymbol{H}_t^{(L)} \boldsymbol{W}_{hq} + \boldsymbol{b}_q.
\end{align}</script><h4 id="bi-RNN"><a href="#bi-RNN" class="headerlink" title="bi-RNN"></a>bi-RNN</h4><p>之前介绍的循环神经网络模型都是假设当前时间步是由前面的较早时间步的序列决定的，因此它们都将信息通过隐藏状态从前往后传递。</p>
<p>有时候，当前时间步也可能由后面时间步决定。例如，当我们写下一个句子时，可能会根据句子后面的词来修改句子前面的用词。双向循环神经网络通过增加从后往前传递信息的隐藏层来更灵活地处理这类信息。</p>
<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/chapter06/6.10_birnn.svg" alt="img"></p>
<script type="math/tex; mode=display">
\begin{aligned}
\overrightarrow{\boldsymbol{H}}_t &= \phi(\boldsymbol{X}_t \boldsymbol{W}_{xh}^{(f)} + \overrightarrow{\boldsymbol{H}}_{t-1} \boldsymbol{W}_{hh}^{(f)}  + \boldsymbol{b}_h^{(f)}),\\
\overleftarrow{\boldsymbol{H}}_t &= \phi(\boldsymbol{X}_t \boldsymbol{W}_{xh}^{(b)} + \overleftarrow{\boldsymbol{H}}_{t+1} \boldsymbol{W}_{hh}^{(b)}  + \boldsymbol{b}_h^{(b)}),
\end{aligned}</script><p>然后我们连结两个方向的隐藏状态 $\overrightarrow{\boldsymbol{H}}_t$ 和 $\overleftarrow{\boldsymbol{H}}_t$ 来得到隐藏状态 $\boldsymbol{H}_t \in \mathbb{R}^{n \times 2h}$，并将其输入到输出层。</p>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>ESLint 配置指北</title>
    <url>/eslint/</url>
    <content><![CDATA[<h2 id="从代码规范说起"><a href="#从代码规范说起" class="headerlink" title="从代码规范说起"></a>从代码规范说起</h2><p>由于我们每个人对 JavaScript 的理解不同，编写代码的习惯也不同，所以在合作编写项目时，难免会出现代码风格的不同。这种差异性导致了团队协作的效率低下，也影响了项目的健壮性和可维护性。所以，我们需要对代码风格进行规范。这种规范不仅可以使代码风格保持统一，并且可以在代码运行之前就检测出一些错误和 Bug，提高协作开发效率。</p>
<p>lint 是最著名的 C 语言工具之一，作用是静态代码分析，它被用于检查 C 程序中潜在的错误，包括（但不限于）可疑的类型组合、未使用的变量、不可达的代码以及不可移植的代码等等。</p>
<p>而 ESLint 则是 2013 年推出的 JavaScript 的 lint 工具。命名前缀的来源是由于 JavaScript 也被称为 ECMAScript（ES）。</p>
<p>ESLint 是在 ECMAScript/JavaScript 代码中识别和报告模式匹配的工具，它的目标是保证代码的一致性和避免错误。</p>
<p>ESLint 可以在运行代码前就发现一些语法错误和潜在的 Bug，极大地减轻测试人员的压力，减少软件项目的除错成本。同时，ESLint 允许开发者通过 rules 定义自己的代码规范，所以非常适合用于制定团队代码规范。</p>
<a id="more"></a>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><ul>
<li>引入 ESLint：注意只需要将依赖安装到开发环境</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> eslint --save-dev

<span class="token comment"># or</span>

<span class="token function">yarn</span> <span class="token function">add</span> eslint --dev</code></pre>
<p>然后我们输入 <code>npm init @eslint/config</code> 或 <code>yarn create @eslint/config</code> 回答问题进行配置。</p>
<p><img src="https://s2.loli.net/2022/02/17/nWjZaQvTKLcgdVm.png" alt="image-20220217215148544"></p>
<p>之后再使用 <code>yarn install</code> 进行依赖补全。</p>
<p>什么是 <code>airbnb</code>？且听下节分解。</p>
<h2 id="常见的标准规范"><a href="#常见的标准规范" class="headerlink" title="常见的标准规范"></a>常见的标准规范</h2><p>我们在 <code>eslintrc.js</code> 中以 CommonJS 格式规定我们的标准规范。</p>
<pre class="language-json" data-language="json"><code class="language-json">module.exports = <span class="token punctuation">&#123;</span>
  env<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    browser<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    es2021<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  extends<span class="token operator">:</span> <span class="token punctuation">[</span>
    'plugin<span class="token operator">:</span>react/recommended'<span class="token punctuation">,</span>
    'airbnb'<span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  parser<span class="token operator">:</span> '@typescript-eslint/parser'<span class="token punctuation">,</span>
  parserOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    ecmaFeatures<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      jsx<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    ecmaVersion<span class="token operator">:</span> 'latest'<span class="token punctuation">,</span>
    sourceType<span class="token operator">:</span> 'module'<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    'react'<span class="token punctuation">,</span>
    '@typescript-eslint'<span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  rules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>;
</code></pre>
<h3 id="eslint-recommended"><a href="#eslint-recommended" class="headerlink" title="eslint:recommended"></a><code>eslint:recommended</code></h3><ul>
<li>参考 <a href="https://eslint.org/docs/rules/。">https://eslint.org/docs/rules/。</a></li>
</ul>
<h3 id="eslint-standard"><a href="#eslint-standard" class="headerlink" title="eslint:standard"></a><code>eslint:standard</code></h3><p>standard 是基于 recommended 衍生出来的更严格的规范。其与后者的不同之处主要是 recommended 很多都是 off, standard 是 error, 比如 <code>单行代码块两边加空格</code>、<code>禁止使用分号结尾</code>。</p>
<p>先使用 <code>npm i standard eslint-plugin-standard eslint-config-standard -D</code> 命令安装 <code>standard</code> 插件，然后在 <code>eslintrc.js</code> 文件中写入以下内容后，将会启用 standard 规范：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  root<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'standard'</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>standard 会比 recommended 更加严格，在代码风格上也做了一些限制。不过它的用户群体也是比较多的，也不乏一些大家耳熟能详的。</p>
<p><img src="https://s2.loli.net/2022/02/17/cQrWjvtLeORM5AG.jpg" alt="image"></p>
<ul>
<li>参考：<a href="https://standardjs.com/rules-zhcn.html">https://standardjs.com/rules-zhcn.html</a></li>
</ul>
<h3 id="Airbnb"><a href="#Airbnb" class="headerlink" title="Airbnb"></a><code>Airbnb</code></h3><p>Airbnb 规范是最严格的 ESLint 规范，列出下面几点比较明显的区别：</p>
<ol>
<li>默认必须要分号，而 ESLint 默认不添加分号</li>
<li>不能使用 for 循环，推荐使用数组自带的 API 完成遍历工作。</li>
<li>当你必须使用函数表达式（或传递一个匿名函数）时，使用箭头函数符号。</li>
</ol>
<p>除了这些以外，还有更多严格的规则，可以参考：</p>
<ul>
<li><a href="https://link.segmentfault.com/?enc=cUG%2BYxm078373Ai4Zl7xzg%3D%3D.mQwuT8A0xwjTxWnJCQBguM5%2BsxTvj%2FcbfNrhYRoEuzlOAiIikVMfCqL4fFnglX%2FQ">Airbnb 规范</a></li>
</ul>
<blockquote>
<ul>
<li>补充：<strong>Babel-eslint</strong> ?</li>
</ul>
<p><a href="https://www.npmjs.com/package/@babel/eslint-parser">https://www.npmjs.com/package/@babel/eslint-parser</a></p>
<p>ESLint’s default parser and core rules <a href="https://github.com/eslint/eslint/blob/a675c89573836adaf108a932696b061946abf1e6/README.md#what-about-experimental-features">only support the latest final ECMAScript standard</a> and do not support experimental (such as new features) and non-standard (such as Flow or TypeScript types) syntax provided by Babel. @babel/eslint-parser is a parser that allows ESLint to run on source code that is transformed by Babel.</p>
<p><strong>Note:</strong> You only need to use @babel/eslint-parser <strong>if you are using Babel to transform your code</strong>. If this is not the case, please use the relevant parser for your chosen flavor of ECMAScript (note that the default parser supports all non-experimental syntax as well as JSX).</p>
</blockquote>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>直接说结论，使用以下插件：</p>
<ul>
<li>@typescript-eslint/parser</li>
<li>@typescript-eslint/eslint-plugin</li>
</ul>
<p>在上述回答问题的过程中会帮我们自动补全在 <code>package.json</code> 中。</p>
<h2 id="对照：Prettier"><a href="#对照：Prettier" class="headerlink" title="对照：Prettier"></a>对照：Prettier</h2><blockquote>
<ul>
<li>什么是 Prettier</li>
</ul>
<p>Prettier 在自己官网首页列出这么三点：</p>
<ul>
<li>An opinionated code formatter</li>
<li>Supports many languages</li>
<li>Integrates with most editors</li>
<li>Has few options</li>
</ul>
<p>官方首先告诉你，Prettier 是一个 <strong>Opinionated</strong> 的代码格式化工具。所以要掌握 Prettier 的精髓就是要理解这个单词。</p>
<p>对比 Angular, ExpressJS 和 SpringBoot 的 Unopinionated，Prettier 说自己是一个 Opinionated code formatter，就是说：你必须认同我的观点，按照我说的做。否则你就别用我，硬着头皮用就会处处不爽！</p>
<p>Has few options，其实就是 Opinionated 的最直接体现。除了必要的设置项，不会再给你们更多。给你设置项越多，你们越乱，你们就会继续争吵！</p>
<p>Prettier 的原理非常简单：</p>
<p>不管你写的代码是个什么鬼样子，Prettier 会去掉你代码里的所有样式风格，然后用统一固定的格式重新输出。输出时基本上只考虑一个参数，就是 line length。</p>
</blockquote>
<p>而 Prettier 与 Linters 有什么区别呢？</p>
<blockquote>
<ul>
<li>Formatting rules</li>
</ul>
<p>当 ESLint 遇到上面的 incorrect code 的时候，会提示你违反规则，让你修改代码以符合规则。</p>
<p>而 Prettier 则不会这么麻烦，它根本不管你之前符不符合什么规则，都先把你的代码解析成 AST，然后按照它自己的风格给你重新输出代码。</p>
<p>换句话说，Prettier 对应的是各种 Linters 的 Formatting rules 这一类规则。而且你用了 Prettier 之后，就不会再违反这类规则了！不需要你自己手动修改代码。</p>
<ul>
<li>Code-quality rules</li>
</ul>
<p>Prettier 对这类规则束手无策。而且这类规则也正是各种 Linters 的重点，因为它们真的能帮你发现很多低级的 Bug。</p>
<p>所以，Prettier 并不会取代各种 Linters，而是能避免你的代码和这些 Linters 定义的 Formatting rules 冲突。Linters 检查出来违反 Code-quality rules 的情况后还需要你自己根据业务逻辑和语法手动修改。Prettier 帮你格式化代码，但是不会帮你挑出潜在的错误。</p>
<p>那么既要让 Prettier 帮你格式化代码，还想让 Linters 帮你挑出潜在的 Code-quality 类错误，怎么办？就需要 Prettier 和 Linters 配合使用。</p>
</blockquote>
<p>以上摘自：参考资料中的《Prettier》文</p>
<p>现在 ESLint 也有了 <code>--fix</code> 功能，暂且搁置一下 Prettier 的学习。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>// TODO</p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="husky"><a href="#husky" class="headerlink" title="husky"></a><code>husky</code></h3><p>在项目开发过程中，自动格式化并不总是让人安心的，因为并不是项目组的所有成员都会使用插件来做自动格式化。</p>
<p>这样的情况会导致有一些不规范的代码被提交到服务端，依然会造成团队规范不一致的问题，这个时候就需要用到提交时自动检测和格式化代码的功能。</p>
<p>接下来，我们将使用 <code>husky</code> Hook 来进行代码提交时的自动检测工作。</p>
<p>先使用 <code>npm i husky -D</code> 安装依赖，在依赖完成完成后，我们需要使用下面这条命令初始化 <code>husky</code>：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">husky <span class="token function">install</span>
npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">"npm pre-commit"</span></code></pre>
<p>我们还需要在项目的 <code>package.json</code> 中，添加 <code>pre-commit</code>，这个命令运行时进行 <code>eslint</code> 检测（如下）。</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token property">"pre-commit"</span><span class="token operator">:</span> <span class="token string">"eslint src"</span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="lint-staged"><a href="#lint-staged" class="headerlink" title="lint-staged"></a><code>lint-staged</code></h3><p>如果我们希望在检测错误的同时，自动修复 <code>eslint</code> 语法错误，则需要用到 <code>lint-staged</code>，使用 <code>npm i lint-staged -D</code> 先进行安装，然后在 <code>package.json</code> 中修改 <code>pre-commit</code> 命令，再添加以下内容。</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token property">"pre-commit"</span><span class="token operator">:</span> <span class="token string">"lint-staged"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token property">"src/**"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"eslint --fix"</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>
<p><code>lint-staged</code> Repo 地址：<a href="https://github.com/okonet/lint-staged">https://github.com/okonet/lint-staged</a></p>
<p><code>lint-staged</code> 针对暂存的 git 文件运行 linters，不要让不符合规则的代码溜进代码库。<code>lint-staged</code>总是将 <strong>所有暂存文件的列表传递给任务</strong>，忽略任何文件都应该在任务本身中配置，比如：<code>.prettierignore</code> / <code>.eslintignore</code> 。lint-stage 总是配合 husky 一起使用。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://segmentfault.com/a/1190000016626739">在React项目中使用Eslint代码检查工具</a></li>
<li><a href="https://eslint.org/docs/user-guide/getting-started">Getting Started with ESLint</a></li>
<li><a href="https://segmentfault.com/a/1190000039880312">从项目规范（eslint + prettier）到自动化配置</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/81764012">Prettier</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/62401626">使用ESLint+Prettier规范React+Typescript项目</a></li>
<li><a href="https://juejin.cn/post/6844903901292920846">深入理解 ESlint</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ESLint</tag>
      </tags>
  </entry>
  <entry>
    <title>MATLAB 从入门到放弃</title>
    <url>/matlab/</url>
    <content><![CDATA[<p>大概记录的是 MATLAB 的入门之路。反正《数值分析》课程也得用。</p>
<a id="more"></a>
<h1 id="数据类型与基本操作"><a href="#数据类型与基本操作" class="headerlink" title="数据类型与基本操作"></a>数据类型与基本操作</h1><h2 id="数值数组"><a href="#数值数组" class="headerlink" title="数值数组"></a>数值数组</h2><p>MATLAB 中数组的存储方式是 column-major order. 因此，数组的第一个维度是列数。</p>
<h3 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h3><h4 id="等距数组"><a href="#等距数组" class="headerlink" title="等距数组"></a>等距数组</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% Comment</span>
<span class="token comment">% 在代码行的后加分号，运行结果不会显示在命令行窗口；</span>
<span class="token comment">% 不加分号，变量的值会随着运行显示在命令行窗口。 </span>
start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">% Variable assignment  </span>
finish <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment">% Closed this way</span>
stride <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

a <span class="token operator">=</span> start<span class="token operator">:</span>stride<span class="token operator">:</span>finish <span class="token comment">% [1, 3, 5, 7, 9, 11]</span>
b <span class="token operator">=</span> finish<span class="token operator">:</span><span class="token operator">-</span>stride<span class="token operator">:</span>start <span class="token comment">% [11, 9, 7, 5, 3, 1]</span>
c <span class="token operator">=</span> start<span class="token operator">:</span>finish <span class="token comment">% The default value for stride is 1</span>

xstart <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> xfinish <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> xpoints <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span>xstart<span class="token punctuation">,</span> xfinish<span class="token punctuation">,</span> xpoints<span class="token punctuation">)</span>
<span class="token comment">% [1, 25.75, 50.5, 75.25, 100]</span>

ystart <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> yfinish <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> ypoints <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token function">logspace</span><span class="token punctuation">(</span>ystart<span class="token punctuation">,</span> yfinish<span class="token punctuation">,</span> ypoints<span class="token punctuation">)</span>
<span class="token comment">% [10, 100, 1000, 10000, 100000]</span></code></pre>
<h4 id="逐个元素输入"><a href="#逐个元素输入" class="headerlink" title="逐个元素输入"></a>逐个元素输入</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">% Shaped 1 x 4</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">% Also shaped 1 x 4</span>
c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token comment">% Shaped 2 x 2</span>
<span class="token comment">% 1 2</span>
<span class="token comment">% 3 4</span></code></pre>
<h4 id="随机数产生"><a href="#随机数产生" class="headerlink" title="随机数产生"></a>随机数产生</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">rng</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% Random seed</span>

a <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">% Uniformly distribution between 0 and 1, shaped 2 x 5</span>
b <span class="token operator">=</span> <span class="token function">randn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">% Normal distribution, shaped 2 x 6</span>

upperbound <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
lowerbound <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
c <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span>lowerbound<span class="token punctuation">,</span>upperbound<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">% Random Interger</span></code></pre>
<h4 id="其他初始化"><a href="#其他初始化" class="headerlink" title="其他初始化"></a>其他初始化</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token function">eye</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
d <span class="token operator">=</span> <span class="token function">diag</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token comment">% Diagonal</span></code></pre>
<h3 id="元素的访问和寻找"><a href="#元素的访问和寻找" class="headerlink" title="元素的访问和寻找"></a>元素的访问和寻找</h3><h4 id="数组的维度和大小"><a href="#数组的维度和大小" class="headerlink" title="数组的维度和大小"></a>数组的维度和大小</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">rng</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% Seed 2</span>
a <span class="token operator">=</span> <span class="token function">randn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>

v <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">% [3, 4], shaped 1 x 2</span>
v <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">% ans = 3, get the value of the 1st dim</span>
v <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">% ans = 4</span></code></pre>
<h4 id="数组的循秩访问"><a href="#数组的循秩访问" class="headerlink" title="数组的循秩访问"></a>数组的循秩访问</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">rng</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">% namely a[2][3]</span>
c <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span> <span class="token comment">% namely the second row of a</span>
d <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
f <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span>
g <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">% NOTICE: column-major order!</span>

idx <span class="token operator">=</span> <span class="token number">12</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
h <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token comment">% Inversed order of a, shaped 1 x 12</span>

k <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token comment">% [end] could be viewed as [-1] in Python</span>
			  <span class="token comment">% end-1, end-2, ... , are also supported</span></code></pre>
<h4 id="逻辑寻访"><a href="#逻辑寻访" class="headerlink" title="逻辑寻访"></a>逻辑寻访</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">rng</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>

b <span class="token operator">=</span> a <span class="token operator">></span> <span class="token number">10</span> <span class="token comment">% Boolean, shaped 6 x 8</span>
<span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">% Set all those greater than 10 to 100</span>

c <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span> a <span class="token operator">></span> <span class="token number">50</span> <span class="token punctuation">)</span> 
<span class="token comment">% Column vector shaped k x 1, consisting the index of elements != 0</span>
<span class="token function">a</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">NaN</span></code></pre>
<h3 id="数组的扩充、收缩与重排"><a href="#数组的扩充、收缩与重排" class="headerlink" title="数组的扩充、收缩与重排"></a>数组的扩充、收缩与重排</h3><h4 id="扩充"><a href="#扩充" class="headerlink" title="扩充"></a>扩充</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">;</span>
a_b <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token comment">% 1 x 10</span>
abc <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">;</span> b<span class="token punctuation">;</span> c<span class="token punctuation">]</span> <span class="token comment">% 3 x 5</span>

AB1 <span class="token operator">=</span> <span class="token function">repmat</span><span class="token punctuation">(</span>a_b<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">% 1 x 20</span>
AB2 <span class="token operator">=</span> <span class="token function">repmat</span><span class="token punctuation">(</span>a_b<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">% 2 x 10</span></code></pre>
<h4 id="收缩"><a href="#收缩" class="headerlink" title="收缩"></a>收缩</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>

b <span class="token operator">=</span> a<span class="token punctuation">;</span>
<span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

c <span class="token operator">=</span> a<span class="token punctuation">;</span>
<span class="token function">c</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre>
<h4 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">24</span>
b <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">% 3 x 8, column major</span>
c <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>

<span class="token function">c</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span>

     <span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">5</span>
     <span class="token number">2</span>     <span class="token number">4</span>     <span class="token number">6</span>


<span class="token function">c</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span>

     <span class="token number">7</span>     <span class="token number">9</span>    <span class="token number">11</span>
     <span class="token number">8</span>    <span class="token number">10</span>    <span class="token number">12</span>


<span class="token function">c</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span>

    <span class="token number">13</span>    <span class="token number">15</span>    <span class="token number">17</span>
    <span class="token number">14</span>    <span class="token number">16</span>    <span class="token number">18</span>


<span class="token function">c</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span>

    <span class="token number">19</span>    <span class="token number">21</span>    <span class="token number">23</span>
    <span class="token number">20</span>    <span class="token number">22</span>    <span class="token number">24</span>
    
</code></pre>
<h4 id="翻转"><a href="#翻转" class="headerlink" title="翻转"></a>翻转</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token function">flipud</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment">% 将数组从上向下翻转</span>
c <span class="token operator">=</span> <span class="token function">fliplr</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment">% 将数组从左向右翻转</span>
d <span class="token operator">=</span> <span class="token function">flipdim</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">% 将数组沿第一个维度翻转</span>
f <span class="token operator">=</span> <span class="token function">flipdim</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">% 将数组沿第二个维度翻转</span>

g <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span>
h <span class="token operator">=</span> g<span class="token operator">'</span>             <span class="token comment">% 转置</span></code></pre>
<h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token function">rot90</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>     <span class="token comment">% 将 a 旋转 90 度</span>
c <span class="token operator">=</span> <span class="token function">rot90</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">%将 a 旋转 180 度</span>
<span class="token comment">% 还有 rotx, roty, rotz, rot45 等函数可供探索</span></code></pre>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">rng</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token function">randn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>b<span class="token punctuation">,</span> idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token comment">% 对 a 的每一列按升序排序，idx 为索引。</span>
c <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>             <span class="token comment">% 对 a 的每一行按升序排序</span>
d <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">'ascend'</span><span class="token punctuation">)</span>      <span class="token comment">% 对 a 的每一列按升序排序</span>
f <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'descend'</span><span class="token punctuation">)</span>   <span class="token comment">% 对 a 的第 2 个维度按降序排序</span>
g <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">'ComparisonMethod'</span><span class="token punctuation">,</span><span class="token string">'abs'</span><span class="token punctuation">)</span>
<span class="token comment">%还有 cat,circshift,horzcat,vercat,permute,ipermute,shiftdim,sortrows,squeeze 等函数可供探索</span></code></pre>
<h2 id="数组运算"><a href="#数组运算" class="headerlink" title="数组运算"></a>数组运算</h2><h3 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h3><p>MATLAB 中的运算都是矩阵与矩阵的运算，或者标量与矩阵的运算。也就是说，要满足矩阵运算的规则。</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 矩阵运算</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> a<span class="token operator">'</span>            <span class="token comment">%共轭转置</span>
c <span class="token operator">=</span> b<span class="token operator">*</span>a           <span class="token comment">%矩阵乘法，注意维度要符合</span>
d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>     
f <span class="token operator">=</span> a<span class="token operator">/</span>d           <span class="token comment">%对d求逆，再左乘a</span>
g <span class="token operator">=</span> d<span class="token operator">\</span>b           <span class="token comment">%对d求逆，再右乘b</span>
h <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">*</span>a           <span class="token comment">%3是标量，与矩阵a相乘</span>
k <span class="token operator">=</span> a<span class="token operator">/</span><span class="token number">3</span>           <span class="token comment">%矩阵a除以标量3</span>
l <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">\</span>a           <span class="token comment">%含义同上</span>
m <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">^</span>d           <span class="token comment">%4的d次幂</span>
n <span class="token operator">=</span> d<span class="token operator">^</span><span class="token number">4</span>           <span class="token comment">%d的4次幂</span>

<span class="token comment">% Elementwise</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> a<span class="token operator">.'</span>             <span class="token comment">%非共轭转置</span>
c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
d <span class="token operator">=</span> a<span class="token operator">.*</span>c            <span class="token comment">%按元素乘，要求矩阵形状完全相同</span>
f <span class="token operator">=</span> c<span class="token operator">./</span>a            <span class="token comment">%按元素除，c除以a</span>
g <span class="token operator">=</span> a<span class="token operator">.\</span>c            <span class="token comment">%按元素除，a除以c</span>
h <span class="token operator">=</span> <span class="token number">4.</span><span class="token operator">^</span>a           
l <span class="token operator">=</span> a<span class="token operator">.^</span><span class="token number">3</span>    </code></pre>
<p>上文用到了左除（\）和右除（/）。左除是 MATLAB 中独有的，其速度、准确度都远高于右除。此外，使用矩阵除法时应该注意，对于奇异矩阵或近似于奇异的矩阵，MATLAB 会给出警告。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>MATLAB 的数据类型包括 <code>double，uint8，uint16，boolean，char，str</code>。</p>
<p>前 3 种的转换函数分别为 <code>double(),uint8(),uint16()</code>。<br>char 是字符，char(x) 会将 x 按 ASCII 值转变成相应的字符。str 是字符串，被看做一个行向量。具体示例见字符串部分。</p>
<p>MATLAB 中还有一些保留关键字，列举如下：</p>
<ul>
<li>eps：浮点数相对精度</li>
<li>i 或 j：复数单位</li>
<li>inf 或 Inf：无穷大</li>
<li>intmax：最大正整数</li>
<li>intmin：最小负整数</li>
<li>NaN 或 nan：非数。注意，不能用 a==nan 判断 a 是否为 nan。</li>
<li>pi：π</li>
<li>realmax：最大正实数</li>
<li>realmin：最小正实数</li>
</ul>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% Complex numbers</span>
a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span>
a_real <span class="token operator">=</span> <span class="token function">real</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment">%a的实部</span>
a_imag <span class="token operator">=</span> <span class="token function">imag</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment">%a的虚部</span>
b <span class="token operator">=</span> <span class="token function">conj</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>         <span class="token comment">%b是a的共轭</span>
b_abs <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>      <span class="token comment">%b的模长</span>
b_angle <span class="token operator">=</span> <span class="token function">angle</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment">%b的辅角</span>

<span class="token comment">% NaN</span>
<span class="token function">rng</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">a</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">NaN</span><span class="token punctuation">;</span>
idx1 <span class="token operator">=</span> <span class="token function">isnan</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">% a==NaN 不能正确判别 NaN</span>

<span class="token comment">% 不同进制的转化</span>
<span class="token comment">% MATLAB 支持 2 进制（bin），8 进制(oct)，10 进制(dec)和 16 进制(hex)</span>
a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token function">dec2bin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token function">bin2dec</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre>
<h3 id="特殊运算"><a href="#特殊运算" class="headerlink" title="特殊运算"></a>特殊运算</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 和与积</span>
a <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token function">cumsum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>            <span class="token comment">%沿 a 的第一个 length 不为 1 的维度求累积和</span>
c <span class="token operator">=</span> <span class="token function">cumsum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>          <span class="token comment">%沿a的第二个维度求累积和</span>
d <span class="token operator">=</span> <span class="token function">cumsum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">'reverse'</span><span class="token punctuation">)</span>  <span class="token comment">%沿a的第一个不为1的维度，反向求累积和</span>
f <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>               <span class="token comment">%沿a的第一个不为1的维度求和，其他用法同cumsum</span>
g <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">'all'</span><span class="token punctuation">)</span>         <span class="token comment">%对a的所有元素求和</span>
s3 <span class="token operator">=</span> <span class="token function">cumprod</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>          <span class="token comment">%累积积，用法同上</span>
s4 <span class="token operator">=</span> <span class="token function">prod</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>             <span class="token comment">%求积，用法同上</span>

<span class="token comment">% 最大值</span>
<span class="token function">rng</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>                    <span class="token comment">%沿a的第一个不为1的维度计算</span>
c <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>               <span class="token comment">%沿a的第二个维度计算</span>
<span class="token punctuation">[</span>d<span class="token punctuation">,</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>              <span class="token comment">%idx是每个最大值的位置</span>
f <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'all'</span><span class="token punctuation">)</span>           <span class="token comment">%在a的所有元素中找最大值</span>
g <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token comment">%在a的第1个和第3个维度中求最大值</span>
<span class="token punctuation">[</span>h<span class="token punctuation">,</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'linear'</span><span class="token punctuation">)</span>  <span class="token comment">%idx是最大值的线性索引</span>
k <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>              
l <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>k<span class="token punctuation">)</span>                  <span class="token comment">%求a，k中的最大值</span>

<span class="token comment">% 逻辑操作</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
L1 <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">%按位取非</span>
L2 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">%与</span>
L3 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">%与,第一项为false时，不再计算第二项</span>
L4 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">%或</span>
L5 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">%或，第一项为true时，不再计算第二项</span>
b<span class="token operator">=</span>a<span class="token punctuation">;</span>
c <span class="token operator">=</span> <span class="token function">xor</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">%异或</span>
d <span class="token operator">=</span> <span class="token function">all</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">%a中元素全不为0时，d为真</span>
e <span class="token operator">=</span> <span class="token function">any</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">%a中元素至少有一个非0时，e为真</span>
idx <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
f <span class="token operator">=</span> <span class="token function">isempty</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">%检查idx是否为空矩阵</span>

<span class="token comment">% MATLAB还可以计算矩阵的特征值，对矩阵做奇异值分解、QR分解等。</span></code></pre>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token string">'Three-six-nine, hon, the goose drank wine.'</span><span class="token punctuation">;</span>
<span class="token comment">%如果字符串中有单引号，用两个连续的单引号表示。</span>
b <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>     <span class="token comment">%可以看出，MATLAB将字符串数组视为行矩阵</span>

a <span class="token operator">=</span> <span class="token string">'May you long day and pleasant nights.'</span><span class="token punctuation">;</span>
a14 <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span>       <span class="token comment">%取出字符串数组的前4个元素   </span>
ra <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">%翻转字符串数组</span>

a <span class="token operator">=</span> <span class="token string">'May you have twice the number.'</span><span class="token punctuation">;</span>
Ua <span class="token operator">=</span> <span class="token function">double</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>          <span class="token comment">%查看a的ASCII码值</span>
c <span class="token operator">=</span> <span class="token function">char</span><span class="token punctuation">(</span>Ua<span class="token punctuation">)</span>            <span class="token comment">%将ASCII转化回字符串</span>
w <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token operator">>=</span><span class="token string">'a'</span><span class="token operator">&amp;</span>a<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token comment">%找出所有的小写字母</span>
<span class="token function">Ua</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Ua</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">32</span>       <span class="token comment">%将小写字母变为大写字母</span>
d <span class="token operator">=</span> <span class="token function">char</span><span class="token punctuation">(</span>Ua<span class="token punctuation">)</span>            <span class="token comment">%将ASCII转化回字符串</span></code></pre>
<h2 id="控制流语句"><a href="#控制流语句" class="headerlink" title="控制流语句"></a>控制流语句</h2><p>MATLAB 很适宜向量化编程，也就是说，编写 MATLAB 程序的时候要尽量用矩阵和数组代替循环，尤其是 2 层及以上的循环。</p>
<p>在 MATLAB 中，二维矩阵的运算速度要远快于 2 层循环。因此，本节介绍的所有数据流控制语句都要尽量少用，除非万不得已。</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% if/else/elseif</span>
a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> a<span class="token operator">&lt;</span><span class="token number">0</span>
    a <span class="token operator">=</span> <span class="token operator">-</span>a<span class="token punctuation">;</span>
<span class="token keyword">elseif</span> a<span class="token operator">></span><span class="token number">10</span>
    a <span class="token operator">=</span> a<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> 
    a <span class="token operator">=</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>

<span class="token comment">% while</span>
sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> sum <span class="token operator">&lt;</span> <span class="token number">10</span>
    sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>

<span class="token comment">% for</span>
sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> ii <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span>
    sum <span class="token operator">=</span> sum <span class="token operator">+</span> ii<span class="token punctuation">;</span>
<span class="token keyword">end</span>

<span class="token comment">% switch</span>
a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> a
    <span class="token keyword">case</span> <span class="token number">1</span>
        a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">3</span>
        a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">otherwise</span>
        a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>

<span class="token comment">% try/catch</span>
a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> 
    b <span class="token operator">=</span> a<span class="token operator">*</span>a<span class="token punctuation">;</span>
<span class="token keyword">catch</span> ME
    b <span class="token operator">=</span> a<span class="token operator">.*</span>a<span class="token punctuation">;</span>
<span class="token keyword">end</span></code></pre>
<h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 读写 mat 文件</span>
clear
a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
save file1<span class="token punctuation">;</span>                <span class="token comment">%把工作区中全部变量保存到名为file1.mat的文件中。</span>
                           <span class="token comment">%如果file1.mat原先存在，它的原始内容会被删除。</span>
save file2 a b<span class="token punctuation">;</span>            <span class="token comment">%把变量a和b保存到file2.mat文件中。</span>
save file2 c <span class="token operator">-</span>append       <span class="token comment">%把变量c添加到file2.mat中，不会删除file2.mat中原有的值</span>
save file3 <span class="token operator">-</span>ascii          <span class="token comment">%把变量保存到8位ascii文件file3.mat中</span>
save file4 <span class="token operator">-</span>ascii <span class="token operator">-</span>double  <span class="token comment">%把变量保存到16位ascii文件file4.mat中</span>
clear
load file1                 <span class="token comment">%把file1.mat中的全部变量加载到工作区</span>
clear                      
load file1 a b             <span class="token comment">%把file1.mat中的变量a和b加载到工作区</span>
clear
load file3 a <span class="token operator">-</span>ascii        <span class="token comment">%把ascii文件file3.mat中的变量a加载到工作区</span>

<span class="token comment">% 科学计数法</span>
a <span class="token operator">=</span> <span class="token number">1.4e3</span>                  <span class="token comment">%a=1400</span>

<span class="token comment">% 输出格式</span>
a <span class="token operator">=</span> format                <span class="token comment">%返回当前的format</span>
format long               <span class="token comment">%将输出格式设定为long           </span>
format short              <span class="token comment">%将输出格式设定为short</span>
<span class="token comment">% format的参数有多种选择，可自行探索</span>

<span class="token comment">% disp</span>
name <span class="token operator">=</span> <span class="token string">'Jake'</span><span class="token punctuation">;</span>   
chassit <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
X <span class="token operator">=</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span><span class="token string">', son of Elm, ka-tet of '</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span>chassit<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">disp</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>
name <span class="token operator">=</span> <span class="token string">'Edward'</span><span class="token punctuation">;</span>   
chassit <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>
X <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">'%s Cantor Dean, ka-tet of %d'</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>chassit<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">disp</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="字符数组与字符串数组"><a href="#字符数组与字符串数组" class="headerlink" title="字符数组与字符串数组"></a>字符数组与字符串数组</h2><p>在 R2016b 版本之后，Matlab引入了字符串数组 string。只有一个字符串的字符串数组也可称为字符串标量。</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% 创建</span>
char_array <span class="token operator">=</span> <span class="token string">'THU EESAST'</span> <span class="token comment">% 字符数组</span>
string_array <span class="token operator">=</span> "THU EESAST" <span class="token comment">% 字符串数组</span>

<span class="token comment">%% 互相转换</span>

<span class="token comment">% 字符串数组 -> 字符数组</span>
string_array2 <span class="token operator">=</span> "string to char"
<span class="token function">strlength</span><span class="token punctuation">(</span>string_array2<span class="token punctuation">)</span> <span class="token comment">% 14</span>
char_array2 <span class="token operator">=</span> <span class="token function">char</span><span class="token punctuation">(</span>string_array2<span class="token punctuation">)</span>
<span class="token function">size</span><span class="token punctuation">(</span>char_array2<span class="token punctuation">)</span> <span class="token comment">% [1, 14]</span>

<span class="token comment">% 字符串列向量 -> 字符数组</span>
string_array3 <span class="token operator">=</span> <span class="token punctuation">[</span>"string1"<span class="token punctuation">;</span>"string2"<span class="token punctuation">;</span>"string3"<span class="token punctuation">]</span> <span class="token comment">% 3 x 1</span>
char_array3 <span class="token operator">=</span> <span class="token function">char</span><span class="token punctuation">(</span>string_array3<span class="token punctuation">)</span>

<span class="token comment">% char_array3 =  % 3 x 7 char</span>
<span class="token comment">%     'string1'</span>
<span class="token comment">%     'string2'</span>
<span class="token comment">%     'string3'</span>

<span class="token comment">% 字符串行向量 -> 字符数组</span>
string_array4 <span class="token operator">=</span> <span class="token punctuation">[</span>"string1"<span class="token punctuation">,</span>"string2"<span class="token punctuation">,</span>"string3"<span class="token punctuation">]</span>
char_array4 <span class="token operator">=</span> <span class="token function">char</span><span class="token punctuation">(</span>string_array4<span class="token punctuation">)</span>
<span class="token comment">% 1 x 7 x 3 char, every page contains a "string\d"</span>

<span class="token comment">% 字符串矩阵 -> 字符数组</span>
string_array5 <span class="token operator">=</span> <span class="token punctuation">[</span>"string1"<span class="token punctuation">,</span>"string2"<span class="token punctuation">,</span>"string3"<span class="token punctuation">;</span>"string4"<span class="token punctuation">,</span>"string5"<span class="token punctuation">,</span>"string6"<span class="token punctuation">]</span>
char_array5 <span class="token operator">=</span> <span class="token function">char</span><span class="token punctuation">(</span>string_array5<span class="token punctuation">)</span>
<span class="token comment">% 2 x 7 x 3 char, every page contains a column</span>

<span class="token comment">% 字符数组行向量 -> 字符串数组</span>
char_array6 <span class="token operator">=</span> <span class="token string">'char'</span> <span class="token comment">% 完全等价于 char_array6 = ['c','h','a','r']</span>
string_array6 <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>char_array6<span class="token punctuation">)</span> <span class="token comment">% "char"</span>

<span class="token comment">% 字符数组列向量 -> 字符串数组</span>
char_array7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">;</span><span class="token string">'b'</span><span class="token punctuation">;</span><span class="token string">'c'</span><span class="token punctuation">;</span><span class="token string">'d'</span><span class="token punctuation">]</span>
string_array7 <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>char_array7<span class="token punctuation">)</span> <span class="token comment">% 4 x 1 string</span>

<span class="token comment">%% 两者的行为区别</span>
<span class="token comment">% 减去一个字符</span>
char_array8 <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span>
string_array8 <span class="token operator">=</span> "abcdefg"<span class="token punctuation">;</span>
char_array8 <span class="token operator">-</span> <span class="token string">'a'</span>
char_array8 <span class="token operator">-</span> <span class="token number">97</span>
<span class="token comment">% 可以逐条尝试执行下面几行代码</span>
<span class="token comment">% char_array8 - "a"  </span>
<span class="token comment">% string_array8 - 'a'</span>
<span class="token comment">% string_array8 - "a"</span>
<span class="token comment">% string_array8 - 97 % string 类型的操作数不支持 '-'，string 作为 arg[1] 还是 arg[2] 都报错</span>

<span class="token comment">% 将字符串数组或字符数组相加</span>
<span class="token comment">% 字符数组会得到Unicode码相加的结果：</span>
char_array9 <span class="token operator">=</span> <span class="token string">'THU EESAST'</span><span class="token punctuation">;</span>
char_array10 <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">;</span>
char_array9 <span class="token operator">+</span> char_array10 <span class="token comment">% ans 1 x 10 [117, 105, ...]</span>

<span class="token comment">% 字符串数组会将两端字符串拼接起来：</span>
string_array9 <span class="token operator">=</span> "THU EESAST"<span class="token punctuation">;</span>
string_array10 <span class="token operator">=</span> "<span class="token punctuation">!</span>"<span class="token punctuation">;</span>
string_array9 <span class="token operator">+</span> string_array10 <span class="token comment">% 拼接</span>

<span class="token comment">% 将内容为数字的文本转换为 double 等类型</span>
<span class="token comment">% 字符数组会得到对应字符的Unicode编码：</span>
char_array11 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'123'</span><span class="token punctuation">;</span><span class="token string">'1e2'</span><span class="token punctuation">;</span><span class="token string">'1.2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
char_array12 <span class="token operator">=</span> <span class="token string">'123 456 789'</span><span class="token punctuation">;</span>
<span class="token function">double</span><span class="token punctuation">(</span>char_array11<span class="token punctuation">)</span>
<span class="token function">double</span><span class="token punctuation">(</span>char_array12<span class="token punctuation">)</span>
<span class="token comment">% 字符串数组则直接得到文本表示的数字：</span>
string_array11 <span class="token operator">=</span> <span class="token punctuation">[</span>"<span class="token number">123</span>"<span class="token punctuation">;</span>"<span class="token number">1e2</span>"<span class="token punctuation">;</span>"<span class="token number">1.2</span>"<span class="token punctuation">]</span><span class="token punctuation">;</span>
string_array12 <span class="token operator">=</span> "<span class="token number">123</span> <span class="token number">456</span> <span class="token number">789</span>"<span class="token punctuation">;</span>
<span class="token function">double</span><span class="token punctuation">(</span>string_array11<span class="token punctuation">)</span> <span class="token comment">% [123; 100; 1.2]</span>
<span class="token function">double</span><span class="token punctuation">(</span>string_array12<span class="token punctuation">)</span> <span class="token comment">% 123456789</span>

<span class="token comment">% 欲将字符向量转换为文本表示的数字，请使用str2double函数</span>
<span class="token comment">% 此函数的输入可以为字符向量、字符向量元胞数组(之后会学习到)或字符串数组：</span>
<span class="token function">str2double</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>
<span class="token function">str2double</span><span class="token punctuation">(</span><span class="token string">'1e5'</span><span class="token punctuation">)</span>
<span class="token comment">%str2double(string_array11) % 3 x 1 ans</span>
<span class="token comment">%str2double(string_array12) % NaN</span>
<span class="token comment">%str2double(char_array11) % NaN</span>
<span class="token comment">%str2double(char_array12) % NaN</span>
<span class="token comment">% 可以尝试执行最后四行代码，看看会得到什么结果</span>
<span class="token comment">% 关于str2double函数的详细内容请参考MATLAB说明文档</span>
<span class="token comment">% 另有str2num函数可供选择</span>

<span class="token comment">%% 将数字转换为文本</span>
double_array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">28165</span> <span class="token number">21326</span> <span class="token number">22823</span> <span class="token number">23398</span> <span class="token number">30005</span> <span class="token number">23376</span> <span class="token number">31185</span> <span class="token number">21327</span> <span class="token number">23398</span> <span class="token number">22521</span> <span class="token number">37096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">% 字符数组会按照Unicode编码进行转换：</span>
<span class="token function">char</span><span class="token punctuation">(</span>double_array1<span class="token punctuation">)</span>
<span class="token comment">% 字符串数组则直接转换为文本：</span>
<span class="token function">string</span><span class="token punctuation">(</span>double_array1<span class="token punctuation">)</span>
<span class="token comment">% 欲将数字转换为对应的字符数组类型文本，请使用num2str函数：</span>
<span class="token function">num2str</span><span class="token punctuation">(</span>double_array1<span class="token punctuation">)</span> <span class="token comment">% '28165 21326 ...'</span>
<span class="token function">num2str</span><span class="token punctuation">(</span>double_array1<span class="token operator">'</span><span class="token punctuation">)</span> <span class="token comment">% 11x5 char</span>

<span class="token comment">%% 索引操作</span>
<span class="token comment">% 字符数组可以像数值数组一样正常索引</span>
<span class="token comment">% 而单个字符串标量则无法索引内部的某个字符</span>
char_array13 <span class="token operator">=</span> <span class="token string">'123456789'</span><span class="token punctuation">;</span>
string_array13 <span class="token operator">=</span> "<span class="token number">123456789</span>"<span class="token punctuation">;</span>
<span class="token function">char_array13</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token comment">% string_array13(3:6) % length == 1, error</span></code></pre>
<h2 id="元胞数组"><a href="#元胞数组" class="headerlink" title="元胞数组"></a>元胞数组</h2><p>元胞数组是包含称为元胞的索引数据容器的数据类型。每个元胞可以包含任意类型的数据。</p>
<h3 id="元胞数组创建"><a href="#元胞数组创建" class="headerlink" title="元胞数组创建"></a>元胞数组创建</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab">C1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'char'</span><span class="token punctuation">,</span>"str"<span class="token punctuation">;</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">&#125;</span>

<span class="token comment">% C1 = </span>
<span class="token comment">%     &#123;'a'     &#125;    &#123;'char' &#125;    &#123;["str"]&#125;</span>
<span class="token comment">%     &#123;[1.2000]&#125;    &#123;[1 2 3]&#125;    &#123;[    1]&#125;</span>


C2<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token string">'char'</span>
<span class="token function">C3</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'char'</span><span class="token punctuation">&#125;</span>      <span class="token comment">% 注意()与&#123;&#125;的区别</span>

<span class="token comment">% 使用cell函数预分配内存：在需要频繁改变元胞数组大小的情况下</span>
<span class="token comment">% 推荐提前预估需要的最大尺寸，预分配内存以提高运行效率</span>
C4 <span class="token operator">=</span> <span class="token function">cell</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
C5 <span class="token operator">=</span> <span class="token function">cell</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
C6 <span class="token operator">=</span> <span class="token function">cell</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    </code></pre>
<h3 id="元胞数组的索引"><a href="#元胞数组的索引" class="headerlink" title="元胞数组的索引"></a>元胞数组的索引</h3><p>理解元胞数组的索引是理解元胞数组的关键。</p>
<p>与一般的数组不同，元胞数组有两种形式的索引：</p>
<p>使用圆括号 <code>()</code> 的索引与使用花括号 <code>&#123;&#125;</code> 的索引。</p>
<ul>
<li>使用圆括号 <code>()</code> 的元胞索引<ul>
<li>此形式的索引引用的是元胞本身，最直观的理解是，返回值是 cell 类型</li>
</ul>
</li>
<li>使用花括号 <code>&#123;&#125;</code> 的内容索引<ul>
<li>此形式的索引引用的是元胞中的内容，返回值的类型取决于该内容</li>
</ul>
</li>
</ul>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">C <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'char'</span><span class="token punctuation">,</span>"str"<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">class</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">% cell</span>
<span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span>

C <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'char'</span><span class="token punctuation">,</span>"str"<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
C<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>
<span class="token function">class</span><span class="token punctuation">(</span>C<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">% double</span>
C<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span>

C <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'c'</span><span class="token punctuation">,</span> "s"<span class="token punctuation">;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
C<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment">% C(3,3) = "s" % Cannot convert string to cell</span></code></pre>
<ul>
<li>删除元胞数组的数据</li>
</ul>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">C1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">C1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
C2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
C2<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment">% 这样不能删除元胞本身，只能将其中的内容赋值为空</span>
<span class="token comment">% 如果是下面这样呢？</span>
<span class="token comment">% C3 = &#123;1,2,3;4,5,6;7,8,9&#125;;</span>
<span class="token comment">% C3(2,2) = []    % err</span></code></pre>
<ul>
<li>多级索引</li>
</ul>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">Num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
char1 <span class="token operator">=</span> <span class="token string">'char'</span><span class="token punctuation">;</span>
C1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
C2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
C <span class="token operator">=</span> <span class="token punctuation">&#123;</span>Num<span class="token punctuation">,</span>char1<span class="token punctuation">;</span>C1<span class="token punctuation">,</span>C2<span class="token punctuation">&#125;</span>
<span class="token comment">% C = </span>
<span class="token comment">%     &#123;3×3 double&#125;    &#123;'char'  &#125;</span>
<span class="token comment">%     &#123;1×3 cell  &#125;    &#123;1×3 cell&#125;</span>

C<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
C<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span>
C<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
C<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span>
C<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre>
<ul>
<li>数组合并</li>
</ul>
<p>与一般的数组一样，使用方括号 [] 合并数组。</p>
<p>如果使用花括号 {}，原数组将被当作一个元胞的内容。</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 元胞数组与元胞数组合并</span>
C1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
C2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
C <span class="token operator">=</span> <span class="token punctuation">[</span>C1<span class="token punctuation">;</span>C2<span class="token punctuation">]</span> <span class="token comment">% 3 x 3 cell</span>
C <span class="token operator">=</span> <span class="token punctuation">&#123;</span>C1<span class="token punctuation">;</span>C2<span class="token punctuation">&#125;</span> <span class="token comment">% 2 x 1 cell</span>

<span class="token comment">% 元胞数组与非元胞数组合并</span>
C1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
char1 <span class="token operator">=</span> <span class="token string">'char'</span><span class="token punctuation">;</span>
num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
C <span class="token operator">=</span> <span class="token punctuation">[</span>C1<span class="token punctuation">,</span>char1<span class="token punctuation">,</span>num<span class="token punctuation">]</span> <span class="token comment">% 1 x 5 cell</span>
C <span class="token operator">=</span> <span class="token punctuation">&#123;</span>C1<span class="token punctuation">,</span>char1<span class="token punctuation">,</span>num<span class="token punctuation">&#125;</span> <span class="token comment">% 1 x 3 cell</span></code></pre>
<ul>
<li>类型转换</li>
</ul>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% cell2mat</span>
C1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span> <span class="token comment">% 3 x 2 cell</span>
A1 <span class="token operator">=</span> <span class="token function">cell2mat</span><span class="token punctuation">(</span>C1<span class="token punctuation">)</span> <span class="token comment">% 3 x 3 number</span>
C2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'THU'</span><span class="token punctuation">;</span><span class="token string">' EE'</span><span class="token punctuation">&#125;</span> <span class="token comment">% 2 x 1 cell</span>
A2 <span class="token operator">=</span> <span class="token function">cell2mat</span><span class="token punctuation">(</span>C2<span class="token punctuation">)</span> <span class="token comment">% 2 x 3 char</span>

<span class="token comment">% mat2cell</span>
A <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
C <span class="token operator">=</span> <span class="token function">mat2cell</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><p>结构体数组是使用名为字段的数据容器将相关数据组合在一起的数据类型，每个字段都可以包含任意类型的数据。使用 <code>structName.fieldName</code> 格式的圆点表示法来访问结构体中的数据。</p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% 直接赋值</span>
<span class="token comment">% 此方式只能创建结构体标量，之后可以通过索引的方式添加元素</span>
clear<span class="token punctuation">;</span>
element<span class="token punctuation">.</span>Atomic_Number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span>Symbol <span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>
element <span class="token comment">% struct</span>

<span class="token function">element</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Atomic_Number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token function">element</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Symbol <span class="token operator">=</span> <span class="token string">'He'</span><span class="token punctuation">;</span>
element <span class="token comment">% 1 x 2 struct</span>

<span class="token comment">%% 使用struct函数</span>
<span class="token comment">% 此方式可创建非标量结构体</span>
<span class="token comment">% 此函数一般重载为 struct(field1,value1,..,fieldN,valueN) 的形式：</span>
<span class="token comment">% 若所有 value 都不是元胞数组或为标量元胞数组，则创建结构体标量；</span>
<span class="token comment">% 若任一 value 为元胞数组，则创建结构体数组，维度同元胞数组；</span>
<span class="token comment">% 若有两个及以上 value 为非标量元胞数组，则其维度必须相同。</span>
clear<span class="token punctuation">;</span>
element <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'Atomic_Number'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Symbol'</span><span class="token punctuation">,</span><span class="token string">'H'</span><span class="token punctuation">)</span> <span class="token comment">% struct</span>
element <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'Atomic_Number'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'Symbol'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'H'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">% struct</span>
element <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'Atomic_Number'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'Symbol'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'H'</span><span class="token punctuation">,</span><span class="token string">'He'</span><span class="token punctuation">,</span><span class="token string">'Li'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">% 1 x 3 struct</span>
element <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'Atomic_Number'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'Symbol'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">'H'</span><span class="token punctuation">,</span><span class="token string">'He'</span><span class="token punctuation">,</span><span class="token string">'Li'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">% struct</span>
element <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'Atomic_Number'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'Symbol'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'H'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">% broadcasting</span>
<span class="token comment">%element = struct('Atomic_Number',&#123;1,2,3&#125;,'Symbol',&#123;'H','He'&#125;) % err</span>
<span class="token comment">% 注：同一字段对应的值可以是不同类型的数据。</span>

<span class="token comment">% 添加新的字段：通过圆点表示法添加</span>
clear<span class="token punctuation">;</span>
element <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'Atomic_Number'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'Symbol'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'H'</span><span class="token punctuation">,</span><span class="token string">'He'</span><span class="token punctuation">,</span><span class="token string">'Li'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token function">element</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Ar <span class="token operator">=</span> <span class="token number">1.008</span><span class="token punctuation">;</span>
element

<span class="token punctuation">[</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Ar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deal</span><span class="token punctuation">(</span><span class="token number">4.003</span><span class="token punctuation">,</span><span class="token number">6.941</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% Copy Input to Output</span>
element</code></pre>
<h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>
<span class="token punctuation">[</span>field1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>field3<span class="token punctuation">,</span>field4<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deal</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">,</span>value4<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deal</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'char'</span><span class="token punctuation">,</span>"str"<span class="token punctuation">,</span><span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'char'</span><span class="token punctuation">,</span>"str"<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">...</span>
    <span class="token punctuation">&#123;</span>"str"<span class="token punctuation">,</span><span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'char'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'char'</span><span class="token punctuation">,</span>"str"<span class="token punctuation">,</span><span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">%以上部分涉及"逗号分隔的列表"内容，不在本次教程要求之内</span>
s <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span>field1<span class="token punctuation">,</span>value1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>field3<span class="token punctuation">,</span>value3<span class="token punctuation">,</span>field4<span class="token punctuation">,</span>value4<span class="token punctuation">)</span>
<span class="token function">s</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>A
<span class="token punctuation">&#123;</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>A<span class="token punctuation">&#125;</span>
<span class="token function">s</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment">%s(1).A(2)</span>
<span class="token function">s</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>D<span class="token punctuation">.</span>c </code></pre>
<h3 id="串联"><a href="#串联" class="headerlink" title="串联"></a>串联</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 使用方括号[]串联结构体数组</span>
<span class="token comment">% 要串联结构体，他们必须具有相同的字段集</span>
<span class="token comment">% 但这些字段无需包含相同的大小或数据类型</span>
clear<span class="token punctuation">;</span>
s1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
s1<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
s2<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
s2<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
s <span class="token operator">=</span> <span class="token punctuation">[</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">]</span></code></pre>
<h2 id="函数与函数句柄"><a href="#函数与函数句柄" class="headerlink" title="函数与函数句柄"></a>函数与函数句柄</h2><h3 id="命名函数"><a href="#命名函数" class="headerlink" title="命名函数"></a>命名函数</h3><p>MATLAB 中的函数通常按照如下形式定义：</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> <span class="token punctuation">[</span>y1<span class="token punctuation">,</span><span class="token punctuation">...</span><span class="token punctuation">,</span>yN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">myfun</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span><span class="token punctuation">...</span><span class="token punctuation">,</span>xM<span class="token punctuation">)</span>
	command
<span class="token keyword">end</span></code></pre>
<p>其中 y1,…,yN 是输出，x1,…,xM 是输入，myfun 是函数名称。可以将命名函数保存在以下位置：</p>
<ul>
<li>只包含函数定义的函数文件中。文件的名称须与文件中第一个函数的名称一致；文件中的其余函数可以作为局部函数，仅能被该文件主函数调用。</li>
<li>包含命令和函数定义的脚本文件中。函数必须位于该文件的末尾。脚本文件不能与文件中的函数具有相同的名称。R2016b 或更高版本的脚本中支持函数。</li>
</ul>
<p>例如：</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.001</span><span class="token punctuation">,</span><span class="token number">1.111</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1.3</span><span class="token punctuation">,</span><span class="token number">0.51</span><span class="token punctuation">,</span><span class="token number">3.96</span><span class="token punctuation">,</span><span class="token number">1.22</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">% 函数保存在 ./fmax.m 中</span>


<span class="token comment">% In ./fmax.m</span>
<span class="token keyword">function</span> y <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    B <span class="token operator">=</span> x<span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.</span><span class="token operator">/</span><span class="token punctuation">(</span>x<span class="token operator">.^</span><span class="token number">2</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token operator">.^</span><span class="token number">3</span><span class="token punctuation">;</span>
    y <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span></code></pre>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>y<span class="token punctuation">,</span>f<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fun1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>

<span class="token comment">% In ./fun1.m</span>
<span class="token keyword">function</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span>f<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fun1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    temp <span class="token operator">=</span> <span class="token function">fact</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    y <span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    f <span class="token operator">=</span> <span class="token operator">@</span>fact<span class="token punctuation">;</span>          <span class="token comment">%返回表示函数fact的函数句柄f</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> y <span class="token operator">=</span> <span class="token function">fact</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> index <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>x
        y <span class="token operator">=</span> y <span class="token operator">*</span> index<span class="token punctuation">;</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span></code></pre>
<h3 id="函数句柄"><a href="#函数句柄" class="headerlink" title="函数句柄"></a>函数句柄</h3><p>函数句柄是一种表示函数的数据类型，可以表示命名函数或匿名函数。使用 <code>@</code> 运算符创建函数句柄。函数句柄的典型用法是将一个函数传递给另一个函数、从主函数外调用局部函数等。函数句柄不能组成一般数组，但可以收集到一个元胞数组或结构体数组中。</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 例1：表示命名函数</span>
clear<span class="token punctuation">;</span>
f1 <span class="token operator">=</span> <span class="token operator">@</span>fmax<span class="token punctuation">;</span>
x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.001</span><span class="token punctuation">,</span><span class="token number">1.111</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1.3</span><span class="token punctuation">,</span><span class="token number">0.51</span><span class="token punctuation">,</span><span class="token number">3.96</span><span class="token punctuation">,</span><span class="token number">1.22</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
y1 <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span>

<span class="token comment">% 例2：表示匿名函数</span>
clear<span class="token punctuation">;</span>
f2 <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token operator">.^</span><span class="token number">3</span><span class="token punctuation">;</span>     <span class="token comment">%以x为自变量，y = x^3</span>
x2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
y2 <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span>

<span class="token comment">% 例3：将一个函数传递给另一个函数</span>
clear<span class="token punctuation">;</span>
f3 <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span>         <span class="token comment">%以x为自变量，y = x^2</span>
<span class="token function">integral</span><span class="token punctuation">(</span>f3<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>       <span class="token comment">%f3作为函数integral()的参数</span>

<span class="token comment">% 例4：从主函数外调用局部函数(1)</span>
clear<span class="token punctuation">;</span>
x4 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>y4<span class="token punctuation">,</span>f4<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fun1</span><span class="token punctuation">(</span>x4<span class="token punctuation">)</span>
y4_1 <span class="token operator">=</span> <span class="token function">f4</span><span class="token punctuation">(</span>x4<span class="token punctuation">)</span>       <span class="token comment">%调用了局部函数fact()</span>
<span class="token function">log</span><span class="token punctuation">(</span>y4_1<span class="token punctuation">)</span>
<span class="token function">log</span><span class="token punctuation">(</span>y4_1<span class="token punctuation">)</span> <span class="token operator">-</span> y4

<span class="token comment">% 例5：从主函数外调用局部函数(2)/函数句柄组成的数组</span>
clear<span class="token punctuation">;</span>
<span class="token punctuation">[</span>f5<span class="token punctuation">,</span>f6<span class="token punctuation">]</span> <span class="token operator">=</span> circle<span class="token punctuation">;</span>
f5<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
f5<span class="token punctuation">.</span><span class="token function">Cirumference</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
f5<span class="token punctuation">.</span><span class="token function">Curvature</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
f6<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
f6<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
f6<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment">% In circle.m</span>
<span class="token keyword">function</span> <span class="token punctuation">[</span>f<span class="token punctuation">,</span>f1<span class="token punctuation">]</span> <span class="token operator">=</span> circle
    f<span class="token punctuation">.</span>Curvature <span class="token operator">=</span> <span class="token operator">@</span>Curvature<span class="token punctuation">;</span>
    f<span class="token punctuation">.</span>Area <span class="token operator">=</span> <span class="token operator">@</span>Area<span class="token punctuation">;</span>
    f<span class="token punctuation">.</span>Cirumference <span class="token operator">=</span> <span class="token operator">@</span>Circumference<span class="token punctuation">;</span>            <span class="token comment">%f以结构体形式返回</span>
    f1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">@</span>Curvature<span class="token punctuation">,</span><span class="token operator">@</span>Area<span class="token punctuation">,</span><span class="token operator">@</span>Circumference<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token comment">%f1以元胞数组形式返回</span>
    enda

<span class="token comment">%计算圆的曲率</span>
<span class="token keyword">function</span> y <span class="token operator">=</span> <span class="token function">Curvature</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span>
    y <span class="token operator">=</span> <span class="token number">1.</span><span class="token operator">/</span>R<span class="token punctuation">;</span>
<span class="token keyword">end</span>

<span class="token comment">%计算圆的面积</span>
<span class="token keyword">function</span> y <span class="token operator">=</span> <span class="token function">Area</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span>
    y <span class="token operator">=</span> <span class="token keyword">pi</span> <span class="token operator">.*</span> R<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>

<span class="token comment">%计算圆的周长</span>
<span class="token keyword">function</span> y <span class="token operator">=</span> <span class="token function">Circumference</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span>
    y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">.*</span> <span class="token keyword">pi</span> <span class="token operator">.*</span> R<span class="token punctuation">;</span>
<span class="token keyword">end</span></code></pre>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数是不存储在程序文件中、但与数据类型是函数句柄的变量相关的函数。匿名函数可以接受多个输入并返回一个输出。</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 例1：多个输入的匿名函数</span>
clear<span class="token punctuation">;</span>
f <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> x<span class="token operator">.^</span><span class="token number">2</span> <span class="token operator">+</span> y<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment">% 例2：参数化函数</span>
clear<span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
f <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token operator">.^</span><span class="token number">2</span> <span class="token operator">+</span> a <span class="token operator">.*</span> x <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
clear a b
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token comment">%可以看到，函数句柄f也保存了a和b的值，即便清除掉a和b也没有影响</span>

<span class="token comment">% 例3：匿名函数的嵌套，以积分函数为例</span>
F <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">integral</span><span class="token punctuation">(</span><span class="token operator">@</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> t<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">F</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment">% 例4：对于多输入函数，在创建函数句柄时可以只将部分输入作为自变量，其余输入作为参数</span>
f <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span> x<span class="token operator">.^</span><span class="token number">2</span><span class="token operator">+</span>y<span class="token operator">.^</span><span class="token number">2</span><span class="token operator">+</span>z<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span>
f1 <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<h2 id="符号变量"><a href="#符号变量" class="headerlink" title="符号变量"></a>符号变量</h2><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 用syms函数创建符号标量、数组、矩阵</span>
clear<span class="token punctuation">;</span>
syms a
syms b c
syms e <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
syms <span class="token string">'d_%da'</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
syms g h <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
syms f <span class="token number">4</span>

<span class="token comment">% 用syms函数创建符号函数</span>
clear<span class="token punctuation">;</span>
syms <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
syms <span class="token function">m</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
syms <span class="token function">a</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token function">b</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span>

<span class="token comment">% 用sym函数创建符号标量、数组、矩阵</span>
clear<span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
d <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'d_%da'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
e <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
f <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'f_a_%d_%d'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
g <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'g_a%d%d'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span></code></pre>
<h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 例1：标量运算</span>
syms a b
f <span class="token operator">=</span> a <span class="token operator">+</span> b
g <span class="token operator">=</span> f<span class="token operator">^</span><span class="token number">2</span>
h <span class="token operator">=</span> g<span class="token operator">/</span>a
F <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token punctuation">;</span>g<span class="token punctuation">,</span>a<span class="token operator">-</span>b<span class="token punctuation">]</span>
G <span class="token operator">=</span> F<span class="token operator">.*</span>F

<span class="token comment">% 例2：矩阵运算</span>
clear<span class="token punctuation">;</span>
A <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
B <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
A <span class="token operator">+</span> B
A<span class="token operator">*</span>B
A<span class="token operator">/</span>B
<span class="token function">diag</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>
A<span class="token operator">.'</span>
A<span class="token operator">'</span>

<span class="token comment">% 例3：符号函数</span>
clear<span class="token punctuation">;</span>
syms <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> a b
<span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> x<span class="token operator">^</span><span class="token number">2</span>
<span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token operator">^</span><span class="token number">3</span>
<span class="token function">f</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token function">f</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">g</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>a<span class="token punctuation">)</span>
<span class="token function">cos</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token function">exp</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>
<span class="token function">exp</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">%double(exp(g(1,1)))</span>

<span class="token comment">% 例4：数值计算</span>
clear<span class="token punctuation">;</span>
syms a b <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>
h <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span>
A <span class="token operator">=</span> <span class="token function">subs</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token function">double</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>
B <span class="token operator">=</span> <span class="token function">subs</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>b<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">2.1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">3.25</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token function">double</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span>
<span class="token comment">%请对比</span>
<span class="token number">1</span><span class="token operator">/</span><span class="token function">sym</span><span class="token punctuation">(</span><span class="token number">1234567</span><span class="token punctuation">)</span>    <span class="token comment">%精确计算</span>
<span class="token function">sym</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">1234567</span><span class="token punctuation">)</span>    <span class="token comment">%非精确计算</span>

<span class="token comment">% 例5：一些函数</span>
clear<span class="token punctuation">;</span>
syms a b <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span> a<span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>b<span class="token operator">*</span>a<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span>
D1 <span class="token operator">=</span> <span class="token function">diff</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>                <span class="token comment">%一阶导数</span>
D2 <span class="token operator">=</span> <span class="token function">diff</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>              <span class="token comment">%二阶导数</span>
<span class="token function">D1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                       <span class="token comment">%代入a=2</span>
D1 <span class="token operator">=</span> <span class="token function">subs</span><span class="token punctuation">(</span>D1<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>           <span class="token comment">%将参数b替换为3</span>
<span class="token function">double</span><span class="token punctuation">(</span><span class="token function">D1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment">%类型转换</span>
e <span class="token operator">=</span> <span class="token function">subs</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>
g <span class="token operator">=</span> <span class="token function">fourier</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment">%Fourier变换</span>
<span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span>              
LF <span class="token operator">=</span> <span class="token function">laplace</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>             <span class="token comment">%Laplace变化</span></code></pre>
<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><h3 id="交互方式"><a href="#交互方式" class="headerlink" title="交互方式"></a>交互方式</h3><p>MATLAB选项卡 —— 主页 —— 变量 —— 导入数据/保存工作区</p>
<h3 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% save：将工作区变量保存为MAT文件</span>
clear<span class="token punctuation">;</span>
A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
B <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">save</span><span class="token punctuation">(</span><span class="token string">'./data/data1.mat'</span><span class="token punctuation">,</span>"A"<span class="token punctuation">)</span>
<span class="token function">save</span><span class="token punctuation">(</span><span class="token string">'./data/data1.mat'</span><span class="token punctuation">,</span>"B"<span class="token punctuation">,</span><span class="token string">'-append'</span><span class="token punctuation">)</span>
<span class="token comment">%save('./data/data1.mat',"B")</span>

<span class="token comment">% load：读取MAT文件(或ASCII文件，请自行查阅说明文档)中保存的变量</span>
clear<span class="token punctuation">;</span>
<span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'./data/data1.mat'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">%load('./data/data1.mat');</span>
b <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'./data/data1.mat'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span>

<span class="token comment">% fileread：以文本格式读取内容</span>
clear<span class="token punctuation">;</span>
charA <span class="token operator">=</span> <span class="token function">fileread</span><span class="token punctuation">(</span><span class="token string">'./data/data2.txt'</span><span class="token punctuation">)</span>

<span class="token comment">% writetable(选学)：将表(table)写入有分隔符的文本文件</span>
clear<span class="token punctuation">;</span>
Age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">;</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token number">21</span><span class="token punctuation">;</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Name <span class="token operator">=</span> <span class="token punctuation">[</span>"Alice"<span class="token punctuation">;</span>"Bob"<span class="token punctuation">;</span>"Carol"<span class="token punctuation">;</span>"Dave"<span class="token punctuation">]</span><span class="token punctuation">;</span>
Weight <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">;</span><span class="token number">69</span><span class="token punctuation">;</span><span class="token number">64</span><span class="token punctuation">;</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Height <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">176</span><span class="token punctuation">;</span><span class="token number">163</span><span class="token punctuation">;</span><span class="token number">181</span><span class="token punctuation">;</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
T <span class="token operator">=</span> <span class="token function">table</span><span class="token punctuation">(</span>Name<span class="token punctuation">,</span>Age<span class="token punctuation">,</span>Height<span class="token punctuation">,</span>Weight<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">writetable</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span><span class="token string">'./data/data3.xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% readtable：基于扩展名确定文件格式；从带分隔符的文本文件(如txt，csv，dat)或电子表格文件(如xls，xlsx)读取列向数据来创建表(table)</span>
clear<span class="token punctuation">;</span>
T <span class="token operator">=</span> <span class="token function">readtable</span><span class="token punctuation">(</span>"data<span class="token operator">\</span>data3<span class="token punctuation">.</span>xlsx"<span class="token punctuation">)</span>
Name <span class="token operator">=</span> T<span class="token punctuation">.</span>Name
Age <span class="token operator">=</span> T<span class="token punctuation">.</span>Age
Height <span class="token operator">=</span> T<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span>
Weight <span class="token operator">=</span> T<span class="token punctuation">.</span>Weight

<span class="token comment">% imread：从指定文件读取图像数据，由于文件格式较多，在此不一一列出，仅以bmp格式为例，更详细的说明参阅说明文档“imread”页面。</span>
clear<span class="token punctuation">;</span>
image1 <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span>"<span class="token operator">./</span>data<span class="token operator">/</span>image1<span class="token punctuation">.</span>bmp"<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">image</span><span class="token punctuation">(</span>image1<span class="token punctuation">)</span>

<span class="token comment">% imwrite：将数组保存为图像(灰度图或RGB彩色图像)，数据类型为uint8或uint16。</span>
clear<span class="token punctuation">;</span>
<span class="token function">load</span><span class="token punctuation">(</span>"<span class="token operator">./</span>data<span class="token operator">/</span>image2<span class="token punctuation">.</span>mat"<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">imwrite</span><span class="token punctuation">(</span>image2<span class="token punctuation">,</span>"<span class="token operator">./</span>data<span class="token operator">/</span>image2<span class="token punctuation">.</span>jpg"<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">%如果image2.jpg已经存在，可以删除后重新运行</span></code></pre>
<h2 id="数据处理入门"><a href="#数据处理入门" class="headerlink" title="数据处理入门"></a>数据处理入门</h2><h3 id="cftool工具"><a href="#cftool工具" class="headerlink" title="cftool工具"></a>cftool工具</h3><ul>
<li>进入工具箱界面：MATLAB选项栏 —— APP —— Curve Fitting（或直接在命令行输入 cftool）</li>
<li>加载数据：在一个打开的 .m 文件中导入数据，例如：</li>
</ul>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">447.1</span><span class="token punctuation">,</span> <span class="token number">471.3</span><span class="token punctuation">,</span> <span class="token number">492.2</span><span class="token punctuation">,</span> <span class="token number">501.6</span><span class="token punctuation">,</span> <span class="token number">587.6</span><span class="token punctuation">,</span> <span class="token number">667.8</span><span class="token punctuation">,</span> <span class="token number">706.6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.6694</span><span class="token punctuation">,</span> <span class="token number">1.6638</span><span class="token punctuation">,</span> <span class="token number">1.6604</span><span class="token punctuation">,</span> <span class="token number">1.6577</span><span class="token punctuation">,</span> <span class="token number">1.6477</span><span class="token punctuation">,</span> <span class="token number">1.6411</span><span class="token punctuation">,</span> <span class="token number">1.6389</span><span class="token punctuation">]</span><span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>选择拟合曲线类型(在此选择线性拟合，基函数为 $1, x, x^2$)</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/23/OW8wGC7LTXdcnu4.png" alt="image-20220223213053229"></p>
<ul>
<li>查看拟合结果(Result栏)</li>
<li>导出拟合结果：cftool界面选项栏 —— 文件(F) —— Generate Code 即可导出代码文件。</li>
</ul>
<h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>
data <span class="token operator">=</span> <span class="token function">readtable</span><span class="token punctuation">(</span>"<span class="token operator">./</span>data<span class="token operator">/</span>data4<span class="token punctuation">.</span>csv"<span class="token punctuation">)</span><span class="token punctuation">;</span>
data <span class="token operator">=</span> data<span class="token punctuation">.</span>Close<span class="token punctuation">;</span>

<span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">histogram</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">%用名称-值对组参数设置直方图的各种属性，如bin的颜色、透明度、归一化方式等</span>
<span class="token comment">%在此将'Normalization'设置为'probability'进行归一化，使得各bin的高度为概率值，各bin高度之和为1</span>
<span class="token comment">%更详细的说明请参阅说明文档页面"histogram"</span>
<span class="token function">histogram</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'Normalization'</span><span class="token punctuation">,</span><span class="token string">'probability'</span><span class="token punctuation">)</span>     <span class="token comment">%指定标量nbins，确定直方图的bin数</span>

edges <span class="token operator">=</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">38</span><span class="token punctuation">;</span>
<span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">%在此将'FaceColor'设置为[0.9,0.5,0.2]</span>
<span class="token function">histogram</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>edges<span class="token punctuation">,</span><span class="token string">'FaceColor'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">%指定向量edges，确定直方图bin的边界(左闭右开)</span>

<span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">%在此将'Normalization'设置为'pdf'进行归一化，使得bin的高度为概率密度的估计值，使得各bin面积和为1</span>
<span class="token function">histogram</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'Normalization'</span><span class="token punctuation">,</span><span class="token string">'pdf'</span><span class="token punctuation">)</span>    <span class="token comment">%指定标量nbins，确定直方图的bin数</span></code></pre>
<h1 id="可视化与优化问题"><a href="#可视化与优化问题" class="headerlink" title="可视化与优化问题"></a>可视化与优化问题</h1><h2 id="图形对象"><a href="#图形对象" class="headerlink" title="图形对象"></a>图形对象</h2><p>图形对象是用来创建可视化数据的组件。每个对象在图形显示中都具有特定角色。例如，一个线图包含一个图窗对象、一个坐标区对象和一个图形线条对象。可以通过设置它们的属性来自定义图形对象。 要设置属性，可以通过创建该对象的函数将其以输出参数的形式返回。例如，plot 函数返回图形线条对象。然后，使用圆点表示法查看和设置属性，或者使用 <code>get()</code> 和 <code>set()</code> 函数查看和设置属性。</p>
<h3 id="Line"><a href="#Line" class="headerlink" title="Line"></a>Line</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> x<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span>
p <span class="token operator">=</span> <span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>

<span class="token comment">% 可使用 get() 函数查询特定属性</span>
<span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'LineStyle'</span><span class="token punctuation">)</span>

<span class="token comment">% 可用原点表示法修改设置属性</span>
p<span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> <span class="token number">3</span>

<span class="token comment">% 也可用 set() 函数设置属性</span>
<span class="token function">set</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'LineWidth'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>

<span class="token comment">% 还可以在创建对象时使用名称-值对组参数设置属性。例如</span>
<span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'LineWidth'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="Axes"><a href="#Axes" class="headerlink" title="Axes"></a>Axes</h3><p>Axes 属性控制 Axes 对象的外观和行为。通过更改属性值，您可以修改坐标区的特定方面。使用圆点表示法查询和设置属性。</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">ax <span class="token operator">=</span> gca <span class="token comment">% get current axes</span>
ax<span class="token punctuation">.</span>Color <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span>
ax<span class="token punctuation">.</span>XLim <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">% 修改坐标轴范围</span>

<span class="token comment">% 可以更改 Axes 属性给绘图增加标签</span>
ax<span class="token punctuation">.</span>Title<span class="token punctuation">.</span>String <span class="token operator">=</span> <span class="token string">'My Title'</span><span class="token punctuation">;</span>
ax<span class="token punctuation">.</span>Title<span class="token punctuation">.</span>FontSize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
ax<span class="token punctuation">.</span>XLabel<span class="token punctuation">.</span>String <span class="token operator">=</span> <span class="token string">'My x-Axis Label'</span><span class="token punctuation">;</span>
ax<span class="token punctuation">.</span>YLabel<span class="token punctuation">.</span>String <span class="token operator">=</span> <span class="token string">'My y-Axis Label'</span><span class="token punctuation">;</span>

<span class="token comment">% 也可以直接使用函数添加标签</span>
<span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'My Title'</span><span class="token punctuation">,</span> <span class="token string">'FontSize'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'My x-Axis Label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'My y-Axis Label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="矩阵可视化"><a href="#矩阵可视化" class="headerlink" title="矩阵可视化"></a>矩阵可视化</h2><h3 id="meshgrid"><a href="#meshgrid" class="headerlink" title="meshgrid"></a>meshgrid</h3><p>meshgrid 函数可用于创建二维表格。</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> x<span class="token punctuation">;</span>
<span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
F <span class="token operator">=</span> X<span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>X<span class="token operator">.^</span><span class="token number">2</span><span class="token operator">-</span>Y<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>F<span class="token punctuation">)</span></code></pre>
<h3 id="contour"><a href="#contour" class="headerlink" title="contour"></a>contour</h3><p>使用 contour 函数绘制等高线。</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">contour</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> F<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="streamline"><a href="#streamline" class="headerlink" title="streamline"></a>streamline</h3><p>使用 streamline 函数绘制流线。</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
u <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token comment">% x方向速度</span>
v <span class="token operator">=</span> <span class="token operator">-</span>y<span class="token punctuation">;</span>   <span class="token comment">% y方向速度</span>
startx <span class="token operator">=</span> <span class="token number">0.1</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">% x起始点</span>
starty <span class="token operator">=</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>startx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">% y起始点</span>
figure<span class="token punctuation">;</span>
<span class="token function">streamline</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>startx<span class="token punctuation">,</span>starty<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="最优化问题"><a href="#最优化问题" class="headerlink" title="最优化问题"></a>最优化问题</h2><p>安装 Optimization Toolbox，在实时脚本中，选择<strong>插入——任务——优化</strong>或者<strong>实时编辑器——任务——优化</strong>。</p>
<p>下面给出一个求解有约束非线性问题的示例：</p>
<p>问题为在单位圆盘上最小化 Rosenbrock 函数 <code>f(x,y)=100(y−x^2)^2+(1−x)^2</code>，约束条件为 <code>x^2+y^2&lt;=1</code>。</p>
<p>首先执行下面一行代码把初值写入工作区。</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">x0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">% 迭代初始点(x, y) = (0, 0)</span></code></pre>
<p>下面使用求解器求解该问题，结果放入 solution 和 objectiveValue 变量中。对于不同的问题，可参照 objectiveFcn 和 unitdisk 函数自行修改。</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> f <span class="token operator">=</span> <span class="token function">objectiveFcn</span><span class="token punctuation">(</span>optimInput<span class="token punctuation">)</span>
    <span class="token comment">% 示例:</span>
    <span class="token comment">% 最小化 Rosenbrock 函数</span>
    <span class="token comment">% f = 100*(y - x^2)^2 + (1 - x)^2</span>

    <span class="token comment">% 编辑以下行以添加您的计算方法</span>
    x <span class="token operator">=</span> <span class="token function">optimInput</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    y <span class="token operator">=</span> <span class="token function">optimInput</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    f <span class="token operator">=</span> <span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span>y <span class="token operator">-</span> x<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> <span class="token punctuation">[</span>c<span class="token punctuation">,</span>ceq<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">unitdisk</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token comment">% 示例：</span>
    <span class="token comment">% 单位圆盘</span>

    <span class="token comment">% 编辑以下行以添加您的计算方法</span>
    <span class="token comment">% 注意，如果没有不等式约束，请指定 c = []</span>
    <span class="token comment">% 注意，如果没有等式约束，请指定 ceq = []</span>
    c <span class="token operator">=</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    ceq <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">end</span></code></pre>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 使用 disp函数查看运行结果</span>
<span class="token function">disp</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>
<span class="token function">disp</span><span class="token punctuation">(</span>objectiveValue<span class="token punctuation">)</span></code></pre>
<h1 id="更多应用"><a href="#更多应用" class="headerlink" title="更多应用"></a>更多应用</h1><h2 id="求解黄金分割比"><a href="#求解黄金分割比" class="headerlink" title="求解黄金分割比"></a>求解黄金分割比</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 解方程</span>
p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">% 降次排列</span>
r <span class="token operator">=</span> <span class="token function">roots</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>

<span class="token comment">% 解析字符串后解方程</span>
r <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token string">'x-1=1/x'</span><span class="token punctuation">)</span>
phi <span class="token operator">=</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">% 符号变量解方程</span>
syms x<span class="token punctuation">;</span>
r <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">)</span>
phi <span class="token operator">=</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment">% 数值求解非线性方程</span>
f <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1.</span><span class="token operator">/</span>x
<span class="token function">ezplot</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
phi <span class="token operator">=</span> <span class="token function">fzero</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
hold on
<span class="token function">plot</span><span class="token punctuation">(</span>phi<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">)</span>

<span class="token comment">% .m 的两种功能：脚本或函数</span>
<span class="token comment">% In goldrect.m</span>
<span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token string">'b--'</span><span class="token punctuation">)</span>
<span class="token function">text</span><span class="token punctuation">(</span>phi<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1.05</span><span class="token punctuation">,</span> <span class="token string">'\phi'</span><span class="token punctuation">)</span>
…
axis equal
axis off
<span class="token function">set</span><span class="token punctuation">(</span>gcf<span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">)</span> <span class="token comment">% get current figure</span></code></pre>
<h2 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab">f <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
tic<span class="token punctuation">,</span> <span class="token function">fibnum</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  toc <span class="token comment">% tic toc 计时命令</span></code></pre>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li>无系 2021-2022 冬 MatPyFly 培训的 MATLAB 部分讲义</li>
<li>《数值分析》MATLAB 简介及入门.pptx</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/MATLAB</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>MATLAB 从放弃到入门</title>
    <url>/matlab-exercise/</url>
    <content><![CDATA[<p>大概记录的是 MATLAB 的练习之路。反正《数值分析》课程也得用。</p>
<a id="more"></a>
<h2 id="Week-1-Optional"><a href="#Week-1-Optional" class="headerlink" title="Week 1 Optional"></a>Week 1 Optional</h2><ul>
<li>Figure 1</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/23/IFc8GgE1VtMZ3kT.png" alt="image-20220223201253085"></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span><span class="token comment">%清空之前的图窗</span>
t <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token keyword">pi</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">%时间</span>
y <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.3</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token operator">.*</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">0.7</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'r-'</span><span class="token punctuation">,</span><span class="token string">'LineWidth'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">%用三磅红实线画曲线</span>

hold on <span class="token comment">% 添加新绘图时保留当前绘图</span>
tt <span class="token operator">=</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ts <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%寻找进入5%误差带的最大时间</span>
<span class="token function">plot</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span><span class="token number">0.95</span><span class="token punctuation">,</span><span class="token string">'bo'</span><span class="token punctuation">,</span><span class="token string">'MarkerSize'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment">%(ts,0.95)为文字的坐标，'b'指蓝色，'o'指圆圈，'MarkerSize','10'设定圆圈大小为10</span>
hold off

<span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token keyword">inf</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token keyword">inf</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">%设置横坐标上限为6π，下限自动生成；纵坐标下限为0.6，上限自动生成</span>
ax <span class="token operator">=</span> gca<span class="token punctuation">;</span> <span class="token comment">%将ax赋值为当前图窗对象</span>
ax<span class="token punctuation">.</span>XTick <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ax<span class="token punctuation">.</span>YTick <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.95</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1.05</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">%将横坐标分度设置为2π，4π，6π;同理重设纵坐标分度</span>
ax<span class="token punctuation">.</span>XTickLabel <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'2\pi'</span><span class="token punctuation">,</span><span class="token string">'4\pi'</span><span class="token punctuation">,</span><span class="token string">'6\pi'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">%横轴分度的标识。'\pi'会输出π。</span>
ax<span class="token punctuation">.</span>YTickLabel <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'0.95'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'1.05'</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">%纵轴分度的标识。num2str将数字转化为字符串</span>

grid on

<span class="token function">text</span><span class="token punctuation">(</span><span class="token number">13.5</span><span class="token punctuation">,</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token string">'\fontsize&#123;12&#125;&#123;\alpha&#125;=0.3'</span><span class="token punctuation">)</span>
<span class="token comment">%(13.5,1.2)是文字坐标，\fontsize&#123;12&#125;将文字大小设定为12号,&#123;\alpha&#125;是α，本行代码输出'α=0.3'</span>
<span class="token function">text</span><span class="token punctuation">(</span><span class="token number">13.5</span><span class="token punctuation">,</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token string">'fontsize&#123;12&#125;&#123;\omega&#125;=0.7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">%(13.5,1.1)是文字坐标，\fontsize&#123;12&#125;将文字大小设定为12号,&#123;\omega&#125;是ω，本行代码输出'α=0.7'</span>

<span class="token comment">%我们可以看到，text的参数很长，下面介绍一种缩减长度的方法</span>
cell_string<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token string">'\fontsize&#123;12&#125;\uparrow'</span><span class="token punctuation">;</span>
<span class="token comment">% 本行代码将指令用到的字符串存入一个胞元数组中，未来调用的时候更为便利</span>
<span class="token comment">% uparrow会输出一个向上指的箭头</span>
cell_string<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token string">'\fontsize&#123;16&#125;\fontname&#123;courier&#125;response'</span><span class="token punctuation">;</span>
<span class="token comment">%\fontname&#123;courier&#125;将字体设定为courier</span>
cell_string<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token string">'\fontsize&#123;6&#125; '</span><span class="token punctuation">;</span>
cell_string<span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\fontsize&#123;14&#125;\rmt_&#123;s&#125; = '</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">%\rm为正体,_&#123;s&#125;使s成为t的下标</span>
<span class="token function">text</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span><span class="token number">0.85</span><span class="token punctuation">,</span>cell_string<span class="token punctuation">,</span><span class="token string">'Color'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'HorizontalAlignment'</span><span class="token punctuation">,</span><span class="token string">'Center'</span><span class="token punctuation">)</span>
<span class="token comment">%HorizontalAlignment使四个胞元中的内容竖直居中对齐</span>
<span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'\fontsize&#123;14&#125; \it y = 1 - e^&#123; -\alpha t&#125;cos&#123;\omegat&#125;'</span><span class="token punctuation">)</span>
<span class="token comment">% \it指斜体</span>
<span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'\fontsize&#123;14&#125;\bft'</span><span class="token punctuation">)</span>
<span class="token comment">%\bf指黑体，\rightarrow在字符t上面输出一个向右的箭头，即向量t</span>
<span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'\fontsize&#123;14&#125; \bfy'</span><span class="token punctuation">)</span></code></pre>
<ul>
<li>Figure 2</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/23/A4t8qo5ePKSWMgn.png" alt="image-20220223201721698"></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">close all<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>clc <span class="token comment">% clear</span>
x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>y<span class="token operator">=</span>x<span class="token punctuation">;</span>
<span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">meshgrid</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
Z<span class="token operator">=</span>X<span class="token operator">.^</span><span class="token number">2</span><span class="token operator">+</span>Y<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">colormap</span><span class="token punctuation">(</span>summer<span class="token punctuation">)</span>
shading interp
<span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>h <span class="token operator">=</span> <span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token string">'FaceColor'</span><span class="token punctuation">,</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token comment">%恢复默认底色</span>
<span class="token function">rotate</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">%rotate的四个参数依次为：图形对象句柄，旋转轴方向，旋转角度，旋转轴支点</span></code></pre>
<ul>
<li>Figure 3</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/23/9orujxYQX1A8k6L.png" alt="image-20220223201906174"></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">close all<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>clc
r0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>shg<span class="token punctuation">;</span> <span class="token comment">%使当前图窗可见并使其位于屏幕上所有其他图窗上方</span>
a <span class="token operator">=</span> <span class="token number">12</span><span class="token operator">*</span>r0<span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token number">9</span><span class="token operator">*</span>r0<span class="token punctuation">;</span>
T0 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>
T <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">*</span>T0<span class="token punctuation">;</span>dt <span class="token operator">=</span> <span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">:</span>dt<span class="token operator">:</span>T<span class="token punctuation">]</span><span class="token operator">'</span><span class="token punctuation">;</span>
f <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token operator">^</span><span class="token number">2</span><span class="token operator">-</span>b<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
th <span class="token operator">=</span> <span class="token number">12.5</span> <span class="token operator">*</span> <span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>
E <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>t<span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> E<span class="token operator">.*</span><span class="token punctuation">(</span>a<span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">-</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>y <span class="token operator">=</span> E<span class="token operator">.*</span><span class="token punctuation">(</span>b<span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>th<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>z<span class="token operator">=</span>E<span class="token operator">.*</span><span class="token punctuation">(</span>b<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>th<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">plot3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">)</span> <span class="token comment">%画出绿色的全程轨迹线</span>
<span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sphere</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">%[X,Y,Z] = sphere(n) 返回半径等于 1 且包含 n×n 个面的球面的 x、y 和 z 坐标。</span>
<span class="token comment">% 该函数以三个 (n+1)×(n+1) 矩阵形式返回 x、y 和 z 坐标。</span>
X <span class="token operator">=</span> r0<span class="token operator">*</span>X<span class="token punctuation">;</span>Y<span class="token operator">=</span>r0<span class="token operator">*</span>Y<span class="token punctuation">;</span>Z<span class="token operator">=</span>r0<span class="token operator">*</span>Z<span class="token punctuation">;</span>
grid on<span class="token punctuation">;</span>hold on
<span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span>
shading interp
x1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">18</span><span class="token operator">*</span>r0<span class="token punctuation">;</span>x2 <span class="token operator">=</span> <span class="token number">6</span><span class="token operator">*</span>r0<span class="token punctuation">;</span>y1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12</span><span class="token operator">*</span>r0<span class="token punctuation">;</span>y2 <span class="token operator">=</span> <span class="token number">12</span><span class="token operator">*</span>r0<span class="token punctuation">;</span>z1<span class="token operator">=</span><span class="token operator">-</span><span class="token number">6</span><span class="token operator">*</span>r0<span class="token punctuation">;</span>z2 <span class="token operator">=</span> <span class="token number">6</span><span class="token operator">*</span>r0<span class="token punctuation">;</span>
<span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x1 x2 y1 y2 z1 y2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">%设定坐标轴范围</span>
<span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">133</span> <span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token function">comet3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span><span class="token number">0.02</span><span class="token punctuation">)</span></code></pre>
<ul>
<li>Figure 4</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/23/zmnwPsQS8BGLyZj.png" alt="image-20220223201920255"></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">close all<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>clc
funx <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span> u<span class="token operator">.*</span><span class="token function">sin</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%定义函数句柄</span>
funy <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token operator">-</span>u<span class="token operator">.*</span><span class="token function">cos</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
funz <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span> v<span class="token punctuation">;</span>
<span class="token function">fsurf</span><span class="token punctuation">(</span>funx<span class="token punctuation">,</span>funy<span class="token punctuation">,</span>funz<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span> <span class="token number">5</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'--'</span><span class="token punctuation">,</span><span class="token string">'EdgeColor'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">)</span>
<span class="token comment">%fsurf的前三个参数是函数句柄，后面的矩阵是x，y的范围</span>
hold on
C <span class="token operator">=</span> summer<span class="token punctuation">;</span><span class="token comment">%summer是一个色图矩阵</span>
CC <span class="token operator">=</span> <span class="token punctuation">[</span>C<span class="token punctuation">;</span><span class="token function">flipud</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%flipud实现矩阵的上下翻转，使CC逐渐变化</span>
<span class="token function">colormap</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span>
<span class="token function">spinmap</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">%色彩变换30秒，每次变换4行</span></code></pre>
<ul>
<li>Figure 5</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/23/r7CYPdntKq2cVXW.png" alt="image-20220223202353901"></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">close all<span class="token punctuation">;</span>clear
figure
Z <span class="token operator">=</span> peaks<span class="token punctuation">;</span>
<span class="token function">surf</span><span class="token punctuation">(</span>Z<span class="token punctuation">)</span>
axis tight manual
ax <span class="token operator">=</span> gca<span class="token punctuation">;</span>
ax<span class="token punctuation">.</span>NextPlot <span class="token operator">=</span> <span class="token string">'replaceChildren'</span><span class="token punctuation">;</span>
loops <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
<span class="token function">F</span><span class="token punctuation">(</span>loops<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'cdata'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'colormap'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>loops
X <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">*</span>Z<span class="token punctuation">;</span>
<span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Z<span class="token punctuation">)</span>
drawnow
<span class="token function">F</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> getframe<span class="token punctuation">;</span><span class="token comment">%通过getframe，将每一帧影片存入F中</span>
<span class="token keyword">end</span>
<span class="token function">movie</span><span class="token punctuation">(</span>F<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">%播放两次，每秒5帧</span></code></pre>
<ul>
<li>Figure 6</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/23/mHK6z9wO7dt2kgM.png" alt="image-20220223202418814"></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">close all<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>
K<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">%循环次数</span>
<span class="token comment">%绘制轨迹曲线</span>
t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token keyword">pi</span><span class="token punctuation">;</span>x1 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>y1<span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>z1 <span class="token operator">=</span> <span class="token operator">-</span>t1<span class="token punctuation">;</span>
t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>x2 <span class="token operator">=</span> <span class="token function">x1</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>y2 <span class="token operator">=</span> <span class="token function">y1</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>z2 <span class="token operator">=</span> <span class="token function">x1</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
t3 <span class="token operator">=</span> t2<span class="token punctuation">;</span> z3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>t3<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">z1</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x3 <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>z3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y3 <span class="token operator">=</span> x3<span class="token punctuation">;</span>
t4 <span class="token operator">=</span> t2<span class="token punctuation">;</span>x4 <span class="token operator">=</span> t4<span class="token punctuation">;</span>y4 <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>x4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>z4 <span class="token operator">=</span> y4<span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span>x1 x2 x3 x4<span class="token punctuation">]</span><span class="token punctuation">;</span>
n <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token punctuation">[</span>y1 y2 y3 y4<span class="token punctuation">]</span><span class="token punctuation">;</span> z <span class="token operator">=</span> <span class="token punctuation">[</span>z1 z2 z3 z4<span class="token punctuation">]</span><span class="token punctuation">;</span>
shg
<span class="token function">plot3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span><span class="token string">'Color'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'LineWidth'</span><span class="token punctuation">,</span><span class="token number">2.5</span><span class="token punctuation">)</span>
axis off
<span class="token comment">%在图中添加运动的点</span>
h1 <span class="token operator">=</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">'xdata'</span><span class="token punctuation">,</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'ydata'</span><span class="token punctuation">,</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'zdata'</span><span class="token punctuation">,</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'Color'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'Marker'</span><span class="token punctuation">,</span><span class="token string">'. '</span><span class="token punctuation">,</span> <span class="token punctuation">...</span>
<span class="token string">'MarkerSize'</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
h2 <span class="token operator">=</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">'xdata'</span><span class="token punctuation">,</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'ydata'</span><span class="token punctuation">,</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'zdata'</span><span class="token punctuation">,</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'Color'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'Marker'</span><span class="token punctuation">,</span><span class="token string">'. '</span><span class="token punctuation">,</span> <span class="token punctuation">...</span>
<span class="token string">'MarkerSize'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
KK <span class="token operator">=</span> K <span class="token operator">*</span> n<span class="token punctuation">;</span>
KK <span class="token operator">=</span> KK <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
htext <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token function">int2str</span><span class="token punctuation">(</span>KK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">i</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token number">1</span>
<span class="token comment">%更新点的坐标</span>
<span class="token function">set</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span><span class="token string">'xdata'</span><span class="token punctuation">,</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'ydata'</span><span class="token punctuation">,</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'zdata'</span><span class="token punctuation">,</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span>h2<span class="token punctuation">,</span><span class="token string">'xdata'</span><span class="token punctuation">,</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'ydata'</span><span class="token punctuation">,</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'zdata'</span><span class="token punctuation">,</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
drawnow<span class="token punctuation">;</span> <span class="token comment">% 擦除原先的点</span>
<span class="token keyword">pause</span><span class="token punctuation">(</span><span class="token number">0.0005</span><span class="token punctuation">)</span> <span class="token comment">%控制速度，单位为秒</span>
<span class="token number">i</span> <span class="token operator">=</span> <span class="token number">i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
KK <span class="token operator">=</span> KK <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span>htext<span class="token punctuation">,</span><span class="token string">'string'</span><span class="token punctuation">,</span><span class="token function">int2str</span><span class="token punctuation">(</span>KK<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token number">i</span> <span class="token operator">></span> n
<span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">j</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token number">j</span> <span class="token operator">></span> K<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">end</span></code></pre>
<ul>
<li>Figure 7</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/23/ieT4kdpzSZMAQUh.png" alt="image-20220223202526276"></p>
<p><img src="https://s2.loli.net/2022/02/23/JPSUKeWrMqjETu2.png" alt="image-20220223202623717"></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">close all<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token function">randn</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
h1 <span class="token operator">=</span> <span class="token function">histogram</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">disp</span><span class="token punctuation">(</span>h1<span class="token punctuation">.</span>NumBins<span class="token punctuation">)</span> <span class="token comment">%计算直方图的 bin 数量</span>
nbins <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span> <span class="token comment">%指定nbins数量</span>
hold on
h2 <span class="token operator">=</span> <span class="token function">histogram</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>nbins<span class="token punctuation">)</span><span class="token punctuation">;</span>
counts <span class="token operator">=</span> h2<span class="token punctuation">.</span>Values <span class="token punctuation">;</span><span class="token comment">%统计每个bin中的样本点数量</span>
h2<span class="token punctuation">.</span>NumBins <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span> <span class="token comment">%修改bin数量</span>
edges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">0.25</span><span class="token operator">:</span><span class="token number">2</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">%通过向量指定bins的范围</span>
h1<span class="token punctuation">.</span>Normalization <span class="token operator">=</span> <span class="token string">'probability'</span><span class="token punctuation">;</span>
<span class="token comment">%通过该归一化，每个条形的高度等于在该 bin 间隔内选择观测值的概率，并且所有条形的高度总和为 1。</span>
h2<span class="token punctuation">.</span>Normalization <span class="token operator">=</span> <span class="token string">'probability'</span>
hold off
h3 <span class="token operator">=</span> <span class="token function">histogram</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>edges<span class="token punctuation">)</span><span class="token punctuation">;</span>
h3<span class="token punctuation">.</span>Normalization <span class="token operator">=</span> <span class="token string">'countdensity'</span> 
<span class="token comment">%将 Normalization 属性指定为 'countdensity' 以使包含离群值的 bin 扁平化。</span>
<span class="token comment">%现在，每个 bin 的区域（而不是高度）表示该 bin 的观测值频率。</span>
h4 <span class="token operator">=</span> <span class="token function">histogram</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token string">'Normalization'</span><span class="token punctuation">,</span><span class="token string">'probability'</span><span class="token punctuation">)</span>
<span class="token comment">%通过该归一化，每个条形的高度等于在该 bin 间隔内选择观测值的概率，并且所有条形的高度总和为 1。</span></code></pre>
<ul>
<li>Figure 8</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/23/uexpWydln8NKMsc.png" alt="image-20220223202642481"></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span>clc
A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token keyword">NaN</span> <span class="token keyword">NaN</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">%创建一个表示投票的分类向量。该向量中的类别是 'yes'、'no' 或 'undecided'。</span>
C <span class="token operator">=</span> <span class="token function">categorical</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token keyword">NaN</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'yes'</span><span class="token punctuation">,</span><span class="token string">'no'</span><span class="token punctuation">,</span><span class="token string">'undecided'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">%将1,0，NaN分别指定为yes,no,undecided</span>
h <span class="token operator">=</span> <span class="token function">histogram</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span><span class="token string">'BarWidth'</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token comment">%使用相对条形宽度 0.5 绘制投票的分类直方图</span></code></pre>
<ul>
<li>Figure 9</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/23/kF1nWm4BNpidfvX.png" alt="image-20220223202811936"></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span>clc
x <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">%创建 x 为 0 和 3π 之间的 200 个等间距值</span>
y <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">%创建 y 为带随机干扰的余弦值。然后，创建一个散点图</span>
sz <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">%使用大小不同的圆圈创建一个散点图</span>
c <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">%改变圆圈的颜色</span>
<span class="token function">scatter</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>sz<span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token string">'filled'</span><span class="token punctuation">)</span></code></pre>
<p><img src="https://s2.loli.net/2022/02/23/cOJl7Ty3ZQ2BXak.png" alt="image-20220223202844412"></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span>clc
x <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">tiledlayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">%调用 tiledlayout 函数以创建一个 2×1 平铺图布局</span>
ax1 <span class="token operator">=</span> nexttile<span class="token punctuation">;</span>
<span class="token comment">%调用 nexttile 函数以创建坐标区对象 ax1 和 ax2</span>
<span class="token function">scatter</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>
ax2 <span class="token operator">=</span> nexttile<span class="token punctuation">;</span>
<span class="token function">scatter</span><span class="token punctuation">(</span>ax2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'filled'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">)</span></code></pre>
<ul>
<li>Figure 10</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/23/9ewAUmLD7aSbcVB.png" alt="image-20220223202916077"></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span>clc
x <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
Z <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">cos</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>M<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">contour</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">,</span><span class="token string">'ShowText'</span><span class="token punctuation">,</span><span class="token string">'on'</span><span class="token punctuation">)</span>
 <span class="token comment">%有文字标识的等高线</span>
c<span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">% 指定线宽为3</span></code></pre>
<ul>
<li>Figure 11</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/23/XcaVhCu3BvFEHZQ.png" alt="image-20220223202935774"></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">close all<span class="token punctuation">;</span> clear<span class="token punctuation">;</span>clc
<span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Z <span class="token operator">=</span> X<span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>X<span class="token operator">.^</span><span class="token number">2</span> <span class="token operator">-</span> Y<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>DX<span class="token punctuation">,</span>DY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gradient</span><span class="token punctuation">(</span>Z<span class="token punctuation">,</span><span class="token number">.2</span><span class="token punctuation">,</span><span class="token number">.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%求梯度</span>
figure
<span class="token function">contour</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span>
hold on
<span class="token function">quiver</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>DX<span class="token punctuation">,</span>DY<span class="token punctuation">)</span></code></pre>
<ul>
<li>Figure 12</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/23/aNT6eWK7FCISpqs.png" alt="image-20220223203003924"></p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span>
<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
u <span class="token operator">=</span> x<span class="token punctuation">;</span>
v <span class="token operator">=</span> <span class="token operator">-</span>y<span class="token punctuation">;</span>
figure
<span class="token function">quiver</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span>
startx <span class="token operator">=</span> <span class="token number">0.1</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
starty <span class="token operator">=</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>startx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">streamline</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>startx<span class="token punctuation">,</span>starty<span class="token punctuation">)</span></code></pre>
<h2 id="HW01"><a href="#HW01" class="headerlink" title="HW01"></a>HW01</h2><p>与讲解篇大体相同，略去。</p>
<h2 id="HW02"><a href="#HW02" class="headerlink" title="HW02"></a>HW02</h2><ul>
<li>结构体数组的使用<ul>
<li>下面两个数组给出了元素周期表前5个元素的元素符号和相对原子质量，将其和原子序数一起保存在结构体数组element中。</li>
</ul>
</li>
</ul>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>
symbol <span class="token operator">=</span> <span class="token punctuation">[</span>"H"<span class="token punctuation">,</span>"He"<span class="token punctuation">,</span>"Li"<span class="token punctuation">,</span>"Be"<span class="token punctuation">,</span>"B"<span class="token punctuation">]</span><span class="token punctuation">;</span>
ar <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.008</span><span class="token punctuation">,</span><span class="token number">4.003</span><span class="token punctuation">,</span><span class="token number">6.941</span><span class="token punctuation">,</span><span class="token number">9.012</span><span class="token punctuation">,</span><span class="token number">10.81</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
atomic_number <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">;</span>
symbol <span class="token operator">=</span> <span class="token function">num2cell</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
ar <span class="token operator">=</span> <span class="token function">num2cell</span><span class="token punctuation">(</span>ar<span class="token punctuation">)</span><span class="token punctuation">;</span>
atomic_number <span class="token operator">=</span> <span class="token function">num2cell</span><span class="token punctuation">(</span>atomic_number<span class="token punctuation">)</span><span class="token punctuation">;</span>
element <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span>"atomic_number"<span class="token punctuation">,</span>atomic_number<span class="token punctuation">,</span>"symbol"<span class="token punctuation">,</span>symbol<span class="token punctuation">,</span>"Ar"<span class="token punctuation">,</span>ar<span class="token punctuation">)</span></code></pre>
<ul>
<li>带参数的匿名函数<ul>
<li>以匿名函数的方式实现带参数的函数，并在同一张图上画出参数 <code>[b,c]=[0,0]</code> 和 <code>[b,c]=[2,1]</code> 时，该函数在上的图像。</li>
</ul>
</li>
</ul>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>
f0 <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span> x<span class="token operator">.^</span><span class="token number">2</span> <span class="token operator">+</span> b<span class="token operator">.*</span>x <span class="token operator">+</span> c<span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">0.01</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token function">f0</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
hold on
<span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token function">f0</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h2 id="HW03"><a href="#HW03" class="headerlink" title="HW03"></a>HW03</h2><p>摆了 不做了 告辞</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li>2022 Winter MatPyFly 培训讲义</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>技术/MATLAB</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>GAN 生成对抗网络 简介</title>
    <url>/gan/</url>
    <content><![CDATA[<p>Reference 是 2021 Spring Hung-yi Lee 的机器学习的 GAN 部分。</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=4OWp0wDu6Xw&amp;list=PLJV_el3uVTsMhtt7_Y6sgTHGHp1Vb2P2J&amp;index=14">https://www.youtube.com/watch?v=4OWp0wDu6Xw&amp;list=PLJV_el3uVTsMhtt7_Y6sgTHGHp1Vb2P2J&amp;index=14</a></li>
</ul>
<a id="more"></a>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><ul>
<li>Network as Generator:<ul>
<li>Network 的输入加上一个 random variable $z$ sampled from a certain distribution.</li>
<li>使得相同的 $x$ 输入产生的输出 $y$ 不同，特别是对于那些需要“creativity”的任务.</li>
</ul>
</li>
</ul>
<h2 id="Unconditional-Generation"><a href="#Unconditional-Generation" class="headerlink" title="Unconditional Generation"></a>Unconditional Generation</h2><ul>
<li>Unconditional Generation<ul>
<li>Input: $z$, sampled from a normal distribution, low-dim vector.</li>
<li>Output: $y$, high-dim vector.</li>
<li>Generator(Network): 把简单的 distribution 放大成复杂的 distribution.</li>
<li>Discriminator: 多训练一个 Discriminator，输入一个图片，输出一个数值，越大代表输入图片越真实。</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/02/B7s6RfJOHdurVlz.png" alt="image-20220302204358282"></p>
<ul>
<li>训练步骤：<ul>
<li>Fix generator G, update discriminator D</li>
<li>Fix discriminator D, update generator G</li>
</ul>
</li>
</ul>
<h2 id="Theory-behind-GAN"><a href="#Theory-behind-GAN" class="headerlink" title="Theory behind GAN"></a>Theory behind GAN</h2><p>我们的目标是：</p>
<ul>
<li>Normal Distribution 经过 Generator G 后产生的 Distribution $P_G$，与真实的数据集的 $P_{data}$ 越接近越好。</li>
<li>$G^{*}=\arg \min _{G} \operatorname{Div}\left(P_{G}, P_{d a t a}\right)$</li>
<li>问题是，该怎么计算 $\operatorname{Div}\left(P_{G}, P_{d a t a}\right)$ 呢？</li>
<li>事实上，GAN 是在这两个 Distribution 中做 sample 来解决这个问题，也就是 Discriminator 的功能。</li>
<li>$\max_D V(D,G)$ 与 $P_G$ 和 $P_{data}$ 的 JS Divergence 有关.</li>
<li>也就是 $G^{*}=\arg \min _{G} \max _{D} V(G, D)$.</li>
</ul>
<h2 id="Tips-for-training-GAN"><a href="#Tips-for-training-GAN" class="headerlink" title="Tips for training GAN"></a>Tips for training GAN</h2><ul>
<li>JS divergence 的问题？<ul>
<li>$P_G$ 和 $P_{data}$ 往往交集不大，因为二者往往是高维空间的 manifold.</li>
<li>对于两个没有重合的分布，JS Divergence 永远是 log 2.</li>
<li>也就是说，JS Divergence 没有考虑两个 Distribution 之间的距离…</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/02/XNSAdmxy6QnHLjg.png" alt="image-20220302211540458"></p>
<p>于是，我们换一种 Divergence…</p>
<ul>
<li>Wasserstein distance<ul>
<li>两个 Distribution 之间的距离</li>
<li>让一个 Distribution 变成另一个所花费的最小代价</li>
</ul>
</li>
</ul>
<script type="math/tex; mode=display">
\max _{D \in 1-\text { Lipschitz }}\left\{E_{x \sim P_{d a t a}}[D(x)]-E_{x \sim P_{G}}[D(x)]\right\}</script><ul>
<li>1-Lipschitz 限制<ul>
<li>使得 D 足够平滑，以免出现朝向 inf 发展的情况</li>
<li>如何实现这个限制？<ul>
<li>Improved WGAN</li>
<li>SNGAN</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Evaluation-of-generation"><a href="#Evaluation-of-generation" class="headerlink" title="Evaluation of generation"></a>Evaluation of generation</h2><ul>
<li>Quality of Image</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/02/vCqfKOxlocLFbjt.png" alt="image-20220302215009447"></p>
<p>可能会出现 Mode Collapse 的现象，生成的图片比较集中，这个问题主要是由于实际的数据分布峰值有多个，而训练只拟合了其中的一个.</p>
<p><img src="https://s2.loli.net/2022/03/02/ajGgzuOA4cUn7mh.png" alt="img"></p>
<p>也可能会出现 Mode Dropping 的现象，训练只 pick 了某个特征，训练了多次以后，生成的图片人脸都是一样的，只有色调的改变。</p>
<p><img src="https://s2.loli.net/2022/03/02/c48IWslmbdftrZX.png" alt="img"></p>
<ul>
<li>How to ensure diversity:</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/02/SsDhqYEUzO3Ibvx.png" alt="image-20220302215633902"></p>
<ul>
<li>Quality 看的是一张图片丢进 Image Classifier 之后的分布是否集中，而 Diversity 看的是一组图片丢进 Image Classifier 之后分布是否均匀.</li>
</ul>
<h2 id="Conditional-Generation"><a href="#Conditional-Generation" class="headerlink" title="Conditional Generation"></a>Conditional Generation</h2><p><img src="https://s2.loli.net/2022/03/02/dTHE8nAWeGLpawb.png" alt="image-20220302220339320"></p>
<ul>
<li>Discriminator 也增加输入 $x$，只有当 G 的输出与 $x$ match 的时候才输出高分.</li>
</ul>
<p>应用：</p>
<ul>
<li>Text to image</li>
<li>Image to image</li>
<li>Sound to image</li>
</ul>
<h2 id="Learning-from-unpaired-data"><a href="#Learning-from-unpaired-data" class="headerlink" title="Learning from unpaired data"></a>Learning from unpaired data</h2><p>最直观的想法：</p>
<p><img src="https://s2.loli.net/2022/03/02/RwlZ9mcL6oQObpM.png" alt="image-20220302221524154"></p>
<p><img src="https://s2.loli.net/2022/03/02/g2YL19ds6fjetFJ.png" alt="image-20220302221623184"></p>
<p>但是，G 可能只会把 input 当成是一个 noise 来处理，在输入和输出之间没什么关系…</p>
<p>于是我们改进模型：</p>
<p><img src="https://s2.loli.net/2022/03/02/LPsAvhYX9r24Bgi.png" alt="image-20220302221820843"></p>
<p>Then we add the dual part:</p>
<p><img src="https://s2.loli.net/2022/03/02/QpL75kSsZMYawPF.png" alt="image-20220302222132643"></p>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>202202 读过的一些 Paper 总结</title>
    <url>/paper2202/</url>
    <content><![CDATA[<p>主要是对 202202 读的 Paper 的总结。</p>
<p>涉及的主要主题是 Infomation Retrieval 中的 Dense Retrieval.</p>
<a id="more"></a>
<h1 id="Pre-training-Methods-in-Information-Retrieval"><a href="#Pre-training-Methods-in-Information-Retrieval" class="headerlink" title="Pre-training Methods in Information Retrieval"></a>Pre-training Methods in Information Retrieval</h1><blockquote>
<p>Fan Y, Xie X, Cai Y, et al. Pre-training Methods in Information Retrieval[J]. arXiv preprint arXiv:2111.13853, 2021.</p>
</blockquote>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>这是一篇研究预训练在 IR 中应用的<strong>文献综述</strong>。</p>
<p>论文中首先介绍了 IR 是什么，然后介绍了预训练模式在 IR 中的应用，包括 Retrieval Component, Re-ranking Component 和 Other Component。</p>
<p>此外，还包括专门为 IR 定制的预训练任务的介绍。</p>
<p>然后，论文介绍了 IR 中使用预训练方法可能用到的资源，包括数据集 benchmark 和 leaderboard. </p>
<p>然后作者提出了目前 预训练 + IR 存在的挑战，给出了未来可能的工作前景。</p>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><h3 id="Intro-amp-Background"><a href="#Intro-amp-Background" class="headerlink" title="Intro &amp; Background"></a>Intro &amp; Background</h3><ul>
<li>什么是 IR？<ul>
<li>从一个大规模的答案语料集合中找回跟用户的请求有关的信息</li>
<li>可能相关的结果有多个，所以需要定义“相关性得分”</li>
</ul>
</li>
<li>什么是预训练？（略去）</li>
<li>从不同的视角来看待 IR 问题<ul>
<li>Core Problem View: 核心的问题是计算 Query q 和 Document d 的相似度</li>
<li>Framework View: Retrieval Process，returns top-k most relative results</li>
<li>System View: Given a query q, output a sorted list of documents…</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/03/z58qKF7OWJL4YAv.png" alt="image-20220303221755076"></p>
<h3 id="Retrieval-Component"><a href="#Retrieval-Component" class="headerlink" title="Retrieval Component"></a>Retrieval Component</h3><p>在这里补充 Sparse Retrieval 和 Dense Retrieval 的补充知识。</p>
<p>不管是 Sparse Retrieval 还是 Dense Retrieval 都是使用某个处理程序将文书处理成某种特殊的表示，并对这种特殊的表示建立索引，下面我们详细介绍。</p>
<p>Sparse Retrieval 是指 token-level 的切分，常见的算法如 TF-IDF 和 BM25。这两种算法的运作方式在 <a href="https://c7w.tech/elasticsearch/">https://c7w.tech/elasticsearch/</a> 的第一节进行过相关介绍，这里直接对其进行引用：</p>
<blockquote>
<ul>
<li>TF-IDF</li>
</ul>
<p>TF 是指归一化的词频，IDF 是指逆文档频率。给定文档集合 $D$，有 $d_i \in D, 1 \le i \le n$. </p>
<p>文档集合总共包含 $m$ 个词，去除一些十分常见的词作为停用词（Stop Words），有 $w_i \in W, 1 \le i \le m$.</p>
<p>定义 TF 如下，即一篇文档中某个词出现的频率：</p>
<script type="math/tex; mode=display">
\text{TF}(q_i, d_j) = \dfrac {f_{i, d_j}}{ |d_j| }</script><p>TF 只能描述词在文档中的频率，但假设现在有个词为“我们”，这个词可能在文档集 $D$ 中每篇文档中都会出现，并且有较高的频率。那么这一类词就不具有很好的区分文档的能力，为了降低这种通用词的作用，引入了 IDF：</p>
<script type="math/tex; mode=display">
\text{IDF}(q_i) = \ln \dfrac {|D|}{|\{d_i  : q_i \in d_i \}|}</script><p>于是我们综合这两部分， 便可以得到 TF-IDF：</p>
<script type="math/tex; mode=display">
\text{TF-IDF} = \text{TF} * \text{IDF}</script><p>TF 可以计算在一篇文档中词出现的频率，而 IDF 可以降低一些通用词的作用。因此对于一篇文档我们可以用文档中每个词的 TF−IDF 组成的向量来表示该文档，再根据余弦相似度这类的方法来计算文档之间的相关性。</p>
<ul>
<li>BM25</li>
</ul>
<p>BM25 是信息索引领域用来计算 query 与文档相似度得分的经典算法。</p>
<p>不同于 TF-IDF，BM25 的公式主要由三个部分组成：</p>
<ol>
<li>query 中每个单词 $q_i$ 与文档 $d$ 之间的相关性</li>
<li>单词 $q_i$ 与 query 之间的相似性</li>
<li>每个单词的权重</li>
</ol>
<p>BM25 算法的一般公式：</p>
<script type="math/tex; mode=display">
score(Q,d) = \sum_i^n W_i R(q_i, d)</script><p>其中 $Q$ 表示 query，$q_i \in Q$，$d$ 表示 document.</p>
<p>下展开介绍各部分公式：</p>
<ul>
<li><strong>$W_i$</strong></li>
</ul>
<script type="math/tex; mode=display">
W_i = IDF(q_i) = \ln \dfrac {N-df_i+0.5}{df_i+0.5}</script><p>其中 $N$ 是 document 总数，$df_i$ 表示含有 $q_i$ 的文档总数。</p>
<p>依据 IDF 的作用，对于某个 $q_i$ ，包含 $q_i$ 的文档数越多，说明 $q_i$ 重要性越小，或者区分度越低，IDF 越小，因此 IDF 可以用来刻画 $q_i$ 与文档的相似性。</p>
<ul>
<li><strong>$R(q_i, d)$</strong></li>
</ul>
<p>BM25 的设计依据一个重要的发现：<strong>词频和相关性之间的关系是非线性的</strong>，也就是说，每个词对于文档的相关性分数不会超过一个特定的阈值，当词出现的次数达到一个阈值后，其影响就不在线性增加了，而这个阈值会跟文档本身有关。</p>
<script type="math/tex; mode=display">
R(q_i, d) = \dfrac {f_i \cdot (k_1+1)}{f_i+K} \cdot \dfrac {qf_i \cdot(k_2+1)}{qf_i+k_2}</script><p>我们可以分成两部分来看待上述公式，其中 $f_i$ 为 $q_i$ 在 $d$ 中出现的次数，$k_1, k_2, K$ 是常数。</p>
<p>后一部分 $\dfrac {qf_i \cdot(k_2+1)}{qf_i+k_2}$ 在控制 $q_i$ 和 Query 的相似度。</p>
<p>前一部分在计算 $q_i$ 与 $d$ 的相似度，其中 $K = k_1 \cdot (1-b+b\cdot \dfrac {|d|}{AVG_n(|d|)})$，参数 $b$ 在调节文本长度对相关性的影响。</p>
<p>不失一般性地我们可以取 $k_1 = 2, k_2 = 0, b = 0.75$.</p>
<p>反正在接下来的运用也是大调库，调参数可以通过更改配置文件来进行。</p>
<p><s>写到这里发现之前 Promise 的 Elasticsearch 8.0 的教程还没开始写…下次一定下次一定</s></p>
</blockquote>
<p>也就是说，我们把每篇 Document $d$ 首先进行 token-level 的切分并计算每个 token 的相应得分，建立起 token 对 document 的倒排索引。然后每当 Query $q$ 来临的时候，直接对 $q$ 进行切分，根据相应的倒排索引查询出对应分数加起来得到每篇文章的相似性得分，然后排序就好。</p>
<p>这里用到的数据结构就是这种倒排索引结构。</p>
<p>而 Dense Retrieval 则不同，正如其名字中的 “Dense” 所说，我们把每篇 Document $d$ 通过一个 Encoder. Say, BERT $\phi$, 然后通过 $\phi(d)[cls]$ 来作为其表示。</p>
<p>当 Query 来临的时候，我们将 Query q 通过相同的 BERT $\phi$ 得到 $\phi(q)$，我们要求解 top-k d 的集合使得 $\max Sim(\phi(q), \phi(d))$.</p>
<p>这里可以用到组织欧式空间内向量的数据结构，比如 FAISS，其实现是对欧式空间做分划。有点像搜索树的感觉？回头再详细读一读相关教程吧。用这个数据结构主要是为了找出距离某个向量最近的 k 个相同线性空间中的向量。</p>
<p>此外，为什么不用一个 BERT $\psi$ 做 $\psi( q + \text{‘[sep]’} + d)$ 呢？因为这样计算效率对于每个 q 都铁是 $O(d)$ 的，且因为每次计算都要过一个 BERT，复杂度极大。从时间效率上来说不考虑，后续我们 Re-ranker 中会这么用，因为我们已经取到了 top-k 了，这里 $k \ll d$.</p>
<p>下面是两种方法应用 Pretrain Method 的可能方法：</p>
<h4 id="Sparse-Retrieval"><a href="#Sparse-Retrieval" class="headerlink" title="Sparse Retrieval"></a>Sparse Retrieval</h4><ul>
<li>Term re-weighting: measure term weights with contextual semantics.</li>
<li>Document Expansion: expanding documents or queries.</li>
<li>Re-weighting + expansion</li>
<li>Sparse Representation learning</li>
</ul>
<h4 id="Dense-Retrieval"><a href="#Dense-Retrieval" class="headerlink" title="Dense Retrieval"></a>Dense Retrieval</h4><ul>
<li><strong>Use pretrained models as encoders, then fine-tune them accordingly.</strong></li>
<li>Use specific tasks to pretrain for IR</li>
<li>Fine-tuning: distill; using informative negative models;</li>
</ul>
<h4 id="Hybrid-Retrieval"><a href="#Hybrid-Retrieval" class="headerlink" title="Hybrid Retrieval"></a>Hybrid Retrieval</h4><h3 id="Re-ranker-Component"><a href="#Re-ranker-Component" class="headerlink" title="Re-ranker Component"></a>Re-ranker Component</h3><ul>
<li>Representation focused $relevance = f(PLM(Q), PLM(D))$</li>
<li>Interaction focused $relevance=f(PLM(Q,D))$</li>
</ul>
<p>其中第二种就是上述提过的用 BERT $\psi$ 的方法。</p>
<h3 id="Other-Component"><a href="#Other-Component" class="headerlink" title="Other Component"></a>Other Component</h3><p>Query Understanding:</p>
<ul>
<li>Query expansion</li>
<li>Query rewriting</li>
<li>Query suggestion$^*$</li>
<li>Search Clarification</li>
<li>Personalized Search</li>
</ul>
<p>Document Summarization</p>
<ul>
<li>Generic Document Summarization</li>
<li>Snippet Generation</li>
<li>Keyphrase Extraction</li>
</ul>
<h1 id="Latent-Retrieval-for-Weakly-Supervised-Open-Domain-Question-Answering"><a href="#Latent-Retrieval-for-Weakly-Supervised-Open-Domain-Question-Answering" class="headerlink" title="Latent Retrieval for Weakly Supervised Open Domain Question Answering"></a>Latent Retrieval for Weakly Supervised Open Domain Question Answering</h1><p>Lee K, Chang M W, Toutanova K. Latent retrieval for weakly supervised open domain question answering[J]. arXiv preprint arXiv:1906.00300, 2019.</p>
<h2 id="Background-Infomation"><a href="#Background-Infomation" class="headerlink" title="Background Infomation"></a>Background Infomation</h2><ul>
<li>什么是 Open Domain 的 QA？简称 ODQA，中文翻译为开放式问答，意为基于涵盖广泛主题的文本集合给出问题答案。</li>
</ul>
<p><strong>Definition</strong>: Formally speaking, to give an answer based on the document collection covering wide range of topics is called open-domain question answering (ODQA). </p>
<p><strong>Challenges</strong>: The ODQA task combines the challenges of document retrieval (finding the relevant articles) with that of machine comprehension of text (identifying the answer span from those articles).</p>
<p><strong>Architecture</strong>: There are several approaches to the architecture of an ODQA system. A modular ODQA system consists of two components, the first one (<strong>the ranker</strong>) should be able to find the relevant articles in a database (e.g., Wikipedia), whereas the second one (<strong>the reader</strong>) extracts an answer from a single article or a small collection of articles retrieved by the ranker. In addition to the strictly two-component ODQA systems, there are hybrid systems that are based on several rankers where the last ranker in the pipeline is combined with an answer extraction module usually via reinforcement learning.</p>
<ul>
<li>什么是 Latent Variable?</li>
</ul>
<p>In statistics, latent variables (from Latin: present participle of lateo (“lie hidden”), as opposed to observable variables) are variables that are not directly observed but are rather inferred (through a mathematical model) from other variables that are observed (directly measured).</p>
<h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>现有的方法：要么 supervise 给定相应回答的证据，要么内嵌一个 IR 系统。We show for the first time that <strong>it is possible to jointly learn the retriever and reader from question-answer string pairs and without any IR system</strong>。</p>
<p>（Review 现有的：① DrQA 2017，训练时用 question-answer-evidence pair，测试时抓一个 IR 系统过来生成 evidence. ② TriviaQA, SearchQA, Quasar，弱监督，也是依赖 IR 去生成 evidence）</p>
<p><img src="https://s2.loli.net/2022/03/03/lTs5BWSYxE1bXpa.png" alt="image-20220206154839449"></p>
<p>但是 QA 和 IR 不同，因为 IR 更关注词义和词性的 matching，但是 QA 更侧重于问题理解和答案理解。</p>
<h2 id="Approach-Feature"><a href="#Approach-Feature" class="headerlink" title="Approach / Feature"></a>Approach / Feature</h2><p>In this work, we introduce the first Open Retrieval Question Answering system (ORQA). <strong>ORQA learns to retrieve evidence from an open corpus, and is supervised only by question-answer string pairs.</strong></p>
<p>The key insight of this work is that end-to-end learning is possible if we pre-train the retriever with an unsupervised <strong>Inverse Cloze Task (ICT)</strong>. </p>
<p><strong>What is ICT?</strong> In ICT, a sentence is treated as a pseudo question, and its context is treated as pseudo evidence. Given a pseudo-question, ICT requires selecting the corresponding pseudo-evidence out of the candidates in a batch.</p>
<p>An important aspect of ORQA is its expressivity—it is capable of retrieving any text in an open corpus, rather than being limited to the closed set returned by a blackbox IR system. </p>
<h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h2><h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><p>依旧是魔改 BERT。 $Score = S_{retr} + S_{read}$</p>
<ul>
<li>Retriever component</li>
</ul>
<script type="math/tex; mode=display">
h_q = W_q \ \ (\text{BERT}_Q(q)[\text{CLS}]) \\ 
h_b = W_b \ \ (\text{BERT}_B(b)[\text{CLS}]) \\ 
S_{retr}(b,q) = h_q^Th_b</script><ul>
<li>Reader component</li>
</ul>
<script type="math/tex; mode=display">
\begin{aligned}
  h_{\text {start }} &=\operatorname{BERT}_{R}(q, b)[\operatorname{START}(s)] \\
  h_{\text {end }} &=\operatorname{BERT}_{R}(q, b)[\operatorname{END}(s)] \\
  S_{\text {read }}(b, s, q) &=\operatorname{MLP}\left(\left[h_{\text {start }} ; h_{\text {end }}\right]\right)
  \end{aligned}</script><p>但是目前存在的问题就是数据集太大了(Wikipedia)，干扰也太多，简单的方法没法 Train。于是提出 ICT。</p>
<h3 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h3><ul>
<li>Inverse Cloze Task: 一种 Pretrain 的方法</li>
</ul>
<p>Since this is impractical to learn from scratch, we pre-train the retriever with an Inverse Cloze Task. We evaluate on open versions of five QA datasets.</p>
<p>先考虑为什么传统的 question-evidence 方法能奏效，这是因为首先 evidence 包含了 question 所要的信息，只不过是多含有了一些 question 不需要的信息。于是这种 question-context 的方法本质上是将与 question 在语义上相近的 context 取作 evidence.</p>
<p>于是我们就提出 Inverse Cloze Task. 注意到 Close Task（完形填空）就是基于 context 预测 masked 的文本。（<strong>ICT 任务是什么</strong>）而 ICT 则是给定一个句子，预测它的 context.</p>
<script type="math/tex; mode=display">
P_{ICT}(b | q) = \dfrac {\exp(S_{retr}(b, q))}{\sum_{b' \in BATCH} S_{retr}(b', q)}</script><p>其中 q 是随机句子，BATCH-{b} 是随机 sample 出来做 negative samples 的，b 是 q 对应的 context.</p>
<h3 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h3><p>Evaluation was carried out on the following datasets:</p>
<ul>
<li>Natural Questions</li>
<li>WebQuestions</li>
<li>CuratedTrec</li>
<li>TriviaQA</li>
<li>SQuAD</li>
</ul>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We presented ORQA, the first open domain question answering system where the retriever and reader are jointly learned end-to-end using only question-answer pairs and without any IR system. </p>
<p>This is made possible by pre-training the retriever using an Inverse Cloze Task (ICT). </p>
<p>Experiments show that learning to retrieve is crucial when the questions reflect an information need, i.e. <strong>the question writers do not already know the answer</strong>.</p>
<h1 id="Domain-matched-pre-training-tasks-for-dense-retrieval"><a href="#Domain-matched-pre-training-tasks-for-dense-retrieval" class="headerlink" title="Domain-matched pre-training tasks for dense retrieval"></a>Domain-matched pre-training tasks for dense retrieval</h1><h2 id="Motivation-1"><a href="#Motivation-1" class="headerlink" title="Motivation"></a>Motivation</h2><p>IR is a exception that pre-training doesn’t produce convincing results. But with right setup, this barrier could be overcome.</p>
<p>So what is a right setup?</p>
<p>It’s been generally accepted that the more similar the end task is to the pre-training task, the larger the gains. We hypothesise that previously proposed pretraining tasks might be still too distant from the target task, which limits useful transfer.</p>
<h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><p>We therefore investigate pre-training tasks for retrieval which are as closely matched to the the target task and domain as possible. To this end, we propose using two corpora for retrieval pre-training:</p>
<p>1) 65M synthetically generated question-answer pairs.<br>2) A corpus of 220 million post-comment pairs from Reddit, which we use for dialogue retrieval tasks.</p>
<p>Finally we can prove that:</p>
<ol>
<li>pre-training leads to strong achievements in both cases</li>
<li>domain similarity and task similarity both matters</li>
<li>the retrieval can benefit from larger models</li>
</ol>
<h2 id="Dense-Retrieval-1"><a href="#Dense-Retrieval-1" class="headerlink" title="Dense Retrieval"></a>Dense Retrieval</h2><h3 id="Bi-encoder-architecture"><a href="#Bi-encoder-architecture" class="headerlink" title="Bi-encoder architecture"></a>Bi-encoder architecture</h3><p>Query encoder $E_Q$, passage encoder $E_p$, both output a fixed $d$-dim representation for each query / passage.</p>
<p>Passages are pre-processed offline, and their representations are indexed using a fast vector similarity search library such as FAISS(?)</p>
<p>Then when an query $q$ arrives we can use $E_Q(q)$ as its representation and use the index library to get the top-k closest passages.</p>
<h3 id="Training-1"><a href="#Training-1" class="headerlink" title="Training"></a>Training</h3><p>Given a query, a relevant (+) passage and a list of non-relevant (-) passages, the network is trained to minimize the <strong>negative log likelihood</strong> of picking the positive passage. And the probability assigned to each passage is proportional to $e^{sim(query, passage)}$.</p>
<p>We do training in two steps:</p>
<ul>
<li>use a single BM25 negative per query</li>
<li>use hard negatives obtained using the first round model</li>
</ul>
<h2 id="Experimental-setup"><a href="#Experimental-setup" class="headerlink" title="Experimental setup"></a>Experimental setup</h2><h3 id="Pre-training-tasks"><a href="#Pre-training-tasks" class="headerlink" title="Pre-training tasks"></a>Pre-training tasks</h3><ul>
<li>PAQ</li>
<li>Reddit</li>
</ul>
<h3 id="Evaluation-tasks"><a href="#Evaluation-tasks" class="headerlink" title="Evaluation tasks"></a>Evaluation tasks</h3><ul>
<li>Passage retrieval<ul>
<li>MSMARCO</li>
<li>Natural Questions</li>
<li>KILT</li>
</ul>
</li>
<li>Dialogue retrieval (to show the generality of conclusions)<ul>
<li>ConvAI2</li>
<li>Ubuntu v2</li>
<li>DSTC7</li>
</ul>
</li>
</ul>
<h1 id="Unsupervised-Corpus-Aware-Language-Model-Pre-training-for-Dense-Passage-Retrieval"><a href="#Unsupervised-Corpus-Aware-Language-Model-Pre-training-for-Dense-Passage-Retrieval" class="headerlink" title="Unsupervised Corpus Aware Language Model Pre-training for Dense Passage Retrieval"></a>Unsupervised Corpus Aware Language Model Pre-training for Dense Passage Retrieval</h1><h2 id="Motivation-2"><a href="#Motivation-2" class="headerlink" title="Motivation"></a>Motivation</h2><p>However, dense retrievers are hard to train, typically requiring heavily engineered fine-tuning pipelines to realize their full potential.</p>
<ul>
<li>iterative negative mining</li>
<li>multi-vector representations</li>
</ul>
<p>In this paper, we identify and address two underlying problems of dense retrievers: </p>
<p>i) fragility to training data noise </p>
<p>ii) requiring large batches to robustly learn the embedding space.</p>
<p>Then we try to give a hypothesis about why RocketQA (denoising + large batch size) succeeded. </p>
<ul>
<li>Denoising -&gt; remove mislabelled samples</li>
<li>Large bs -&gt; CLS vectors are not well trained, large training batches just helps the LM to learn to form the full embedding space.</li>
</ul>
<h2 id="Approach-1"><a href="#Approach-1" class="headerlink" title="Approach"></a>Approach</h2><p>We use the recently proposed Condenser pre-training architecture, which learns to condense information into the dense vector through LM pre-training. (?)</p>
<p> On top of it, we propose coCondenser, which adds an unsupervised corpus-level contrastive loss (?) to warm up the passage embedding space.</p>
<p>Then we could think up a way that could realize the two goals without these two approaches.</p>
<ul>
<li>Noise resistance -&gt; use Condenser pre-training architecture</li>
<li>Introduce a corpus-level contrastive learning objective: at each training step sample text pairs; train the model such that the CLS embeddings of text pairs from the same doc are close and those from different documents are far apart.</li>
</ul>
<p>-&gt; Combinating the two, propose coCondenser pre-training method.</p>
<h2 id="Experiment-Method"><a href="#Experiment-Method" class="headerlink" title="Experiment Method"></a>Experiment Method</h2><h3 id="Architecture-1"><a href="#Architecture-1" class="headerlink" title="Architecture"></a>Architecture</h3><ul>
<li><p>Based on Condenser</p>
</li>
<li><p>Added contrastive loss to loss function</p>
</li>
</ul>
<h3 id="Memory-efficient-Pretraining"><a href="#Memory-efficient-Pretraining" class="headerlink" title="Memory-efficient Pretraining"></a>Memory-efficient Pretraining</h3><ul>
<li>Gradient Caching</li>
</ul>
<h3 id="Pre-training"><a href="#Pre-training" class="headerlink" title="Pre-training"></a>Pre-training</h3><ul>
<li>Universal</li>
<li>Corpus aware</li>
</ul>
<h3 id="Evaluation-1"><a href="#Evaluation-1" class="headerlink" title="Evaluation"></a>Evaluation</h3><ul>
<li>Wikipedia</li>
<li>MS-MARCO</li>
</ul>
<h1 id="Sparse-Dense-and-Attentional-Representations-for-Text-Retrieval"><a href="#Sparse-Dense-and-Attentional-Representations-for-Text-Retrieval" class="headerlink" title="Sparse, Dense, and Attentional Representations for Text Retrieval"></a>Sparse, Dense, and Attentional Representations for Text Retrieval</h1><p>Luan Y, Eisenstein J, Toutanova K, et al. Sparse, dense, and attentional representations for text retrieval[J]. Transactions of the Association for Computational Linguistics, 2021, 9: 329-345.</p>
<p>这篇文章在进行理论推导的时候比较偏数学证明.</p>
<h2 id="Motivation-3"><a href="#Motivation-3" class="headerlink" title="Motivation"></a>Motivation</h2><p>（首先对比 Dense Retrieval 与传统的 Sparse Retrieval.）Dual encoders perform retrieval by encoding documents and queries into dense low-dim vectors, scoring each document by its inner product with the query. We investigate the capacity of this architecture relative to sparse bag-of-words models and attentional neural networks. </p>
<p>下面是 Review 部分：</p>
<ul>
<li>Sparse Retrieval: more recent work has adopted a <strong>two-stage retrieval and ranking pipeline</strong>, where a large number of documents are retrieved using sparse high dimensional query/document representations, and are further reranked with learned neural models</li>
<li>Dense Retrieval: A promising alternative is to perform first-stage retrieval using learned dense low-dimensional encodings of documents and queries. The dual encoder model scores each document by the inner product between its encoding and that of the query.</li>
</ul>
<p>这两者的启发是不同的。Sparse Retrieval 更加看重的是 question 中的重点术语会与 retrieved document 中的术语重合，而 Dense Retrieval 更加关注的是语义上的相似度。</p>
<h3 id="Analyzing-dual-encoder-fidelity"><a href="#Analyzing-dual-encoder-fidelity" class="headerlink" title="Analyzing dual encoder fidelity"></a>Analyzing dual encoder fidelity</h3><p>这里 fidelity 可以理解为忠诚度，对原文术语的记忆程度。</p>
<p>And that is, how much can we compress the input while maintaining the ability to mimic the performance of bag-of-words retrieval?</p>
<p>Section 2 里证明了：Fidelity is important for the sub-problem of detecting precise term overlap, and is a tractable proxy for capacity. Using the theory of dimensionality reduction, we relate fidelity to the normalized margin between the gold retrieval result and its competitors, and show that this margin is in turn related to the length of documents in the collection. （没仔细看证明过程）。</p>
<h2 id="Approach-Feature-1"><a href="#Approach-Feature-1" class="headerlink" title="Approach / Feature"></a>Approach / Feature</h2><p>Building on these insights, we propose a simple neural model that combines the efficiency of dual encoders with some of the expressiveness of more costly attentional architectures, and <strong>explore sparse-dense hybrids</strong> to capitalize on the precision of sparse retrieval. These models outperform strong alternatives in large-scale retrieval.</p>
<h3 id="Multi-vector-Encodings"><a href="#Multi-vector-Encodings" class="headerlink" title="Multi-vector Encodings"></a>Multi-vector Encodings</h3><p>The theoretical analysis suggests that fixed-length vector representations of documents may in general need to be large for long documents, if fidelity with respect to sparse high-dimensional representations is important. </p>
<p><img src="https://s2.loli.net/2022/03/03/49CxJ7kebNZIUX8.png" alt="image-20220206184818740"></p>
<h3 id="Hybrid"><a href="#Hybrid" class="headerlink" title="Hybrid"></a>Hybrid</h3><p> A natural approach to balancing between the fidelity of sparse representations and the generalization of learned dense ones is to build a hybrid. </p>
<p>To do this, we linearly combine a sparse and dense system’s scores using a single trainable weight λ, tuned on a development set.</p>
<h2 id="Experiment-1"><a href="#Experiment-1" class="headerlink" title="Experiment"></a>Experiment</h2><ul>
<li>Retrieval for Open-domain QA</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/03/TlN3it8aIQGoXbY.png" alt="image-20220206185657503"></p>
<ul>
<li>Large Scale Supervised IR</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/03/CjMy6aTvVzhiBDm.png" alt="image-20220206185728980"></p>
<h2 id="Conclusion-1"><a href="#Conclusion-1" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We have used both theoretical and empirical techniques to characterize the fidelity of fixed-length dual encoders, focusing on the role of document length. </p>
<p>Based on these observations, we propose hybrid models that yield strong performance while maintaining scalability.</p>
<h1 id="Condenser-a-pretraining-architecture-for-dense-retrieval"><a href="#Condenser-a-pretraining-architecture-for-dense-retrieval" class="headerlink" title="Condenser: a pretraining architecture for dense retrieval"></a>Condenser: a pretraining architecture for dense retrieval</h1><h2 id="Motivation-4"><a href="#Motivation-4" class="headerlink" title="Motivation"></a>Motivation</h2><p>However, dense encoders require a lot of data and sophisticated techniques to effectively train and suffer in low data situations. </p>
<p>Reasons?</p>
<p>This paper finds a key reason is that standard LMs’ internal attention structure is not ready-to-use for dense encoders, which needs to aggregate text information into the dense representation.</p>
<p>Attention patterns, therefore, define how effective CLS can aggregate information. </p>
<p>In other words, the CLS token remains dormant in many middle layers and reactivates only in the last round of attention. </p>
<h2 id="Approach-2"><a href="#Approach-2" class="headerlink" title="Approach"></a>Approach</h2><p>We propose to pre-train towards dense encoder with a novel Transformer architecture, Condenser, where LM prediction CONditions on DENSE Representation. </p>
<h2 id="Experiment-2"><a href="#Experiment-2" class="headerlink" title="Experiment"></a>Experiment</h2><h3 id="Architecture-2"><a href="#Architecture-2" class="headerlink" title="Architecture"></a>Architecture</h3><p><img src="https://s2.loli.net/2022/03/03/6hteHNfrpa1Odg7.png" alt="image-20220205153145624"></p>
<ul>
<li>Pre-train </li>
</ul>
<p>重点是 Head 的设计，我们为了让 CLS 里塞入更多的信息，在 head 这一层把 LATE 的 CLS 和 EARLY 的 其他 OUTPUT 给 CAT 起来，作为输入塞给 Head 然后这里主要是为了调整 CLS 的表示力度。</p>
<p>为了避免 head 让 back 部分的 encoding 坏掉，loss 设置为 $L = L_{mlm} + L_{mlm}^c$.</p>
<p>$L_{mlm} = \sum_{i \in masked} CrossEntropy(Wh_i^{cd}, x_i)$</p>
<p>$L_{mlm}^c = \sum _ {i \in masked} CrossEntropy(Wh_i^{late}, x_i)$</p>
<ul>
<li>Fine tune</li>
</ul>
<p>fine tune 的时候直接把这个 head 给 drop 掉，变成了普普通通的 Transformer 模型.</p>
<h3 id="Fine-tuning"><a href="#Fine-tuning" class="headerlink" title="Fine tuning"></a>Fine tuning</h3><ol>
<li>Sentence Similarity</li>
</ol>
<p>Semantic Textual Similarity Benchmark</p>
<p>Wikipedia Section Distinction</p>
<ol>
<li>Retrieval for Open QA</li>
</ol>
<ul>
<li>NQ</li>
<li>TriviaQA</li>
</ul>
<ol>
<li>Retrieval for web search</li>
</ol>
<ul>
<li>MS MARCO</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h1 id="PRE-TRAINING-TASKS-FOR-EMBEDDING-BASED-LARGE-SCALE-RETRIEVAL"><a href="#PRE-TRAINING-TASKS-FOR-EMBEDDING-BASED-LARGE-SCALE-RETRIEVAL" class="headerlink" title="PRE-TRAINING TASKS FOR EMBEDDING-BASED LARGE-SCALE RETRIEVAL"></a>PRE-TRAINING TASKS FOR EMBEDDING-BASED LARGE-SCALE RETRIEVAL</h1><p>Chang W C, Yu F X, Chang Y W, et al. Pre-training tasks for embedding-based large-scale retrieval[J]. arXiv preprint arXiv:2002.03932, 2020.</p>
<h2 id="Motivation-5"><a href="#Motivation-5" class="headerlink" title="Motivation"></a>Motivation</h2><p>Unlike the scoring phase witnessing significant advances recently due to the BERT-style pre-training tasks on cross-attention models, <strong>the retrieval phase remains less well studied. </strong></p>
<p>Most previous works rely on classic Information Retrieval (IR) methods such as BM-25 (token matching + TF-IDF weights). <strong>These models only accept sparse handcrafted features and can not be optimized for different downstream tasks of interest. </strong></p>
<h2 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h2><p>In this paper, we conduct a comprehensive study on the <strong>embedding-based retrieval models</strong>. (Namely Dense Retrieval!)</p>
<p>We show that the <strong>key ingredient</strong> of learning a strong embedding-based Transformer model is <strong>the set of pre-training tasks</strong>. With adequately designed paragraph-level pre-training tasks, the Transformer models can remarkably improve over the widely-used BM-25 as well as embedding models without Transformers. The paragraph-level pre-training tasks we studied are <strong>Inverse Cloze Task (ICT), Body First Selection (BFS), Wiki Link Prediction (WLP)</strong>, and <strong>the combination of all three</strong>.</p>
<p>We contribute the following insight:</p>
<ul>
<li>The two-tower Transformer models (Retrieval Stage + Reranking stage) with proper pre-training can significantly outperform the widely used BM-25 algorithm;</li>
<li>Paragraph-level pre-training tasks such as Inverse Cloze Task (ICT), Body First Selection (BFS), and Wiki Link Prediction (WLP) hugely improve the retrieval quality, whereas the most widely used pre-training task (the token-level masked-LM) gives only marginal gains <em>( marginal: small and not important)</em></li>
<li>The two-tower models with deep transformer encoders benefit more from paragraph-level pre-training compared to its shallow bag-of-word counterpart </li>
</ul>
<h1 id="From-doc2query-to-docTTTTTquery"><a href="#From-doc2query-to-docTTTTTquery" class="headerlink" title="From doc2query to docTTTTTquery"></a>From doc2query to docTTTTTquery</h1><p>Nogueira R, Lin J, Epistemic A I. From doc2query to docTTTTTquery[J]. Online preprint, 2019, 6.</p>
<h2 id="Motivation-6"><a href="#Motivation-6" class="headerlink" title="Motivation"></a>Motivation</h2><p>Nogueira et al. [7] used a simple sequence-to-sequence transformer [9] for <strong>document expansion</strong>. We <strong>replace the transformer with T5</strong> [8] and observe large effectiveness gains.</p>
<h1 id="Document-Expansion-by-Query-Prediction"><a href="#Document-Expansion-by-Query-Prediction" class="headerlink" title="Document Expansion by Query Prediction"></a>Document Expansion by Query Prediction</h1><h2 id="Motivation-7"><a href="#Motivation-7" class="headerlink" title="Motivation"></a>Motivation</h2><p>One technique to improve the retrieval effectiveness of a search engine is to expand documents with terms that are related or representative of the documents’ content</p>
<h2 id="Feature-1"><a href="#Feature-1" class="headerlink" title="Feature"></a>Feature</h2><p>Following this observation, we propose a simple method that predicts which queries will be issued for a given document and then expands it with those predictions with a vanilla sequence-to-sequence model, trained using datasets consisting of pairs of query and relevant documents.</p>
<ul>
<li>Method [Doc2Query]: For each document, the task is to predict a set of queries for which that document will be relevant.<ul>
<li>Given a dataset of (query, relevant document) pairs, we use a sequence-to-sequence transformer model (Vaswani et al., 2017) that takes as an input the document terms and produces a query.</li>
<li>The document and target query are segmented using BPE (Sennrich et al., 2015) after being tokenized with the Moses tokenizer.1 </li>
<li>Once the model is trained, we predict 10 queries using top-k random sampling and append them to each document in the corpus.</li>
</ul>
</li>
</ul>
<p>然后用 BM25 作为 Retriever，增广后的 Document 代替原有 Document.</p>
<h2 id="Experiment-3"><a href="#Experiment-3" class="headerlink" title="Experiment"></a>Experiment</h2><p>Evaluation was carried out on:</p>
<ul>
<li>MS MARCO</li>
<li>TREC-CAR</li>
</ul>
<h1 id="ColBERT-Efficient-and-Effective-Passage-Search-via-Contextualized-Late-Interaction-over-BERT"><a href="#ColBERT-Efficient-and-Effective-Passage-Search-via-Contextualized-Late-Interaction-over-BERT" class="headerlink" title="ColBERT: Efficient and Effective Passage Search via Contextualized Late Interaction over BERT"></a>ColBERT: Efficient and Effective Passage Search via Contextualized Late Interaction over BERT</h1><h2 id="Motivation-8"><a href="#Motivation-8" class="headerlink" title="Motivation"></a>Motivation</h2><p>While remarkably effective, the ranking models based on these LMs increase computational cost by orders of magnitude over prior approaches, particularly as they must feed each query–document pair through a massive neural network to compute a single relevance score</p>
<h2 id="Feature-2"><a href="#Feature-2" class="headerlink" title="Feature"></a>Feature</h2><p> To tackle this, we present ColBERT, a novel ranking model that adapts deep LMs (in particular, BERT) for efficient retrieval. </p>
<p>ColBERT introduces <strong>a late interaction architecture </strong>that independently encodes the query and the document using BERT and then employs a cheap yet powerful interaction step that models their fine-grained similarity. </p>
<p>Under late interaction, 𝑞 and 𝑑 are separately encoded into two sets of contextual embeddings, and relevance is evaluated using cheap and pruning-friendly computations between both sets—that is, fast computations that enable ranking without exhaustively evaluating every possible candidate.</p>
<p><img src="https://s2.loli.net/2022/03/03/4TBhui5CsP8fWSb.png" alt="image-20220209150841730"></p>
<h1 id="Complement-Lexical-Retrieval-Model-with-Semantic-Residual-Embeddings"><a href="#Complement-Lexical-Retrieval-Model-with-Semantic-Residual-Embeddings" class="headerlink" title="Complement Lexical Retrieval Model with Semantic Residual Embeddings"></a>Complement Lexical Retrieval Model with Semantic Residual Embeddings</h1><h2 id="Feature-3"><a href="#Feature-3" class="headerlink" title="Feature"></a>Feature</h2><p>This paper presents <em>clear</em>, a retrieval model that seeks to complement classical lexical exact-match models such as BM25 with semantic matching signals from a neural embedding matching model.</p>
<h2 id="Approach-3"><a href="#Approach-3" class="headerlink" title="Approach"></a>Approach</h2><p>clear consists of a lexical retrieval model and an embedding retrieval model. Between these two models, one’s weakness is the other’s strength: lexical retrieval performs exact token matching but cannot handle vocabulary mismatch; meanwhile, the embedding retrieval supports semantic matching but loses granular (lexical level) information.</p>
<p>To ensure that the two types of models work together and fix each other’s weakness, we propose a residual-based learning framework that teaches the neural embeddings to be complementary to the lexical retrieval.</p>
<h3 id="Lexical-Retrieval-Model"><a href="#Lexical-Retrieval-Model" class="headerlink" title="Lexical Retrieval Model"></a>Lexical Retrieval Model</h3><p>BM25:</p>
<script type="math/tex; mode=display">
s_{\text {lex }}(q, d)=\operatorname{BM} 25(q, d)=\sum_{t \in q \cap d} \operatorname{rsj}_{t} \cdot \frac{\mathrm{tf}_{t, d}}{\mathrm{tf}_{t, d}+k_{1}\left\{(1-b)+b \frac{|d|}{l}\right\}}</script><h3 id="Embedding-Retrieval-Model"><a href="#Embedding-Retrieval-Model" class="headerlink" title="Embedding Retrieval Model"></a>Embedding Retrieval Model</h3><script type="math/tex; mode=display">
\begin{gathered}
\mathbf{v}_{q}=\operatorname{AvgPool}\left[\operatorname{BERT}_{\theta}(\langle\mathrm{QRY}\rangle ; \text { query })\right] \\
\mathbf{v}_{d}=\operatorname{AvgPool}\left[\operatorname{BERT}_{\theta}(\langle\operatorname{DOC}\rangle ; \text { document })\right]
\end{gathered}</script><p>BERT: shared weight</p>
<script type="math/tex; mode=display">
s_{emb}(q,d) = v_q^Tv_d</script><h3 id="Residual-Based-Learning"><a href="#Residual-Based-Learning" class="headerlink" title="Residual Based Learning"></a>Residual Based Learning</h3><p>To make the best use of the embedding model, we must avoid the embedding model “relearning” signals already captured by the lexical model. Instead, we focus its capacity on semantic level matching missing in the lexical model.</p>
<p>一般的 Loss 函数：</p>
<script type="math/tex; mode=display">
\mathcal{L}=\left[m-s_{\mathrm{emb}}\left(q, d^{+}\right)+s_{\mathrm{emb}}\left(q, d^{-}\right)\right]_{+}</script><p>where $[x]^+ = max\{0,x\}$</p>
<p>为了让 embedding 来 complement lexical retrieval，我们 propose 两个 techique:</p>
<ul>
<li>Error-based Negative Sampling</li>
</ul>
<p>Sample negative examples from those documents mistakenly retrieved by lexical retrieval.</p>
<p>Given a positive query-document pair, we uniformly sample irrelevant examples from the top N documents returned by lexical retrieval with probability p. With such negative samples, the embedding model learns to differentiate relevant documents from confusing ones that are lexically similar to the query but semantically irrelevant.</p>
<ul>
<li>Residual-based Margin</li>
</ul>
<p>Intuitively, different query-document pairs require different levels of extra semantic information for matching on top of exact matching signals.</p>
<p><strong>Our negative sampling strategy does not tell the neural model the degree of error made by the lexical retrieval that it needs to fix.</strong></p>
<p>于是做修改：</p>
<script type="math/tex; mode=display">
m_{r}\left(\mathrm{~s}_{\text {lex }}\left(q, d^{+}\right), \mathrm{s}_{\text {lex }}\left(q, d^{-}\right)\right)=\xi-\lambda_{\text {train }}\left(\mathrm{s}_{\text {lex }}\left(q, d^{+}\right)-\mathrm{s}_{\text {lex }}\left(q, d^{-}\right)\right)</script><script type="math/tex; mode=display">
\mathcal{L}=\left[m_{r}\left(\mathrm{~s}_{\mathrm{lex}}\left(q, d^{+}\right), \mathrm{s}_{\mathrm{lex}}\left(q, d^{-}\right)\right)-s_{\mathrm{emb}}\left(q, d^{+}\right)+s_{\mathrm{emb}}\left(q, d^{-}\right)\right]_{+}</script><h1 id="Poly-encoders-architectures-and-pre-training-strategies-for-fast-and-accurate-multi-sentence-scoring"><a href="#Poly-encoders-architectures-and-pre-training-strategies-for-fast-and-accurate-multi-sentence-scoring" class="headerlink" title="Poly-encoders: architectures and pre-training strategies for fast and accurate multi-sentence scoring"></a>Poly-encoders: architectures and pre-training strategies for fast and accurate multi-sentence scoring</h1><h2 id="Motivation-9"><a href="#Motivation-9" class="headerlink" title="Motivation"></a>Motivation</h2><p>现有的：Cross-encoders 和 Bi-encoders</p>
<p>The former often performs better, but is too slow for practical use. </p>
<h2 id="Feature-4"><a href="#Feature-4" class="headerlink" title="Feature"></a>Feature</h2><p>In this work, we develop a new transformer architecture, the Poly-encoder, that learns global rather than token level self-attention features.</p>
<p>We introduce the Poly-encoder, an architecture with an additional learnt attention mechanism that represents more global features from which to perform self-attention, resulting in performance gains over Bi-encoders and large speed gains over Cross-Encoders</p>
<h2 id="Poly-Encoder"><a href="#Poly-Encoder" class="headerlink" title="Poly-Encoder"></a>Poly-Encoder</h2><p>A given candidate label is represented by one vector as in the Bi-encoder, which allows for caching candidates for fast inference time, while the input context is jointly encoded with the candidate, as in the Cross-encoder, allowing the extraction of more information.</p>
<p>The Poly-encoder uses two separate transformers for the context and label like a Bi-encoder, and the candidate is encoded into a single vector $y_{candi}$ .</p>
<p>As such, the Poly-encoder method can be implemented using a precomputed cache of encoded responses. However, <strong>the input context, which is typically much longer than a candidate</strong>, is represented with m vectors ($y^1_{ctxt}, \cdots, y^{m}_{ctxt}$) instead of just one as in the Bi-encoder, where m will influence the inference speed. </p>
<p>To obtain these m global features that represent the input, we learn m context codes $(c_1, \cdots, c_m)$, where $c_i$ extracts representation $y^i_{ctxt}$ by attending over all the outputs of the previous layer:</p>
<script type="math/tex; mode=display">
y_{c t x t}^{i}=\sum_{j} w_{j}^{c_{i}} h_{j} \quad \text { where } \quad\left(w_{1}^{c_{i}}, . ., w_{N}^{c_{i}}\right)=\operatorname{softmax}\left(c_{i} \cdot h_{1}, \ldots, c_{i} \cdot h_{N}\right)</script><p>The m context codes are randomly initialized, and learnt during finetuning. Finally, given our m global context features, we attend over them using $y_{candi}$ as the query:</p>
<script type="math/tex; mode=display">
y_{c t x t}=\sum w_{i} y_{c t x t}^{i} \quad \text { where } \quad\left(w_{1}, \ldots, w_{m}\right)=\operatorname{softmax}\left(y_{c a n d_{i}} \cdot y_{c t x t}^{1}, \ldots, y_{c a n d_{i}} \cdot y_{c t x t}^{m}\right)</script><p>The final score for that candidate label is then $y_{ctxt} \cdot y_{candi}$ as in a Bi-encoder. As m &lt; N, where N is the number of tokens, and the context-candidate attention is only performed at the top layer, this is far faster than the Cross-encoder’s full self-attention.</p>
<p><img src="https://s2.loli.net/2022/03/03/rBlRIiAHuqK18jw.png" alt="image-20220208163723909"></p>
<p>但是…时间呢？</p>
<p><img src="https://s2.loli.net/2022/03/03/F56m4qxauOjoLA8.png" alt="image-20220208164130924"></p>
<p>好吧，虽然复杂度感觉不太对，但是他说比 Cross 好上那么几个数量级。Fine.</p>
<h1 id="Improving-Document-Representations-by-Generating-Pseudo-Query-Embeddings-for-Dense-Retrieval"><a href="#Improving-Document-Representations-by-Generating-Pseudo-Query-Embeddings-for-Dense-Retrieval" class="headerlink" title="Improving Document Representations by Generating Pseudo Query Embeddings for Dense Retrieval"></a><strong>Improving Document Representations</strong> by Generating Pseudo Query Embeddings for Dense Retrieval</h1><h2 id="Motivation-10"><a href="#Motivation-10" class="headerlink" title="Motivation"></a>Motivation</h2><p>However, this simple structure may cause serious information loss during the encoding of documents since the queries are agnostic.</p>
<p>As it is very common that a document with hundreds of tokens contains several distinct topics, some important semantic information might be easily missed or biased by each other without knowing the query.</p>
<h2 id="Feature-5"><a href="#Feature-5" class="headerlink" title="Feature"></a>Feature</h2><p>To address this problem, we design a method to mimic the queries on each of the documents by an iterative clustering process and represent the documents by multiple pseudo queries.</p>
<p>To alleviate the query agnostic problem, we propose a novel approach that mimics multiple potential queries corresponding to the input document and we call them “pseudo query embeddings”.</p>
<p>Ideally, each of the pseudo query embeddings corresponds to a semantic salient (most important or noticeable) fragment in the document which is similar to a semantic cluster of the document. </p>
<p>Thus, we implement the process by a clustering algorithm (i.e., K-means in this work) and regard the cluster centroids as the pseudo query embeddings. </p>
<ul>
<li>This is a novel approach to represent the document with multiple pseudo query embeddings which are generated by a clustering process.</li>
</ul>
<h2 id="Review-Aggregator"><a href="#Review-Aggregator" class="headerlink" title="Review: Aggregator"></a>Review: Aggregator</h2><p><img src="https://s2.loli.net/2022/03/03/mFe25cMlpigUVts.png" alt="image-20220207164752721"></p>
<p><strong>Independent Aggregator</strong></p>
<p>$q_\star$ and $d_\star$ are the direct output of the BERT layer. A pooler is needed to extract the inputs for the scoring function. For example, $e_q = q_\star[CLS]$ in Karpukhin et al.</p>
<p>Although it might be efficient to compute, compressing m or n embeddings just into 1 embedding may lose information.</p>
<p><strong>Late Interaction Aggregator</strong></p>
<p>As shown in Figure 1 (c), the model preserves all of the document token embeddings {di} m i=1 in the cache until a new query is given.</p>
<p> It then computes token-wise matching scores using all of the document and query embeddings. The final matching score is generated by pooling the m × n scores. </p>
<p>However, the time complexity of the score computation arises from constant O(1) to quadratic O(mn).</p>
<p><strong>Semi-interactive Aggregator</strong></p>
<p>compresses the document token embeddings to a constant number k much smaller than the document length m (k &lt;&lt; m).</p>
<p><strong>Their Method</strong></p>
<p>Firstly, following the semi-interactive aggregator, we feed the document tokens into BERT and use the last layer hidden states as the document token embeddings {di} m i=1. Next, we perform Kmeans algorithm on these token embeddings.</p>
<p>The <strong>K-means algorithm</strong> mainly contains two iterative steps: assignment step and update step. These two steps are performed alternatively until the convergence condition is satisfied. </p>
<p>The assignment step can be expressed by the following equation.</p>
<script type="math/tex; mode=display">
\begin{gathered}
s_{i}^{t}=\underset{j}{\operatorname{argmin}}\left\|d_{i}-c_{j}^{t}\right\|^{2} \\
i \in\{1, \ldots, m\}, j \in\{1, \ldots, k\}
\end{gathered}</script><p>Update:</p>
<script type="math/tex; mode=display">
c_{j}^{t+1}=\frac{1}{\sum_{i=1}^{m} 1\left(s_{i}^{t}=j\right)} \sum_{\left\{i \mid s_{i}^{t}=j\right\}} d_{i}</script><p>实际上这就是 K-means Clustering 的算法，就是一堆上下标记号，没啥高大上的地方。</p>
<p>然后我们就把 $c_j^t$ 看作是 Query Embedding.</p>
<h2 id="Experiment-4"><a href="#Experiment-4" class="headerlink" title="Experiment"></a>Experiment</h2><p>Evaluation: MS MARCO; Open QA (翻来覆去这个领域的 baseline 就这么几个)</p>
<h1 id="Sentence-T5-Scalable-Sentence-Encoders-from-Pre-trained-Text-to-Text-Models"><a href="#Sentence-T5-Scalable-Sentence-Encoders-from-Pre-trained-Text-to-Text-Models" class="headerlink" title="Sentence-T5: Scalable Sentence Encoders from Pre-trained Text-to-Text Models"></a>Sentence-T5: <strong>Scalable</strong> Sentence Encoders from Pre-trained Text-to-Text Models</h1><h2 id="Motivation-11"><a href="#Motivation-11" class="headerlink" title="Motivation"></a>Motivation</h2><p>While T5 achieves impressive performance on language tasks cast as sequence-to-sequence mapping problems, it is unclear how to produce sentence embeddings from encoder-decoder models.</p>
<p>We investigate three methods for extracting T5 sentence embeddings: two utilize only the T5 encoder and one uses the full T5 encoder-decoder model.</p>
<h2 id="Feature-6"><a href="#Feature-6" class="headerlink" title="Feature"></a>Feature</h2><p>目的就是一个句子塞进 T5 获取他的 Representation，塞的信息越多越好。</p>
<p>We explore three ways of turning a pre-trained T5 encoder-decoder model into a sentence embedding model: (i) using the first token representation of the encoder; (ii) averaging all token representations from the encoder; (iii) using the first token representation from the decoder.</p>
<h2 id="Conclusion-2"><a href="#Conclusion-2" class="headerlink" title="Conclusion"></a>Conclusion</h2><ul>
<li>encoder-only models have strong transfer performance while encoderdecoder models perform better on textual similarity tasks</li>
<li>We also demonstrate the effectiveness of scaling up the model size, which greatly improves sentence embedding quality</li>
</ul>
<p>如果对 T5 进行进一步研究，能否提取出其每层的表示来做分析，查看到底是哪些层针对哪些任务起了作用？但是因为 T5 本来就是为了做 Universal 的，这个任务也不一定有价值…</p>
<h1 id="Multi-task-Retrieval-for-Intensive-Tasks"><a href="#Multi-task-Retrieval-for-Intensive-Tasks" class="headerlink" title="Multi-task Retrieval for Intensive Tasks"></a>Multi-task Retrieval for Intensive Tasks</h1><ul>
<li>什么是 multi-task retrieval?</li>
</ul>
<p>we target a retriever that can perform well on a wide variety of problems, without task-specific finetuning</p>
<ul>
<li>什么是 Knowledge intensive task? 是任务集（？</li>
</ul>
<p>KILT (Knowledge Intensive Language Tasks) is a new unified benchmark to help AI researchers build models that are better able to leverage real-world knowledge to accomplish a broad range of tasks.</p>
<h2 id="Motivation-12"><a href="#Motivation-12" class="headerlink" title="Motivation"></a>Motivation</h2><p>Although neural retrieval outperforms traditional methods like tf-idf and BM25, its performance degrades considerably when applied to <strong>out-of-domain data.</strong></p>
<p>现有的 Dense Retrieval 的弱点：</p>
<p>First, unlike tf-idf or BM25, neural retrieval models are unsuitable for low data regimes such as few- and zero-shot settings. </p>
<p>Second, task-specific retrievers complicate practical applications where multiple knowledge-intensive tasks may need to be performed using the same supporting database or over the same input text. </p>
<h2 id="Feature-7"><a href="#Feature-7" class="headerlink" title="Feature"></a>Feature</h2><p><strong>By jointly training on an extensive selection of retrieval tasks</strong>, we obtain a model which is not only more robust than previous approaches, but also can lead to better performance on the downstream knowledge-intensive tasks when plugged into an existing system.</p>
<h2 id="Experiment-5"><a href="#Experiment-5" class="headerlink" title="Experiment"></a>Experiment</h2><ul>
<li>The universal retriever performing comparably to task-specific models</li>
<li>Plugged the universal retriever into a larger pipeline and achieved better results</li>
<li>Evaluated the model’s performance in the zero-shot and few-shot settings. <ul>
<li>our proposed approach performs comparably to BM25 in the zero shot setting, and quickly overtakes it even with minimal in-domain training</li>
</ul>
</li>
<li>In Section 4.5 we evaluated a number of more complex variants of the model involving task specialisation, but failed to see clear performance improvements. Finally, in Section 4.6 we saw how a simple iterative approach to data augmentation can lead to better performance.</li>
</ul>
<p>// 下周组会要分享论文，寄寄寄，总不能讲这些 21 年及之前的老货色吧，下周看起来要顶着软工 init project 的时候多找几篇论文了</p>
<p>// 读了也不算很多论文，但连 BERT 都没上手跑过几次，搞完挑战杯一定要上手写代码了，不然感觉还是太理论，太泛泛而谈了，丝毫没感到码力有提升（x</p>
<p>// 计网原小作业都要读 TCP/IP 的论文 不会吧不会吧 计网原我 <em> </em> *</p>
]]></content>
      <categories>
        <category>理论</category>
        <category>理论/NLP</category>
      </categories>
  </entry>
</search>
