<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>c7w 的博客</title>
  
  <subtitle>是一只 c7w 的博客</subtitle>
  <link href="https://www.c7w.tech/atom.xml" rel="self"/>
  
  <link href="https://www.c7w.tech/"/>
  <updated>2022-04-27T15:55:37.586Z</updated>
  <id>https://www.c7w.tech/</id>
  
  <author>
    <name>c7w</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hash 函数与认证</title>
    <link href="https://www.c7w.tech/hash-function/"/>
    <id>https://www.c7w.tech/hash-function/</id>
    <published>2022-04-27T15:37:46.000Z</published>
    <updated>2022-04-27T15:55:37.586Z</updated>
    
    <content type="html"><![CDATA[<p><s>学不完了学不完了学不完了</s></p><p>密码学还有大作业，设计加密算法，到现在还没有着落，课又有两三节没听了，赶紧补赶紧补</p><p>本篇内容包括：</p><ul><li>§ 8：密码 Hash 函数</li><li>§ 9：消息认证码</li></ul><a id="more"></a><h2 id="密码-Hash-函数"><a href="#密码-Hash-函数" class="headerlink" title="密码 Hash 函数"></a>密码 Hash 函数</h2><h3 id="Hash-函数基础"><a href="#Hash-函数基础" class="headerlink" title="Hash 函数基础"></a>Hash 函数基础</h3><h4 id="Hash-函数与压缩函数"><a href="#Hash-函数与压缩函数" class="headerlink" title="Hash 函数与压缩函数"></a>Hash 函数与压缩函数</h4><p><strong>定义</strong>（Hash 函数）：Hash 函数 $H: \{0, 1\}^{\star} \rightarrow \{ 0, 1 \}^l$，将任意长的消息压缩为一个固定长度的摘要，记作 $Y = H(M)$。</p><p><strong>定义</strong>（压缩函数）：将固定长度的消息 M 压缩成一个固定长度的输出 $f: \{0, 1\}^{m+l} \rightarrow \{ 0, 1 \}^l$.</p><h4 id="Hash-函数属性"><a href="#Hash-函数属性" class="headerlink" title="Hash 函数属性"></a>Hash 函数属性</h4><ul><li>有效性：已知消息 $M$，计算消息指纹 $Y=H(M)$ 是容易的。</li><li>抗原像攻击：给定任意消息指纹 $Y=H(M)$，恢复消息 $M$ 是计算不可行的。<ul><li>理想的复杂度是搜索攻击 $2^n$ 次计算</li></ul></li><li>抗第二原像攻击：给定任意消息 $M_1$，找到另一个消息 $M_2$ 具有相同电子指纹 $H(M_1)=H(M_2)$ 是计算不可行的。<ul><li>理想的复杂度是 $2^n$</li></ul></li><li>无碰撞性：找到不同的消息 $(M_1, M_2)$ 有相同的指纹 $H(M_1)=H(M_2)$ 是计算不可行的。<ul><li>生日攻击复杂度 $2^{n/2}$</li></ul></li></ul><h4 id="MD-迭代结构"><a href="#MD-迭代结构" class="headerlink" title="MD 迭代结构"></a>MD 迭代结构</h4><p>大多数 Hash 函数的设计采用迭代结构，每次处理一个固定程度的消息分组。这便是基于压缩函数的 MD 设计准则。</p><h5 id="Mekle’s-meta-迭代算法"><a href="#Mekle’s-meta-迭代算法" class="headerlink" title="Mekle’s meta-迭代算法"></a>Mekle’s meta-迭代算法</h5><ul><li>输入：<strong>无碰撞</strong>的压缩函数 $f$ </li><li>输出：<strong>无碰撞</strong>的 Hash 函数 $h$</li></ul><ol><li>假设 $f$ 把 $(n+r)$ bit 的输入映成 <em>n</em> 比特的输出（例如 $n=128, r=512$ )。由 $f$ 构造一个具有 $n$ 比特杂凑值的 Hash 函数如下。</li><li>把长度为 $b$ 的输入 $x$ 分解成 $t$ 个长度为 $r$ 比特的分组 $x_1x_2\cdots x_t$。假如 $b$ 不是 $r$ 的倍数，则在 $x_t$ 的后面添充上若干个 0，使其成为一个完整的消息分组。</li><li>添加最后的一个分组 $x_{t+1}$，它是 $b$ 的长度的二进制表示（假设 $b&lt;2r$）</li><li>归纳定义 $n$ bit 的散列值计算：$H_0 = 0^n; \ H_i = f(H_{i-1} || x_i), 1 \le i \le t+1; \  h = H_{t+1}$.</li></ol><p><strong>证明</strong> 若 $f$ 是无碰撞的，则 $h$ 是无碰撞的。可考虑逆否命题，假设 $\exist M_1 \ne M_2, h(M_1) = h(M_2)$，则根据归纳定义的过程，</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;s&gt;学不完了学不完了学不完了&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;密码学还有大作业，设计加密算法，到现在还没有着落，课又有两三节没听了，赶紧补赶紧补&lt;/p&gt;
&lt;p&gt;本篇内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;§ 8：密码 Hash 函数&lt;/li&gt;
&lt;li&gt;§ 9：消息认证码&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="理论" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/"/>
    
    <category term="理论/密码学" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/%E7%90%86%E8%AE%BA-%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码学" scheme="https://www.c7w.tech/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Deep Learning for Computer Vision</title>
    <link href="https://www.c7w.tech/dl-for-computer-vision/"/>
    <id>https://www.c7w.tech/dl-for-computer-vision/</id>
    <published>2022-04-26T07:51:38.000Z</published>
    <updated>2022-04-26T09:38:19.406Z</updated>
    
    <content type="html"><![CDATA[<p>Michigan Online 的 Deep Learning for Computer Vision.</p><p>前面在讲 Machine Learning 相关的东西所以直接跳过去了，这里是 Lecture 15 ~ Lecture 22 的笔记。</p><a id="more"></a><h2 id="Lecture-15-Object-Detection"><a href="#Lecture-15-Object-Detection" class="headerlink" title="Lecture 15: Object Detection"></a>Lecture 15: Object Detection</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p><img src="https://s2.loli.net/2022/04/26/5FChmiPsvz8YUwl.png" alt="image-20220426155531177"></p><ul><li>Classification：针对整张图片的</li><li>Semantic Segmentation：针对图片的不同 Part 分不同类别<ul><li>这东西能不能做成 self-supervised？似乎可以？</li></ul></li><li>Object Detection<ul><li>Input: Single RGB Image</li><li>Output: a set of detected objects; For each object predict:<ul><li>Category label</li><li>Bounding box (four numbers: x, y, width, height)</li></ul></li><li>Challenging Points<ul><li>多输出，不定数目</li><li>输出不仅输出类型，还要输出包围盒</li><li>高分辨率的图片</li></ul></li></ul></li></ul><h3 id="Detecting-a-single-object-Multi-task-Loss"><a href="#Detecting-a-single-object-Multi-task-Loss" class="headerlink" title="Detecting a single object: Multi-task Loss"></a>Detecting a single object: Multi-task Loss</h3><p><img src="https://s2.loli.net/2022/04/26/wGvb8rg7ednRAhk.png" alt="image-20220426160850322"></p><h3 id="Detecting-Multiple-Objects-Sliding-Window"><a href="#Detecting-Multiple-Objects-Sliding-Window" class="headerlink" title="Detecting Multiple Objects: Sliding Window"></a>Detecting Multiple Objects: Sliding Window</h3><ul><li>加一个分类叫做 background，表示没有识别到物体</li></ul><p><img src="https://s2.loli.net/2022/04/26/vqJU51bCgNQonhY.png" alt="image-20220426161359111"></p><p>问题：枚举包围盒需要 $O(H^2W^2)$，而且可能重复检测…<em>二分法，树结构？</em></p><h4 id="Region-Proposals"><a href="#Region-Proposals" class="headerlink" title="Region Proposals"></a>Region Proposals</h4><p>Key Idea: find a small set of boxes that are likely to cover all objects</p><ul><li>Often based on heuristics: e.g. look for “blob-like” image regions</li><li>Relatively fast to run: <em>Selective Search</em></li></ul><h4 id="R-CNN-Region-Based-CNN"><a href="#R-CNN-Region-Based-CNN" class="headerlink" title="R-CNN: Region-Based CNN"></a>R-CNN: Region-Based CNN</h4><ul><li>Run Region Proposals first, and get ~2k region candidates</li><li>For each of the candidate regions, they could be different sizes, but we warp that region by 224 * 224</li><li>Forward the classification network using the padded region, to decide if it is background or objects contained</li><li><p>Learn another region transformation network: from 224 x 224 to Delta (x, y, h, w)</p><ul><li><img src="https://s2.loli.net/2022/04/26/uagDnvqCLK4yJ3U.png" alt="image-20220426162529821"></li></ul></li><li><p>That can be summarized as:</p><ul><li><img src="https://s2.loli.net/2022/04/26/lrxWubUN2a61QVY.png" alt="image-20220426163111643"></li></ul></li></ul><h4 id="IoU"><a href="#IoU" class="headerlink" title="IoU"></a>IoU</h4><ul><li>Evaluating (Comparing Boxes): <em>Intersection over Union</em> (IoU)<ul><li>How can we compare our prediction to the ground-truth box?</li><li>$\text{IoU} = \dfrac{\text{Area of Intersection}}{\text{Area of Union}}$</li><li>Also called Jaccard similarity or Jaccard Index</li><li>IoU &gt; 0.5 is “decent”</li><li>IoU &gt; 0.7 is “pretty good”</li><li>IoU &gt; 0.9 is “almost perfect”</li></ul></li></ul><h4 id="Overlapping-Boxes"><a href="#Overlapping-Boxes" class="headerlink" title="Overlapping Boxes"></a>Overlapping Boxes</h4><ul><li>Object detectors often output many overlapping detections</li><li>Trouble:  images very crowded with people</li></ul><p><img src="https://s2.loli.net/2022/04/26/5vA9FSuw3ZfrQzP.png" alt="image-20220426163927640"></p><h3 id="Evaluating-Object-Detectors-Mean-Average-Precision-mAP"><a href="#Evaluating-Object-Detectors-Mean-Average-Precision-mAP" class="headerlink" title="Evaluating Object Detectors: Mean Average Precision (mAP)"></a>Evaluating Object Detectors: Mean Average Precision (mAP)</h3><p><img src="https://s2.loli.net/2022/04/26/old4JAvTM2sUwOi.png" alt="image-20220426165608364"></p><p>Get all APs from each category, then compute the mean value.</p><p>记作 mAP@0.5 = 0.77. IoU 是参数。</p><h3 id="Fast-R-CNN"><a href="#Fast-R-CNN" class="headerlink" title="Fast R-CNN"></a>Fast R-CNN</h3><p><img src="https://s2.loli.net/2022/04/26/fOeWnMd2KXyLTHQ.png" alt="image-20220426170107583"></p><h4 id="RoI-Pool-Region-of-Interest-Pooling"><a href="#RoI-Pool-Region-of-Interest-Pooling" class="headerlink" title="RoI Pool: Region of Interest Pooling"></a>RoI Pool: Region of Interest Pooling</h4><ul><li>Must come into a differential way…</li><li>Region Proposals suggest on the original picture</li><li>Just <em>project</em> proposal onto image features, then snap it to grid cells…</li></ul><p><img src="https://s2.loli.net/2022/04/26/NyvmQa24pxKW1sr.png" alt="image-20220426171913274"></p><ul><li><em>Divide</em> it up into sub regions of equal area, like 2x2</li><li>Perform <em>Max-Pooling</em> within each of the region</li></ul><ul><li>Avoid Snapping? RoI Align, use bilinear interpolation to get everything down right…</li></ul><h3 id="Faster-R-CNN-Learnable-Region-Proposals"><a href="#Faster-R-CNN-Learnable-Region-Proposals" class="headerlink" title="Faster R-CNN: Learnable Region Proposals"></a>Faster R-CNN: Learnable Region Proposals</h3><ul><li>Insert a region-proposal network, or RPN, to propose the regions</li><li>How to use CNN to output region proposals in a trainable way?</li></ul><p><img src="https://s2.loli.net/2022/04/26/f5MPszcZulnyOwL.png" alt="image-20220426172829598"></p><ul><li>Imagine anchor boxes of fixed size at each point in the feature map</li><li>Use a CNN to decide, if the anchor box contains an object…</li><li>Again, for positive boxes, also predict a box transform to regress from anchor box to object box…</li></ul><h4 id="Two-stages"><a href="#Two-stages" class="headerlink" title="Two stages"></a>Two stages</h4><p><img src="https://s2.loli.net/2022/04/26/UouDiLN3Cm8zyj5.png" alt="image-20220426173812732"></p><p>Faster R-CNN 可以分为两个阶段考虑：</p><ul><li>First stage: Run once per image<ul><li>Backbone Network to extract features</li><li>Region proposal network to suggest regions</li></ul></li><li>Second stage: Run once per region<ul><li>Crop features: RoI pool / align</li><li>Predict object class</li><li>Predict b-box offset</li></ul></li></ul><h3 id="Single-Stage-Object-Detection"><a href="#Single-Stage-Object-Detection" class="headerlink" title="Single-Stage Object Detection"></a>Single-Stage Object Detection</h3><p>再稍作改动，得到：</p><p><img src="https://s2.loli.net/2022/04/26/tGaAoexUHzIbYOE.png" alt="image-20220426173743628"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Michigan Online 的 Deep Learning for Computer Vision.&lt;/p&gt;
&lt;p&gt;前面在讲 Machine Learning 相关的东西所以直接跳过去了，这里是 Lecture 15 ~ Lecture 22 的笔记。&lt;/p&gt;</summary>
    
    
    
    <category term="理论" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/"/>
    
    <category term="理论/CV" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/%E7%90%86%E8%AE%BA-CV/"/>
    
    
    <category term="计算机视觉" scheme="https://www.c7w.tech/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>16-889 三维视觉入门</title>
    <link href="https://www.c7w.tech/16-889-3d-vision/"/>
    <id>https://www.c7w.tech/16-889-3d-vision/</id>
    <published>2022-04-24T13:28:16.000Z</published>
    <updated>2022-04-27T15:36:00.533Z</updated>
    
    <content type="html"><![CDATA[<p>大概是一些笔记和个人想法吧。f.r. <a href="https://learning3d.github.io/">https://learning3d.github.io/</a></p><blockquote><p> 个人想法用这种格式书写，与笔记区分。所以可以直接跳过这部分，只看正文。</p></blockquote><p>本课程可能 cover 的内容：</p><ul><li>三维模型的显式、隐式与 Nerual 表示<ul><li>如何将三维的数据用可计算的方式来表示？</li><li>不同类型的表示方式有哪些有点和缺点？</li></ul></li><li>Image Formation<ul><li>Form 2D Images from 3D Objects</li></ul></li><li>Data-driven 3D Prediction<ul><li>表示方法与学习目标</li><li>重建刚体、连接体、整个场景</li><li>弱监督？</li></ul></li><li>Instance-specific 3D from multi-view</li><li>Processing and Generating 3D</li><li>Potpurri + Project Presentations</li></ul><a id="more"></a><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>​        为什么要关注<strong>三维</strong>视觉（3D Vision）？数学家们考虑问题时，可以想象 $n$ 维空间中的情况，得出普遍性的结论之后，然后令 $n = 3$，便能得到一些有趣的结果。但是，<strong>我们所处的这个世界是三维的</strong>，针对三维的情况而特有的一些技巧或表示方法，可能比上述的普遍解法得到更优的效果。比如说，逆平方反比定律，就只有在给定<strong>三维</strong>这个条件之下才有效。</p><h2 id="3D-Representations"><a href="#3D-Representations" class="headerlink" title="3D Representations"></a>3D Representations</h2><p>下面介绍一些常用的三维场景表示方法。</p><ul><li><strong>深度图</strong>（Depth Maps）：传感器进行数据采集时的常用方法<ul><li>It is an <strong>image</strong> that represents <strong>how far</strong> each pixel <strong>p</strong> is.</li><li>For every pixel $p$ in the map, it stores $D[p] \in \mathbb R^+$.</li><li>深度图并没有捕捉到完整的 3D 结构，其只是记录了图像像素中的深度这一属性，可以称为 2.5D 表示</li></ul></li></ul><h3 id="Surface-Representations"><a href="#Surface-Representations" class="headerlink" title="Surface Representations"></a>Surface Representations</h3><p>这几种方法关注的是如何去刻画物体的表面。</p><ul><li><strong>点云</strong>（Point Clouds）：通常也是从传感器中采集，作为统一不同传感器不同输出数据格式的方式<ul><li>通常记作 $\{p_1, p_2, \cdots, p_N\}$，<strong>无序</strong>的点列表</li><li>点云是一种数据结构，通常表示成 $n \times 3$ 维的数组</li><li>为了保证其对无序性，或者说使得数组中任意两个元素交换位置后，点云整体的不变性，需要考虑具有置换不变性的处理方法（比如 FC 就不 work，因为输入位置不同对其结果有影响）</li><li>扩展：<strong>Oriented Point Clouds</strong>，同样是点的集合，不过集合元素为 $(p_i, n_i)$，记录了其法向用于渲染</li><li>点云没有记录各点之间的连接关系：虽然增大采样率可以在某种程度上缓解这个问题，但是明明加边更有效率…</li></ul></li><li><p><strong>网格</strong>（Meshes）：存储顶点与面的数据结构</p><ul><li>维护两个线性结构：顶点（Vertices）的集合、三角形面（Faces）的集合</li><li>对顶点标号，每一个面定义为一个三维数组，数组的内容是相应顶点的标号</li><li>是三维物体表面（Surface）的线性估计</li><li>但是通常来说，设计能够还原出<strong>任意</strong>连接方式的方法是困难的，这是因为即使是 8 个顶点和 10 个三角形面的网格也是 Non-trivial 的</li></ul></li><li><p><strong>参数曲面</strong>（Parametric Surfaces）</p><ul><li><p>通过一个映射 $f(u) = p \in \mathbb R^3; u \in M$ 来实现</p><ul><li>$f$ 需要是连续函数，$M$ 需要是二维流形</li></ul></li><li><p>更多例子：贝塞尔曲面</p></li><li><p>同时，我们之前的想法一直是手动构造这样的二维流形 $M$ 与函数 $f$，来拟合想要的三维模型。</p><ul><li>而我们可以固定流形 $M$ 为单位球面，$f$ 为函数 $\theta$ 的参数，这样我们得到 $f_\theta(u) = p \in \mathbb R^3; u \in \mathbb S^2$，是否可以让机器自己学习合适的 $f_\theta$ 满足拟合要求？</li><li>It is a nerual network with parameter $\theta$!</li></ul></li><li><p>参数曲面也有一些不利之处</p><ul><li><p>仅靠给定的流形和函数，很难对全局结构做出把握</p><ul><li>给定 $q$，$q$ 到底是在描述的三维形体之内还是之外？</li></ul></li><li><p>有时难以渲染（光追如何与 $f$ 求交？）</p></li></ul></li></ul></li></ul><h3 id="Volume-Representations"><a href="#Volume-Representations" class="headerlink" title="Volume Representations"></a>Volume Representations</h3><p>这些方法关注于如何描述物体自身占有的空间。</p><ul><li>体素化存储（Voxelized 3D）<ul><li>这里 Voxel 的全拼是 Volume Pixel，类比 Pixel - Picture Element，Voxel 是 3D 存储的最基本单位（如下图，红色方块便是一个 Voxel）</li><li><img src="https://s2.loli.net/2022/04/25/WvgS9cR7LlYtibP.png" alt="Voxels.svg"></li><li>Voxel 将连续的三维空间离散化</li><li>一个 Voxel 可以代表 $(W , H, D)$ 大小的实际空间</li><li>这种类图像的表示对卷积等图像处理与生成方式友好</li><li>缺点：增大分辨率可能会导致计算性能的需求以立方的次数增长</li></ul></li><li><strong>隐式曲面</strong>（Implicit Surfaces）<ul><li>其定义：$\{ \mathbf p | f (\mathbf p) = 0 \}$.</li><li>我们可以对隐式曲面进行：<ul><li><strong>并</strong>操作：$\bigcup_i f_i(\mathbf p) = \min_i f_i(\mathbf p)$.</li><li><strong>交</strong>操作：$\bigcap_i f_i(\mathbf p) = \max_i f_i(\mathbf p)$.</li><li><strong>差</strong>操作：$(f-g)(\mathbf p) = \max(f(\mathbf p), -g(\mathbf p))$.</li></ul></li><li>当然我们可以将 $f$ 看做 $f_\theta$…</li><li>Signed Distance Function<ul><li>为函数增加条件：$f(p)$ 要代表点 $p$ 到所表示曲面的距离</li><li>这种函数满足条件：$|| \nabla f || = 1$.</li></ul></li></ul></li></ul><h3 id="Other-Representations"><a href="#Other-Representations" class="headerlink" title="Other Representations"></a>Other Representations</h3><ul><li><strong>八元树</strong>（Octrees）<ul><li>对于渲染和存储来说十分方便</li><li>很难编辑或预测</li></ul></li><li>Layered Depth Images<ul><li>Layer 1 = Visible Content</li><li>Layer $n + 1$ = Depth and color of the “next” surface point the ray hits after Layer $n$</li></ul></li><li>Multi-plane Images<ul><li>极其方便渲染，each layer is just a plane at fixed length</li><li>Limited resolution for far-away ccontent</li></ul></li><li>CAD Models</li><li>CSG Trees<ul><li>物体的交并差组成的“计算图”</li></ul></li></ul><h3 id="更多讨论"><a href="#更多讨论" class="headerlink" title="更多讨论"></a>更多讨论</h3><p>我们关注以下两个问题：</p><ol><li>从可微性的角度，连续的变换能否拟合出相应的变化？</li><li>从渲染的角度，将 3D 表示添加纹理后渲染出来是否简单？</li></ol><h2 id="Conversions-between-3D-Representations"><a href="#Conversions-between-3D-Representations" class="headerlink" title="Conversions between 3D Representations"></a>Conversions between 3D Representations</h2><p>本节我们分为以下三个方面，介绍三维表示之间的不同转换方法：</p><p><img src="https://s2.loli.net/2022/04/25/mKGudAtURpbiQSw.png" alt="image-20220425171456719"></p><ul><li>Surface Representations 之间的转换</li><li>Volume Representations 之间的转换</li><li>Surface Representations 和 Volume Representations 之间的转换</li></ul><h3 id="何谓“可微变换”"><a href="#何谓“可微变换”" class="headerlink" title="何谓“可微变换”"></a>何谓“可微变换”</h3><p>首先，变换的定义我们在《离散数学》课程中就已经学过，是一个集合到自身上的映射。那么，什么是可微变换呢？</p><p><img src="https://s2.loli.net/2022/04/25/XxWRFetBq3D7GhM.png" alt="image-20220425171919339"></p><p>我们假设给定图片输入 Input，其可用参数 $\theta_1$ 来表示，而经过了变换 $\mathcal T$ 之后，其得到了点云可用参数 $\theta_2$ 来表示。如果我们可以计算出 L 对两个参数的偏导，那么就可以计算出这个变换的微分。</p><blockquote><p>这个 Loss 都有哪些计算方式？也就是说，怎么去衡量这个 Loss 对 $\theta$ 的微分？</p></blockquote><h3 id="Volume-Representations-之间的转换"><a href="#Volume-Representations-之间的转换" class="headerlink" title="Volume Representations 之间的转换"></a>Volume Representations 之间的转换</h3><h4 id="Approximating-Continuous-from-Discrete"><a href="#Approximating-Continuous-from-Discrete" class="headerlink" title="Approximating Continuous from Discrete"></a>Approximating Continuous from Discrete</h4><p><img src="https://s2.loli.net/2022/04/25/k8X4gE79iKUPM1G.png" alt="image-20220425173204447"></p><p>没错，其核心问题在于图中的注释，给定离散的网格对应的值，怎样才能将其连续化呢？没错，插值。我们早已学过一阶线性插值和双线性插值的概念，而这里我们便使用<strong>三线性插值</strong>来处理三维的问题。</p><h4 id="From-Continuous-to-Discrete"><a href="#From-Continuous-to-Discrete" class="headerlink" title="From Continuous to Discrete"></a>From Continuous to Discrete</h4><p><img src="https://s2.loli.net/2022/04/25/yUAbrKpl4N5PMgu.png" alt="image-20220425173544322"></p><p>对于 sigmoid 函数，我们易于求 $\dfrac {\partial V}{\partial f}$.</p><h3 id="Surface-Representations-之间的转换"><a href="#Surface-Representations-之间的转换" class="headerlink" title="Surface Representations 之间的转换"></a>Surface Representations 之间的转换</h3><h4 id="From-Continuous-to-Discrete-1"><a href="#From-Continuous-to-Discrete-1" class="headerlink" title="From Continuous to Discrete"></a>From Continuous to Discrete</h4><p><img src="https://s2.loli.net/2022/04/25/S5pjk7ctMZF9D6o.png" alt="image-20220425174320830"></p><p>我们首先将定义域的二维流形离散化，然后将离散化后的区域使用 $f$ 进行映射。</p><h4 id="Sampling-Points-on-a-Triangle-Mesh"><a href="#Sampling-Points-on-a-Triangle-Mesh" class="headerlink" title="Sampling Points on a Triangle Mesh"></a>Sampling Points on a Triangle Mesh</h4><p><img src="https://s2.loli.net/2022/04/25/HsbmWnxOF2zBZUl.png" alt="image-20220425174422681">接下来，给定一个三角形，该如何在其上均匀采样呢？</p><p><img src="https://s2.loli.net/2022/04/25/X3GIHKdfevLlZBJ.png" alt="image-20220425174609673"></p><h3 id="Volume-Representation-和-Surface-Representation-之间的转换"><a href="#Volume-Representation-和-Surface-Representation-之间的转换" class="headerlink" title="Volume Representation 和 Surface Representation 之间的转换"></a>Volume Representation 和 Surface Representation 之间的转换</h3><h4 id="Volumes-to-Surface-Marching-Cubes"><a href="#Volumes-to-Surface-Marching-Cubes" class="headerlink" title="Volumes to Surface: Marching Cubes"></a>Volumes to Surface: Marching Cubes</h4><p><img src="https://s2.loli.net/2022/04/25/f4GtxzQM5AqlunS.png" alt="image-20220425184506421"></p><p>我们本质上是要解决如何找出<strong>曲面边界</strong>的问题。比如，上面这张图绿色表示点在曲面内部，红色表示点在曲面外部，而具体该如何决定这个曲面边界所在的位置。通过这张图我们可以看到，对于每一个 Cube，决定其表面所在的边界是较为简单的。于是我们的想法便是，打表…</p><p><img src="https://s2.loli.net/2022/04/25/CaYZAq1L8UWF7et.png" alt="image-20220425184311060"></p><p>同时，使用 Voxel 的属性值来影响顶点的位置，这也保证了可微性。</p><h4 id="Points-to-Meshes-via-Implicit-Functions"><a href="#Points-to-Meshes-via-Implicit-Functions" class="headerlink" title="Points to Meshes via Implicit Functions"></a>Points to Meshes via Implicit Functions</h4><p>Points to Meshes 本来是 Surface Representations 方面的内容，而直接在点云中建立不同点之间的连接关系让人感觉无从下手。</p><p>而我们可以认为，点云中的点是某个隐函数取值为 0 的点集中 sample 出来的。我们可以尝试先拟合出隐函数，然后再将其转换成 Meshes.</p><blockquote><p><strong>Poisson Reconstruction</strong> (可以再好好看一看)</p></blockquote><h2 id="Image-Formation"><a href="#Image-Formation" class="headerlink" title="Image Formation"></a>Image Formation</h2><p>这一节我们关注成像相关的问题。我们关注的是<strong>几何</strong>与<strong>物理</strong>：几何是 3D 空间中的某个点该映射到图像中的什么地方，而<strong>物理</strong>是说像素的颜色该如何被计算。</p><ul><li>小孔成像的原理</li></ul><h3 id="Geometry"><a href="#Geometry" class="headerlink" title="Geometry"></a>Geometry</h3><ul><li><p>正交投影与透视投影</p></li><li><p>齐次坐标</p><ul><li><p>我们假设成像平面在 $Z = 1$.</p></li><li><p>将三维空间中的点映射到像平面</p><ul><li>$(X, Y, Z) \rightarrow (X/Z, Y/Z)$，即 $\mathbb R^3 \rightarrow \mathbb R^2$.</li></ul></li><li><p>定义 Projective 2D Space $\mathbb P^2$ 满足 $(x,y,z) \equiv (\lambda x, \lambda y, \lambda z)$，其满足的性质：</p><ul><li>$(x, y) \rightarrow(x,y,1)$，这是 $\mathbb R^2 \rightarrow \mathbb P^2$</li><li>$(x,y,z) \rightarrow(x/z, y/z)$，这是 $\mathbb P^2 \rightarrow \mathbb R^2$.</li></ul></li><li><p>然后，定义 Projective 3D Space $\mathbb P^3$，定义 $\mathbb P^3 \rightarrow \mathbb P^2$ 的 Projection Matrix $\mathbf P$ 如下：</p><ul><li><script type="math/tex; mode=display">\left[\begin{array}{llll}1 & 0 & 0 & 0 \\0 & 1 & 0 & 0 \\0 & 0 & 1 & 0\end{array}\right]</script></li><li><p>这个 Projection Matrix 相当于取 $\mathbb P^3$ 这个四维坐标的前三项后得到 $\mathbb P^2$ 中的元素。</p></li><li><p>$\mathbf P X_{cam} = X_{img}$.</p></li></ul></li><li><p>更一般地，如果我们的像平面在 $Z = f$ 的位置，事实上我们可以把 $Z = 1$ 的这个“像”的 $x, y$ scale $f$ 倍，得出新的投影阵：</p><ul><li><script type="math/tex; mode=display">P \equiv\left[\begin{array}{llll}f & 0 & 0 & 0 \\0 & f & 0 & 0 \\0 & 0 & 1 & 0\end{array}\right]</script></li></ul></li><li><p>而接下来，再考虑更加一般的情况，任意的图像中心。</p><ul><li><script type="math/tex; mode=display">\mathbf{P}=\left[\begin{array}{llc}f & 0 & p_{x} \\0 & f & p_{y} \\0 & 0 & 1\end{array}\right]\left[\begin{array}{lll:l}1 & 0 & 0 & 0 \\0 & 1 & 0 & 0 \\0 & 0 & 1 & 0\end{array}\right]</script></li></ul></li></ul></li></ul><p><img src="https://s2.loli.net/2022/04/25/xFypLgbDud4UavB.png" alt="image-20220425200131195"></p><p>然后是应用一个平移 + 旋转换基变换将摄像机的中心移到原点，up 与 y 方向对齐。</p><p>注意不同的库在建坐标系时有不同的 Convention，这是可能导致 Bug 的原因之一。</p><h3 id="Physics"><a href="#Physics" class="headerlink" title="Physics"></a>Physics</h3><p>熟悉的渲染方程：</p><script type="math/tex; mode=display">L_{o}(x, v)=\int_{\Omega} f_{r}(x, v, \omega) L_{i}(x, \omega)(\omega \cdot n) d \omega</script><h2 id="Single-view-3D-History-2-5D"><a href="#Single-view-3D-History-2-5D" class="headerlink" title="Single-view 3D: History + 2.5D"></a>Single-view 3D: History + 2.5D</h2><p>我们关注的问题是，如何将一张 2D 的图像理解成 3D 的表示。上面几部分我们关注“怎样表示”，而接下来的几节我们关注以怎样的方法来进行理解。</p><p><img src="https://s2.loli.net/2022/04/26/6tKqbfw4adE8N7I.png" alt="image-20220426233313729"></p><p><img src="https://s2.loli.net/2022/04/26/pgz8Vkvjuh2L6JS.png" alt="image-20220426233335167"></p><p>虽然有些图像我们难以界定其三维场景（比如上面几张图中的问题），但我们所在的世界是一个<strong>有规律性</strong>的世界，见下面几张图。</p><p><img src="https://s2.loli.net/2022/04/27/CXagBjSJefUOWc5.png" alt="image-20220427191825020"></p><p><img src="https://s2.loli.net/2022/04/27/5cJalGIndSxE9eU.png" alt="image-20220427191832287"></p><p><img src="https://s2.loli.net/2022/04/27/pv3YeU6FDRJ2q1h.png" alt="image-20220427191842738"></p><p><img src="https://s2.loli.net/2022/04/27/TeS8cNIdrqMVtCj.png" alt="image-20220427191852638"></p><p>虽然有些时候，我们对一个场景有无穷多种解释，但是有些解释比其他的可能性更大。几何的知识虽然信息量足够大，但有时还是不足够的，我们需要对于可能的场景结构有一些先验知识，以尽可能减小我们的“搜索空间”。</p><p>那么这些先验知识都有哪些呢？一种是<strong>面向用户（User-specific）</strong>的，不同的用户的先验知识不同，另一种是<strong>数据驱动型（Data-Driven）</strong>的。目前的研究范式是：<strong>主要为数据驱动型，加入特定的 Inductive bias.</strong></p><blockquote><p> What is inductive bias? </p><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%BD%92%E7%BA%B3%E5%81%8F%E7%BD%AE">https://zh.wikipedia.org/wiki/%E5%BD%92%E7%BA%B3%E5%81%8F%E7%BD%AE</a> </li><li><a href="https://www.baeldung.com/cs/ml-inductive-bias">https://www.baeldung.com/cs/ml-inductive-bias</a></li></ul><p>大概我的理解就是，一个模型所做的假设吧，这个假设可能正确性很高(strong)或是很低(weak)）。比如后续我们提到说要对室内场景建模，给出的这个 World Model 那么就是 Inductive Bias.</p></blockquote><h3 id="3D-Inference-发展的历史"><a href="#3D-Inference-发展的历史" class="headerlink" title="3D Inference 发展的历史"></a>3D Inference 发展的历史</h3><ul><li>The first vision thesis: Model-based fitting<ul><li>Improving Model-fitting: A Representative Approach</li></ul></li><li>Automatic Photo Pop-up</li><li><p>Modeling Indoor Scenes (Given the World Model as Inductive Bias)</p><ul><li>在结构方面的先验知识（Structural Prior）</li></ul></li><li><p>Towards Data-driven Modeling: Morphable Models for Faces</p><ul><li>从 3D Faces 的数据集中学习模型参数</li><li>然后用来推断未见过的图像</li></ul></li><li><p>Data-driven Modeling: A modern view</p><ul><li>使用 CNN 等神经网络，在大笔训练资料上训练神经网络</li><li>Learning from direct supervision!</li><li>我们有数据集！比如 ImageNet，比如 COCO (Common Objects in Context)</li></ul></li></ul><h3 id="Depth-Prediction：场景深度预测任务"><a href="#Depth-Prediction：场景深度预测任务" class="headerlink" title="Depth Prediction：场景深度预测任务"></a>Depth Prediction：场景深度预测任务</h3><p>任务定义非常简单：输入 2D 图片，输出这个图片对应的场景中，每个点对应的深度。</p><p><img src="https://s2.loli.net/2022/04/27/kz9MBWvFSqNEtLr.png" alt="image-20220427192302730"></p><h4 id="Loss-Function"><a href="#Loss-Function" class="headerlink" title="Loss Function"></a>Loss Function</h4><p>这样设计 Loss 的核心问题：接近成像平面的较小的物体和远离成像平面的较大的物体可能最终在图像上的表现相同。绝对深度是难以确定的…于是我们的 Loss 需要满足：</p><script type="math/tex; mode=display">L(y, y^*) = L(\alpha y, y^*), \forall \alpha > 0.</script><p>这样设计出的 Loss Function 为：</p><script type="math/tex; mode=display">\begin{gathered}L\left(y, y^{*}\right)=\sum_{i}\left\|\log y_{i}-\log y_{i}^{*}+\alpha\left(y, y^{*}\right)\right\|^{2} \\\alpha\left(y, y^{*}\right)=\frac{1}{n} \sum_{i}\left(\log y_{i}^{*}-\log y_{i}\right)\end{gathered}</script><blockquote><p>From intuition we can know that, 把 log 去掉的话这个 Loss 是 $\dfrac {y_i}{y_i^\star} \times \text{avg}(\dfrac{y^\star}{y})$，如果我们只关注预测值和真实值之间的比例关系的话，预测出 $y_i^\star = \alpha y_i, \forall i$ 的结果肯定是最好的。但是在真正运作的时候，我们没法保证这个 $\alpha$ 是个常数，于是我们就索性取了平均值。这个式子越接近于 1，取个 log，原来的 Loss Function 就越接近 0，不然就会因为范数的存在变大，非常符合直觉。</p></blockquote><h4 id="Architecture-Example"><a href="#Architecture-Example" class="headerlink" title="Architecture Example"></a>Architecture Example</h4><p><img src="https://s2.loli.net/2022/04/27/KxdplNeT9gtcOQu.png" alt="image-20220427193805996"></p><p>这是一种预测结构的例子。</p><blockquote><p>为啥把 Coarse 接回来 Refine 就能 work 了？肯定是因为又有了原图的信息吧？如果改用 ResNet 会不会可能更好？有没有可能搞个大模型学习到原图的 Dense Representation？（也就是说那种 Encoder 的感觉）</p></blockquote><h4 id="Depth-Datasets"><a href="#Depth-Datasets" class="headerlink" title="Depth Datasets"></a>Depth Datasets</h4><p>这个任务常用的一些数据集。</p><p><img src="https://s2.loli.net/2022/04/27/PrNcZdkaUJWmqsM.png" alt="image-20220427194154609"></p><h4 id="Scale-and-Shift-invariant-Depth-Prediction"><a href="#Scale-and-Shift-invariant-Depth-Prediction" class="headerlink" title="Scale and Shift-invariant Depth Prediction"></a>Scale and Shift-invariant Depth Prediction</h4><p>直接去翻了 1907 那篇 Paper: Towards Robust Monocular Depth Estimation: Mixing Datasets for Zero-shot Cross-dataset Transfer.</p><p>We identify three major challenges. </p><p>1) Inherently different representations of depth: direct vs. inverse depth representations.<br>2) Scale ambiguity: for some data sources, depth is only given up to an unknown scale.<br>3) Shift ambiguity: some datasets provide disparity only up to an unknown scale and global disparity shift that is a function of the unknown baseline and a horizontal shift of the principal points due to post-processing.</p><p>这里的 disparity 可以理解成图像中“相对深度”的感觉。</p><p>假设我们的图片有 $M$ 个像素，$d, d^\star \in \mathbb R^m$ 是 GT / Predicted disparity。 </p><p>然后我们定义两个算子：$s: \mathbb R^M \rightarrow \mathbb R_+, t: \mathbb R^M \rightarrow \mathbb R$ 是 scale 和 translation 的 estimator.</p><p>接下来是如何解决 disparity 的 scale 和 translation 不统一的问题，论文提供两种方法。</p><p>一种是最小二乘拟合 $d_i^\star$ 和 $d_i$ 的关系（$d^\star_i = s d_i + t$），找到 (s, t) 后做映射 $\hat{\mathbf{d}}=s \mathbf{d}+t, \quad \hat{\mathbf{d}}^{\star}=\mathbf{d}^{\star}$。</p><p>另一种是做 normalize：$t(\mathbf{d})=\operatorname{median}(\mathbf{d}), \quad s(\mathbf{d})=\frac{1}{M} \sum_{i=1}^{M}|\mathbf{d}-t(\mathbf{d})|$，进而 $\hat{\mathbf{d}}=\frac{\mathbf{d}-t(\mathbf{d})}{s(\mathbf{d})}, \quad \hat{\mathbf{d}}^{\star}=\frac{\mathbf{d}^{\star}-t\left(\mathbf{d}^{\star}\right)}{s\left(\mathbf{d}^{\star}\right)}$.</p><p>然后定义 scale- and shift- invariant loss：</p><script type="math/tex; mode=display">\mathcal{L}_{s s i}\left(\hat{\mathbf{d}}, \hat{\mathbf{d}}^{*}\right)=\frac{1}{2 M} \sum_{i=1}^{M} \rho\left(\hat{\mathbf{d}}_{i}-\hat{\mathbf{d}}_{i}^{*}\right)</script><p>这里 $\rho$ 可以决定这个 Loss Function 的种类：第一种就用 $\rho(x) = x^2$，第二种用 $\rho(x) = |x|.$</p><h2 id="Lecture-6-Single-view-3D-Objects"><a href="#Lecture-6-Single-view-3D-Objects" class="headerlink" title="Lecture 6: Single-view 3D: Objects"></a>Lecture 6: Single-view 3D: Objects</h2><p>我们的任务是：给定一个 2D 图片，这个图片上仅有一个物体，输出其 3D 的结构。</p><p>首先我们要解决的问题是：该怎么建坐标系。</p><p>可能的方法：</p><p><img src="https://s2.loli.net/2022/04/27/sDhF5P6dywWoACL.png" alt="image-20220427204817186"></p><ul><li>Camera Coordinate System：以相机为中心，相机轴为坐标轴</li><li>View-aligned Object-centric Coordinate System: 以物体为中心，坐标轴与相机轴对齐</li><li>Object-centric ‘Canonical’ Coordinate System: 物体中心，但是物体的“前面”是 -Z 方向，上方是 Y 方向</li></ul><p>Whenever reading a 3D prediction work, understand the prediction frame!</p><p>第三种坐标系让机器学习起来更容易（Aligned shapes have less variation）</p><p><img src="https://s2.loli.net/2022/04/27/mK4XowydG8Z6Ijh.png" alt="image-20220427210056753"></p><p>所以我们的任务变成：Given a 2D picture of a single object, how can we reconstruct the object in 3D in canonical frame?</p><h3 id="Learning-to-Predict"><a href="#Learning-to-Predict" class="headerlink" title="Learning to Predict"></a>Learning to Predict</h3><p><img src="https://s2.loli.net/2022/04/27/tgYxnEyJ13lQIFr.png" alt="image-20220427210133626"></p><p>我们可以使用合成的数据（比如上图 ShapeNet 数据集）来学习，但这样的数据既不真实，还会有偏向刚体和人造物体的 Bias。</p><h4 id="Predict-Volumetric-3D"><a href="#Predict-Volumetric-3D" class="headerlink" title="Predict Volumetric 3D"></a>Predict Volumetric 3D</h4><p><img src="https://s2.loli.net/2022/04/27/oXYvfMA589FPd4t.png" alt="image-20220427210419988"></p><p>Why not use pixel-aligned prediction? 是不是因为要求输出有连续性？而且要求有 invariant to observed viewpoint 的要求？Pixel-aligned 是否会忽略不同组件间的连接关系？</p><p><strong>Loss Function</strong>  这个 Loss 该怎么计算？</p><script type="math/tex; mode=display">-\dfrac 1 N \sum_{n=1}^N[p_n\log \hat p _n + (1-p_n) \log(1-\hat p _n)]</script><p>这个就相当于把三维的场景 Flattern，然后做 cross entropy。</p><blockquote><p>这样是否抹杀掉了一些“连接关系”对整体的影响？因为这个办法相当于是每个体素的权重是相同的。比如说在关注点高的地方缺了俩体素，和在一个本来就比较混乱的地方有两个体素的 difference 相比…</p></blockquote><p><strong>Training</strong>  Renderings of CAD models on <strong>random backgrounds</strong> (which helps to make up for the domain-shift between real images and CAD model images)</p><blockquote><p>这玩意是不是能在 Minecraft 里复现出来啊，xswl</p><p>写个插件，给它看一张二维图片，后面挂一个模型，然后直接三维重建，草草草</p><p>我记得现在只有二维复现二维的插件，颜色选择也只是逼近，绝对没有三维重建的，这不得卷爆插件区啊 :clown_face:</p><p>有空可以看下这个，看一下实现，比较好奇什么是 Context-awared，然后 fused volume 后面的 refine 经历了什么:</p><p><a href="https://openaccess.thecvf.com/content_ICCV_2019/papers/Xie_Pix2Vox_Context-Aware_3D_Reconstruction_From_Single_and_Multi-View_Images_ICCV_2019_paper.pdf">https://openaccess.thecvf.com/content_ICCV_2019/papers/Xie_Pix2Vox_Context-Aware_3D_Reconstruction_From_Single_and_Multi-View_Images_ICCV_2019_paper.pdf</a></p></blockquote><p>然后还可以 refine 一下表面，类似于 Octree 的思想。</p><p>逐层细分，对一个大体素 predict 3 个 label 其中之一：是 all empty，all occupied, 还是 mixed. 如果是 mixed，那么把这体素分成八份，每一份再递归 predict。 </p><blockquote><p>Paper 贴出来，回头细看：<a href="https://arxiv.org/pdf/1704.00710.pdf">https://arxiv.org/pdf/1704.00710.pdf</a></p></blockquote><h4 id="Predict-Implicit-Volumetric-Representations"><a href="#Predict-Implicit-Volumetric-Representations" class="headerlink" title="Predict Implicit Volumetric Representations"></a>Predict Implicit Volumetric Representations</h4><p>Instead of decoding a volumetric representation, answer occupancy query of an arbitrary point.</p><blockquote><p>也是类似于上面的 Encoder-Decoder 架构，不过上面 Decoder 在回答二分类（occupied or not）/三分类（empty, occupied or mixed），这里的 Decoder 在 answer occupancy query of an arbitrary point.</p><p>这样是不是要对空间 sample 足够多个点啊？看到下一页 PPT 确实，resolution 和 sample 的点数有关系。</p></blockquote><h4 id="Predict-Point-Clouds"><a href="#Predict-Point-Clouds" class="headerlink" title="Predict Point Clouds"></a>Predict Point Clouds</h4><p><img src="https://s2.loli.net/2022/04/27/jL2ksEySYFoGmZ8.png" alt="image-20220427213755786"></p><p><strong>We need permutation invariant learning objectives!</strong></p><p>定义 Loss 的方法：</p><ul><li>Chamfer Distance</li></ul><p><img src="https://s2.loli.net/2022/04/27/hRsmx6idVayJ3vl.png" alt="image-20220427213934586"></p><ul><li>Earth Mover’s Distance</li></ul><p><img src="https://s2.loli.net/2022/04/27/1fw5UtHpYLB9nVP.png" alt="image-20220427214144419"></p><blockquote><p>怎么变图论问题了啊，离散数学我没学会啊x</p></blockquote><h5 id="Predict-Parametric-Point-Clouds"><a href="#Predict-Parametric-Point-Clouds" class="headerlink" title="Predict Parametric Point Clouds"></a>Predict Parametric Point Clouds</h5><p><img src="https://s2.loli.net/2022/04/27/HF4wsGNn7felgc9.png" alt="image-20220427214514627"></p><h4 id="Predict-Meshes"><a href="#Predict-Meshes" class="headerlink" title="Predict Meshes"></a>Predict Meshes</h4><p><img src="https://s2.loli.net/2022/04/27/SRziLandU2YmCw3.png" alt="image-20220427214613371"></p><h5 id="Training-Objective"><a href="#Training-Objective" class="headerlink" title="Training Objective"></a>Training Objective</h5><p><img src="https://s2.loli.net/2022/04/27/4upMcDVQvmnkFYB.png" alt="image-20220427220947376"></p><h5 id="Regularization-Smoothness"><a href="#Regularization-Smoothness" class="headerlink" title="Regularization: Smoothness"></a>Regularization: Smoothness</h5><p>A vertex should get near to average of its neighbors, and that is: $\delta_{i}=\frac{1}{d_{i}} \sum_{j \in N(i)}\left(\mathbf{v}_{i}-\mathbf{v}_{j}\right)$.</p><p>于是我们把 $\sum |\delta_i|$ 作为正则项就好了。这也可以表述为 $||LV||^2$：</p><p><img src="https://s2.loli.net/2022/04/27/VdopXzWbZgTnj1U.png" alt="image-20220427221616389"></p><h5 id="Learning-to-Deform-Meshes"><a href="#Learning-to-Deform-Meshes" class="headerlink" title="Learning to Deform Meshes"></a>Learning to Deform Meshes</h5><p><img src="https://s2.loli.net/2022/04/27/MITv5VwAkCarp6g.png" alt="image-20220427221756418"></p><h3 id="Evaluation-Methods"><a href="#Evaluation-Methods" class="headerlink" title="Evaluation Methods"></a>Evaluation Methods</h3><ul><li>IoU: $\dfrac {\text{Intersection}}{\text{Union}}$</li><li>Chamfer Distance</li><li>F1-score @ t<ul><li>Precision @ t: fraction of predicted points within $t$ of some GT points</li><li>Recall @ t: fraction of GT points within t of some predicted point</li><li>F1 @ t = 2 <em> (Precision @ t) </em> (Recall @ t) / (Precision @ t + Recall @ t).</li></ul></li></ul><blockquote><p>暂时先这样吧 有时间可能去看看另一个课 或者装一下 Pytorch3D 试着做一下 Assignments 2022-4-27 22:24:51</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;大概是一些笔记和个人想法吧。f.r. &lt;a href=&quot;https://learning3d.github.io/&quot;&gt;https://learning3d.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 个人想法用这种格式书写，与笔记区分。所以可以直接跳过这部分，只看正文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本课程可能 cover 的内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三维模型的显式、隐式与 Nerual 表示&lt;ul&gt;
&lt;li&gt;如何将三维的数据用可计算的方式来表示？&lt;/li&gt;
&lt;li&gt;不同类型的表示方式有哪些有点和缺点？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Image Formation&lt;ul&gt;
&lt;li&gt;Form 2D Images from 3D Objects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data-driven 3D Prediction&lt;ul&gt;
&lt;li&gt;表示方法与学习目标&lt;/li&gt;
&lt;li&gt;重建刚体、连接体、整个场景&lt;/li&gt;
&lt;li&gt;弱监督？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Instance-specific 3D from multi-view&lt;/li&gt;
&lt;li&gt;Processing and Generating 3D&lt;/li&gt;
&lt;li&gt;Potpurri + Project Presentations&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="理论" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/"/>
    
    <category term="理论/三维视觉" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/%E7%90%86%E8%AE%BA-%E4%B8%89%E7%BB%B4%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="三维视觉" scheme="https://www.c7w.tech/tags/%E4%B8%89%E7%BB%B4%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>光子映射与 SPPM</title>
    <link href="https://www.c7w.tech/photon-mapping/"/>
    <id>https://www.c7w.tech/photon-mapping/</id>
    <published>2022-04-11T11:09:34.000Z</published>
    <updated>2022-04-11T11:13:25.638Z</updated>
    
    <content type="html"><![CDATA[<p>从 PT 迁移学习到 SPPM.</p><a id="more"></a><h2 id="Basic-Photon-Mapping"><a href="#Basic-Photon-Mapping" class="headerlink" title="Basic Photon Mapping"></a>Basic Photon Mapping</h2><p>基本的光子映射分为两个阶段（pass）。</p><p>第一阶段，构建一张光子图，存储从光源发射的所有光子的通量信息。</p><p>第二阶段，从相机进行传统的路径追踪（path tracing），在追踪到漫反射表面的时候，统计附近的光子信息，并根据这些信息计算出最终的辐射率（radiance）。</p><h3 id="Pass-1-Building-Photon-Map"><a href="#Pass-1-Building-Photon-Map" class="headerlink" title="Pass 1: Building Photon Map"></a>Pass 1: Building Photon Map</h3><p>我们从光源发射出光子，让光子在场景中反复弹射，每次击中漫反射表面都进行一次光子的记录，直到被某个漫反射表面彻底吸收掉为止。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从 PT 迁移学习到 SPPM.&lt;/p&gt;</summary>
    
    
    
    <category term="理论" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/"/>
    
    <category term="理论/计算机图形学" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/%E7%90%86%E8%AE%BA-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="图形学" scheme="https://www.c7w.tech/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>多线程 in C &amp; C++ &amp; Python</title>
    <link href="https://www.c7w.tech/multi-thread/"/>
    <id>https://www.c7w.tech/multi-thread/</id>
    <published>2022-04-09T16:07:25.000Z</published>
    <updated>2022-04-10T03:48:57.339Z</updated>
    
    <content type="html"><![CDATA[<p>c7w 显出极高兴的样子，将两个指头的长指甲敲着键盘，点头说，“对呀对呀！……多线程有四样写法，你知道么？”</p><a id="more"></a><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>C 首先拿下一杀. 编译时记得 <code>-pthread</code>.</p><ul><li>创建线程、收获返回值</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"pthread.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdlib.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_THREADS</span> <span class="token expression"><span class="token number">12</span></span></span><span class="token keyword">struct</span> <span class="token class-name">ReturnVal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> seed<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> my_sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">InputVal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> seed<span class="token punctuation">;</span>    <span class="token keyword">int</span> rubbish<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ReturnVal</span><span class="token operator">*</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Input: void*</span><span class="token comment">// Output: void*</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> r_in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">InputVal</span><span class="token operator">*</span> in <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">InputVal</span><span class="token operator">*</span><span class="token punctuation">)</span> r_in<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'm a thread! I'm running with seed %d!\n"</span><span class="token punctuation">,</span> in<span class="token operator">-></span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span>in<span class="token operator">-></span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> my_sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5e7</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        my_sum <span class="token operator">+=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'm a thread! I'm exiting with output %lld!\n"</span><span class="token punctuation">,</span> my_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    in<span class="token operator">-></span>ret<span class="token operator">-></span>seed <span class="token operator">=</span> in<span class="token operator">-></span>seed<span class="token punctuation">;</span> in<span class="token operator">-></span>ret<span class="token operator">-></span>my_sum <span class="token operator">=</span> my_sum<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Thread IDs</span>    <span class="token class-name">pthread_t</span> tids<span class="token punctuation">[</span>NUM_THREADS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">InputVal</span> in<span class="token punctuation">[</span>NUM_THREADS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ReturnVal</span> ret<span class="token punctuation">[</span>NUM_THREADS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_THREADS<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>seed <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rubbish <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ret <span class="token operator">=</span> ret <span class="token operator">+</span> i<span class="token punctuation">;</span>        <span class="token comment">// Create Threads!</span>        <span class="token comment">// Params: Thread ID Storage, Thread Attribute, Function, Function args</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span>tids <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> run<span class="token punctuation">,</span> in <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Create error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread ID %lld created!\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> tids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_THREADS<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Joining threads!</span>        <span class="token function">pthread_join</span><span class="token punctuation">(</span>tids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Reaping thread %lld with output %lld!\n"</span><span class="token punctuation">,</span> tids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>my_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//</span><span class="token comment">// Created by c7w on 2022/4/10.</span><span class="token comment">//</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_THREADS</span> <span class="token expression"><span class="token number">12</span></span></span><span class="token keyword">struct</span> <span class="token class-name">ReturnVal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> seed<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> my_sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">int</span> seed<span class="token punctuation">,</span> <span class="token keyword">int</span> rubbish<span class="token punctuation">,</span> ReturnVal<span class="token operator">*</span> ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'm a thread! I'm running with seed %d!\n"</span><span class="token punctuation">,</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> my_sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5e7</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        my_sum <span class="token operator">+=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ret<span class="token operator">-></span>seed <span class="token operator">=</span> seed<span class="token punctuation">;</span> ret<span class="token operator">-></span>my_sum <span class="token operator">=</span> my_sum<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I'm a thread! I'm exiting with output %lld!\n"</span><span class="token punctuation">,</span> my_sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>thread<span class="token double-colon punctuation">::</span>id main_thread_id <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Main thread ID: %lld\n"</span><span class="token punctuation">,</span> main_thread_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>thread threads<span class="token punctuation">[</span>NUM_THREADS<span class="token punctuation">]</span><span class="token punctuation">;</span>    ReturnVal ret<span class="token punctuation">[</span>NUM_THREADS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_THREADS<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">thread</span><span class="token punctuation">(</span>run<span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ret <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thread ID %lld created!\n"</span><span class="token punctuation">,</span> threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_THREADS<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>thread<span class="token double-colon punctuation">::</span>id id <span class="token operator">=</span> threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Reaping thread %lld with output %lld!\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>my_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>mutex</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//</span><span class="token comment">// Created by c7w on 2022/4/10.</span><span class="token comment">//</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token keyword">volatile</span> <span class="token keyword">int</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>mutex mtx<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">attempt_10k_increases</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mtx<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>counter<span class="token punctuation">;</span>        mtx<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>thread threads<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">thread</span><span class="token punctuation">(</span>attempt_10k_increases<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>th<span class="token operator">:</span> threads<span class="token punctuation">)</span> th<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> counter <span class="token operator">&lt;&lt;</span> <span class="token string">" successful increases of the counter.\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="C-Sharp"><a href="#C-Sharp" class="headerlink" title="C Sharp"></a>C Sharp</h2><ul><li><a href="https://c7w.tech/multi-thread-and-concurrent/">https://c7w.tech/multi-thread-and-concurrent/</a></li></ul><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>Python 本身是单线程执行，同一时刻只有一个线程可以执行 Python 代码。于是我们用 <code>multiprocessing</code> 产生多个进程。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">import</span> randomNUM_THREADS <span class="token operator">=</span> <span class="token number">12</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>seed<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> rubbish<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"I'm a thread! I'm running with seed </span><span class="token interpolation"><span class="token punctuation">&#123;</span>seed<span class="token punctuation">&#125;</span></span><span class="token string">!"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    my_sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>10_000_000<span class="token punctuation">)</span><span class="token punctuation">:</span>        my_sum <span class="token operator">+=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"I'm a thread! I'm exiting with output </span><span class="token interpolation"><span class="token punctuation">&#123;</span>my_sum<span class="token punctuation">&#125;</span></span><span class="token string">!"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    process_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># Start multi-processing</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>NUM_THREADS<span class="token punctuation">)</span><span class="token punctuation">:</span>        process_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>run<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        process_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Wait for joining</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>NUM_THREADS<span class="token punctuation">)</span><span class="token punctuation">:</span>        process_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>共享数据（也可用于无序取回返回值）</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Queue<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">'h22ello'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># prints "[42, None, 'hello']"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># prints "'h22ello'"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># Block the process until next item arrives</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>使用 p_tqdm（也可用于有序取回返回值）</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> p_tqdm <span class="token keyword">import</span> p_mapl1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> badded <span class="token operator">=</span> p_map<span class="token punctuation">(</span>add<span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>added<span class="token punctuation">)</span></code></pre><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1306580710588449">https://www.liaoxuefeng.com/wiki/1252599548343744/1306580710588449</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;c7w 显出极高兴的样子，将两个指头的长指甲敲着键盘，点头说，“对呀对呀！……多线程有四样写法，你知道么？”&lt;/p&gt;</summary>
    
    
    
    <category term="理论" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/"/>
    
    <category term="理论/高性能" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/%E7%90%86%E8%AE%BA-%E9%AB%98%E6%80%A7%E8%83%BD/"/>
    
    
    <category term="多线程" scheme="https://www.c7w.tech/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="并发" scheme="https://www.c7w.tech/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>《计算机网络原理》补完计划</title>
    <link href="https://www.c7w.tech/cs-network/"/>
    <id>https://www.c7w.tech/cs-network/</id>
    <published>2022-03-31T01:55:18.000Z</published>
    <updated>2022-04-14T03:07:30.599Z</updated>
    
    <content type="html"><![CDATA[<p>2022 Spring，cy 老师的计网原。算是当期末的背诵提纲使用吧。希望不会咕咕咕。</p><p>“补完计划”是指半期开始才开始做这个东西。</p><a id="more"></a><h2 id="介质访问子层基础"><a href="#介质访问子层基础" class="headerlink" title="介质访问子层基础"></a>介质访问子层基础</h2><h3 id="本节目标"><a href="#本节目标" class="headerlink" title="本节目标"></a>本节目标</h3><ol><li><p>了解 MAC 子层的位置和功能</p></li><li><p>掌握两种 ALOHA 协议的原理和性能</p></li><li><p>掌握 CSMA 的工作原理及性能区别</p></li><li><p>掌握经典以太网的拓扑和帧结构</p></li><li><p>掌握以太网 CSMA/CD 中最小帧长与相关参数的关系</p></li></ol><ul><li>多路访问协议</li></ul><p><img src="https://s2.loli.net/2022/03/31/u6YRTVOl2MG5yps.png" alt="image-20220331103939307"><img src="https://s2.loli.net/2022/03/31/aN4mlpD91OeRWnV.png" alt="image-20220331115410069"></p><h3 id="Mac-子层"><a href="#Mac-子层" class="headerlink" title="Mac 子层"></a>Mac 子层</h3><p><img src="https://s2.loli.net/2022/03/31/jo9lgZVIxJ4LRTq.png" alt="image-20220331103335999"></p><p>数据链路层分为两个子层：用于介质访问控制的 Mac 子层（Medium Access Control）和逻辑链路控制 LLC 子层。</p><h3 id="随机访问"><a href="#随机访问" class="headerlink" title="随机访问"></a>随机访问</h3><h4 id="ALOHA-协议"><a href="#ALOHA-协议" class="headerlink" title="ALOHA 协议"></a>ALOHA 协议</h4><h5 id="纯-ALOHA-协议"><a href="#纯-ALOHA-协议" class="headerlink" title="纯 ALOHA 协议"></a>纯 ALOHA 协议</h5><p>纯 ALOHA 协议的工作原理是想发就发，而两个或以上的帧随时可能会冲突。发生冲突的帧被完全破坏，破坏了的帧要进行重传。</p><p>为了便于分析我们定义以下概念并做出相应假设：</p><ul><li>帧时：发送一个标准长的帧所需的时间</li><li>网络负载：某段时间内所有通信站点总共发送的平均帧数，即平均负载 $G$</li><li>某个帧时内，到达帧数为 $k$ 的概率为 $P[k] = \dfrac{G^k}{k!}\times e^{-k}$.<ul><li>$k=0$ 时表示该帧时内没有帧到达的概率为 $P[0] = e^{-G}$.</li></ul></li></ul><p><img src="https://s2.loli.net/2022/03/31/A98YzeloR1EsNW2.png" alt="image-20220331110240317"></p><p>纯 ALOHA 协议的冲突危险期是 $2D$，其中 $D$ 是帧时长度。这是因为针对一个数据帧来说，另一个数据帧只有其发送时间在这个数据帧的发送时间的 $\pm D$ 之外，才可能与其不冲突。</p><p>于是，想要成功传输一个帧，这 $2D$ 的时间内应该均没有其他帧到达。于是该帧被成功传输的概率为 $P[0]^2=e^{-2G}$.</p><p>在一个帧时内，纯 ALOHA 协议平均成功传输的帧数为：$S=G\times e^{-2G}$，当 $G=0.5$ 时，$S_{max} \approx 0.184$.</p><h5 id="分隙-ALOHA-协议"><a href="#分隙-ALOHA-协议" class="headerlink" title="分隙 ALOHA 协议"></a>分隙 ALOHA 协议</h5><p>分隙 ALOHA（Slotted ALOHA）将连续的时间离散化成<strong>时隙</strong>，每一个 Time Slot 的长度就是 $D$。其规定每一帧的发送<strong>只能在时隙的起点</strong>。也就是说，既然冲突就彻底冲突，要不然就不可能冲突：</p><p><img src="https://s2.loli.net/2022/03/31/jf2T8KUxiEqW5JD.png" alt="image-20220331110624254"></p><p>这样做将冲突危险期降为了 $D$，一个帧时内平均成功传输的帧数 $S=G\times e^{-G}$，当 $G=1$ 时 $S_{max}=\frac 1 e \approx 0.368$.</p><h4 id="CSMA-协议"><a href="#CSMA-协议" class="headerlink" title="CSMA 协议"></a>CSMA 协议</h4><p>CSMA 协议是载波侦听多路访问协议（Carrier Sense Multiple Access）的缩写。载波监听是说站点在为发送帧而访问传输信道之前，首先会监听信号是否已有载波。若已有载波，即有其他用户在使用信道，则不发送帧以避免冲突。</p><p>CSMA 协议的特点：“先听后发”。</p><h5 id="持续式-CSMA"><a href="#持续式-CSMA" class="headerlink" title="持续式 CSMA"></a>持续式 CSMA</h5><p>特点：</p><ul><li>经侦听，若介质空闲则发送</li><li>若发送时出现冲突则等待随机时间再重复侦听步骤</li><li>如介质忙则持续侦听，一旦空闲立即发送</li></ul><p>优点：</p><ul><li>持续侦听的等待延迟较小</li></ul><p>主要问题：</p><ul><li>如果两个以上的站等待发送，一旦介质空闲就一定会发生冲突</li></ul><h5 id="非持续式-CSMA"><a href="#非持续式-CSMA" class="headerlink" title="非持续式 CSMA"></a>非持续式 CSMA</h5><p>改进：</p><ul><li>如介质忙，则等待随机时间，然后再次侦听</li></ul><p>优点：</p><ul><li>等待一个随机时间可以减少再次碰撞冲突的可能性</li></ul><p>主要问题：</p><ul><li>信道利用率下降，传输时延增加：等待时间内介质上如果没有数据传送，则浪费了时间</li></ul><h5 id="p-持续式-CSMA"><a href="#p-持续式-CSMA" class="headerlink" title="p-持续式 CSMA"></a>p-持续式 CSMA</h5><p>改进：</p><ul><li>经侦听，如介质空闲，那么以 $p$ 的概率发送，以 $1–p$ 的概率延迟一个时间单元发送</li><li>如介质忙，持续侦听，一旦空闲重复上述步骤</li><li>如果发送已推迟一个时间单元，再重复上述步骤</li></ul><p>这就类似于 Russian Roulette…</p><p>持续式 CSMA 事实上是 1-持续式 CSMA.</p><p><img src="https://s2.loli.net/2022/03/31/gJ1wj2B8vnAayix.png" alt="image-20220331111701225"></p><p>如 0.01-persistent CSMA，高吞吐量可能意味着高时延…</p><h3 id="受控访问"><a href="#受控访问" class="headerlink" title="受控访问"></a>受控访问</h3><h4 id="位图协议"><a href="#位图协议" class="headerlink" title="位图协议"></a>位图协议</h4><p>每个周期划分成两个时段：</p><ul><li>竞争期：在自己的时槽内发送竞争 Bit，举手示意预留资源（Contention Slot）</li><li>传输期：按序发送，明确使用权，避免冲突</li></ul><p><img src="https://s2.loli.net/2022/03/31/dJwhCVBrE7mPKz8.png" alt="image-20220331112032634"></p><p>假设有 $N$ 个用户，需 $N$ 个时隙，每帧 $d$ bit。则信道利用率：</p><ul><li>当在低负载时：$\omega = \dfrac d {d+N}$</li><li><p>当在高负载时：$\omega = \dfrac d {d+1}$</p><p>位图协议的缺点：位图协议时延较大，没有考虑优先级。</p></li></ul><h4 id="二进制倒计数协议"><a href="#二进制倒计数协议" class="headerlink" title="二进制倒计数协议"></a>二进制倒计数协议</h4><p>将所有站点编二进制序号。若站点要占用信道则广播该信号，不同站发的地址按位或。一旦某站了解到比本站地址高位更高的位置被置为“1”，便放弃发送请求。</p><p>N个站的二进制编码所需位数是 $\log_2N$ 位，每帧 $d$ 比特，信道的利用率为：$\omega = \dfrac d {d+\log_2 N}$。</p><p>如何实现 100% 的利用率？如果规定每个帧的帧头为发送地址，竞争时也在发源地址，则效率为 100%。</p><p>特点分析：高序号站点优先。</p><h4 id="IEEE-802-5-令牌环"><a href="#IEEE-802-5-令牌环" class="headerlink" title="IEEE 802.5 令牌环"></a>IEEE 802.5 令牌环</h4><p>令牌（Token）便是使用信道发送信息的权限。令牌环是说令牌在站点环中不断传递，发送站点抓取环中传输的令牌，获得发送权，从而向环中发送数据帧。为了防止无限循环，环上的帧需要由目的站或发送站将其从环上去除，重新生成令牌，并转入监听模式。</p><ul><li>环的维护：环上存在一个监控站，负责环的维护，通过站的竞争产生令牌</li><li>监控站的职责：保证令牌不丢失；处理环断开情况；清除坏帧，检查无主帧；</li><li>优点：重负载下，效率接近 100%；除了环，令牌也可以运行在其它拓扑上，如令牌总线；</li><li>缺点：令牌具有其维护代价。</li></ul><h3 id="有限竞争"><a href="#有限竞争" class="headerlink" title="有限竞争"></a>有限竞争</h3><h4 id="自适应树搜索协议"><a href="#自适应树搜索协议" class="headerlink" title="自适应树搜索协议"></a>自适应树搜索协议</h4><p><img src="https://s2.loli.net/2022/03/31/bTpjaMUBrCy7XfE.png" alt="image-20220331114703935"></p><p>将所有站点组织成一颗二叉树结构。初始时所有站可以竞争信道，如果只有一个站要使用信道则直接发送。</p><p>不然，在第 1 槽内半数站（2 以下站）参与竞争，如其中之一获得信道，本帧后的时槽留给 3 以下的站。</p><p>重负载时，从根结点开始竞争，发生冲突的概率非常大。为提高效率，可以从中间结点开始竞争。</p><h2 id="Mac-子层进阶"><a href="#Mac-子层进阶" class="headerlink" title="Mac 子层进阶"></a>Mac 子层进阶</h2><h3 id="经典以太网：Mac-子层"><a href="#经典以太网：Mac-子层" class="headerlink" title="经典以太网：Mac 子层"></a>经典以太网：Mac 子层</h3><p><img src="https://s2.loli.net/2022/04/07/IB4FwyUgYLifA6Z.png" alt="image-20220407102316451"></p><p>CSMA 协议确实是在侦听到介质上没有数据发送时才发送，而发送后在实际应用中却仍然可能发生冲突。这包括两种可能的情况：</p><ul><li>同时传送</li><li>传播延迟时间</li></ul><p>而面对潜在的冲突，我们可以使用 CSMA/CD（CSMA with Collision Detection，载波监听冲突检测）模式，即先听后发，边发边听。</p><p><img src="https://s2.loli.net/2022/03/31/SWmZzFADoT7b5Ju.png" alt="image-20220331120232405"></p><p>Collision Detection 的 Motivation：两个帧发生冲突之后，继续传输损坏帧毫无意义，浪费信道。如果站点边发送便监听，如果监听到冲突则停止发送，则可以提高信道的利用率。</p><p>CSMA/CD 的工作过程：</p><ul><li>经侦听，若介质空闲则发送</li><li>若介质忙则持续侦听，一旦空闲立刻发送</li><li>如果发生冲突，立即停止并发送 Jam（强化）信号，等待一个随机分布的时间再重复步骤</li></ul><p>Jam 信号是向连接中的所有站点汇报“有冲突发生”，停止传输。</p><p><img src="https://s2.loli.net/2022/03/31/oXPCtQ1er79SR2f.png" alt="image-20220331120619288"></p><p>定义冲突窗口为发送站发送帧后能检测到冲突的最长时间，如上述的 $t_4-t_0$。冲突窗口最大为 $2D=RTT$，其中 $D$ 为单边延迟。</p><p>这对发送方提出了需求：在发送一帧的同时，完成该帧的冲突检测。如有冲突，则要求在一帧发送完成前检测到冲突。</p><p>因此要求发送方①<u>帧与帧之间的发送间隔至少为一个冲突窗口的时间</u>，即 $2D$. 除此之外，我们还需规定②<u>最短帧长</u>。</p><h4 id="二进制指数后退的-CSMA-CD"><a href="#二进制指数后退的-CSMA-CD" class="headerlink" title="二进制指数后退的 CSMA/CD"></a>二进制指数后退的 CSMA/CD</h4><ul><li>确定基本退避时间槽，其长度为以太介质上往返传播时间($2𝜏$)，以太网中设为 512 Bit 时间</li><li>定义重传次数 $k$ 满足 $k = \min {\{\text{cnt}, 10\}}$.</li><li>从整数集合 $[0,1,\cdots, 2k −1]$ 中随机地取出一个数，记为 $r$</li><li>重传所需的时延就是 $r$ 倍的时间槽 $2𝜏$</li><li>当重传达 16 次仍不能成功时即丢弃该帧，并向高层报告</li></ul><p>接下来进行效率分析。假设 $F$ 为 frame length，$B$ 为 bandwidth，$L$ 为电缆长度，$c$ 为信号传输速度，每帧有 $e$ 个竞争时间槽。记 $P := F / B$.</p><p>信道效率 $\omega = \dfrac P {P + 2𝜏 /A}= \dfrac 1 {1 + 2BLe/cF}$，其中 $A$ 是某个站获得信号的概率。</p><h4 id="帧结构"><a href="#帧结构" class="headerlink" title="帧结构"></a>帧结构</h4><p><img src="https://s2.loli.net/2022/04/07/hpYfgbG9JliDWUK.png" alt="image-20220407102404300"></p><ul><li>硬件地址又称为物理地址，或 MAC 地址</li><li>MAC帧中的源地址和目的地址长度均为6字节</li></ul><h4 id="单播、广播、组播与-Mac-地址"><a href="#单播、广播、组播与-Mac-地址" class="headerlink" title="单播、广播、组播与 Mac 地址"></a>单播、广播、组播与 Mac 地址</h4><p><img src="https://s2.loli.net/2022/04/07/k3YuzEWorCPDvIF.png" alt="image-20220407101113601"></p><ul><li>单播：发送者发送四份相同的数据</li><li>组播：发送者发送一份数据，由路由器进行复制。若上路接收端撤走则上路不再发送。</li><li>广播：发送者发送一份数据，由路由器进行复制。类似于全域搜索。</li></ul><p>这体现在 Mac 地址的编号中：</p><p><img src="https://s2.loli.net/2022/04/07/rsoPZYTHi84yueh.png" alt="image-20220407101459041"></p><ul><li>前 3 个字节为生产厂商特有，后 3 个字节为生产厂商进行指定。</li><li>原地址的 $b_1$ 位只可能是 $0$。</li><li>接收端除了精准匹配目的地址与自己的 Mac 地址相同（单播）之外，还应该注意广播与组播的情况，比如 $\text{FF-FF-FF-FF-FF-FF}$.</li></ul><h4 id="数据包类型"><a href="#数据包类型" class="headerlink" title="数据包类型"></a>数据包类型</h4><ul><li>IPv4: 0x0800</li><li>ARP: 0x0806</li><li>IPv6: 0x86DD</li><li>PPP: 0x880B</li><li>PPPoE: 0x8864</li></ul><h4 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h4><p><img src="https://s2.loli.net/2022/04/07/H4qmFuxbvjsfiZJ.png" alt="image-20220407102459233"></p><ul><li>允许的数据字段为 $46$ ~ $1500$ 字节。</li><li>最小帧长 $46+18=64$ Byte.</li><li>最大帧长 $1500+18=1518$ Byte.</li><li>也就是说，给予上层的最大传输单元 MTU：1500 Byte.</li><li>数据字段不足 46 字节，需要填充整数字节（Padding）至 46 字节，以保证以太网 Mac 帧不小于 64 字节。</li></ul><h4 id="校验和"><a href="#校验和" class="headerlink" title="校验和"></a>校验和</h4><ul><li><p>FCS, Frame Check Sequence</p></li><li><p>使用 CRC32 计算除了校验和以外的其他字段</p></li><li>对于检查出的无效 MAC 帧就简单地丢弃，以太网不负责重传丢弃的帧</li></ul><h3 id="链路层交换原理"><a href="#链路层交换原理" class="headerlink" title="链路层交换原理"></a>链路层交换原理</h3><p>先考虑使用<strong>集线器</strong>来进行以太网的组建。集线器是物理层的设备，所有端口内部都是连通的，使用同一根总线。使用 Hub 来扩展以太网，不仅不会增加集线器的容量，还限制了网络的可扩展性。</p><p>我们或许可以通过“分域”的方式来解决这个问题，而这里便用<strong>交换机</strong>来替代集线器。</p><p><img src="https://s2.loli.net/2022/04/07/Ptnqkb2erTiOvmM.png" alt="image-20220407105130838"></p><p>我们的目标是在交换机中建立“转发表”，关联站地址与接口。</p><p><img src="https://s2.loli.net/2022/04/07/KDFOpv5ka8GRhEo.png" alt="image-20220407110555004"></p><p>如何避免手工配置呢？可以采用“逆向学习源地址”的方式，根据接收到的帧完善 Mac 地址表。</p><h4 id="Mac-地址表的工作方式"><a href="#Mac-地址表的工作方式" class="headerlink" title="Mac 地址表的工作方式"></a>Mac 地址表的工作方式</h4><p><img src="https://s2.loli.net/2022/04/07/F7cVAsHpf5YhDUE.png" alt="image-20220407110739162"></p><p><img src="https://s2.loli.net/2022/04/07/ltPaeWw84XfFNvI.png" alt="image-20220407110743359"></p><p><img src="https://s2.loli.net/2022/04/07/AsUnaoNGShl5KX6.png" alt="image-20220407110748765"></p><p>安全隐患的防范：防止 Mac 地址表溢出？</p><ul><li>设定老化时间（默认 300 s）</li><li>当老化时间到期时，该表项会被清除</li><li>在“逆向学习”更新表项时，同时更新其老化时间</li></ul><h3 id="生成树协议"><a href="#生成树协议" class="headerlink" title="生成树协议"></a>生成树协议</h3><p>树形的拓扑结构使得任何一条“割边”被去掉之后，网络就变成了两个连通支。可靠的网络需要冗余的拓扑结构，但是可能会导致物理环路的产生。</p><p>物理环路的产生具有下列问题：</p><p><strong>Mac 地址表不稳定</strong> 当一个帧的多个副本到达不同端口时，交换机会不断修改同一 Mac 地址对应的端口。</p><p><img src="https://s2.loli.net/2022/04/07/7XGhlLqbUYokFSO.png" alt="image-20220407112309625"></p><p><strong>重复帧</strong> X 发送到环路的单播帧，造成目的设备 Y 收到重复的帧。</p><p><strong>广播风暴</strong>  交换机（网桥）在物理环路上无休止地泛洪广播流量，无限循环，迅速消耗网络资源。</p><p><img src="https://s2.loli.net/2022/04/07/V6rsEvmTUcM9yfa.png" alt="image-20220407112436267"></p><p>物理环路的解决思路？建网的时候建成复杂的图拓扑结构，而使用的时候构造最小生成树！</p><p>而实际运用时，我们对于这张“图”的拓扑结构并不知情，图中的每个结点都是一个单独的交换机，和其他的交换机连接与否均存在可能。</p><h4 id="BPDU-与生成树的选举"><a href="#BPDU-与生成树的选举" class="headerlink" title="BPDU 与生成树的选举"></a>BPDU 与生成树的选举</h4><p>接下来介绍如何得到一颗无环的生成树。参与组网的交换机需要收发 BPDU（桥协议数据单元）选举产生根桥、根端口、指定端口，形成生成树。</p><p><img src="https://s2.loli.net/2022/04/07/PGRBoxDhFeKmA9f.png" alt="image-20220407114215580"></p><p>生成树的三个选举过程：</p><ul><li>选举<strong>根桥</strong>作为整个局域网的根（树根）<ul><li>首先比较优先级，优先级数值最小的交换机胜出成为根桥</li><li>如果优先级数值相等，MAC 地址最小的交换机成为根桥</li><li>根桥的所有端口都处在转发状态</li></ul></li><li>为每个非根桥选出一个根端口<ul><li>每个非根桥，通过比较其每个端口到根桥的<strong>根路径开销</strong>，选出根端口</li><li>具有最小根路径开销的端口被选作根端口</li><li>如果多个端口的根路径开销相同，则端口ID最小的端口被选作根端口</li><li>非根桥只能有一个根端口，根端口处于转发状态</li><li>定义“路径开销”为路径的 Capacity</li></ul></li></ul><p><img src="https://s2.loli.net/2022/04/07/tqXnT5iCaWGklhF.png" alt="image-20220407114605184"></p><ul><li><p>为每个网段确定一个指定端口</p><ul><li>即代表端口，代表这个网段向其他网段转发数据</li><li>对于每一个网段，在所有连接到它的交换机（网桥）端口中进行选择</li><li>一个具有最小根路径开销的端口，作为该网段的指定端口</li><li>指定端口处于转发状态，负责该网段的数据转发</li><li>连接该网段的其他端口，若既不是指定端口，也不是根端口，则阻塞</li></ul></li><li><p>端口角色与端口状态</p></li></ul><p><img src="https://s2.loli.net/2022/04/07/jRkoFn3c8DXUSBd.png" alt="image-20220407115511884"></p><p>为了适应网络的动态变化：</p><p><img src="https://s2.loli.net/2022/04/07/ahWMJVSFqLIAtHy.png" alt="image-20220407115825127"></p><h4 id="源路由网桥"><a href="#源路由网桥" class="headerlink" title="源路由网桥"></a>源路由网桥</h4><p>源路由（Source Routing）网桥的需求分析</p><ul><li><p>目的地定位：发送者需要知道目的主机在哪里 </p><ul><li>如果不在自己的 LAN 里，在发出的帧头内构造一个准确的路由序列，包含要经过的网桥、LAN的编号</li><li>网桥对接收到的帧，决定是否采用源路由</li></ul></li><li><p>通过广播“发现帧”（Discovery Frame）获得最佳路由（在搜索时记录中间路径）</p><ul><li>源站若需要定位目的地，则发送“发现帧”，每个网桥收到后广播</li><li>该帧经过网桥时被加上桥标识（接口标识），目的站收到后发应答帧</li><li>源站收到后就知道了到目的站的最佳路由</li></ul></li><li>优点：对拓扑和带宽进行最优使用</li><li>缺点：网桥的插入对于网络是不透明的（要进行端-网协同）</li></ul><p><img src="https://s2.loli.net/2022/04/07/9UwsahdB7PjDTM3.png" alt="image-20220407120832227"></p><h3 id="链路层交换机"><a href="#链路层交换机" class="headerlink" title="链路层交换机"></a>链路层交换机</h3><p>交换机是一种即插即用网络设备，执行数据链路层交换算法。其交换方式从带宽的角度可以分为对称交换与非对称交换两种，这取决于出和入的带宽是否相同。</p><p><img src="https://s2.loli.net/2022/04/07/PvGIBLQ5rtZXWfa.png" alt="image-20220407121138075"></p><p>链路层交换机的三种交换模式：</p><p><strong>存储转发</strong> 转发前必须接收整个帧、执行 CRC 校验。这样可以不转发出错帧、支持非对称交换，而转发延迟较大。</p><p><strong>直通交换</strong> 一旦接收到帧的目的地址，就开始转发。这样延迟非常小，可以边入边出，但可能转发错误帧，不支持非对称交换。</p><p><img src="https://s2.loli.net/2022/04/07/9mwHkdthU2XJxWo.png" alt="image-20220407121317152"></p><p><strong>无碎片交换</strong> 接收到帧的前 64 字节，即开始转发。这样过滤了冲突碎片，延迟和转发错帧介于存储转发和直通交换之间，但仍可能转发错误帧，不支持非对称交换。</p><p><img src="https://s2.loli.net/2022/04/07/q5bYZzuMCWcgGEB.png" alt="image-20220407121350899"></p><h3 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h3><p><strong>广播域</strong> 广播域是一个广播帧能够到达的范围。在缺省情况下，交换机所有端口同属于一个广播域，无法隔离广播域。广播帧在广播域中传播，占用资源，降低性能，且具有安全隐患。</p><p><img src="https://s2.loli.net/2022/04/14/DMmkWRiOj536wca.png" alt="image-20220414103157970"></p><p><strong>虚拟局域网</strong> 需要在物理网络上根据用途、工作组、应用等来进行逻辑划分的局域网络，与用户的物理位置没有关系。</p><p>每一个 VLAN 是一个独立的广播域，交换机通过划分 VLAN 来分隔广播域。不同 VLAN 的成员之间不能直接进行二层通信。</p><p><img src="https://s2.loli.net/2022/04/14/RWUtgrEu1lAc6IN.png" alt="image-20220414103237277"></p><h4 id="VLAN-类型"><a href="#VLAN-类型" class="headerlink" title="VLAN 类型"></a>VLAN 类型</h4><p>VLAN 有四种类型，包括基于端口的、基于 MAC 地址的、基于协议的和基于子网的。</p><p><strong>基于端口的 VLAN</strong> 增加 VLAN Table，存储 VLAN ID 与 端口 的关系。</p><p><img src="https://s2.loli.net/2022/04/14/ApDfVkXvhQG1dx4.png" alt="image-20220414103455111"></p><p><strong>基于 MAC 地址的 VLAN</strong> 增加 VLAN Table，存储 VLAN ID 与 MAC 地址 的关系。</p><p><img src="https://s2.loli.net/2022/04/14/PfeEHywvi4R9znm.png" alt="image-20220414103541618"></p><p><strong>基于协议的 VLAN</strong> 增加 VLAN Table，存储 VLAN ID 与 协议 的关系。</p><p><img src="https://s2.loli.net/2022/04/14/ZBWioDC2acXtPVq.png" alt="image-20220414103608166"></p><p><strong>基于子网的 VLAN</strong> 增加 VLAN Table，存储 VLAN ID 与 子网 的关系。</p><p><img src="https://s2.loli.net/2022/04/14/3JgdYTm8hkQ5EDu.png" alt="image-20220414103814578"></p><p><strong>问题</strong> 如何让交换机区分不同 VLAN 的数据帧？</p><p>在数据帧中需要携带 VLAN 标记…VLAN 标记由交换机添加/剥除，对终端站点透明。</p><p><img src="https://s2.loli.net/2022/04/14/BrxR8eKUkzCDPn9.png" alt="image-20220414104950548"></p><p><strong>帧标记标准 IEEE 802.1Q</strong></p><p><img src="https://s2.loli.net/2022/04/14/vNreEnfLB5IYO3l.png" alt="image-20220414105155439"></p><p><strong>Access 端口与 Trunk 端口</strong> </p><p>接入链路类型端口可以通过指定 VLAN 的流量，干道链路允许多个 VLAN 的流量通过。</p><p><img src="https://s2.loli.net/2022/04/14/YNz89HslvKWiTCt.png" alt="image-20220414105507630"></p><h3 id="WLAN"><a href="#WLAN" class="headerlink" title="WLAN"></a>WLAN</h3><p><strong>无线局域网</strong> 指以无线信道作为传输介质的计算机局域网。</p><p><strong>无线局域网的组网模式</strong></p><p><img src="https://s2.loli.net/2022/04/14/CwvSILEkdpf7NK8.png" alt="image-20220414110721285"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2022 Spring，cy 老师的计网原。算是当期末的背诵提纲使用吧。希望不会咕咕咕。&lt;/p&gt;
&lt;p&gt;“补完计划”是指半期开始才开始做这个东西。&lt;/p&gt;</summary>
    
    
    
    <category term="理论" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/"/>
    
    <category term="理论/网络原理" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/%E7%90%86%E8%AE%BA-%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="网络原理" scheme="https://www.c7w.tech/tags/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>《现代密码学》分组密码笔记</title>
    <link href="https://www.c7w.tech/block-cipher/"/>
    <id>https://www.c7w.tech/block-cipher/</id>
    <published>2022-03-23T05:48:24.000Z</published>
    <updated>2022-04-06T06:37:52.522Z</updated>
    
    <content type="html"><![CDATA[<p>前几周密码学课要么在写软工，要么在跑实验，这个模块算是完全需要从头学习了，现在就坐在教室第一排看几周前的课件的样子，希望一天能补完吧（（（</p><a id="more"></a><h2 id="分组密码"><a href="#分组密码" class="headerlink" title="分组密码"></a>分组密码</h2><h3 id="分组密码简介"><a href="#分组密码简介" class="headerlink" title="分组密码简介"></a>分组密码简介</h3><blockquote><p>古典密码学：置换密码与代换密码</p><p><strong>置换密码</strong>根据一定的规则重新排列明文，以便打破明文的结构特性。置换密码的特点是<strong>保持明文的所有字符不变</strong>，只是利用置换打乱了明文字符的<strong>位置和次序</strong>。</p><p><strong>代换密码</strong>就是将明文中的一个字母由其它字母、数字或符号<strong>替代</strong>的一种方法。我们需要<strong>建立一个代换表</strong>，加密时将需要加密的明文依次通过<strong>查表，替换为相应的字符</strong>，明文字符被逐个替换后，生成无任何意义的字符串，即密文。这样的<strong>代换表，通常称为密钥。</strong></p></blockquote><p>古典的代换密码的代换表太小，仅有 26 个字母，不能够抵抗唯密文攻击和已知明文攻击。而“分组密码”可以看成是一个巨大的“代换密码”，其中 DES 可认为有 $2^{64}$ 个元素的代换表，AES 有 $2^{128}$ 个元素的代换表。</p><p>但是，这个代换表中的每个元素只被计算一次，这是为了避免将这个巨大的表给存储下来。我们要解决的问题就是，该如何去计算每个分块代换后的元素。</p><p>分组密码是这样一种算法，它将 $n$ Bit 的明文分组加密成 $n$ Bit 的密文，其中分组长度 DES $n=64$，AES $n=128$. 其密钥长度 DES $|K| = 56$，AES $|K| = 128, 192, 256$.</p><p>我们可以用以下图片来描述分组密码的工作模式。</p><p><img src="https://s2.loli.net/2022/03/23/xoOh6JIXPWcNbp8.png" alt="image-20220323135852327"></p><p>其加密 $C=E_K(P)$，解密 $P=E_K^{-1}(C)$.</p><p>那么这个加密/解密算法 $E$ 该如何设计呢？一般来说，我们采用一种基于<strong>轮函数</strong>的迭代结构（也称为乘积密码），再辅以一定的<strong>密钥生成方案</strong>：</p><p><img src="https://s2.loli.net/2022/03/23/PDyITpZvGmOhnsB.png" alt="image-20220323140208761"></p><h3 id="轮函数"><a href="#轮函数" class="headerlink" title="轮函数"></a>轮函数</h3><p>其中每一个 Round，<strong>轮函数</strong>均接受上一阶段加密后的文本和本阶段使用的密钥作为输入，经过计算输出其本阶段加密结果。</p><p>轮函数应有以下设计策略：</p><ul><li>混淆：非线性部件<ul><li>小的代换表 S-box</li><li>乘法与异或</li><li>加与异或</li></ul></li><li>扩散：让所有的 Bit 互相影响<ul><li>线性变换</li><li>置换</li><li>移位、循环移位</li></ul></li></ul><h3 id="密钥方案"><a href="#密钥方案" class="headerlink" title="密钥方案"></a>密钥方案</h3><p>密钥生成方案（Key Schedule）有多种方法，但目前为止没有完美的方法 。其基本准则：<strong>密钥的每个比特应该影响不同位置的很多轮的轮子密钥</strong>。</p><h3 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a>设计方案</h3><p>下面介绍一些设计轮函数的方案。</p><h4 id="Feistel-Network"><a href="#Feistel-Network" class="headerlink" title="Feistel Network"></a><strong>Feistel Network</strong></h4><p><img src="https://s2.loli.net/2022/03/23/ODbVZ7wLKvBCYgx.png" alt="image-20220323141451231"></p><p>Feistel Network 由 DES 的设计者之一，Horst Feistel 所发明，该结构被广泛使用，AES 最终的 5 个候选算法之中，有 3 个使用了这种 Feistel 网络架构。</p><p>这种网络架构具有以下属性：</p><ul><li>可逆性：$L_i = R_{i-1}, R_i = L_{i-1} \oplus F(K_i, L_i)$.</li><li>加解密使用同一套逻辑，只不过密钥的使用顺序相反。</li></ul><p>在使用时我们需要定义满足上述条件的函数 $F$.</p><h4 id="SPN（Substitution-permutation-Network）"><a href="#SPN（Substitution-permutation-Network）" class="headerlink" title="SPN（Substitution-permutation Network）"></a><strong>SPN</strong>（Substitution-permutation Network）</h4><p>这种结构被 AES（rijndael）算法所最终采用。其基本架构为：</p><p><img src="https://s2.loli.net/2022/03/23/ab6e4Fs3Z1TNdHE.png" alt="image-20220323142600476"></p><p>其架构有 S 盒和 P 盒两个需要我们定义的内容。</p><p>S 盒属性：</p><ul><li>改变输入的 1 比特，输出比特中有一半的比特改变</li><li>输出的每一个比特依赖输入的所有比特</li></ul><p>P 盒属性：</p><ul><li>好的 P 置换是使得 S 盒的输出比特分布到下一轮的尽可能多的 S 盒</li></ul><p>[混淆] 是指让密文和密钥之间的统计关系变得复杂，使得敌手不能通过密文的统计关系，推测出密钥的统计关系。（非线性替换）</p><p>[扩散] 扩散就是让明文中的每一位影响密文中的许多位，或者说让密文中的每一位受明文中的许多位的影响．这样可以隐蔽明文的统计特性。</p><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><p>DES 是一种分组加密算法，其消息分组大小为 64 Bit，密钥长度为 56 Bit，另加 8 个冗余 Bit 用于奇偶校验。其采用 Feistel 结构，迭代经过 16 轮轮函数，再经过起始置换与末置换。</p><p><img src="https://s2.loli.net/2022/03/23/Cigh5lJUcNkTWvO.png" alt="image-20220323145304203"></p><h3 id="起始置换与末置换"><a href="#起始置换与末置换" class="headerlink" title="起始置换与末置换"></a>起始置换与末置换</h3><p><img src="https://s2.loli.net/2022/03/23/hbjKV2ZBaHyqwoC.png" alt="image-20220323145409521"></p><h3 id="F-函数"><a href="#F-函数" class="headerlink" title="F 函数"></a>F 函数</h3><p><img src="https://s2.loli.net/2022/03/23/wRuEemXrQcH3jsy.png" alt="image-20220323145941594"></p><h4 id="F-函数中的扩展盒-E"><a href="#F-函数中的扩展盒-E" class="headerlink" title="F 函数中的扩展盒 E"></a>F 函数中的扩展盒 E</h4><p><img src="https://s2.loli.net/2022/03/23/Kqhkl4o9AGFRZcn.png" alt="image-20220323150125087"></p><h4 id="F-函数中的-S-box"><a href="#F-函数中的-S-box" class="headerlink" title="F 函数中的 S-box"></a>F 函数中的 S-box</h4><p>使用 8 个 S 盒 $S_1, S_2,\cdots, S_8$，每一个 S 盒: $\{0,1\}^6 \rightarrow \{0,1\}^4$。</p><p>可以用 $4 \times 16$ 的矩阵描述。</p><p>如：</p><pre class="language-none"><code class="language-none">S1 &#x3D; &#123;    14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,    0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,    4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,    15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13&#125;;</code></pre><p>给定输入 $b_1b_2b_3b_4b_5b_6$，我们将 $b_1b_6$ 作为行索引，$b_2b_3b_4b_5$ 作为列索引，取出矩阵中对应项的二进制表示作为 S-box 的输出。</p><h4 id="P-置换"><a href="#P-置换" class="headerlink" title="P 置换"></a>P 置换</h4><p><img src="https://s2.loli.net/2022/03/25/xOk5V8ZmWuRwDSb.png" alt="image-20220325150029031"></p><h3 id="DES-密钥生成方案"><a href="#DES-密钥生成方案" class="headerlink" title="DES 密钥生成方案"></a>DES 密钥生成方案</h3><p><img src="https://s2.loli.net/2022/03/25/UFE3WaxNL9s6lfy.png" alt="image-20220325145910454"></p><p>64 Bit 的密钥中有 8 位是校验位，我们将其余 56 位经过一个 56 位的置换 PC1，将其分成左右两个 28 位的密钥输入 <code>&lt;&lt;&lt;</code>（代表循环左移）。</p><p>当 $i \in \{1,2,9,16\}$ 时，循环左移移位数为 1 位，其他情况移位数为 2 位。PC2 算法是一个从 56 位中选取 48 个有效位的算法。</p><h3 id="多重加密"><a href="#多重加密" class="headerlink" title="多重加密"></a>多重加密</h3><p>在今天的计算能力下，DES（56 Bit）已不再安全。于是，我们需要增加密钥长度。多重加密便是增加密钥长度的一种实践方式。</p><ul><li>Double-DES 密钥长度 112 Bit<ul><li>$C = E_{K_2}(E_{K_1}(P))$</li><li>把密钥拆成两个 56 Bit，过两次不同 Key 的 DES？</li><li>不能够抵挡中间相遇攻击…</li></ul></li></ul><blockquote><p>[中间相遇攻击]</p><p><img src="https://s2.loli.net/2022/03/25/Cbrxfnes6qh1Qw8.png" alt="image-20220325151251672"></p><p>令集合 $I = \{ E_{K_1}(P)\}$，$J=D_{K_2}(C)$，112 Bit 长度的密钥构造出的 $I, J$ 必是相等的！暴力枚举所有的 I 和 J，即 $O(2^{56} + 2^{56})$！</p></blockquote><ul><li>Triple-DES 密钥长度 168 Bit<ul><li>加密：$C=E_{K_3}(D_{K_2}(E_{K_1}(P)))$</li><li>解密：$C=D_{K_1}(E_{K_2}(D_{K_3}(P)))$</li><li>密钥选择<ul><li>3-key: $K_i$ 相互独立，168 Bit.</li><li>2-key：$K_1 = K_2, K_3=K_1$，112 Bit.</li></ul></li></ul></li></ul><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><p>AES 是一种分组密码，其分组长度为 128 Bit，采用 SPN 架构，具有三种不同长度的密钥和轮数：</p><ul><li>AES-128：10 轮</li><li>AES-192：12 轮</li><li>AES-256：14 轮</li></ul><blockquote><p>[复习] SPN 结构</p><p><img src="https://s2.loli.net/2022/03/25/kTsKt3YgF1PpJwD.png" alt="image-20220323142600476"></p></blockquote><p>以下介绍 AES 的结构。</p><h3 id="轮函数-1"><a href="#轮函数-1" class="headerlink" title="轮函数"></a>轮函数</h3><p><img src="https://s2.loli.net/2022/03/25/emEprqMu4tFCSJ3.png" alt="image-20220325152532398"></p><p><img src="https://s2.loli.net/2022/03/25/xYQ6mtfo1zhKFnd.png" alt="image-20220325153306210"></p><p>每一轮仅需要经过<strong>字节替换</strong>、<strong>行移位</strong>、<strong>列混合</strong>、<strong>与密钥异或</strong>的过程。</p><p>其总体流程：</p><p><img src="https://s2.loli.net/2022/03/25/bNjiMJ7k8wzO2o9.png" alt="image-20220325153407918"></p><h4 id="字节替换-SubBytes"><a href="#字节替换-SubBytes" class="headerlink" title="字节替换 SubBytes"></a>字节替换 SubBytes</h4><p>S-box：8 Bit 输入，8 Bit 输出，可逆</p><p>由以下两个步骤计算出 $b’ = S(a)$.</p><ul><li>在 $GF(2^8)$ 中求 $b = a^{-1}$. （扩展 Euclid）</li><li>对 $b$ 应用以下仿射变换，这是为了防止 $\vec0$ 映射成 $\vec0$ 的情况.</li></ul><script type="math/tex; mode=display">\left[\begin{array}{l}b_{0}^{\prime} \\b_{1}^{\prime} \\b_{2}^{\prime} \\b_{3}^{\prime} \\b_{4}^{\prime} \\b_{5}^{\prime} \\b_{6}^{\prime} \\b_{7}^{\prime}\end{array}\right]=\left[\begin{array}{llllllll}1 & 0 & 0 & 0 & 1 & 1 & 1 & 1 \\1 & 1 & 0 & 0 & 0 & 1 & 1 & 1 \\1 & 1 & 1 & 0 & 0 & 0 & 1 & 1 \\1 & 1 & 1 & 1 & 0 & 0 & 0 & 1 \\1 & 1 & 1 & 1 & 1 & 0 & 0 & 0 \\0 & 1 & 1 & 1 & 1 & 1 & 0 & 0 \\0 & 0 & 1 & 1 & 1 & 1 & 1 & 0 \\0 & 0 & 0 & 1 & 1 & 1 & 1 & 1\end{array}\right]\left[\begin{array}{l}b_{0} \\b_{1} \\b_{2} \\b_{3} \\b_{4} \\b_{5} \\b_{6} \\b_{7}\end{array}\right]+\left[\begin{array}{l}1 \\1 \\0 \\0 \\0 \\1 \\1 \\0\end{array}\right]</script><h4 id="行移位-ShiftRows"><a href="#行移位-ShiftRows" class="headerlink" title="行移位 ShiftRows"></a>行移位 ShiftRows</h4><p><img src="https://s2.loli.net/2022/03/25/xicm7rjIT8kA9qX.png" alt="image-20220325162407249"></p><p>第 $i$ 行进行循环左移 $i$ 位，这里 $1 \le i \le 4$.</p><h4 id="列混合-MixColumns"><a href="#列混合-MixColumns" class="headerlink" title="列混合 MixColumns"></a>列混合 MixColumns</h4><p><img src="https://s2.loli.net/2022/03/25/rahLCQ7yPomek5t.png" alt="image-20220325162936267"></p><h4 id="密钥加-AddRoundKey"><a href="#密钥加-AddRoundKey" class="headerlink" title="密钥加 AddRoundKey"></a>密钥加 AddRoundKey</h4><p><img src="https://s2.loli.net/2022/03/25/A9t2MEZnujrLfPw.png" alt="image-20220325163933137"></p><ul><li>每个轮密钥为 128 Bit.</li></ul><h3 id="密钥生成算法"><a href="#密钥生成算法" class="headerlink" title="密钥生成算法"></a>密钥生成算法</h3><p><img src="https://s2.loli.net/2022/03/25/9gXY2tMNZmn4Avz.png" alt="image-20220325164236844"></p><p><img src="https://s2.loli.net/2022/03/25/Z26QO8Yj3XRrmtI.png" alt="image-20220325164244363"></p><h3 id="AES-解密"><a href="#AES-解密" class="headerlink" title="AES 解密"></a>AES 解密</h3><p><img src="https://s2.loli.net/2022/03/25/cqMWyZ5K3jN4C8A.png" alt="image-20220325164618807"></p><p>解密因为对列混合求逆时间消耗较大，于是效率慢于加密。</p><p><strong>在这里我们强烈建议读者补全 $GF(2^8)$ 上的加法运算与乘法运算的相关概念。</strong></p><p>求逆时，AES 采用的不可约多项式为 $x^8+x^4+x^3+x+1$.</p><h2 id="分组密码工作模式"><a href="#分组密码工作模式" class="headerlink" title="分组密码工作模式"></a>分组密码工作模式</h2><p>上述提到的 AES 只能加密固定位数的消息，而在实际中面对长文本时的使用模式便称为分组密码的工作模式。</p><h3 id="电子密码本模式-ECB"><a href="#电子密码本模式-ECB" class="headerlink" title="电子密码本模式 ECB"></a>电子密码本模式 ECB</h3><p>是将明文的 $N$ 个分组独立地使用同一密钥 $K$ 加密和解密。</p><p>不同明文分组之间的加密独立进行，故保留了单表代替缺点，造成相同明文分组对应相同密文分组，因而不能隐藏明文分组的统计规律和结构规律。</p><h3 id="密码分组链接模式-CBC"><a href="#密码分组链接模式-CBC" class="headerlink" title="密码分组链接模式 CBC"></a>密码分组链接模式 CBC</h3><p>想法：使输出不仅与当前输入有关，而且与以前输入和输出有关。</p><p>CBC 模式中每个明文分组在加密之前都要与以前的密文分组进行异或。第一个分组之前没有密文，故要用到一个伪分组 IV。 </p><ul><li>IV 不要求保密</li><li>IV 必须是不可预测的，而且要保证完整性</li></ul><p><img src="https://s2.loli.net/2022/03/25/2MQKbCBLdm73YEH.png" alt="image-20220325173018368"></p><h3 id="密码反馈模式-CFB"><a href="#密码反馈模式-CFB" class="headerlink" title="密码反馈模式 CFB"></a>密码反馈模式 CFB</h3><p><img src="https://s2.loli.net/2022/03/25/ngeDJuQYrAlKaFG.png" alt="image-20220325173124182"></p><p><img src="https://s2.loli.net/2022/03/25/23PbK4vhcxBFuz7.png" alt="image-20220325173130166"></p><h3 id="输出反馈模式-OFB"><a href="#输出反馈模式-OFB" class="headerlink" title="输出反馈模式 OFB"></a>输出反馈模式 OFB</h3><p><img src="https://s2.loli.net/2022/03/25/IwPrBQ4GO3JKUko.png" alt="image-20220325173350914"></p><h3 id="计数器模式-CTR"><a href="#计数器模式-CTR" class="headerlink" title="计数器模式 CTR"></a>计数器模式 CTR</h3><p><img src="https://s2.loli.net/2022/03/25/M1hArD4kPoQuLyf.png" alt="image-20220325173417266"></p><h3 id="工作模式分析"><a href="#工作模式分析" class="headerlink" title="工作模式分析"></a>工作模式分析</h3><ul><li>Padding Oracle Attack：基于填充格式的攻击</li></ul><h2 id="分组密码分析"><a href="#分组密码分析" class="headerlink" title="分组密码分析"></a>分组密码分析</h2><blockquote><p>重温：分组密码分析的攻击类型</p><ul><li>唯密文攻击：仅有当前密钥下截获的密文</li><li>已知明文攻击：仅知道当前密钥下的明密文对</li><li>[CPA] 选择明文攻击：能够获得当前密钥下的一些特定的明文所对应的密文</li><li>[X, CCA] 选择密文攻击：能够获得当前密钥下的一些特定的密文所对应的明文</li></ul><p>重温：攻击复杂度</p><ul><li>时间复杂度</li><li>空间复杂度</li><li>数据复杂度：要 截获/Query 的数据数量</li></ul></blockquote><h3 id="通用密码分析过程"><a href="#通用密码分析过程" class="headerlink" title="通用密码分析过程"></a>通用密码分析过程</h3><ul><li>穷举密钥搜索攻击：唯密文攻击、已知明文攻击。</li><li>字典攻击：建立密文-&gt;明文的映射字典</li><li>查表攻击：给定明文 $x$，对于 $2^k$ 个密钥 $K$，打表 $\{(E_K(x), K)\}$.</li><li><strong>时间存储折中攻击</strong>（TMTo）：对固定的明文 $P$ 和某个密文 $C_0$，已知加密算法 $S$，目标恢复加密过程中使用的密钥 $K_0$.</li></ul><p><img src="https://s2.loli.net/2022/03/30/Uvug96zSyHkeTV8.png" alt="image-20220330144402496"></p><p><img src="https://s2.loli.net/2022/03/30/AaWVUjBwYKXuSDC.png" alt="image-20220330144422077"></p><ul><li>其改进方向：Rainbow 表（彩虹表）</li></ul><h3 id="差分分析"><a href="#差分分析" class="headerlink" title="差分分析"></a>差分分析</h3><p>给定加密算法，比较两个明文的异或与相应的两个密文的异或的概率分布情况。</p><p>记 $P_1 \oplus P_2 = \Delta P, C_1 \oplus C_2 = \Delta C$，任给 $X = \Delta  P, Y = \Delta C$，研究差分 $\Delta P \rightarrow \Delta  C$ 的概率分布问题。</p><p>随机函数的差分概率 $P(Y = \Delta C | X = \Delta  P) = \dfrac 1 {2^l}$.</p><p><strong>寻找高概率差分特征的一般方法</strong> 通常差分 $ΔP → ΔC$ 概率主项为一些差分特征概率的乘积，即 $\Delta P \rightarrow \Delta R_1 \rightarrow  \Delta R_2 \rightarrow \cdots \rightarrow \Delta R_{n-1} \rightarrow \Delta C$. 如果我们能研究某个差分特征 $\Delta R_{i-1} \rightarrow \Delta R_i$ 的大小，我们就可以利用类似于动态规划的算法求出高概率差分特征。</p><p>我们考虑对 DES 算法进行分析。</p><p><strong>线性部件</strong> DES 算法的 P 置换 和 E 扩展 两个部件满足 $P(x) \oplus P(y) = P(x \oplus y)$，因此为线性部件，相应差分特征概率为 1。</p><p><strong>非线性部件</strong> DES 算法的 S-box 为非线性部件，为此我们计算其差分分布。也就是说，给定差分 $\Delta P$，我们枚举所有的 $P_1, P_2$ 满足 $P_1 \oplus P_2 = \Delta P$，然后我们统计 $\Delta C$ 的分布。</p><p><img src="https://s2.loli.net/2022/04/06/4UL2vWKmOe6aQIi.png" alt="image-20220406135550419"></p><p>虽然 S-box 为我们寻找高概率差分特征分布时带来了不变，但是 S-box 的存在却可以直接地为我们减少密钥搜索空间。</p><p>具体来说，已知 $E$ 和 $E^\star$，$S_1$ 盒的输出差分为 $\Delta C$，则 $S_1$ 盒的输入为 $E \oplus K$ 与 $E^\star \oplus K$，我们查表 $N(E\oplus E^\star, \Delta C) = N((E\oplus K)\oplus (E^\star \oplus K), \Delta C)$，找出 $\Delta P \rightarrow \Delta C$ 对应的所有可能输入值 $P_1, P_2$，于是 $K = E \oplus P_1$。借助这种方法可以直接 hack 掉 3 轮的 DES。</p><h3 id="线性分析"><a href="#线性分析" class="headerlink" title="线性分析"></a>线性分析</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;前几周密码学课要么在写软工，要么在跑实验，这个模块算是完全需要从头学习了，现在就坐在教室第一排看几周前的课件的样子，希望一天能补完吧（（（&lt;/p&gt;</summary>
    
    
    
    <category term="理论" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/"/>
    
    <category term="理论/现代密码学" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/%E7%90%86%E8%AE%BA-%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码学" scheme="https://www.c7w.tech/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Adversarial Attack 概述</title>
    <link href="https://www.c7w.tech/adversarial-attack/"/>
    <id>https://www.c7w.tech/adversarial-attack/</id>
    <published>2022-03-05T08:06:53.000Z</published>
    <updated>2022-03-05T08:46:38.735Z</updated>
    
    <content type="html"><![CDATA[<p>Reference:</p><ul><li><a href="https://www.youtube.com/watch?v=xGQKhbjrFRk&amp;list=PLJV_el3uVTsMhtt7_Y6sgTHGHp1Vb2P2J&amp;index=24">https://www.youtube.com/watch?v=xGQKhbjrFRk&amp;list=PLJV_el3uVTsMhtt7_Y6sgTHGHp1Vb2P2J&amp;index=24</a></li></ul><a id="more"></a><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>在 Network Deploy 的过程中，除了正确率之外，我们还需要其可以能够应对人类的恶意攻击。</p><p>举个例子：给某个图片 $x$ 加入 Noise $\Delta x$. $\Delta x$ 小到在表征上人类难以发现。</p><p>攻击可以分为 Targeted 和 Non-targeted 的方式，前者使得模型可以朝着攻击者想要的方向预测，后者只要预测结果不一样就好.</p><h2 id="How-to-attack"><a href="#How-to-attack" class="headerlink" title="How to attack"></a>How to attack</h2><p>同样是解一个 optimization 的问题。</p><p><img src="https://s2.loli.net/2022/03/05/Zljdb14K7BMqn8T.png" alt="image-20220305161342730"></p><p>注意关注 Non-perceivable 条件 $d(x^0, x) \le \epsilon$ 的具体实现方式：</p><ul><li>L2-norm</li><li>L-infinity (Better in image classification?)</li></ul><p>But still needs domain-specific knowledge…</p><p>如果没有这个限制条件直接用 Gradient-descent 就可以，其实修改这个限制条件也相当直觉，其中 $fix(x^t)$ 是 $x^t$ 到可行域的投影。</p><p><img src="https://s2.loli.net/2022/03/05/lKmTJ3pX56AOcPs.png" alt="image-20220305161948086"> </p><h2 id="White-Box-Attack-v-s-Black-Box-Attack"><a href="#White-Box-Attack-v-s-Black-Box-Attack" class="headerlink" title="White Box Attack v.s. Black Box Attack?"></a>White Box Attack v.s. Black Box Attack?</h2><p>不知道模型参数的 Black Box Attack 也是有可能的。</p><p>如果你知道要被攻击的对象的训练资料，那么可以自训练一个 proxy network 当成是靶子。</p><p>但如果不知道训练资料呢？用大量的 unlabelled 资料让被攻击对象 predict，拿到预测结果后去 supervised 训练 proxy network 作为靶子。</p><p><img src="https://s2.loli.net/2022/03/05/BKGFf5vhDs8dpex.png" alt="image-20220305162838051"></p><p>可能 Data 才是造成这种可能被攻击的问题的原因…</p><h2 id="发展方向"><a href="#发展方向" class="headerlink" title="发展方向"></a>发展方向</h2><ul><li>Universal Adversarial Attack<ul><li>找到一个信号，将这个信号施加到输入数据上，让输出结果全是错的。</li></ul></li><li>Attack in the Physical World</li><li>Adversarial Reprogramming</li><li>Backdoor in Model</li></ul><h2 id="Defense"><a href="#Defense" class="headerlink" title="Defense"></a>Defense</h2><ul><li><p>被动防御</p><p><img src="https://s2.loli.net/2022/03/05/Z32iKUaVLPb4SAj.png" alt="image-20220305164107350"></p></li></ul><p>比如说将图片稍微模糊化，图像压缩，基于 Generator 的图片再生成。</p><p>这种 Filter 可以加上随机性…</p><ul><li>主动防御</li></ul><p>在最初就训练一个 Robust 的模型。</p><p>在训练的过程中就进行攻击，在回传的过程中纠正。</p><p><img src="https://s2.loli.net/2022/03/05/gmWsQMDaUtA7Rfd.png" alt="image-20220305164544063"></p><p>同时还实现了数据增广，但是可能不能抵挡新的攻击方式。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Reference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=xGQKhbjrFRk&amp;amp;list=PLJV_el3uVTsMhtt7_Y6sgTHGHp1Vb2P2J&amp;amp;index=24&quot;&gt;https://www.youtube.com/watch?v=xGQKhbjrFRk&amp;amp;list=PLJV_el3uVTsMhtt7_Y6sgTHGHp1Vb2P2J&amp;amp;index=24&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="理论" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/"/>
    
    <category term="理论/机器学习" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/%E7%90%86%E8%AE%BA-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>202202 读过的一些 Paper 总结</title>
    <link href="https://www.c7w.tech/paper2202/"/>
    <id>https://www.c7w.tech/paper2202/</id>
    <published>2022-03-03T14:01:54.000Z</published>
    <updated>2022-03-03T15:03:25.221Z</updated>
    
    <content type="html"><![CDATA[<p>主要是对 202202 读的 Paper 的总结。</p><p>涉及的主要主题是 Infomation Retrieval 中的 Dense Retrieval.</p><a id="more"></a><h1 id="Pre-training-Methods-in-Information-Retrieval"><a href="#Pre-training-Methods-in-Information-Retrieval" class="headerlink" title="Pre-training Methods in Information Retrieval"></a>Pre-training Methods in Information Retrieval</h1><blockquote><p>Fan Y, Xie X, Cai Y, et al. Pre-training Methods in Information Retrieval[J]. arXiv preprint arXiv:2111.13853, 2021.</p></blockquote><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>这是一篇研究预训练在 IR 中应用的<strong>文献综述</strong>。</p><p>论文中首先介绍了 IR 是什么，然后介绍了预训练模式在 IR 中的应用，包括 Retrieval Component, Re-ranking Component 和 Other Component。</p><p>此外，还包括专门为 IR 定制的预训练任务的介绍。</p><p>然后，论文介绍了 IR 中使用预训练方法可能用到的资源，包括数据集 benchmark 和 leaderboard. </p><p>然后作者提出了目前 预训练 + IR 存在的挑战，给出了未来可能的工作前景。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><h3 id="Intro-amp-Background"><a href="#Intro-amp-Background" class="headerlink" title="Intro &amp; Background"></a>Intro &amp; Background</h3><ul><li>什么是 IR？<ul><li>从一个大规模的答案语料集合中找回跟用户的请求有关的信息</li><li>可能相关的结果有多个，所以需要定义“相关性得分”</li></ul></li><li>什么是预训练？（略去）</li><li>从不同的视角来看待 IR 问题<ul><li>Core Problem View: 核心的问题是计算 Query q 和 Document d 的相似度</li><li>Framework View: Retrieval Process，returns top-k most relative results</li><li>System View: Given a query q, output a sorted list of documents…</li></ul></li></ul><p><img src="https://s2.loli.net/2022/03/03/z58qKF7OWJL4YAv.png" alt="image-20220303221755076"></p><h3 id="Retrieval-Component"><a href="#Retrieval-Component" class="headerlink" title="Retrieval Component"></a>Retrieval Component</h3><p>在这里补充 Sparse Retrieval 和 Dense Retrieval 的补充知识。</p><p>不管是 Sparse Retrieval 还是 Dense Retrieval 都是使用某个处理程序将文书处理成某种特殊的表示，并对这种特殊的表示建立索引，下面我们详细介绍。</p><p>Sparse Retrieval 是指 token-level 的切分，常见的算法如 TF-IDF 和 BM25。这两种算法的运作方式在 <a href="https://c7w.tech/elasticsearch/">https://c7w.tech/elasticsearch/</a> 的第一节进行过相关介绍，这里直接对其进行引用：</p><blockquote><ul><li>TF-IDF</li></ul><p>TF 是指归一化的词频，IDF 是指逆文档频率。给定文档集合 $D$，有 $d_i \in D, 1 \le i \le n$. </p><p>文档集合总共包含 $m$ 个词，去除一些十分常见的词作为停用词（Stop Words），有 $w_i \in W, 1 \le i \le m$.</p><p>定义 TF 如下，即一篇文档中某个词出现的频率：</p><script type="math/tex; mode=display">\text{TF}(q_i, d_j) = \dfrac {f_{i, d_j}}{ |d_j| }</script><p>TF 只能描述词在文档中的频率，但假设现在有个词为“我们”，这个词可能在文档集 $D$ 中每篇文档中都会出现，并且有较高的频率。那么这一类词就不具有很好的区分文档的能力，为了降低这种通用词的作用，引入了 IDF：</p><script type="math/tex; mode=display">\text{IDF}(q_i) = \ln \dfrac {|D|}{|\{d_i  : q_i \in d_i \}|}</script><p>于是我们综合这两部分， 便可以得到 TF-IDF：</p><script type="math/tex; mode=display">\text{TF-IDF} = \text{TF} * \text{IDF}</script><p>TF 可以计算在一篇文档中词出现的频率，而 IDF 可以降低一些通用词的作用。因此对于一篇文档我们可以用文档中每个词的 TF−IDF 组成的向量来表示该文档，再根据余弦相似度这类的方法来计算文档之间的相关性。</p><ul><li>BM25</li></ul><p>BM25 是信息索引领域用来计算 query 与文档相似度得分的经典算法。</p><p>不同于 TF-IDF，BM25 的公式主要由三个部分组成：</p><ol><li>query 中每个单词 $q_i$ 与文档 $d$ 之间的相关性</li><li>单词 $q_i$ 与 query 之间的相似性</li><li>每个单词的权重</li></ol><p>BM25 算法的一般公式：</p><script type="math/tex; mode=display">score(Q,d) = \sum_i^n W_i R(q_i, d)</script><p>其中 $Q$ 表示 query，$q_i \in Q$，$d$ 表示 document.</p><p>下展开介绍各部分公式：</p><ul><li><strong>$W_i$</strong></li></ul><script type="math/tex; mode=display">W_i = IDF(q_i) = \ln \dfrac {N-df_i+0.5}{df_i+0.5}</script><p>其中 $N$ 是 document 总数，$df_i$ 表示含有 $q_i$ 的文档总数。</p><p>依据 IDF 的作用，对于某个 $q_i$ ，包含 $q_i$ 的文档数越多，说明 $q_i$ 重要性越小，或者区分度越低，IDF 越小，因此 IDF 可以用来刻画 $q_i$ 与文档的相似性。</p><ul><li><strong>$R(q_i, d)$</strong></li></ul><p>BM25 的设计依据一个重要的发现：<strong>词频和相关性之间的关系是非线性的</strong>，也就是说，每个词对于文档的相关性分数不会超过一个特定的阈值，当词出现的次数达到一个阈值后，其影响就不在线性增加了，而这个阈值会跟文档本身有关。</p><script type="math/tex; mode=display">R(q_i, d) = \dfrac {f_i \cdot (k_1+1)}{f_i+K} \cdot \dfrac {qf_i \cdot(k_2+1)}{qf_i+k_2}</script><p>我们可以分成两部分来看待上述公式，其中 $f_i$ 为 $q_i$ 在 $d$ 中出现的次数，$k_1, k_2, K$ 是常数。</p><p>后一部分 $\dfrac {qf_i \cdot(k_2+1)}{qf_i+k_2}$ 在控制 $q_i$ 和 Query 的相似度。</p><p>前一部分在计算 $q_i$ 与 $d$ 的相似度，其中 $K = k_1 \cdot (1-b+b\cdot \dfrac {|d|}{AVG_n(|d|)})$，参数 $b$ 在调节文本长度对相关性的影响。</p><p>不失一般性地我们可以取 $k_1 = 2, k_2 = 0, b = 0.75$.</p><p>反正在接下来的运用也是大调库，调参数可以通过更改配置文件来进行。</p><p><s>写到这里发现之前 Promise 的 Elasticsearch 8.0 的教程还没开始写…下次一定下次一定</s></p></blockquote><p>也就是说，我们把每篇 Document $d$ 首先进行 token-level 的切分并计算每个 token 的相应得分，建立起 token 对 document 的倒排索引。然后每当 Query $q$ 来临的时候，直接对 $q$ 进行切分，根据相应的倒排索引查询出对应分数加起来得到每篇文章的相似性得分，然后排序就好。</p><p>这里用到的数据结构就是这种倒排索引结构。</p><p>而 Dense Retrieval 则不同，正如其名字中的 “Dense” 所说，我们把每篇 Document $d$ 通过一个 Encoder. Say, BERT $\phi$, 然后通过 $\phi(d)[cls]$ 来作为其表示。</p><p>当 Query 来临的时候，我们将 Query q 通过相同的 BERT $\phi$ 得到 $\phi(q)$，我们要求解 top-k d 的集合使得 $\max Sim(\phi(q), \phi(d))$.</p><p>这里可以用到组织欧式空间内向量的数据结构，比如 FAISS，其实现是对欧式空间做分划。有点像搜索树的感觉？回头再详细读一读相关教程吧。用这个数据结构主要是为了找出距离某个向量最近的 k 个相同线性空间中的向量。</p><p>此外，为什么不用一个 BERT $\psi$ 做 $\psi( q + \text{‘[sep]’} + d)$ 呢？因为这样计算效率对于每个 q 都铁是 $O(d)$ 的，且因为每次计算都要过一个 BERT，复杂度极大。从时间效率上来说不考虑，后续我们 Re-ranker 中会这么用，因为我们已经取到了 top-k 了，这里 $k \ll d$.</p><p>下面是两种方法应用 Pretrain Method 的可能方法：</p><h4 id="Sparse-Retrieval"><a href="#Sparse-Retrieval" class="headerlink" title="Sparse Retrieval"></a>Sparse Retrieval</h4><ul><li>Term re-weighting: measure term weights with contextual semantics.</li><li>Document Expansion: expanding documents or queries.</li><li>Re-weighting + expansion</li><li>Sparse Representation learning</li></ul><h4 id="Dense-Retrieval"><a href="#Dense-Retrieval" class="headerlink" title="Dense Retrieval"></a>Dense Retrieval</h4><ul><li><strong>Use pretrained models as encoders, then fine-tune them accordingly.</strong></li><li>Use specific tasks to pretrain for IR</li><li>Fine-tuning: distill; using informative negative models;</li></ul><h4 id="Hybrid-Retrieval"><a href="#Hybrid-Retrieval" class="headerlink" title="Hybrid Retrieval"></a>Hybrid Retrieval</h4><h3 id="Re-ranker-Component"><a href="#Re-ranker-Component" class="headerlink" title="Re-ranker Component"></a>Re-ranker Component</h3><ul><li>Representation focused $relevance = f(PLM(Q), PLM(D))$</li><li>Interaction focused $relevance=f(PLM(Q,D))$</li></ul><p>其中第二种就是上述提过的用 BERT $\psi$ 的方法。</p><h3 id="Other-Component"><a href="#Other-Component" class="headerlink" title="Other Component"></a>Other Component</h3><p>Query Understanding:</p><ul><li>Query expansion</li><li>Query rewriting</li><li>Query suggestion$^*$</li><li>Search Clarification</li><li>Personalized Search</li></ul><p>Document Summarization</p><ul><li>Generic Document Summarization</li><li>Snippet Generation</li><li>Keyphrase Extraction</li></ul><h1 id="Latent-Retrieval-for-Weakly-Supervised-Open-Domain-Question-Answering"><a href="#Latent-Retrieval-for-Weakly-Supervised-Open-Domain-Question-Answering" class="headerlink" title="Latent Retrieval for Weakly Supervised Open Domain Question Answering"></a>Latent Retrieval for Weakly Supervised Open Domain Question Answering</h1><p>Lee K, Chang M W, Toutanova K. Latent retrieval for weakly supervised open domain question answering[J]. arXiv preprint arXiv:1906.00300, 2019.</p><h2 id="Background-Infomation"><a href="#Background-Infomation" class="headerlink" title="Background Infomation"></a>Background Infomation</h2><ul><li>什么是 Open Domain 的 QA？简称 ODQA，中文翻译为开放式问答，意为基于涵盖广泛主题的文本集合给出问题答案。</li></ul><p><strong>Definition</strong>: Formally speaking, to give an answer based on the document collection covering wide range of topics is called open-domain question answering (ODQA). </p><p><strong>Challenges</strong>: The ODQA task combines the challenges of document retrieval (finding the relevant articles) with that of machine comprehension of text (identifying the answer span from those articles).</p><p><strong>Architecture</strong>: There are several approaches to the architecture of an ODQA system. A modular ODQA system consists of two components, the first one (<strong>the ranker</strong>) should be able to find the relevant articles in a database (e.g., Wikipedia), whereas the second one (<strong>the reader</strong>) extracts an answer from a single article or a small collection of articles retrieved by the ranker. In addition to the strictly two-component ODQA systems, there are hybrid systems that are based on several rankers where the last ranker in the pipeline is combined with an answer extraction module usually via reinforcement learning.</p><ul><li>什么是 Latent Variable?</li></ul><p>In statistics, latent variables (from Latin: present participle of lateo (“lie hidden”), as opposed to observable variables) are variables that are not directly observed but are rather inferred (through a mathematical model) from other variables that are observed (directly measured).</p><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>现有的方法：要么 supervise 给定相应回答的证据，要么内嵌一个 IR 系统。We show for the first time that <strong>it is possible to jointly learn the retriever and reader from question-answer string pairs and without any IR system</strong>。</p><p>（Review 现有的：① DrQA 2017，训练时用 question-answer-evidence pair，测试时抓一个 IR 系统过来生成 evidence. ② TriviaQA, SearchQA, Quasar，弱监督，也是依赖 IR 去生成 evidence）</p><p><img src="https://s2.loli.net/2022/03/03/lTs5BWSYxE1bXpa.png" alt="image-20220206154839449"></p><p>但是 QA 和 IR 不同，因为 IR 更关注词义和词性的 matching，但是 QA 更侧重于问题理解和答案理解。</p><h2 id="Approach-Feature"><a href="#Approach-Feature" class="headerlink" title="Approach / Feature"></a>Approach / Feature</h2><p>In this work, we introduce the first Open Retrieval Question Answering system (ORQA). <strong>ORQA learns to retrieve evidence from an open corpus, and is supervised only by question-answer string pairs.</strong></p><p>The key insight of this work is that end-to-end learning is possible if we pre-train the retriever with an unsupervised <strong>Inverse Cloze Task (ICT)</strong>. </p><p><strong>What is ICT?</strong> In ICT, a sentence is treated as a pseudo question, and its context is treated as pseudo evidence. Given a pseudo-question, ICT requires selecting the corresponding pseudo-evidence out of the candidates in a batch.</p><p>An important aspect of ORQA is its expressivity—it is capable of retrieving any text in an open corpus, rather than being limited to the closed set returned by a blackbox IR system. </p><h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h2><h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><p>依旧是魔改 BERT。 $Score = S_{retr} + S_{read}$</p><ul><li>Retriever component</li></ul><script type="math/tex; mode=display">h_q = W_q \ \ (\text{BERT}_Q(q)[\text{CLS}]) \\ h_b = W_b \ \ (\text{BERT}_B(b)[\text{CLS}]) \\ S_{retr}(b,q) = h_q^Th_b</script><ul><li>Reader component</li></ul><script type="math/tex; mode=display">\begin{aligned}  h_{\text {start }} &=\operatorname{BERT}_{R}(q, b)[\operatorname{START}(s)] \\  h_{\text {end }} &=\operatorname{BERT}_{R}(q, b)[\operatorname{END}(s)] \\  S_{\text {read }}(b, s, q) &=\operatorname{MLP}\left(\left[h_{\text {start }} ; h_{\text {end }}\right]\right)  \end{aligned}</script><p>但是目前存在的问题就是数据集太大了(Wikipedia)，干扰也太多，简单的方法没法 Train。于是提出 ICT。</p><h3 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h3><ul><li>Inverse Cloze Task: 一种 Pretrain 的方法</li></ul><p>Since this is impractical to learn from scratch, we pre-train the retriever with an Inverse Cloze Task. We evaluate on open versions of five QA datasets.</p><p>先考虑为什么传统的 question-evidence 方法能奏效，这是因为首先 evidence 包含了 question 所要的信息，只不过是多含有了一些 question 不需要的信息。于是这种 question-context 的方法本质上是将与 question 在语义上相近的 context 取作 evidence.</p><p>于是我们就提出 Inverse Cloze Task. 注意到 Close Task（完形填空）就是基于 context 预测 masked 的文本。（<strong>ICT 任务是什么</strong>）而 ICT 则是给定一个句子，预测它的 context.</p><script type="math/tex; mode=display">P_{ICT}(b | q) = \dfrac {\exp(S_{retr}(b, q))}{\sum_{b' \in BATCH} S_{retr}(b', q)}</script><p>其中 q 是随机句子，BATCH-{b} 是随机 sample 出来做 negative samples 的，b 是 q 对应的 context.</p><h3 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h3><p>Evaluation was carried out on the following datasets:</p><ul><li>Natural Questions</li><li>WebQuestions</li><li>CuratedTrec</li><li>TriviaQA</li><li>SQuAD</li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We presented ORQA, the first open domain question answering system where the retriever and reader are jointly learned end-to-end using only question-answer pairs and without any IR system. </p><p>This is made possible by pre-training the retriever using an Inverse Cloze Task (ICT). </p><p>Experiments show that learning to retrieve is crucial when the questions reflect an information need, i.e. <strong>the question writers do not already know the answer</strong>.</p><h1 id="Domain-matched-pre-training-tasks-for-dense-retrieval"><a href="#Domain-matched-pre-training-tasks-for-dense-retrieval" class="headerlink" title="Domain-matched pre-training tasks for dense retrieval"></a>Domain-matched pre-training tasks for dense retrieval</h1><h2 id="Motivation-1"><a href="#Motivation-1" class="headerlink" title="Motivation"></a>Motivation</h2><p>IR is a exception that pre-training doesn’t produce convincing results. But with right setup, this barrier could be overcome.</p><p>So what is a right setup?</p><p>It’s been generally accepted that the more similar the end task is to the pre-training task, the larger the gains. We hypothesise that previously proposed pretraining tasks might be still too distant from the target task, which limits useful transfer.</p><h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><p>We therefore investigate pre-training tasks for retrieval which are as closely matched to the the target task and domain as possible. To this end, we propose using two corpora for retrieval pre-training:</p><p>1) 65M synthetically generated question-answer pairs.<br>2) A corpus of 220 million post-comment pairs from Reddit, which we use for dialogue retrieval tasks.</p><p>Finally we can prove that:</p><ol><li>pre-training leads to strong achievements in both cases</li><li>domain similarity and task similarity both matters</li><li>the retrieval can benefit from larger models</li></ol><h2 id="Dense-Retrieval-1"><a href="#Dense-Retrieval-1" class="headerlink" title="Dense Retrieval"></a>Dense Retrieval</h2><h3 id="Bi-encoder-architecture"><a href="#Bi-encoder-architecture" class="headerlink" title="Bi-encoder architecture"></a>Bi-encoder architecture</h3><p>Query encoder $E_Q$, passage encoder $E_p$, both output a fixed $d$-dim representation for each query / passage.</p><p>Passages are pre-processed offline, and their representations are indexed using a fast vector similarity search library such as FAISS(?)</p><p>Then when an query $q$ arrives we can use $E_Q(q)$ as its representation and use the index library to get the top-k closest passages.</p><h3 id="Training-1"><a href="#Training-1" class="headerlink" title="Training"></a>Training</h3><p>Given a query, a relevant (+) passage and a list of non-relevant (-) passages, the network is trained to minimize the <strong>negative log likelihood</strong> of picking the positive passage. And the probability assigned to each passage is proportional to $e^{sim(query, passage)}$.</p><p>We do training in two steps:</p><ul><li>use a single BM25 negative per query</li><li>use hard negatives obtained using the first round model</li></ul><h2 id="Experimental-setup"><a href="#Experimental-setup" class="headerlink" title="Experimental setup"></a>Experimental setup</h2><h3 id="Pre-training-tasks"><a href="#Pre-training-tasks" class="headerlink" title="Pre-training tasks"></a>Pre-training tasks</h3><ul><li>PAQ</li><li>Reddit</li></ul><h3 id="Evaluation-tasks"><a href="#Evaluation-tasks" class="headerlink" title="Evaluation tasks"></a>Evaluation tasks</h3><ul><li>Passage retrieval<ul><li>MSMARCO</li><li>Natural Questions</li><li>KILT</li></ul></li><li>Dialogue retrieval (to show the generality of conclusions)<ul><li>ConvAI2</li><li>Ubuntu v2</li><li>DSTC7</li></ul></li></ul><h1 id="Unsupervised-Corpus-Aware-Language-Model-Pre-training-for-Dense-Passage-Retrieval"><a href="#Unsupervised-Corpus-Aware-Language-Model-Pre-training-for-Dense-Passage-Retrieval" class="headerlink" title="Unsupervised Corpus Aware Language Model Pre-training for Dense Passage Retrieval"></a>Unsupervised Corpus Aware Language Model Pre-training for Dense Passage Retrieval</h1><h2 id="Motivation-2"><a href="#Motivation-2" class="headerlink" title="Motivation"></a>Motivation</h2><p>However, dense retrievers are hard to train, typically requiring heavily engineered fine-tuning pipelines to realize their full potential.</p><ul><li>iterative negative mining</li><li>multi-vector representations</li></ul><p>In this paper, we identify and address two underlying problems of dense retrievers: </p><p>i) fragility to training data noise </p><p>ii) requiring large batches to robustly learn the embedding space.</p><p>Then we try to give a hypothesis about why RocketQA (denoising + large batch size) succeeded. </p><ul><li>Denoising -&gt; remove mislabelled samples</li><li>Large bs -&gt; CLS vectors are not well trained, large training batches just helps the LM to learn to form the full embedding space.</li></ul><h2 id="Approach-1"><a href="#Approach-1" class="headerlink" title="Approach"></a>Approach</h2><p>We use the recently proposed Condenser pre-training architecture, which learns to condense information into the dense vector through LM pre-training. (?)</p><p> On top of it, we propose coCondenser, which adds an unsupervised corpus-level contrastive loss (?) to warm up the passage embedding space.</p><p>Then we could think up a way that could realize the two goals without these two approaches.</p><ul><li>Noise resistance -&gt; use Condenser pre-training architecture</li><li>Introduce a corpus-level contrastive learning objective: at each training step sample text pairs; train the model such that the CLS embeddings of text pairs from the same doc are close and those from different documents are far apart.</li></ul><p>-&gt; Combinating the two, propose coCondenser pre-training method.</p><h2 id="Experiment-Method"><a href="#Experiment-Method" class="headerlink" title="Experiment Method"></a>Experiment Method</h2><h3 id="Architecture-1"><a href="#Architecture-1" class="headerlink" title="Architecture"></a>Architecture</h3><ul><li><p>Based on Condenser</p></li><li><p>Added contrastive loss to loss function</p></li></ul><h3 id="Memory-efficient-Pretraining"><a href="#Memory-efficient-Pretraining" class="headerlink" title="Memory-efficient Pretraining"></a>Memory-efficient Pretraining</h3><ul><li>Gradient Caching</li></ul><h3 id="Pre-training"><a href="#Pre-training" class="headerlink" title="Pre-training"></a>Pre-training</h3><ul><li>Universal</li><li>Corpus aware</li></ul><h3 id="Evaluation-1"><a href="#Evaluation-1" class="headerlink" title="Evaluation"></a>Evaluation</h3><ul><li>Wikipedia</li><li>MS-MARCO</li></ul><h1 id="Sparse-Dense-and-Attentional-Representations-for-Text-Retrieval"><a href="#Sparse-Dense-and-Attentional-Representations-for-Text-Retrieval" class="headerlink" title="Sparse, Dense, and Attentional Representations for Text Retrieval"></a>Sparse, Dense, and Attentional Representations for Text Retrieval</h1><p>Luan Y, Eisenstein J, Toutanova K, et al. Sparse, dense, and attentional representations for text retrieval[J]. Transactions of the Association for Computational Linguistics, 2021, 9: 329-345.</p><p>这篇文章在进行理论推导的时候比较偏数学证明.</p><h2 id="Motivation-3"><a href="#Motivation-3" class="headerlink" title="Motivation"></a>Motivation</h2><p>（首先对比 Dense Retrieval 与传统的 Sparse Retrieval.）Dual encoders perform retrieval by encoding documents and queries into dense low-dim vectors, scoring each document by its inner product with the query. We investigate the capacity of this architecture relative to sparse bag-of-words models and attentional neural networks. </p><p>下面是 Review 部分：</p><ul><li>Sparse Retrieval: more recent work has adopted a <strong>two-stage retrieval and ranking pipeline</strong>, where a large number of documents are retrieved using sparse high dimensional query/document representations, and are further reranked with learned neural models</li><li>Dense Retrieval: A promising alternative is to perform first-stage retrieval using learned dense low-dimensional encodings of documents and queries. The dual encoder model scores each document by the inner product between its encoding and that of the query.</li></ul><p>这两者的启发是不同的。Sparse Retrieval 更加看重的是 question 中的重点术语会与 retrieved document 中的术语重合，而 Dense Retrieval 更加关注的是语义上的相似度。</p><h3 id="Analyzing-dual-encoder-fidelity"><a href="#Analyzing-dual-encoder-fidelity" class="headerlink" title="Analyzing dual encoder fidelity"></a>Analyzing dual encoder fidelity</h3><p>这里 fidelity 可以理解为忠诚度，对原文术语的记忆程度。</p><p>And that is, how much can we compress the input while maintaining the ability to mimic the performance of bag-of-words retrieval?</p><p>Section 2 里证明了：Fidelity is important for the sub-problem of detecting precise term overlap, and is a tractable proxy for capacity. Using the theory of dimensionality reduction, we relate fidelity to the normalized margin between the gold retrieval result and its competitors, and show that this margin is in turn related to the length of documents in the collection. （没仔细看证明过程）。</p><h2 id="Approach-Feature-1"><a href="#Approach-Feature-1" class="headerlink" title="Approach / Feature"></a>Approach / Feature</h2><p>Building on these insights, we propose a simple neural model that combines the efficiency of dual encoders with some of the expressiveness of more costly attentional architectures, and <strong>explore sparse-dense hybrids</strong> to capitalize on the precision of sparse retrieval. These models outperform strong alternatives in large-scale retrieval.</p><h3 id="Multi-vector-Encodings"><a href="#Multi-vector-Encodings" class="headerlink" title="Multi-vector Encodings"></a>Multi-vector Encodings</h3><p>The theoretical analysis suggests that fixed-length vector representations of documents may in general need to be large for long documents, if fidelity with respect to sparse high-dimensional representations is important. </p><p><img src="https://s2.loli.net/2022/03/03/49CxJ7kebNZIUX8.png" alt="image-20220206184818740"></p><h3 id="Hybrid"><a href="#Hybrid" class="headerlink" title="Hybrid"></a>Hybrid</h3><p> A natural approach to balancing between the fidelity of sparse representations and the generalization of learned dense ones is to build a hybrid. </p><p>To do this, we linearly combine a sparse and dense system’s scores using a single trainable weight λ, tuned on a development set.</p><h2 id="Experiment-1"><a href="#Experiment-1" class="headerlink" title="Experiment"></a>Experiment</h2><ul><li>Retrieval for Open-domain QA</li></ul><p><img src="https://s2.loli.net/2022/03/03/TlN3it8aIQGoXbY.png" alt="image-20220206185657503"></p><ul><li>Large Scale Supervised IR</li></ul><p><img src="https://s2.loli.net/2022/03/03/CjMy6aTvVzhiBDm.png" alt="image-20220206185728980"></p><h2 id="Conclusion-1"><a href="#Conclusion-1" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We have used both theoretical and empirical techniques to characterize the fidelity of fixed-length dual encoders, focusing on the role of document length. </p><p>Based on these observations, we propose hybrid models that yield strong performance while maintaining scalability.</p><h1 id="Condenser-a-pretraining-architecture-for-dense-retrieval"><a href="#Condenser-a-pretraining-architecture-for-dense-retrieval" class="headerlink" title="Condenser: a pretraining architecture for dense retrieval"></a>Condenser: a pretraining architecture for dense retrieval</h1><h2 id="Motivation-4"><a href="#Motivation-4" class="headerlink" title="Motivation"></a>Motivation</h2><p>However, dense encoders require a lot of data and sophisticated techniques to effectively train and suffer in low data situations. </p><p>Reasons?</p><p>This paper finds a key reason is that standard LMs’ internal attention structure is not ready-to-use for dense encoders, which needs to aggregate text information into the dense representation.</p><p>Attention patterns, therefore, define how effective CLS can aggregate information. </p><p>In other words, the CLS token remains dormant in many middle layers and reactivates only in the last round of attention. </p><h2 id="Approach-2"><a href="#Approach-2" class="headerlink" title="Approach"></a>Approach</h2><p>We propose to pre-train towards dense encoder with a novel Transformer architecture, Condenser, where LM prediction CONditions on DENSE Representation. </p><h2 id="Experiment-2"><a href="#Experiment-2" class="headerlink" title="Experiment"></a>Experiment</h2><h3 id="Architecture-2"><a href="#Architecture-2" class="headerlink" title="Architecture"></a>Architecture</h3><p><img src="https://s2.loli.net/2022/03/03/6hteHNfrpa1Odg7.png" alt="image-20220205153145624"></p><ul><li>Pre-train </li></ul><p>重点是 Head 的设计，我们为了让 CLS 里塞入更多的信息，在 head 这一层把 LATE 的 CLS 和 EARLY 的 其他 OUTPUT 给 CAT 起来，作为输入塞给 Head 然后这里主要是为了调整 CLS 的表示力度。</p><p>为了避免 head 让 back 部分的 encoding 坏掉，loss 设置为 $L = L_{mlm} + L_{mlm}^c$.</p><p>$L_{mlm} = \sum_{i \in masked} CrossEntropy(Wh_i^{cd}, x_i)$</p><p>$L_{mlm}^c = \sum _ {i \in masked} CrossEntropy(Wh_i^{late}, x_i)$</p><ul><li>Fine tune</li></ul><p>fine tune 的时候直接把这个 head 给 drop 掉，变成了普普通通的 Transformer 模型.</p><h3 id="Fine-tuning"><a href="#Fine-tuning" class="headerlink" title="Fine tuning"></a>Fine tuning</h3><ol><li>Sentence Similarity</li></ol><p>Semantic Textual Similarity Benchmark</p><p>Wikipedia Section Distinction</p><ol><li>Retrieval for Open QA</li></ol><ul><li>NQ</li><li>TriviaQA</li></ul><ol><li>Retrieval for web search</li></ol><ul><li>MS MARCO</li></ul><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h1 id="PRE-TRAINING-TASKS-FOR-EMBEDDING-BASED-LARGE-SCALE-RETRIEVAL"><a href="#PRE-TRAINING-TASKS-FOR-EMBEDDING-BASED-LARGE-SCALE-RETRIEVAL" class="headerlink" title="PRE-TRAINING TASKS FOR EMBEDDING-BASED LARGE-SCALE RETRIEVAL"></a>PRE-TRAINING TASKS FOR EMBEDDING-BASED LARGE-SCALE RETRIEVAL</h1><p>Chang W C, Yu F X, Chang Y W, et al. Pre-training tasks for embedding-based large-scale retrieval[J]. arXiv preprint arXiv:2002.03932, 2020.</p><h2 id="Motivation-5"><a href="#Motivation-5" class="headerlink" title="Motivation"></a>Motivation</h2><p>Unlike the scoring phase witnessing significant advances recently due to the BERT-style pre-training tasks on cross-attention models, <strong>the retrieval phase remains less well studied. </strong></p><p>Most previous works rely on classic Information Retrieval (IR) methods such as BM-25 (token matching + TF-IDF weights). <strong>These models only accept sparse handcrafted features and can not be optimized for different downstream tasks of interest. </strong></p><h2 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h2><p>In this paper, we conduct a comprehensive study on the <strong>embedding-based retrieval models</strong>. (Namely Dense Retrieval!)</p><p>We show that the <strong>key ingredient</strong> of learning a strong embedding-based Transformer model is <strong>the set of pre-training tasks</strong>. With adequately designed paragraph-level pre-training tasks, the Transformer models can remarkably improve over the widely-used BM-25 as well as embedding models without Transformers. The paragraph-level pre-training tasks we studied are <strong>Inverse Cloze Task (ICT), Body First Selection (BFS), Wiki Link Prediction (WLP)</strong>, and <strong>the combination of all three</strong>.</p><p>We contribute the following insight:</p><ul><li>The two-tower Transformer models (Retrieval Stage + Reranking stage) with proper pre-training can significantly outperform the widely used BM-25 algorithm;</li><li>Paragraph-level pre-training tasks such as Inverse Cloze Task (ICT), Body First Selection (BFS), and Wiki Link Prediction (WLP) hugely improve the retrieval quality, whereas the most widely used pre-training task (the token-level masked-LM) gives only marginal gains <em>( marginal: small and not important)</em></li><li>The two-tower models with deep transformer encoders benefit more from paragraph-level pre-training compared to its shallow bag-of-word counterpart </li></ul><h1 id="From-doc2query-to-docTTTTTquery"><a href="#From-doc2query-to-docTTTTTquery" class="headerlink" title="From doc2query to docTTTTTquery"></a>From doc2query to docTTTTTquery</h1><p>Nogueira R, Lin J, Epistemic A I. From doc2query to docTTTTTquery[J]. Online preprint, 2019, 6.</p><h2 id="Motivation-6"><a href="#Motivation-6" class="headerlink" title="Motivation"></a>Motivation</h2><p>Nogueira et al. [7] used a simple sequence-to-sequence transformer [9] for <strong>document expansion</strong>. We <strong>replace the transformer with T5</strong> [8] and observe large effectiveness gains.</p><h1 id="Document-Expansion-by-Query-Prediction"><a href="#Document-Expansion-by-Query-Prediction" class="headerlink" title="Document Expansion by Query Prediction"></a>Document Expansion by Query Prediction</h1><h2 id="Motivation-7"><a href="#Motivation-7" class="headerlink" title="Motivation"></a>Motivation</h2><p>One technique to improve the retrieval effectiveness of a search engine is to expand documents with terms that are related or representative of the documents’ content</p><h2 id="Feature-1"><a href="#Feature-1" class="headerlink" title="Feature"></a>Feature</h2><p>Following this observation, we propose a simple method that predicts which queries will be issued for a given document and then expands it with those predictions with a vanilla sequence-to-sequence model, trained using datasets consisting of pairs of query and relevant documents.</p><ul><li>Method [Doc2Query]: For each document, the task is to predict a set of queries for which that document will be relevant.<ul><li>Given a dataset of (query, relevant document) pairs, we use a sequence-to-sequence transformer model (Vaswani et al., 2017) that takes as an input the document terms and produces a query.</li><li>The document and target query are segmented using BPE (Sennrich et al., 2015) after being tokenized with the Moses tokenizer.1 </li><li>Once the model is trained, we predict 10 queries using top-k random sampling and append them to each document in the corpus.</li></ul></li></ul><p>然后用 BM25 作为 Retriever，增广后的 Document 代替原有 Document.</p><h2 id="Experiment-3"><a href="#Experiment-3" class="headerlink" title="Experiment"></a>Experiment</h2><p>Evaluation was carried out on:</p><ul><li>MS MARCO</li><li>TREC-CAR</li></ul><h1 id="ColBERT-Efficient-and-Effective-Passage-Search-via-Contextualized-Late-Interaction-over-BERT"><a href="#ColBERT-Efficient-and-Effective-Passage-Search-via-Contextualized-Late-Interaction-over-BERT" class="headerlink" title="ColBERT: Efficient and Effective Passage Search via Contextualized Late Interaction over BERT"></a>ColBERT: Efficient and Effective Passage Search via Contextualized Late Interaction over BERT</h1><h2 id="Motivation-8"><a href="#Motivation-8" class="headerlink" title="Motivation"></a>Motivation</h2><p>While remarkably effective, the ranking models based on these LMs increase computational cost by orders of magnitude over prior approaches, particularly as they must feed each query–document pair through a massive neural network to compute a single relevance score</p><h2 id="Feature-2"><a href="#Feature-2" class="headerlink" title="Feature"></a>Feature</h2><p> To tackle this, we present ColBERT, a novel ranking model that adapts deep LMs (in particular, BERT) for efficient retrieval. </p><p>ColBERT introduces <strong>a late interaction architecture </strong>that independently encodes the query and the document using BERT and then employs a cheap yet powerful interaction step that models their fine-grained similarity. </p><p>Under late interaction, 𝑞 and 𝑑 are separately encoded into two sets of contextual embeddings, and relevance is evaluated using cheap and pruning-friendly computations between both sets—that is, fast computations that enable ranking without exhaustively evaluating every possible candidate.</p><p><img src="https://s2.loli.net/2022/03/03/4TBhui5CsP8fWSb.png" alt="image-20220209150841730"></p><h1 id="Complement-Lexical-Retrieval-Model-with-Semantic-Residual-Embeddings"><a href="#Complement-Lexical-Retrieval-Model-with-Semantic-Residual-Embeddings" class="headerlink" title="Complement Lexical Retrieval Model with Semantic Residual Embeddings"></a>Complement Lexical Retrieval Model with Semantic Residual Embeddings</h1><h2 id="Feature-3"><a href="#Feature-3" class="headerlink" title="Feature"></a>Feature</h2><p>This paper presents <em>clear</em>, a retrieval model that seeks to complement classical lexical exact-match models such as BM25 with semantic matching signals from a neural embedding matching model.</p><h2 id="Approach-3"><a href="#Approach-3" class="headerlink" title="Approach"></a>Approach</h2><p>clear consists of a lexical retrieval model and an embedding retrieval model. Between these two models, one’s weakness is the other’s strength: lexical retrieval performs exact token matching but cannot handle vocabulary mismatch; meanwhile, the embedding retrieval supports semantic matching but loses granular (lexical level) information.</p><p>To ensure that the two types of models work together and fix each other’s weakness, we propose a residual-based learning framework that teaches the neural embeddings to be complementary to the lexical retrieval.</p><h3 id="Lexical-Retrieval-Model"><a href="#Lexical-Retrieval-Model" class="headerlink" title="Lexical Retrieval Model"></a>Lexical Retrieval Model</h3><p>BM25:</p><script type="math/tex; mode=display">s_{\text {lex }}(q, d)=\operatorname{BM} 25(q, d)=\sum_{t \in q \cap d} \operatorname{rsj}_{t} \cdot \frac{\mathrm{tf}_{t, d}}{\mathrm{tf}_{t, d}+k_{1}\left\{(1-b)+b \frac{|d|}{l}\right\}}</script><h3 id="Embedding-Retrieval-Model"><a href="#Embedding-Retrieval-Model" class="headerlink" title="Embedding Retrieval Model"></a>Embedding Retrieval Model</h3><script type="math/tex; mode=display">\begin{gathered}\mathbf{v}_{q}=\operatorname{AvgPool}\left[\operatorname{BERT}_{\theta}(\langle\mathrm{QRY}\rangle ; \text { query })\right] \\\mathbf{v}_{d}=\operatorname{AvgPool}\left[\operatorname{BERT}_{\theta}(\langle\operatorname{DOC}\rangle ; \text { document })\right]\end{gathered}</script><p>BERT: shared weight</p><script type="math/tex; mode=display">s_{emb}(q,d) = v_q^Tv_d</script><h3 id="Residual-Based-Learning"><a href="#Residual-Based-Learning" class="headerlink" title="Residual Based Learning"></a>Residual Based Learning</h3><p>To make the best use of the embedding model, we must avoid the embedding model “relearning” signals already captured by the lexical model. Instead, we focus its capacity on semantic level matching missing in the lexical model.</p><p>一般的 Loss 函数：</p><script type="math/tex; mode=display">\mathcal{L}=\left[m-s_{\mathrm{emb}}\left(q, d^{+}\right)+s_{\mathrm{emb}}\left(q, d^{-}\right)\right]_{+}</script><p>where $[x]^+ = max\{0,x\}$</p><p>为了让 embedding 来 complement lexical retrieval，我们 propose 两个 techique:</p><ul><li>Error-based Negative Sampling</li></ul><p>Sample negative examples from those documents mistakenly retrieved by lexical retrieval.</p><p>Given a positive query-document pair, we uniformly sample irrelevant examples from the top N documents returned by lexical retrieval with probability p. With such negative samples, the embedding model learns to differentiate relevant documents from confusing ones that are lexically similar to the query but semantically irrelevant.</p><ul><li>Residual-based Margin</li></ul><p>Intuitively, different query-document pairs require different levels of extra semantic information for matching on top of exact matching signals.</p><p><strong>Our negative sampling strategy does not tell the neural model the degree of error made by the lexical retrieval that it needs to fix.</strong></p><p>于是做修改：</p><script type="math/tex; mode=display">m_{r}\left(\mathrm{~s}_{\text {lex }}\left(q, d^{+}\right), \mathrm{s}_{\text {lex }}\left(q, d^{-}\right)\right)=\xi-\lambda_{\text {train }}\left(\mathrm{s}_{\text {lex }}\left(q, d^{+}\right)-\mathrm{s}_{\text {lex }}\left(q, d^{-}\right)\right)</script><script type="math/tex; mode=display">\mathcal{L}=\left[m_{r}\left(\mathrm{~s}_{\mathrm{lex}}\left(q, d^{+}\right), \mathrm{s}_{\mathrm{lex}}\left(q, d^{-}\right)\right)-s_{\mathrm{emb}}\left(q, d^{+}\right)+s_{\mathrm{emb}}\left(q, d^{-}\right)\right]_{+}</script><h1 id="Poly-encoders-architectures-and-pre-training-strategies-for-fast-and-accurate-multi-sentence-scoring"><a href="#Poly-encoders-architectures-and-pre-training-strategies-for-fast-and-accurate-multi-sentence-scoring" class="headerlink" title="Poly-encoders: architectures and pre-training strategies for fast and accurate multi-sentence scoring"></a>Poly-encoders: architectures and pre-training strategies for fast and accurate multi-sentence scoring</h1><h2 id="Motivation-9"><a href="#Motivation-9" class="headerlink" title="Motivation"></a>Motivation</h2><p>现有的：Cross-encoders 和 Bi-encoders</p><p>The former often performs better, but is too slow for practical use. </p><h2 id="Feature-4"><a href="#Feature-4" class="headerlink" title="Feature"></a>Feature</h2><p>In this work, we develop a new transformer architecture, the Poly-encoder, that learns global rather than token level self-attention features.</p><p>We introduce the Poly-encoder, an architecture with an additional learnt attention mechanism that represents more global features from which to perform self-attention, resulting in performance gains over Bi-encoders and large speed gains over Cross-Encoders</p><h2 id="Poly-Encoder"><a href="#Poly-Encoder" class="headerlink" title="Poly-Encoder"></a>Poly-Encoder</h2><p>A given candidate label is represented by one vector as in the Bi-encoder, which allows for caching candidates for fast inference time, while the input context is jointly encoded with the candidate, as in the Cross-encoder, allowing the extraction of more information.</p><p>The Poly-encoder uses two separate transformers for the context and label like a Bi-encoder, and the candidate is encoded into a single vector $y_{candi}$ .</p><p>As such, the Poly-encoder method can be implemented using a precomputed cache of encoded responses. However, <strong>the input context, which is typically much longer than a candidate</strong>, is represented with m vectors ($y^1_{ctxt}, \cdots, y^{m}_{ctxt}$) instead of just one as in the Bi-encoder, where m will influence the inference speed. </p><p>To obtain these m global features that represent the input, we learn m context codes $(c_1, \cdots, c_m)$, where $c_i$ extracts representation $y^i_{ctxt}$ by attending over all the outputs of the previous layer:</p><script type="math/tex; mode=display">y_{c t x t}^{i}=\sum_{j} w_{j}^{c_{i}} h_{j} \quad \text { where } \quad\left(w_{1}^{c_{i}}, . ., w_{N}^{c_{i}}\right)=\operatorname{softmax}\left(c_{i} \cdot h_{1}, \ldots, c_{i} \cdot h_{N}\right)</script><p>The m context codes are randomly initialized, and learnt during finetuning. Finally, given our m global context features, we attend over them using $y_{candi}$ as the query:</p><script type="math/tex; mode=display">y_{c t x t}=\sum w_{i} y_{c t x t}^{i} \quad \text { where } \quad\left(w_{1}, \ldots, w_{m}\right)=\operatorname{softmax}\left(y_{c a n d_{i}} \cdot y_{c t x t}^{1}, \ldots, y_{c a n d_{i}} \cdot y_{c t x t}^{m}\right)</script><p>The final score for that candidate label is then $y_{ctxt} \cdot y_{candi}$ as in a Bi-encoder. As m &lt; N, where N is the number of tokens, and the context-candidate attention is only performed at the top layer, this is far faster than the Cross-encoder’s full self-attention.</p><p><img src="https://s2.loli.net/2022/03/03/rBlRIiAHuqK18jw.png" alt="image-20220208163723909"></p><p>但是…时间呢？</p><p><img src="https://s2.loli.net/2022/03/03/F56m4qxauOjoLA8.png" alt="image-20220208164130924"></p><p>好吧，虽然复杂度感觉不太对，但是他说比 Cross 好上那么几个数量级。Fine.</p><h1 id="Improving-Document-Representations-by-Generating-Pseudo-Query-Embeddings-for-Dense-Retrieval"><a href="#Improving-Document-Representations-by-Generating-Pseudo-Query-Embeddings-for-Dense-Retrieval" class="headerlink" title="Improving Document Representations by Generating Pseudo Query Embeddings for Dense Retrieval"></a><strong>Improving Document Representations</strong> by Generating Pseudo Query Embeddings for Dense Retrieval</h1><h2 id="Motivation-10"><a href="#Motivation-10" class="headerlink" title="Motivation"></a>Motivation</h2><p>However, this simple structure may cause serious information loss during the encoding of documents since the queries are agnostic.</p><p>As it is very common that a document with hundreds of tokens contains several distinct topics, some important semantic information might be easily missed or biased by each other without knowing the query.</p><h2 id="Feature-5"><a href="#Feature-5" class="headerlink" title="Feature"></a>Feature</h2><p>To address this problem, we design a method to mimic the queries on each of the documents by an iterative clustering process and represent the documents by multiple pseudo queries.</p><p>To alleviate the query agnostic problem, we propose a novel approach that mimics multiple potential queries corresponding to the input document and we call them “pseudo query embeddings”.</p><p>Ideally, each of the pseudo query embeddings corresponds to a semantic salient (most important or noticeable) fragment in the document which is similar to a semantic cluster of the document. </p><p>Thus, we implement the process by a clustering algorithm (i.e., K-means in this work) and regard the cluster centroids as the pseudo query embeddings. </p><ul><li>This is a novel approach to represent the document with multiple pseudo query embeddings which are generated by a clustering process.</li></ul><h2 id="Review-Aggregator"><a href="#Review-Aggregator" class="headerlink" title="Review: Aggregator"></a>Review: Aggregator</h2><p><img src="https://s2.loli.net/2022/03/03/mFe25cMlpigUVts.png" alt="image-20220207164752721"></p><p><strong>Independent Aggregator</strong></p><p>$q_\star$ and $d_\star$ are the direct output of the BERT layer. A pooler is needed to extract the inputs for the scoring function. For example, $e_q = q_\star[CLS]$ in Karpukhin et al.</p><p>Although it might be efficient to compute, compressing m or n embeddings just into 1 embedding may lose information.</p><p><strong>Late Interaction Aggregator</strong></p><p>As shown in Figure 1 (c), the model preserves all of the document token embeddings {di} m i=1 in the cache until a new query is given.</p><p> It then computes token-wise matching scores using all of the document and query embeddings. The final matching score is generated by pooling the m × n scores. </p><p>However, the time complexity of the score computation arises from constant O(1) to quadratic O(mn).</p><p><strong>Semi-interactive Aggregator</strong></p><p>compresses the document token embeddings to a constant number k much smaller than the document length m (k &lt;&lt; m).</p><p><strong>Their Method</strong></p><p>Firstly, following the semi-interactive aggregator, we feed the document tokens into BERT and use the last layer hidden states as the document token embeddings {di} m i=1. Next, we perform Kmeans algorithm on these token embeddings.</p><p>The <strong>K-means algorithm</strong> mainly contains two iterative steps: assignment step and update step. These two steps are performed alternatively until the convergence condition is satisfied. </p><p>The assignment step can be expressed by the following equation.</p><script type="math/tex; mode=display">\begin{gathered}s_{i}^{t}=\underset{j}{\operatorname{argmin}}\left\|d_{i}-c_{j}^{t}\right\|^{2} \\i \in\{1, \ldots, m\}, j \in\{1, \ldots, k\}\end{gathered}</script><p>Update:</p><script type="math/tex; mode=display">c_{j}^{t+1}=\frac{1}{\sum_{i=1}^{m} 1\left(s_{i}^{t}=j\right)} \sum_{\left\{i \mid s_{i}^{t}=j\right\}} d_{i}</script><p>实际上这就是 K-means Clustering 的算法，就是一堆上下标记号，没啥高大上的地方。</p><p>然后我们就把 $c_j^t$ 看作是 Query Embedding.</p><h2 id="Experiment-4"><a href="#Experiment-4" class="headerlink" title="Experiment"></a>Experiment</h2><p>Evaluation: MS MARCO; Open QA (翻来覆去这个领域的 baseline 就这么几个)</p><h1 id="Sentence-T5-Scalable-Sentence-Encoders-from-Pre-trained-Text-to-Text-Models"><a href="#Sentence-T5-Scalable-Sentence-Encoders-from-Pre-trained-Text-to-Text-Models" class="headerlink" title="Sentence-T5: Scalable Sentence Encoders from Pre-trained Text-to-Text Models"></a>Sentence-T5: <strong>Scalable</strong> Sentence Encoders from Pre-trained Text-to-Text Models</h1><h2 id="Motivation-11"><a href="#Motivation-11" class="headerlink" title="Motivation"></a>Motivation</h2><p>While T5 achieves impressive performance on language tasks cast as sequence-to-sequence mapping problems, it is unclear how to produce sentence embeddings from encoder-decoder models.</p><p>We investigate three methods for extracting T5 sentence embeddings: two utilize only the T5 encoder and one uses the full T5 encoder-decoder model.</p><h2 id="Feature-6"><a href="#Feature-6" class="headerlink" title="Feature"></a>Feature</h2><p>目的就是一个句子塞进 T5 获取他的 Representation，塞的信息越多越好。</p><p>We explore three ways of turning a pre-trained T5 encoder-decoder model into a sentence embedding model: (i) using the first token representation of the encoder; (ii) averaging all token representations from the encoder; (iii) using the first token representation from the decoder.</p><h2 id="Conclusion-2"><a href="#Conclusion-2" class="headerlink" title="Conclusion"></a>Conclusion</h2><ul><li>encoder-only models have strong transfer performance while encoderdecoder models perform better on textual similarity tasks</li><li>We also demonstrate the effectiveness of scaling up the model size, which greatly improves sentence embedding quality</li></ul><p>如果对 T5 进行进一步研究，能否提取出其每层的表示来做分析，查看到底是哪些层针对哪些任务起了作用？但是因为 T5 本来就是为了做 Universal 的，这个任务也不一定有价值…</p><h1 id="Multi-task-Retrieval-for-Intensive-Tasks"><a href="#Multi-task-Retrieval-for-Intensive-Tasks" class="headerlink" title="Multi-task Retrieval for Intensive Tasks"></a>Multi-task Retrieval for Intensive Tasks</h1><ul><li>什么是 multi-task retrieval?</li></ul><p>we target a retriever that can perform well on a wide variety of problems, without task-specific finetuning</p><ul><li>什么是 Knowledge intensive task? 是任务集（？</li></ul><p>KILT (Knowledge Intensive Language Tasks) is a new unified benchmark to help AI researchers build models that are better able to leverage real-world knowledge to accomplish a broad range of tasks.</p><h2 id="Motivation-12"><a href="#Motivation-12" class="headerlink" title="Motivation"></a>Motivation</h2><p>Although neural retrieval outperforms traditional methods like tf-idf and BM25, its performance degrades considerably when applied to <strong>out-of-domain data.</strong></p><p>现有的 Dense Retrieval 的弱点：</p><p>First, unlike tf-idf or BM25, neural retrieval models are unsuitable for low data regimes such as few- and zero-shot settings. </p><p>Second, task-specific retrievers complicate practical applications where multiple knowledge-intensive tasks may need to be performed using the same supporting database or over the same input text. </p><h2 id="Feature-7"><a href="#Feature-7" class="headerlink" title="Feature"></a>Feature</h2><p><strong>By jointly training on an extensive selection of retrieval tasks</strong>, we obtain a model which is not only more robust than previous approaches, but also can lead to better performance on the downstream knowledge-intensive tasks when plugged into an existing system.</p><h2 id="Experiment-5"><a href="#Experiment-5" class="headerlink" title="Experiment"></a>Experiment</h2><ul><li>The universal retriever performing comparably to task-specific models</li><li>Plugged the universal retriever into a larger pipeline and achieved better results</li><li>Evaluated the model’s performance in the zero-shot and few-shot settings. <ul><li>our proposed approach performs comparably to BM25 in the zero shot setting, and quickly overtakes it even with minimal in-domain training</li></ul></li><li>In Section 4.5 we evaluated a number of more complex variants of the model involving task specialisation, but failed to see clear performance improvements. Finally, in Section 4.6 we saw how a simple iterative approach to data augmentation can lead to better performance.</li></ul><p>// 下周组会要分享论文，寄寄寄，总不能讲这些 21 年及之前的老货色吧，下周看起来要顶着软工 init project 的时候多找几篇论文了</p><p>// 读了也不算很多论文，但连 BERT 都没上手跑过几次，搞完挑战杯一定要上手写代码了，不然感觉还是太理论，太泛泛而谈了，丝毫没感到码力有提升（x</p><p>// 计网原小作业都要读 TCP/IP 的论文 不会吧不会吧 计网原我 <em> </em> *</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要是对 202202 读的 Paper 的总结。&lt;/p&gt;
&lt;p&gt;涉及的主要主题是 Infomation Retrieval 中的 Dense Retrieval.&lt;/p&gt;</summary>
    
    
    
    <category term="理论" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/"/>
    
    <category term="理论/NLP" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/%E7%90%86%E8%AE%BA-NLP/"/>
    
    
  </entry>
  
  <entry>
    <title>GAN 生成对抗网络 简介</title>
    <link href="https://www.c7w.tech/gan/"/>
    <id>https://www.c7w.tech/gan/</id>
    <published>2022-03-02T12:24:47.000Z</published>
    <updated>2022-03-02T14:21:41.020Z</updated>
    
    <content type="html"><![CDATA[<p>Reference 是 2021 Spring Hung-yi Lee 的机器学习的 GAN 部分。</p><ul><li><a href="https://www.youtube.com/watch?v=4OWp0wDu6Xw&amp;list=PLJV_el3uVTsMhtt7_Y6sgTHGHp1Vb2P2J&amp;index=14">https://www.youtube.com/watch?v=4OWp0wDu6Xw&amp;list=PLJV_el3uVTsMhtt7_Y6sgTHGHp1Vb2P2J&amp;index=14</a></li></ul><a id="more"></a><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><ul><li>Network as Generator:<ul><li>Network 的输入加上一个 random variable $z$ sampled from a certain distribution.</li><li>使得相同的 $x$ 输入产生的输出 $y$ 不同，特别是对于那些需要“creativity”的任务.</li></ul></li></ul><h2 id="Unconditional-Generation"><a href="#Unconditional-Generation" class="headerlink" title="Unconditional Generation"></a>Unconditional Generation</h2><ul><li>Unconditional Generation<ul><li>Input: $z$, sampled from a normal distribution, low-dim vector.</li><li>Output: $y$, high-dim vector.</li><li>Generator(Network): 把简单的 distribution 放大成复杂的 distribution.</li><li>Discriminator: 多训练一个 Discriminator，输入一个图片，输出一个数值，越大代表输入图片越真实。</li></ul></li></ul><p><img src="https://s2.loli.net/2022/03/02/B7s6RfJOHdurVlz.png" alt="image-20220302204358282"></p><ul><li>训练步骤：<ul><li>Fix generator G, update discriminator D</li><li>Fix discriminator D, update generator G</li></ul></li></ul><h2 id="Theory-behind-GAN"><a href="#Theory-behind-GAN" class="headerlink" title="Theory behind GAN"></a>Theory behind GAN</h2><p>我们的目标是：</p><ul><li>Normal Distribution 经过 Generator G 后产生的 Distribution $P_G$，与真实的数据集的 $P_{data}$ 越接近越好。</li><li>$G^{*}=\arg \min _{G} \operatorname{Div}\left(P_{G}, P_{d a t a}\right)$</li><li>问题是，该怎么计算 $\operatorname{Div}\left(P_{G}, P_{d a t a}\right)$ 呢？</li><li>事实上，GAN 是在这两个 Distribution 中做 sample 来解决这个问题，也就是 Discriminator 的功能。</li><li>$\max_D V(D,G)$ 与 $P_G$ 和 $P_{data}$ 的 JS Divergence 有关.</li><li>也就是 $G^{*}=\arg \min _{G} \max _{D} V(G, D)$.</li></ul><h2 id="Tips-for-training-GAN"><a href="#Tips-for-training-GAN" class="headerlink" title="Tips for training GAN"></a>Tips for training GAN</h2><ul><li>JS divergence 的问题？<ul><li>$P_G$ 和 $P_{data}$ 往往交集不大，因为二者往往是高维空间的 manifold.</li><li>对于两个没有重合的分布，JS Divergence 永远是 log 2.</li><li>也就是说，JS Divergence 没有考虑两个 Distribution 之间的距离…</li></ul></li></ul><p><img src="https://s2.loli.net/2022/03/02/XNSAdmxy6QnHLjg.png" alt="image-20220302211540458"></p><p>于是，我们换一种 Divergence…</p><ul><li>Wasserstein distance<ul><li>两个 Distribution 之间的距离</li><li>让一个 Distribution 变成另一个所花费的最小代价</li></ul></li></ul><script type="math/tex; mode=display">\max _{D \in 1-\text { Lipschitz }}\left\{E_{x \sim P_{d a t a}}[D(x)]-E_{x \sim P_{G}}[D(x)]\right\}</script><ul><li>1-Lipschitz 限制<ul><li>使得 D 足够平滑，以免出现朝向 inf 发展的情况</li><li>如何实现这个限制？<ul><li>Improved WGAN</li><li>SNGAN</li></ul></li></ul></li></ul><h2 id="Evaluation-of-generation"><a href="#Evaluation-of-generation" class="headerlink" title="Evaluation of generation"></a>Evaluation of generation</h2><ul><li>Quality of Image</li></ul><p><img src="https://s2.loli.net/2022/03/02/vCqfKOxlocLFbjt.png" alt="image-20220302215009447"></p><p>可能会出现 Mode Collapse 的现象，生成的图片比较集中，这个问题主要是由于实际的数据分布峰值有多个，而训练只拟合了其中的一个.</p><p><img src="https://s2.loli.net/2022/03/02/ajGgzuOA4cUn7mh.png" alt="img"></p><p>也可能会出现 Mode Dropping 的现象，训练只 pick 了某个特征，训练了多次以后，生成的图片人脸都是一样的，只有色调的改变。</p><p><img src="https://s2.loli.net/2022/03/02/c48IWslmbdftrZX.png" alt="img"></p><ul><li>How to ensure diversity:</li></ul><p><img src="https://s2.loli.net/2022/03/02/SsDhqYEUzO3Ibvx.png" alt="image-20220302215633902"></p><ul><li>Quality 看的是一张图片丢进 Image Classifier 之后的分布是否集中，而 Diversity 看的是一组图片丢进 Image Classifier 之后分布是否均匀.</li></ul><h2 id="Conditional-Generation"><a href="#Conditional-Generation" class="headerlink" title="Conditional Generation"></a>Conditional Generation</h2><p><img src="https://s2.loli.net/2022/03/02/dTHE8nAWeGLpawb.png" alt="image-20220302220339320"></p><ul><li>Discriminator 也增加输入 $x$，只有当 G 的输出与 $x$ match 的时候才输出高分.</li></ul><p>应用：</p><ul><li>Text to image</li><li>Image to image</li><li>Sound to image</li></ul><h2 id="Learning-from-unpaired-data"><a href="#Learning-from-unpaired-data" class="headerlink" title="Learning from unpaired data"></a>Learning from unpaired data</h2><p>最直观的想法：</p><p><img src="https://s2.loli.net/2022/03/02/RwlZ9mcL6oQObpM.png" alt="image-20220302221524154"></p><p><img src="https://s2.loli.net/2022/03/02/g2YL19ds6fjetFJ.png" alt="image-20220302221623184"></p><p>但是，G 可能只会把 input 当成是一个 noise 来处理，在输入和输出之间没什么关系…</p><p>于是我们改进模型：</p><p><img src="https://s2.loli.net/2022/03/02/LPsAvhYX9r24Bgi.png" alt="image-20220302221820843"></p><p>Then we add the dual part:</p><p><img src="https://s2.loli.net/2022/03/02/QpL75kSsZMYawPF.png" alt="image-20220302222132643"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Reference 是 2021 Spring Hung-yi Lee 的机器学习的 GAN 部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4OWp0wDu6Xw&amp;amp;list=PLJV_el3uVTsMhtt7_Y6sgTHGHp1Vb2P2J&amp;amp;index=14&quot;&gt;https://www.youtube.com/watch?v=4OWp0wDu6Xw&amp;amp;list=PLJV_el3uVTsMhtt7_Y6sgTHGHp1Vb2P2J&amp;amp;index=14&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="理论" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/"/>
    
    <category term="理论/机器学习" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/%E7%90%86%E8%AE%BA-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://www.c7w.tech/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>MATLAB 从放弃到入门</title>
    <link href="https://www.c7w.tech/matlab-exercise/"/>
    <id>https://www.c7w.tech/matlab-exercise/</id>
    <published>2022-02-23T12:06:47.000Z</published>
    <updated>2022-02-23T13:48:22.660Z</updated>
    
    <content type="html"><![CDATA[<p>大概记录的是 MATLAB 的练习之路。反正《数值分析》课程也得用。</p><a id="more"></a><h2 id="Week-1-Optional"><a href="#Week-1-Optional" class="headerlink" title="Week 1 Optional"></a>Week 1 Optional</h2><ul><li>Figure 1</li></ul><p><img src="https://s2.loli.net/2022/02/23/IFc8GgE1VtMZ3kT.png" alt="image-20220223201253085"></p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span><span class="token comment">%清空之前的图窗</span>t <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token keyword">pi</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">%时间</span>y <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.3</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token operator">.*</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">0.7</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'r-'</span><span class="token punctuation">,</span><span class="token string">'LineWidth'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">%用三磅红实线画曲线</span>hold on <span class="token comment">% 添加新绘图时保留当前绘图</span>tt <span class="token operator">=</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ts <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%寻找进入5%误差带的最大时间</span><span class="token function">plot</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span><span class="token number">0.95</span><span class="token punctuation">,</span><span class="token string">'bo'</span><span class="token punctuation">,</span><span class="token string">'MarkerSize'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">%(ts,0.95)为文字的坐标，'b'指蓝色，'o'指圆圈，'MarkerSize','10'设定圆圈大小为10</span>hold off<span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token keyword">inf</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token keyword">inf</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">%设置横坐标上限为6π，下限自动生成；纵坐标下限为0.6，上限自动生成</span>ax <span class="token operator">=</span> gca<span class="token punctuation">;</span> <span class="token comment">%将ax赋值为当前图窗对象</span>ax<span class="token punctuation">.</span>XTick <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ax<span class="token punctuation">.</span>YTick <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.95</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1.05</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%将横坐标分度设置为2π，4π，6π;同理重设纵坐标分度</span>ax<span class="token punctuation">.</span>XTickLabel <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'2\pi'</span><span class="token punctuation">,</span><span class="token string">'4\pi'</span><span class="token punctuation">,</span><span class="token string">'6\pi'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">%横轴分度的标识。'\pi'会输出π。</span>ax<span class="token punctuation">.</span>YTickLabel <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'0.95'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'1.05'</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">%纵轴分度的标识。num2str将数字转化为字符串</span>grid on<span class="token function">text</span><span class="token punctuation">(</span><span class="token number">13.5</span><span class="token punctuation">,</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token string">'\fontsize&#123;12&#125;&#123;\alpha&#125;=0.3'</span><span class="token punctuation">)</span><span class="token comment">%(13.5,1.2)是文字坐标，\fontsize&#123;12&#125;将文字大小设定为12号,&#123;\alpha&#125;是α，本行代码输出'α=0.3'</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token number">13.5</span><span class="token punctuation">,</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token string">'fontsize&#123;12&#125;&#123;\omega&#125;=0.7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%(13.5,1.1)是文字坐标，\fontsize&#123;12&#125;将文字大小设定为12号,&#123;\omega&#125;是ω，本行代码输出'α=0.7'</span><span class="token comment">%我们可以看到，text的参数很长，下面介绍一种缩减长度的方法</span>cell_string<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token string">'\fontsize&#123;12&#125;\uparrow'</span><span class="token punctuation">;</span><span class="token comment">% 本行代码将指令用到的字符串存入一个胞元数组中，未来调用的时候更为便利</span><span class="token comment">% uparrow会输出一个向上指的箭头</span>cell_string<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token string">'\fontsize&#123;16&#125;\fontname&#123;courier&#125;response'</span><span class="token punctuation">;</span><span class="token comment">%\fontname&#123;courier&#125;将字体设定为courier</span>cell_string<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token string">'\fontsize&#123;6&#125; '</span><span class="token punctuation">;</span>cell_string<span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\fontsize&#123;14&#125;\rmt_&#123;s&#125; = '</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%\rm为正体,_&#123;s&#125;使s成为t的下标</span><span class="token function">text</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span><span class="token number">0.85</span><span class="token punctuation">,</span>cell_string<span class="token punctuation">,</span><span class="token string">'Color'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'HorizontalAlignment'</span><span class="token punctuation">,</span><span class="token string">'Center'</span><span class="token punctuation">)</span><span class="token comment">%HorizontalAlignment使四个胞元中的内容竖直居中对齐</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'\fontsize&#123;14&#125; \it y = 1 - e^&#123; -\alpha t&#125;cos&#123;\omegat&#125;'</span><span class="token punctuation">)</span><span class="token comment">% \it指斜体</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'\fontsize&#123;14&#125;\bft'</span><span class="token punctuation">)</span><span class="token comment">%\bf指黑体，\rightarrow在字符t上面输出一个向右的箭头，即向量t</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'\fontsize&#123;14&#125; \bfy'</span><span class="token punctuation">)</span></code></pre><ul><li>Figure 2</li></ul><p><img src="https://s2.loli.net/2022/02/23/A4t8qo5ePKSWMgn.png" alt="image-20220223201721698"></p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">close all<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>clc <span class="token comment">% clear</span>x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>y<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">meshgrid</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>Z<span class="token operator">=</span>X<span class="token operator">.^</span><span class="token number">2</span><span class="token operator">+</span>Y<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">colormap</span><span class="token punctuation">(</span>summer<span class="token punctuation">)</span>shading interp<span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>h <span class="token operator">=</span> <span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token string">'FaceColor'</span><span class="token punctuation">,</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token comment">%恢复默认底色</span><span class="token function">rotate</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">%rotate的四个参数依次为：图形对象句柄，旋转轴方向，旋转角度，旋转轴支点</span></code></pre><ul><li>Figure 3</li></ul><p><img src="https://s2.loli.net/2022/02/23/9orujxYQX1A8k6L.png" alt="image-20220223201906174"></p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">close all<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>clcr0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>shg<span class="token punctuation">;</span> <span class="token comment">%使当前图窗可见并使其位于屏幕上所有其他图窗上方</span>a <span class="token operator">=</span> <span class="token number">12</span><span class="token operator">*</span>r0<span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token number">9</span><span class="token operator">*</span>r0<span class="token punctuation">;</span>T0 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>T <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">*</span>T0<span class="token punctuation">;</span>dt <span class="token operator">=</span> <span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">:</span>dt<span class="token operator">:</span>T<span class="token punctuation">]</span><span class="token operator">'</span><span class="token punctuation">;</span>f <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token operator">^</span><span class="token number">2</span><span class="token operator">-</span>b<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>th <span class="token operator">=</span> <span class="token number">12.5</span> <span class="token operator">*</span> <span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>E <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>t<span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x <span class="token operator">=</span> E<span class="token operator">.*</span><span class="token punctuation">(</span>a<span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">-</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>y <span class="token operator">=</span> E<span class="token operator">.*</span><span class="token punctuation">(</span>b<span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>th<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>z<span class="token operator">=</span>E<span class="token operator">.*</span><span class="token punctuation">(</span>b<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>th<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">)</span> <span class="token comment">%画出绿色的全程轨迹线</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sphere</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%[X,Y,Z] = sphere(n) 返回半径等于 1 且包含 n×n 个面的球面的 x、y 和 z 坐标。</span><span class="token comment">% 该函数以三个 (n+1)×(n+1) 矩阵形式返回 x、y 和 z 坐标。</span>X <span class="token operator">=</span> r0<span class="token operator">*</span>X<span class="token punctuation">;</span>Y<span class="token operator">=</span>r0<span class="token operator">*</span>Y<span class="token punctuation">;</span>Z<span class="token operator">=</span>r0<span class="token operator">*</span>Z<span class="token punctuation">;</span>grid on<span class="token punctuation">;</span>hold on<span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span>shading interpx1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">18</span><span class="token operator">*</span>r0<span class="token punctuation">;</span>x2 <span class="token operator">=</span> <span class="token number">6</span><span class="token operator">*</span>r0<span class="token punctuation">;</span>y1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12</span><span class="token operator">*</span>r0<span class="token punctuation">;</span>y2 <span class="token operator">=</span> <span class="token number">12</span><span class="token operator">*</span>r0<span class="token punctuation">;</span>z1<span class="token operator">=</span><span class="token operator">-</span><span class="token number">6</span><span class="token operator">*</span>r0<span class="token punctuation">;</span>z2 <span class="token operator">=</span> <span class="token number">6</span><span class="token operator">*</span>r0<span class="token punctuation">;</span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x1 x2 y1 y2 z1 y2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">%设定坐标轴范围</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">133</span> <span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">comet3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span><span class="token number">0.02</span><span class="token punctuation">)</span></code></pre><ul><li>Figure 4</li></ul><p><img src="https://s2.loli.net/2022/02/23/zmnwPsQS8BGLyZj.png" alt="image-20220223201920255"></p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">close all<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>clcfunx <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span> u<span class="token operator">.*</span><span class="token function">sin</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%定义函数句柄</span>funy <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token operator">-</span>u<span class="token operator">.*</span><span class="token function">cos</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>funz <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span> v<span class="token punctuation">;</span><span class="token function">fsurf</span><span class="token punctuation">(</span>funx<span class="token punctuation">,</span>funy<span class="token punctuation">,</span>funz<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span> <span class="token number">5</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'--'</span><span class="token punctuation">,</span><span class="token string">'EdgeColor'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">)</span><span class="token comment">%fsurf的前三个参数是函数句柄，后面的矩阵是x，y的范围</span>hold onC <span class="token operator">=</span> summer<span class="token punctuation">;</span><span class="token comment">%summer是一个色图矩阵</span>CC <span class="token operator">=</span> <span class="token punctuation">[</span>C<span class="token punctuation">;</span><span class="token function">flipud</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%flipud实现矩阵的上下翻转，使CC逐渐变化</span><span class="token function">colormap</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span><span class="token function">spinmap</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">%色彩变换30秒，每次变换4行</span></code></pre><ul><li>Figure 5</li></ul><p><img src="https://s2.loli.net/2022/02/23/r7CYPdntKq2cVXW.png" alt="image-20220223202353901"></p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">close all<span class="token punctuation">;</span>clearfigureZ <span class="token operator">=</span> peaks<span class="token punctuation">;</span><span class="token function">surf</span><span class="token punctuation">(</span>Z<span class="token punctuation">)</span>axis tight manualax <span class="token operator">=</span> gca<span class="token punctuation">;</span>ax<span class="token punctuation">.</span>NextPlot <span class="token operator">=</span> <span class="token string">'replaceChildren'</span><span class="token punctuation">;</span>loops <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token function">F</span><span class="token punctuation">(</span>loops<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'cdata'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'colormap'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>loopsX <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">*</span>Z<span class="token punctuation">;</span><span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Z<span class="token punctuation">)</span>drawnow<span class="token function">F</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> getframe<span class="token punctuation">;</span><span class="token comment">%通过getframe，将每一帧影片存入F中</span><span class="token keyword">end</span><span class="token function">movie</span><span class="token punctuation">(</span>F<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">%播放两次，每秒5帧</span></code></pre><ul><li>Figure 6</li></ul><p><img src="https://s2.loli.net/2022/02/23/mHK6z9wO7dt2kgM.png" alt="image-20220223202418814"></p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">close all<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>K<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">%循环次数</span><span class="token comment">%绘制轨迹曲线</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token keyword">pi</span><span class="token punctuation">;</span>x1 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>y1<span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>z1 <span class="token operator">=</span> <span class="token operator">-</span>t1<span class="token punctuation">;</span>t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>x2 <span class="token operator">=</span> <span class="token function">x1</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>y2 <span class="token operator">=</span> <span class="token function">y1</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>z2 <span class="token operator">=</span> <span class="token function">x1</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t3 <span class="token operator">=</span> t2<span class="token punctuation">;</span> z3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>t3<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">z1</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x3 <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>z3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y3 <span class="token operator">=</span> x3<span class="token punctuation">;</span>t4 <span class="token operator">=</span> t2<span class="token punctuation">;</span>x4 <span class="token operator">=</span> t4<span class="token punctuation">;</span>y4 <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>x4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>z4 <span class="token operator">=</span> y4<span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span>x1 x2 x3 x4<span class="token punctuation">]</span><span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token punctuation">[</span>y1 y2 y3 y4<span class="token punctuation">]</span><span class="token punctuation">;</span> z <span class="token operator">=</span> <span class="token punctuation">[</span>z1 z2 z3 z4<span class="token punctuation">]</span><span class="token punctuation">;</span>shg<span class="token function">plot3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span><span class="token string">'Color'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'LineWidth'</span><span class="token punctuation">,</span><span class="token number">2.5</span><span class="token punctuation">)</span>axis off<span class="token comment">%在图中添加运动的点</span>h1 <span class="token operator">=</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">'xdata'</span><span class="token punctuation">,</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'ydata'</span><span class="token punctuation">,</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'zdata'</span><span class="token punctuation">,</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'Color'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'Marker'</span><span class="token punctuation">,</span><span class="token string">'. '</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token string">'MarkerSize'</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>h2 <span class="token operator">=</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">'xdata'</span><span class="token punctuation">,</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'ydata'</span><span class="token punctuation">,</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'zdata'</span><span class="token punctuation">,</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'Color'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'Marker'</span><span class="token punctuation">,</span><span class="token string">'. '</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token string">'MarkerSize'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KK <span class="token operator">=</span> K <span class="token operator">*</span> n<span class="token punctuation">;</span>KK <span class="token operator">=</span> KK <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>htext <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token function">int2str</span><span class="token punctuation">(</span>KK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">i</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token comment">%更新点的坐标</span><span class="token function">set</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span><span class="token string">'xdata'</span><span class="token punctuation">,</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'ydata'</span><span class="token punctuation">,</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'zdata'</span><span class="token punctuation">,</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set</span><span class="token punctuation">(</span>h2<span class="token punctuation">,</span><span class="token string">'xdata'</span><span class="token punctuation">,</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'ydata'</span><span class="token punctuation">,</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'zdata'</span><span class="token punctuation">,</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>drawnow<span class="token punctuation">;</span> <span class="token comment">% 擦除原先的点</span><span class="token keyword">pause</span><span class="token punctuation">(</span><span class="token number">0.0005</span><span class="token punctuation">)</span> <span class="token comment">%控制速度，单位为秒</span><span class="token number">i</span> <span class="token operator">=</span> <span class="token number">i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>KK <span class="token operator">=</span> KK <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">set</span><span class="token punctuation">(</span>htext<span class="token punctuation">,</span><span class="token string">'string'</span><span class="token punctuation">,</span><span class="token function">int2str</span><span class="token punctuation">(</span>KK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">i</span> <span class="token operator">></span> n<span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">j</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token number">j</span> <span class="token operator">></span> K<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">end</span></code></pre><ul><li>Figure 7</li></ul><p><img src="https://s2.loli.net/2022/02/23/ieT4kdpzSZMAQUh.png" alt="image-20220223202526276"></p><p><img src="https://s2.loli.net/2022/02/23/JPSUKeWrMqjETu2.png" alt="image-20220223202623717"></p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">close all<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token function">randn</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>h1 <span class="token operator">=</span> <span class="token function">histogram</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span>h1<span class="token punctuation">.</span>NumBins<span class="token punctuation">)</span> <span class="token comment">%计算直方图的 bin 数量</span>nbins <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span> <span class="token comment">%指定nbins数量</span>hold onh2 <span class="token operator">=</span> <span class="token function">histogram</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>nbins<span class="token punctuation">)</span><span class="token punctuation">;</span>counts <span class="token operator">=</span> h2<span class="token punctuation">.</span>Values <span class="token punctuation">;</span><span class="token comment">%统计每个bin中的样本点数量</span>h2<span class="token punctuation">.</span>NumBins <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span> <span class="token comment">%修改bin数量</span>edges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">0.25</span><span class="token operator">:</span><span class="token number">2</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">%通过向量指定bins的范围</span>h1<span class="token punctuation">.</span>Normalization <span class="token operator">=</span> <span class="token string">'probability'</span><span class="token punctuation">;</span><span class="token comment">%通过该归一化，每个条形的高度等于在该 bin 间隔内选择观测值的概率，并且所有条形的高度总和为 1。</span>h2<span class="token punctuation">.</span>Normalization <span class="token operator">=</span> <span class="token string">'probability'</span>hold offh3 <span class="token operator">=</span> <span class="token function">histogram</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>edges<span class="token punctuation">)</span><span class="token punctuation">;</span>h3<span class="token punctuation">.</span>Normalization <span class="token operator">=</span> <span class="token string">'countdensity'</span> <span class="token comment">%将 Normalization 属性指定为 'countdensity' 以使包含离群值的 bin 扁平化。</span><span class="token comment">%现在，每个 bin 的区域（而不是高度）表示该 bin 的观测值频率。</span>h4 <span class="token operator">=</span> <span class="token function">histogram</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token string">'Normalization'</span><span class="token punctuation">,</span><span class="token string">'probability'</span><span class="token punctuation">)</span><span class="token comment">%通过该归一化，每个条形的高度等于在该 bin 间隔内选择观测值的概率，并且所有条形的高度总和为 1。</span></code></pre><ul><li>Figure 8</li></ul><p><img src="https://s2.loli.net/2022/02/23/uexpWydln8NKMsc.png" alt="image-20220223202642481"></p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span>clcA <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token keyword">NaN</span> <span class="token keyword">NaN</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%创建一个表示投票的分类向量。该向量中的类别是 'yes'、'no' 或 'undecided'。</span>C <span class="token operator">=</span> <span class="token function">categorical</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token keyword">NaN</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'yes'</span><span class="token punctuation">,</span><span class="token string">'no'</span><span class="token punctuation">,</span><span class="token string">'undecided'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%将1,0，NaN分别指定为yes,no,undecided</span>h <span class="token operator">=</span> <span class="token function">histogram</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span><span class="token string">'BarWidth'</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">%使用相对条形宽度 0.5 绘制投票的分类直方图</span></code></pre><ul><li>Figure 9</li></ul><p><img src="https://s2.loli.net/2022/02/23/kF1nWm4BNpidfvX.png" alt="image-20220223202811936"></p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span>clcx <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%创建 x 为 0 和 3π 之间的 200 个等间距值</span>y <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%创建 y 为带随机干扰的余弦值。然后，创建一个散点图</span>sz <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%使用大小不同的圆圈创建一个散点图</span>c <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%改变圆圈的颜色</span><span class="token function">scatter</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>sz<span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token string">'filled'</span><span class="token punctuation">)</span></code></pre><p><img src="https://s2.loli.net/2022/02/23/cOJl7Ty3ZQ2BXak.png" alt="image-20220223202844412"></p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span>clcx <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">tiledlayout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">%调用 tiledlayout 函数以创建一个 2×1 平铺图布局</span>ax1 <span class="token operator">=</span> nexttile<span class="token punctuation">;</span><span class="token comment">%调用 nexttile 函数以创建坐标区对象 ax1 和 ax2</span><span class="token function">scatter</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>ax2 <span class="token operator">=</span> nexttile<span class="token punctuation">;</span><span class="token function">scatter</span><span class="token punctuation">(</span>ax2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'filled'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">)</span></code></pre><ul><li>Figure 10</li></ul><p><img src="https://s2.loli.net/2022/02/23/9ewAUmLD7aSbcVB.png" alt="image-20220223202916077"></p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span>clcx <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>Z <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">cos</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>M<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">contour</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">,</span><span class="token string">'ShowText'</span><span class="token punctuation">,</span><span class="token string">'on'</span><span class="token punctuation">)</span> <span class="token comment">%有文字标识的等高线</span>c<span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">% 指定线宽为3</span></code></pre><ul><li>Figure 11</li></ul><p><img src="https://s2.loli.net/2022/02/23/XcaVhCu3BvFEHZQ.png" alt="image-20220223202935774"></p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">close all<span class="token punctuation">;</span> clear<span class="token punctuation">;</span>clc<span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Z <span class="token operator">=</span> X<span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>X<span class="token operator">.^</span><span class="token number">2</span> <span class="token operator">-</span> Y<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>DX<span class="token punctuation">,</span>DY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gradient</span><span class="token punctuation">(</span>Z<span class="token punctuation">,</span><span class="token number">.2</span><span class="token punctuation">,</span><span class="token number">.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%求梯度</span>figure<span class="token function">contour</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>Z<span class="token punctuation">)</span>hold on<span class="token function">quiver</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>DX<span class="token punctuation">,</span>DY<span class="token punctuation">)</span></code></pre><ul><li>Figure 12</li></ul><p><img src="https://s2.loli.net/2022/02/23/aNT6eWK7FCISpqs.png" alt="image-20220223203003924"></p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>close all<span class="token punctuation">;</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u <span class="token operator">=</span> x<span class="token punctuation">;</span>v <span class="token operator">=</span> <span class="token operator">-</span>y<span class="token punctuation">;</span>figure<span class="token function">quiver</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span>startx <span class="token operator">=</span> <span class="token number">0.1</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>starty <span class="token operator">=</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>startx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">streamline</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>startx<span class="token punctuation">,</span>starty<span class="token punctuation">)</span></code></pre><h2 id="HW01"><a href="#HW01" class="headerlink" title="HW01"></a>HW01</h2><p>与讲解篇大体相同，略去。</p><h2 id="HW02"><a href="#HW02" class="headerlink" title="HW02"></a>HW02</h2><ul><li>结构体数组的使用<ul><li>下面两个数组给出了元素周期表前5个元素的元素符号和相对原子质量，将其和原子序数一起保存在结构体数组element中。</li></ul></li></ul><pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>symbol <span class="token operator">=</span> <span class="token punctuation">[</span>"H"<span class="token punctuation">,</span>"He"<span class="token punctuation">,</span>"Li"<span class="token punctuation">,</span>"Be"<span class="token punctuation">,</span>"B"<span class="token punctuation">]</span><span class="token punctuation">;</span>ar <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.008</span><span class="token punctuation">,</span><span class="token number">4.003</span><span class="token punctuation">,</span><span class="token number">6.941</span><span class="token punctuation">,</span><span class="token number">9.012</span><span class="token punctuation">,</span><span class="token number">10.81</span><span class="token punctuation">]</span><span class="token punctuation">;</span>atomic_number <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">;</span>symbol <span class="token operator">=</span> <span class="token function">num2cell</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>ar <span class="token operator">=</span> <span class="token function">num2cell</span><span class="token punctuation">(</span>ar<span class="token punctuation">)</span><span class="token punctuation">;</span>atomic_number <span class="token operator">=</span> <span class="token function">num2cell</span><span class="token punctuation">(</span>atomic_number<span class="token punctuation">)</span><span class="token punctuation">;</span>element <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span>"atomic_number"<span class="token punctuation">,</span>atomic_number<span class="token punctuation">,</span>"symbol"<span class="token punctuation">,</span>symbol<span class="token punctuation">,</span>"Ar"<span class="token punctuation">,</span>ar<span class="token punctuation">)</span></code></pre><ul><li>带参数的匿名函数<ul><li>以匿名函数的方式实现带参数的函数，并在同一张图上画出参数 <code>[b,c]=[0,0]</code> 和 <code>[b,c]=[2,1]</code> 时，该函数在上的图像。</li></ul></li></ul><pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>f0 <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span> x<span class="token operator">.^</span><span class="token number">2</span> <span class="token operator">+</span> b<span class="token operator">.*</span>x <span class="token operator">+</span> c<span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">0.01</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token function">f0</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hold on<span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token function">f0</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="HW03"><a href="#HW03" class="headerlink" title="HW03"></a>HW03</h2><p>摆了 不做了 告辞</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>2022 Winter MatPyFly 培训讲义</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;大概记录的是 MATLAB 的练习之路。反正《数值分析》课程也得用。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="技术/MATLAB" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/%E6%8A%80%E6%9C%AF-MATLAB/"/>
    
    
    <category term="MATLAB" scheme="https://www.c7w.tech/tags/MATLAB/"/>
    
  </entry>
  
  <entry>
    <title>MATLAB 从入门到放弃</title>
    <link href="https://www.c7w.tech/matlab/"/>
    <id>https://www.c7w.tech/matlab/</id>
    <published>2022-02-22T15:39:05.000Z</published>
    <updated>2022-02-23T13:41:19.971Z</updated>
    
    <content type="html"><![CDATA[<p>大概记录的是 MATLAB 的入门之路。反正《数值分析》课程也得用。</p><a id="more"></a><h1 id="数据类型与基本操作"><a href="#数据类型与基本操作" class="headerlink" title="数据类型与基本操作"></a>数据类型与基本操作</h1><h2 id="数值数组"><a href="#数值数组" class="headerlink" title="数值数组"></a>数值数组</h2><p>MATLAB 中数组的存储方式是 column-major order. 因此，数组的第一个维度是列数。</p><h3 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h3><h4 id="等距数组"><a href="#等距数组" class="headerlink" title="等距数组"></a>等距数组</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% Comment</span><span class="token comment">% 在代码行的后加分号，运行结果不会显示在命令行窗口；</span><span class="token comment">% 不加分号，变量的值会随着运行显示在命令行窗口。 </span>start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">% Variable assignment  </span>finish <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment">% Closed this way</span>stride <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>a <span class="token operator">=</span> start<span class="token operator">:</span>stride<span class="token operator">:</span>finish <span class="token comment">% [1, 3, 5, 7, 9, 11]</span>b <span class="token operator">=</span> finish<span class="token operator">:</span><span class="token operator">-</span>stride<span class="token operator">:</span>start <span class="token comment">% [11, 9, 7, 5, 3, 1]</span>c <span class="token operator">=</span> start<span class="token operator">:</span>finish <span class="token comment">% The default value for stride is 1</span>xstart <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> xfinish <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> xpoints <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span>xstart<span class="token punctuation">,</span> xfinish<span class="token punctuation">,</span> xpoints<span class="token punctuation">)</span><span class="token comment">% [1, 25.75, 50.5, 75.25, 100]</span>ystart <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> yfinish <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> ypoints <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token function">logspace</span><span class="token punctuation">(</span>ystart<span class="token punctuation">,</span> yfinish<span class="token punctuation">,</span> ypoints<span class="token punctuation">)</span><span class="token comment">% [10, 100, 1000, 10000, 100000]</span></code></pre><h4 id="逐个元素输入"><a href="#逐个元素输入" class="headerlink" title="逐个元素输入"></a>逐个元素输入</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">% Shaped 1 x 4</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">% Also shaped 1 x 4</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token comment">% Shaped 2 x 2</span><span class="token comment">% 1 2</span><span class="token comment">% 3 4</span></code></pre><h4 id="随机数产生"><a href="#随机数产生" class="headerlink" title="随机数产生"></a>随机数产生</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">rng</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% Random seed</span>a <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">% Uniformly distribution between 0 and 1, shaped 2 x 5</span>b <span class="token operator">=</span> <span class="token function">randn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">% Normal distribution, shaped 2 x 6</span>upperbound <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>lowerbound <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span>lowerbound<span class="token punctuation">,</span>upperbound<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">% Random Interger</span></code></pre><h4 id="其他初始化"><a href="#其他初始化" class="headerlink" title="其他初始化"></a>其他初始化</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token function">eye</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>d <span class="token operator">=</span> <span class="token function">diag</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token comment">% Diagonal</span></code></pre><h3 id="元素的访问和寻找"><a href="#元素的访问和寻找" class="headerlink" title="元素的访问和寻找"></a>元素的访问和寻找</h3><h4 id="数组的维度和大小"><a href="#数组的维度和大小" class="headerlink" title="数组的维度和大小"></a>数组的维度和大小</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">rng</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% Seed 2</span>a <span class="token operator">=</span> <span class="token function">randn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>v <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">% [3, 4], shaped 1 x 2</span>v <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">% ans = 3, get the value of the 1st dim</span>v <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">% ans = 4</span></code></pre><h4 id="数组的循秩访问"><a href="#数组的循秩访问" class="headerlink" title="数组的循秩访问"></a>数组的循秩访问</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">rng</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">% namely a[2][3]</span>c <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span> <span class="token comment">% namely the second row of a</span>d <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span>g <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">% NOTICE: column-major order!</span>idx <span class="token operator">=</span> <span class="token number">12</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>h <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token comment">% Inversed order of a, shaped 1 x 12</span>k <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token comment">% [end] could be viewed as [-1] in Python</span>  <span class="token comment">% end-1, end-2, ... , are also supported</span></code></pre><h4 id="逻辑寻访"><a href="#逻辑寻访" class="headerlink" title="逻辑寻访"></a>逻辑寻访</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">rng</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>b <span class="token operator">=</span> a <span class="token operator">></span> <span class="token number">10</span> <span class="token comment">% Boolean, shaped 6 x 8</span><span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">% Set all those greater than 10 to 100</span>c <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span> a <span class="token operator">></span> <span class="token number">50</span> <span class="token punctuation">)</span> <span class="token comment">% Column vector shaped k x 1, consisting the index of elements != 0</span><span class="token function">a</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">NaN</span></code></pre><h3 id="数组的扩充、收缩与重排"><a href="#数组的扩充、收缩与重排" class="headerlink" title="数组的扩充、收缩与重排"></a>数组的扩充、收缩与重排</h3><h4 id="扩充"><a href="#扩充" class="headerlink" title="扩充"></a>扩充</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">;</span>a_b <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token comment">% 1 x 10</span>abc <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">;</span> b<span class="token punctuation">;</span> c<span class="token punctuation">]</span> <span class="token comment">% 3 x 5</span>AB1 <span class="token operator">=</span> <span class="token function">repmat</span><span class="token punctuation">(</span>a_b<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">% 1 x 20</span>AB2 <span class="token operator">=</span> <span class="token function">repmat</span><span class="token punctuation">(</span>a_b<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">% 2 x 10</span></code></pre><h4 id="收缩"><a href="#收缩" class="headerlink" title="收缩"></a>收缩</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>c <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><h4 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">24</span>b <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">% 3 x 8, column major</span>c <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span>     <span class="token number">1</span>     <span class="token number">3</span>     <span class="token number">5</span>     <span class="token number">2</span>     <span class="token number">4</span>     <span class="token number">6</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span>     <span class="token number">7</span>     <span class="token number">9</span>    <span class="token number">11</span>     <span class="token number">8</span>    <span class="token number">10</span>    <span class="token number">12</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span>    <span class="token number">13</span>    <span class="token number">15</span>    <span class="token number">17</span>    <span class="token number">14</span>    <span class="token number">16</span>    <span class="token number">18</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span>    <span class="token number">19</span>    <span class="token number">21</span>    <span class="token number">23</span>    <span class="token number">20</span>    <span class="token number">22</span>    <span class="token number">24</span>    </code></pre><h4 id="翻转"><a href="#翻转" class="headerlink" title="翻转"></a>翻转</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token function">flipud</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment">% 将数组从上向下翻转</span>c <span class="token operator">=</span> <span class="token function">fliplr</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment">% 将数组从左向右翻转</span>d <span class="token operator">=</span> <span class="token function">flipdim</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">% 将数组沿第一个维度翻转</span>f <span class="token operator">=</span> <span class="token function">flipdim</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">% 将数组沿第二个维度翻转</span>g <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span>h <span class="token operator">=</span> g<span class="token operator">'</span>             <span class="token comment">% 转置</span></code></pre><h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token function">rot90</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>     <span class="token comment">% 将 a 旋转 90 度</span>c <span class="token operator">=</span> <span class="token function">rot90</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">%将 a 旋转 180 度</span><span class="token comment">% 还有 rotx, roty, rotz, rot45 等函数可供探索</span></code></pre><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">rng</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">randn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span> idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token comment">% 对 a 的每一列按升序排序，idx 为索引。</span>c <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>             <span class="token comment">% 对 a 的每一行按升序排序</span>d <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">'ascend'</span><span class="token punctuation">)</span>      <span class="token comment">% 对 a 的每一列按升序排序</span>f <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'descend'</span><span class="token punctuation">)</span>   <span class="token comment">% 对 a 的第 2 个维度按降序排序</span>g <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">'ComparisonMethod'</span><span class="token punctuation">,</span><span class="token string">'abs'</span><span class="token punctuation">)</span><span class="token comment">%还有 cat,circshift,horzcat,vercat,permute,ipermute,shiftdim,sortrows,squeeze 等函数可供探索</span></code></pre><h2 id="数组运算"><a href="#数组运算" class="headerlink" title="数组运算"></a>数组运算</h2><h3 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h3><p>MATLAB 中的运算都是矩阵与矩阵的运算，或者标量与矩阵的运算。也就是说，要满足矩阵运算的规则。</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 矩阵运算</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a<span class="token operator">'</span>            <span class="token comment">%共轭转置</span>c <span class="token operator">=</span> b<span class="token operator">*</span>a           <span class="token comment">%矩阵乘法，注意维度要符合</span>d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>     f <span class="token operator">=</span> a<span class="token operator">/</span>d           <span class="token comment">%对d求逆，再左乘a</span>g <span class="token operator">=</span> d<span class="token operator">\</span>b           <span class="token comment">%对d求逆，再右乘b</span>h <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">*</span>a           <span class="token comment">%3是标量，与矩阵a相乘</span>k <span class="token operator">=</span> a<span class="token operator">/</span><span class="token number">3</span>           <span class="token comment">%矩阵a除以标量3</span>l <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">\</span>a           <span class="token comment">%含义同上</span>m <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">^</span>d           <span class="token comment">%4的d次幂</span>n <span class="token operator">=</span> d<span class="token operator">^</span><span class="token number">4</span>           <span class="token comment">%d的4次幂</span><span class="token comment">% Elementwise</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a<span class="token operator">.'</span>             <span class="token comment">%非共轭转置</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  d <span class="token operator">=</span> a<span class="token operator">.*</span>c            <span class="token comment">%按元素乘，要求矩阵形状完全相同</span>f <span class="token operator">=</span> c<span class="token operator">./</span>a            <span class="token comment">%按元素除，c除以a</span>g <span class="token operator">=</span> a<span class="token operator">.\</span>c            <span class="token comment">%按元素除，a除以c</span>h <span class="token operator">=</span> <span class="token number">4.</span><span class="token operator">^</span>a           l <span class="token operator">=</span> a<span class="token operator">.^</span><span class="token number">3</span>    </code></pre><p>上文用到了左除（\）和右除（/）。左除是 MATLAB 中独有的，其速度、准确度都远高于右除。此外，使用矩阵除法时应该注意，对于奇异矩阵或近似于奇异的矩阵，MATLAB 会给出警告。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>MATLAB 的数据类型包括 <code>double，uint8，uint16，boolean，char，str</code>。</p><p>前 3 种的转换函数分别为 <code>double(),uint8(),uint16()</code>。<br>char 是字符，char(x) 会将 x 按 ASCII 值转变成相应的字符。str 是字符串，被看做一个行向量。具体示例见字符串部分。</p><p>MATLAB 中还有一些保留关键字，列举如下：</p><ul><li>eps：浮点数相对精度</li><li>i 或 j：复数单位</li><li>inf 或 Inf：无穷大</li><li>intmax：最大正整数</li><li>intmin：最小负整数</li><li>NaN 或 nan：非数。注意，不能用 a==nan 判断 a 是否为 nan。</li><li>pi：π</li><li>realmax：最大正实数</li><li>realmin：最小正实数</li></ul><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% Complex numbers</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span>a_real <span class="token operator">=</span> <span class="token function">real</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment">%a的实部</span>a_imag <span class="token operator">=</span> <span class="token function">imag</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment">%a的虚部</span>b <span class="token operator">=</span> <span class="token function">conj</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>         <span class="token comment">%b是a的共轭</span>b_abs <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>      <span class="token comment">%b的模长</span>b_angle <span class="token operator">=</span> <span class="token function">angle</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment">%b的辅角</span><span class="token comment">% NaN</span><span class="token function">rng</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">NaN</span><span class="token punctuation">;</span>idx1 <span class="token operator">=</span> <span class="token function">isnan</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">% a==NaN 不能正确判别 NaN</span><span class="token comment">% 不同进制的转化</span><span class="token comment">% MATLAB 支持 2 进制（bin），8 进制(oct)，10 进制(dec)和 16 进制(hex)</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token function">dec2bin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token function">bin2dec</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><h3 id="特殊运算"><a href="#特殊运算" class="headerlink" title="特殊运算"></a>特殊运算</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 和与积</span>a <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token function">cumsum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>            <span class="token comment">%沿 a 的第一个 length 不为 1 的维度求累积和</span>c <span class="token operator">=</span> <span class="token function">cumsum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>          <span class="token comment">%沿a的第二个维度求累积和</span>d <span class="token operator">=</span> <span class="token function">cumsum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">'reverse'</span><span class="token punctuation">)</span>  <span class="token comment">%沿a的第一个不为1的维度，反向求累积和</span>f <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>               <span class="token comment">%沿a的第一个不为1的维度求和，其他用法同cumsum</span>g <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">'all'</span><span class="token punctuation">)</span>         <span class="token comment">%对a的所有元素求和</span>s3 <span class="token operator">=</span> <span class="token function">cumprod</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>          <span class="token comment">%累积积，用法同上</span>s4 <span class="token operator">=</span> <span class="token function">prod</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>             <span class="token comment">%求积，用法同上</span><span class="token comment">% 最大值</span><span class="token function">rng</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>                    <span class="token comment">%沿a的第一个不为1的维度计算</span>c <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>               <span class="token comment">%沿a的第二个维度计算</span><span class="token punctuation">[</span>d<span class="token punctuation">,</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>              <span class="token comment">%idx是每个最大值的位置</span>f <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'all'</span><span class="token punctuation">)</span>           <span class="token comment">%在a的所有元素中找最大值</span>g <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token comment">%在a的第1个和第3个维度中求最大值</span><span class="token punctuation">[</span>h<span class="token punctuation">,</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'linear'</span><span class="token punctuation">)</span>  <span class="token comment">%idx是最大值的线性索引</span>k <span class="token operator">=</span> <span class="token function">randi</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>              l <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>k<span class="token punctuation">)</span>                  <span class="token comment">%求a，k中的最大值</span><span class="token comment">% 逻辑操作</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>L1 <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">%按位取非</span>L2 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">%与</span>L3 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">%与,第一项为false时，不再计算第二项</span>L4 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">%或</span>L5 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">%或，第一项为true时，不再计算第二项</span>b<span class="token operator">=</span>a<span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">xor</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">%异或</span>d <span class="token operator">=</span> <span class="token function">all</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">%a中元素全不为0时，d为真</span>e <span class="token operator">=</span> <span class="token function">any</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">%a中元素至少有一个非0时，e为真</span>idx <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f <span class="token operator">=</span> <span class="token function">isempty</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">%检查idx是否为空矩阵</span><span class="token comment">% MATLAB还可以计算矩阵的特征值，对矩阵做奇异值分解、QR分解等。</span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token string">'Three-six-nine, hon, the goose drank wine.'</span><span class="token punctuation">;</span><span class="token comment">%如果字符串中有单引号，用两个连续的单引号表示。</span>b <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>     <span class="token comment">%可以看出，MATLAB将字符串数组视为行矩阵</span>a <span class="token operator">=</span> <span class="token string">'May you long day and pleasant nights.'</span><span class="token punctuation">;</span>a14 <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span>       <span class="token comment">%取出字符串数组的前4个元素   </span>ra <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">%翻转字符串数组</span>a <span class="token operator">=</span> <span class="token string">'May you have twice the number.'</span><span class="token punctuation">;</span>Ua <span class="token operator">=</span> <span class="token function">double</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>          <span class="token comment">%查看a的ASCII码值</span>c <span class="token operator">=</span> <span class="token function">char</span><span class="token punctuation">(</span>Ua<span class="token punctuation">)</span>            <span class="token comment">%将ASCII转化回字符串</span>w <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>a<span class="token operator">>=</span><span class="token string">'a'</span><span class="token operator">&amp;</span>a<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token comment">%找出所有的小写字母</span><span class="token function">Ua</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Ua</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">32</span>       <span class="token comment">%将小写字母变为大写字母</span>d <span class="token operator">=</span> <span class="token function">char</span><span class="token punctuation">(</span>Ua<span class="token punctuation">)</span>            <span class="token comment">%将ASCII转化回字符串</span></code></pre><h2 id="控制流语句"><a href="#控制流语句" class="headerlink" title="控制流语句"></a>控制流语句</h2><p>MATLAB 很适宜向量化编程，也就是说，编写 MATLAB 程序的时候要尽量用矩阵和数组代替循环，尤其是 2 层及以上的循环。</p><p>在 MATLAB 中，二维矩阵的运算速度要远快于 2 层循环。因此，本节介绍的所有数据流控制语句都要尽量少用，除非万不得已。</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% if/else/elseif</span>a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">if</span> a<span class="token operator">&lt;</span><span class="token number">0</span>    a <span class="token operator">=</span> <span class="token operator">-</span>a<span class="token punctuation">;</span><span class="token keyword">elseif</span> a<span class="token operator">></span><span class="token number">10</span>    a <span class="token operator">=</span> a<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">else</span>     a <span class="token operator">=</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment">% while</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> sum <span class="token operator">&lt;</span> <span class="token number">10</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment">% for</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> ii <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> ii<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment">% switch</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">switch</span> a    <span class="token keyword">case</span> <span class="token number">1</span>        a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span>        a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">otherwise</span>        a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment">% try/catch</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">try</span>     b <span class="token operator">=</span> a<span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token keyword">catch</span> ME    b <span class="token operator">=</span> a<span class="token operator">.*</span>a<span class="token punctuation">;</span><span class="token keyword">end</span></code></pre><h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 读写 mat 文件</span>cleara <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>save file1<span class="token punctuation">;</span>                <span class="token comment">%把工作区中全部变量保存到名为file1.mat的文件中。</span>                           <span class="token comment">%如果file1.mat原先存在，它的原始内容会被删除。</span>save file2 a b<span class="token punctuation">;</span>            <span class="token comment">%把变量a和b保存到file2.mat文件中。</span>save file2 c <span class="token operator">-</span>append       <span class="token comment">%把变量c添加到file2.mat中，不会删除file2.mat中原有的值</span>save file3 <span class="token operator">-</span>ascii          <span class="token comment">%把变量保存到8位ascii文件file3.mat中</span>save file4 <span class="token operator">-</span>ascii <span class="token operator">-</span>double  <span class="token comment">%把变量保存到16位ascii文件file4.mat中</span>clearload file1                 <span class="token comment">%把file1.mat中的全部变量加载到工作区</span>clear                      load file1 a b             <span class="token comment">%把file1.mat中的变量a和b加载到工作区</span>clearload file3 a <span class="token operator">-</span>ascii        <span class="token comment">%把ascii文件file3.mat中的变量a加载到工作区</span><span class="token comment">% 科学计数法</span>a <span class="token operator">=</span> <span class="token number">1.4e3</span>                  <span class="token comment">%a=1400</span><span class="token comment">% 输出格式</span>a <span class="token operator">=</span> format                <span class="token comment">%返回当前的format</span>format long               <span class="token comment">%将输出格式设定为long           </span>format short              <span class="token comment">%将输出格式设定为short</span><span class="token comment">% format的参数有多种选择，可自行探索</span><span class="token comment">% disp</span>name <span class="token operator">=</span> <span class="token string">'Jake'</span><span class="token punctuation">;</span>   chassit <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>X <span class="token operator">=</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span><span class="token string">', son of Elm, ka-tet of '</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span>chassit<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>name <span class="token operator">=</span> <span class="token string">'Edward'</span><span class="token punctuation">;</span>   chassit <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>X <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">'%s Cantor Dean, ka-tet of %d'</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>chassit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span></code></pre><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="字符数组与字符串数组"><a href="#字符数组与字符串数组" class="headerlink" title="字符数组与字符串数组"></a>字符数组与字符串数组</h2><p>在 R2016b 版本之后，Matlab引入了字符串数组 string。只有一个字符串的字符串数组也可称为字符串标量。</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% 创建</span>char_array <span class="token operator">=</span> <span class="token string">'THU EESAST'</span> <span class="token comment">% 字符数组</span>string_array <span class="token operator">=</span> "THU EESAST" <span class="token comment">% 字符串数组</span><span class="token comment">%% 互相转换</span><span class="token comment">% 字符串数组 -> 字符数组</span>string_array2 <span class="token operator">=</span> "string to char"<span class="token function">strlength</span><span class="token punctuation">(</span>string_array2<span class="token punctuation">)</span> <span class="token comment">% 14</span>char_array2 <span class="token operator">=</span> <span class="token function">char</span><span class="token punctuation">(</span>string_array2<span class="token punctuation">)</span><span class="token function">size</span><span class="token punctuation">(</span>char_array2<span class="token punctuation">)</span> <span class="token comment">% [1, 14]</span><span class="token comment">% 字符串列向量 -> 字符数组</span>string_array3 <span class="token operator">=</span> <span class="token punctuation">[</span>"string1"<span class="token punctuation">;</span>"string2"<span class="token punctuation">;</span>"string3"<span class="token punctuation">]</span> <span class="token comment">% 3 x 1</span>char_array3 <span class="token operator">=</span> <span class="token function">char</span><span class="token punctuation">(</span>string_array3<span class="token punctuation">)</span><span class="token comment">% char_array3 =  % 3 x 7 char</span><span class="token comment">%     'string1'</span><span class="token comment">%     'string2'</span><span class="token comment">%     'string3'</span><span class="token comment">% 字符串行向量 -> 字符数组</span>string_array4 <span class="token operator">=</span> <span class="token punctuation">[</span>"string1"<span class="token punctuation">,</span>"string2"<span class="token punctuation">,</span>"string3"<span class="token punctuation">]</span>char_array4 <span class="token operator">=</span> <span class="token function">char</span><span class="token punctuation">(</span>string_array4<span class="token punctuation">)</span><span class="token comment">% 1 x 7 x 3 char, every page contains a "string\d"</span><span class="token comment">% 字符串矩阵 -> 字符数组</span>string_array5 <span class="token operator">=</span> <span class="token punctuation">[</span>"string1"<span class="token punctuation">,</span>"string2"<span class="token punctuation">,</span>"string3"<span class="token punctuation">;</span>"string4"<span class="token punctuation">,</span>"string5"<span class="token punctuation">,</span>"string6"<span class="token punctuation">]</span>char_array5 <span class="token operator">=</span> <span class="token function">char</span><span class="token punctuation">(</span>string_array5<span class="token punctuation">)</span><span class="token comment">% 2 x 7 x 3 char, every page contains a column</span><span class="token comment">% 字符数组行向量 -> 字符串数组</span>char_array6 <span class="token operator">=</span> <span class="token string">'char'</span> <span class="token comment">% 完全等价于 char_array6 = ['c','h','a','r']</span>string_array6 <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>char_array6<span class="token punctuation">)</span> <span class="token comment">% "char"</span><span class="token comment">% 字符数组列向量 -> 字符串数组</span>char_array7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">;</span><span class="token string">'b'</span><span class="token punctuation">;</span><span class="token string">'c'</span><span class="token punctuation">;</span><span class="token string">'d'</span><span class="token punctuation">]</span>string_array7 <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>char_array7<span class="token punctuation">)</span> <span class="token comment">% 4 x 1 string</span><span class="token comment">%% 两者的行为区别</span><span class="token comment">% 减去一个字符</span>char_array8 <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span>string_array8 <span class="token operator">=</span> "abcdefg"<span class="token punctuation">;</span>char_array8 <span class="token operator">-</span> <span class="token string">'a'</span>char_array8 <span class="token operator">-</span> <span class="token number">97</span><span class="token comment">% 可以逐条尝试执行下面几行代码</span><span class="token comment">% char_array8 - "a"  </span><span class="token comment">% string_array8 - 'a'</span><span class="token comment">% string_array8 - "a"</span><span class="token comment">% string_array8 - 97 % string 类型的操作数不支持 '-'，string 作为 arg[1] 还是 arg[2] 都报错</span><span class="token comment">% 将字符串数组或字符数组相加</span><span class="token comment">% 字符数组会得到Unicode码相加的结果：</span>char_array9 <span class="token operator">=</span> <span class="token string">'THU EESAST'</span><span class="token punctuation">;</span>char_array10 <span class="token operator">=</span> <span class="token string">'!'</span><span class="token punctuation">;</span>char_array9 <span class="token operator">+</span> char_array10 <span class="token comment">% ans 1 x 10 [117, 105, ...]</span><span class="token comment">% 字符串数组会将两端字符串拼接起来：</span>string_array9 <span class="token operator">=</span> "THU EESAST"<span class="token punctuation">;</span>string_array10 <span class="token operator">=</span> "<span class="token punctuation">!</span>"<span class="token punctuation">;</span>string_array9 <span class="token operator">+</span> string_array10 <span class="token comment">% 拼接</span><span class="token comment">% 将内容为数字的文本转换为 double 等类型</span><span class="token comment">% 字符数组会得到对应字符的Unicode编码：</span>char_array11 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'123'</span><span class="token punctuation">;</span><span class="token string">'1e2'</span><span class="token punctuation">;</span><span class="token string">'1.2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>char_array12 <span class="token operator">=</span> <span class="token string">'123 456 789'</span><span class="token punctuation">;</span><span class="token function">double</span><span class="token punctuation">(</span>char_array11<span class="token punctuation">)</span><span class="token function">double</span><span class="token punctuation">(</span>char_array12<span class="token punctuation">)</span><span class="token comment">% 字符串数组则直接得到文本表示的数字：</span>string_array11 <span class="token operator">=</span> <span class="token punctuation">[</span>"<span class="token number">123</span>"<span class="token punctuation">;</span>"<span class="token number">1e2</span>"<span class="token punctuation">;</span>"<span class="token number">1.2</span>"<span class="token punctuation">]</span><span class="token punctuation">;</span>string_array12 <span class="token operator">=</span> "<span class="token number">123</span> <span class="token number">456</span> <span class="token number">789</span>"<span class="token punctuation">;</span><span class="token function">double</span><span class="token punctuation">(</span>string_array11<span class="token punctuation">)</span> <span class="token comment">% [123; 100; 1.2]</span><span class="token function">double</span><span class="token punctuation">(</span>string_array12<span class="token punctuation">)</span> <span class="token comment">% 123456789</span><span class="token comment">% 欲将字符向量转换为文本表示的数字，请使用str2double函数</span><span class="token comment">% 此函数的输入可以为字符向量、字符向量元胞数组(之后会学习到)或字符串数组：</span><span class="token function">str2double</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token function">str2double</span><span class="token punctuation">(</span><span class="token string">'1e5'</span><span class="token punctuation">)</span><span class="token comment">%str2double(string_array11) % 3 x 1 ans</span><span class="token comment">%str2double(string_array12) % NaN</span><span class="token comment">%str2double(char_array11) % NaN</span><span class="token comment">%str2double(char_array12) % NaN</span><span class="token comment">% 可以尝试执行最后四行代码，看看会得到什么结果</span><span class="token comment">% 关于str2double函数的详细内容请参考MATLAB说明文档</span><span class="token comment">% 另有str2num函数可供选择</span><span class="token comment">%% 将数字转换为文本</span>double_array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">28165</span> <span class="token number">21326</span> <span class="token number">22823</span> <span class="token number">23398</span> <span class="token number">30005</span> <span class="token number">23376</span> <span class="token number">31185</span> <span class="token number">21327</span> <span class="token number">23398</span> <span class="token number">22521</span> <span class="token number">37096</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">% 字符数组会按照Unicode编码进行转换：</span><span class="token function">char</span><span class="token punctuation">(</span>double_array1<span class="token punctuation">)</span><span class="token comment">% 字符串数组则直接转换为文本：</span><span class="token function">string</span><span class="token punctuation">(</span>double_array1<span class="token punctuation">)</span><span class="token comment">% 欲将数字转换为对应的字符数组类型文本，请使用num2str函数：</span><span class="token function">num2str</span><span class="token punctuation">(</span>double_array1<span class="token punctuation">)</span> <span class="token comment">% '28165 21326 ...'</span><span class="token function">num2str</span><span class="token punctuation">(</span>double_array1<span class="token operator">'</span><span class="token punctuation">)</span> <span class="token comment">% 11x5 char</span><span class="token comment">%% 索引操作</span><span class="token comment">% 字符数组可以像数值数组一样正常索引</span><span class="token comment">% 而单个字符串标量则无法索引内部的某个字符</span>char_array13 <span class="token operator">=</span> <span class="token string">'123456789'</span><span class="token punctuation">;</span>string_array13 <span class="token operator">=</span> "<span class="token number">123456789</span>"<span class="token punctuation">;</span><span class="token function">char_array13</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment">% string_array13(3:6) % length == 1, error</span></code></pre><h2 id="元胞数组"><a href="#元胞数组" class="headerlink" title="元胞数组"></a>元胞数组</h2><p>元胞数组是包含称为元胞的索引数据容器的数据类型。每个元胞可以包含任意类型的数据。</p><h3 id="元胞数组创建"><a href="#元胞数组创建" class="headerlink" title="元胞数组创建"></a>元胞数组创建</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab">C1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'char'</span><span class="token punctuation">,</span>"str"<span class="token punctuation">;</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token comment">% C1 = </span><span class="token comment">%     &#123;'a'     &#125;    &#123;'char' &#125;    &#123;["str"]&#125;</span><span class="token comment">%     &#123;[1.2000]&#125;    &#123;[1 2 3]&#125;    &#123;[    1]&#125;</span>C2<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token string">'char'</span><span class="token function">C3</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'char'</span><span class="token punctuation">&#125;</span>      <span class="token comment">% 注意()与&#123;&#125;的区别</span><span class="token comment">% 使用cell函数预分配内存：在需要频繁改变元胞数组大小的情况下</span><span class="token comment">% 推荐提前预估需要的最大尺寸，预分配内存以提高运行效率</span>C4 <span class="token operator">=</span> <span class="token function">cell</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>C5 <span class="token operator">=</span> <span class="token function">cell</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>C6 <span class="token operator">=</span> <span class="token function">cell</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    </code></pre><h3 id="元胞数组的索引"><a href="#元胞数组的索引" class="headerlink" title="元胞数组的索引"></a>元胞数组的索引</h3><p>理解元胞数组的索引是理解元胞数组的关键。</p><p>与一般的数组不同，元胞数组有两种形式的索引：</p><p>使用圆括号 <code>()</code> 的索引与使用花括号 <code>&#123;&#125;</code> 的索引。</p><ul><li>使用圆括号 <code>()</code> 的元胞索引<ul><li>此形式的索引引用的是元胞本身，最直观的理解是，返回值是 cell 类型</li></ul></li><li>使用花括号 <code>&#123;&#125;</code> 的内容索引<ul><li>此形式的索引引用的是元胞中的内容，返回值的类型取决于该内容</li></ul></li></ul><pre class="language-matlab" data-language="matlab"><code class="language-matlab">C <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'char'</span><span class="token punctuation">,</span>"str"<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">class</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">% cell</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span>C <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'char'</span><span class="token punctuation">,</span>"str"<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>C<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token function">class</span><span class="token punctuation">(</span>C<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">% double</span>C<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span>C <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'c'</span><span class="token punctuation">,</span> "s"<span class="token punctuation">;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>C<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">% C(3,3) = "s" % Cannot convert string to cell</span></code></pre><ul><li>删除元胞数组的数据</li></ul><pre class="language-matlab" data-language="matlab"><code class="language-matlab">C1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">C1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>C2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>C2<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment">% 这样不能删除元胞本身，只能将其中的内容赋值为空</span><span class="token comment">% 如果是下面这样呢？</span><span class="token comment">% C3 = &#123;1,2,3;4,5,6;7,8,9&#125;;</span><span class="token comment">% C3(2,2) = []    % err</span></code></pre><ul><li>多级索引</li></ul><pre class="language-matlab" data-language="matlab"><code class="language-matlab">Num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>char1 <span class="token operator">=</span> <span class="token string">'char'</span><span class="token punctuation">;</span>C1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>C2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>C <span class="token operator">=</span> <span class="token punctuation">&#123;</span>Num<span class="token punctuation">,</span>char1<span class="token punctuation">;</span>C1<span class="token punctuation">,</span>C2<span class="token punctuation">&#125;</span><span class="token comment">% C = </span><span class="token comment">%     &#123;3×3 double&#125;    &#123;'char'  &#125;</span><span class="token comment">%     &#123;1×3 cell  &#125;    &#123;1×3 cell&#125;</span>C<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>C<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span>C<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>C<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span>C<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><ul><li>数组合并</li></ul><p>与一般的数组一样，使用方括号 [] 合并数组。</p><p>如果使用花括号 {}，原数组将被当作一个元胞的内容。</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 元胞数组与元胞数组合并</span>C1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>C2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>C <span class="token operator">=</span> <span class="token punctuation">[</span>C1<span class="token punctuation">;</span>C2<span class="token punctuation">]</span> <span class="token comment">% 3 x 3 cell</span>C <span class="token operator">=</span> <span class="token punctuation">&#123;</span>C1<span class="token punctuation">;</span>C2<span class="token punctuation">&#125;</span> <span class="token comment">% 2 x 1 cell</span><span class="token comment">% 元胞数组与非元胞数组合并</span>C1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>char1 <span class="token operator">=</span> <span class="token string">'char'</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>C <span class="token operator">=</span> <span class="token punctuation">[</span>C1<span class="token punctuation">,</span>char1<span class="token punctuation">,</span>num<span class="token punctuation">]</span> <span class="token comment">% 1 x 5 cell</span>C <span class="token operator">=</span> <span class="token punctuation">&#123;</span>C1<span class="token punctuation">,</span>char1<span class="token punctuation">,</span>num<span class="token punctuation">&#125;</span> <span class="token comment">% 1 x 3 cell</span></code></pre><ul><li>类型转换</li></ul><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% cell2mat</span>C1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span> <span class="token comment">% 3 x 2 cell</span>A1 <span class="token operator">=</span> <span class="token function">cell2mat</span><span class="token punctuation">(</span>C1<span class="token punctuation">)</span> <span class="token comment">% 3 x 3 number</span>C2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'THU'</span><span class="token punctuation">;</span><span class="token string">' EE'</span><span class="token punctuation">&#125;</span> <span class="token comment">% 2 x 1 cell</span>A2 <span class="token operator">=</span> <span class="token function">cell2mat</span><span class="token punctuation">(</span>C2<span class="token punctuation">)</span> <span class="token comment">% 2 x 3 char</span><span class="token comment">% mat2cell</span>A <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>C <span class="token operator">=</span> <span class="token function">mat2cell</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><p>结构体数组是使用名为字段的数据容器将相关数据组合在一起的数据类型，每个字段都可以包含任意类型的数据。使用 <code>structName.fieldName</code> 格式的圆点表示法来访问结构体中的数据。</p><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% 直接赋值</span><span class="token comment">% 此方式只能创建结构体标量，之后可以通过索引的方式添加元素</span>clear<span class="token punctuation">;</span>element<span class="token punctuation">.</span>Atomic_Number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span>Symbol <span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span>element <span class="token comment">% struct</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Atomic_Number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Symbol <span class="token operator">=</span> <span class="token string">'He'</span><span class="token punctuation">;</span>element <span class="token comment">% 1 x 2 struct</span><span class="token comment">%% 使用struct函数</span><span class="token comment">% 此方式可创建非标量结构体</span><span class="token comment">% 此函数一般重载为 struct(field1,value1,..,fieldN,valueN) 的形式：</span><span class="token comment">% 若所有 value 都不是元胞数组或为标量元胞数组，则创建结构体标量；</span><span class="token comment">% 若任一 value 为元胞数组，则创建结构体数组，维度同元胞数组；</span><span class="token comment">% 若有两个及以上 value 为非标量元胞数组，则其维度必须相同。</span>clear<span class="token punctuation">;</span>element <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'Atomic_Number'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Symbol'</span><span class="token punctuation">,</span><span class="token string">'H'</span><span class="token punctuation">)</span> <span class="token comment">% struct</span>element <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'Atomic_Number'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'Symbol'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'H'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">% struct</span>element <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'Atomic_Number'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'Symbol'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'H'</span><span class="token punctuation">,</span><span class="token string">'He'</span><span class="token punctuation">,</span><span class="token string">'Li'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">% 1 x 3 struct</span>element <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'Atomic_Number'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'Symbol'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">'H'</span><span class="token punctuation">,</span><span class="token string">'He'</span><span class="token punctuation">,</span><span class="token string">'Li'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">% struct</span>element <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'Atomic_Number'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'Symbol'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'H'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">% broadcasting</span><span class="token comment">%element = struct('Atomic_Number',&#123;1,2,3&#125;,'Symbol',&#123;'H','He'&#125;) % err</span><span class="token comment">% 注：同一字段对应的值可以是不同类型的数据。</span><span class="token comment">% 添加新的字段：通过圆点表示法添加</span>clear<span class="token punctuation">;</span>element <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'Atomic_Number'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'Symbol'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'H'</span><span class="token punctuation">,</span><span class="token string">'He'</span><span class="token punctuation">,</span><span class="token string">'Li'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Ar <span class="token operator">=</span> <span class="token number">1.008</span><span class="token punctuation">;</span>element<span class="token punctuation">[</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Ar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deal</span><span class="token punctuation">(</span><span class="token number">4.003</span><span class="token punctuation">,</span><span class="token number">6.941</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% Copy Input to Output</span>element</code></pre><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span><span class="token punctuation">[</span>field1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>field3<span class="token punctuation">,</span>field4<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deal</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">,</span>value4<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deal</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'char'</span><span class="token punctuation">,</span>"str"<span class="token punctuation">,</span><span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'char'</span><span class="token punctuation">,</span>"str"<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">...</span>    <span class="token punctuation">&#123;</span>"str"<span class="token punctuation">,</span><span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'char'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'char'</span><span class="token punctuation">,</span>"str"<span class="token punctuation">,</span><span class="token function">struct</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%以上部分涉及"逗号分隔的列表"内容，不在本次教程要求之内</span>s <span class="token operator">=</span> <span class="token function">struct</span><span class="token punctuation">(</span>field1<span class="token punctuation">,</span>value1<span class="token punctuation">,</span>field2<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>field3<span class="token punctuation">,</span>value3<span class="token punctuation">,</span>field4<span class="token punctuation">,</span>value4<span class="token punctuation">)</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>A<span class="token punctuation">&#123;</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>A<span class="token punctuation">&#125;</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">%s(1).A(2)</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>D<span class="token punctuation">.</span>c </code></pre><h3 id="串联"><a href="#串联" class="headerlink" title="串联"></a>串联</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 使用方括号[]串联结构体数组</span><span class="token comment">% 要串联结构体，他们必须具有相同的字段集</span><span class="token comment">% 但这些字段无需包含相同的大小或数据类型</span>clear<span class="token punctuation">;</span>s1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token punctuation">[</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">]</span></code></pre><h2 id="函数与函数句柄"><a href="#函数与函数句柄" class="headerlink" title="函数与函数句柄"></a>函数与函数句柄</h2><h3 id="命名函数"><a href="#命名函数" class="headerlink" title="命名函数"></a>命名函数</h3><p>MATLAB 中的函数通常按照如下形式定义：</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> <span class="token punctuation">[</span>y1<span class="token punctuation">,</span><span class="token punctuation">...</span><span class="token punctuation">,</span>yN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">myfun</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span><span class="token punctuation">...</span><span class="token punctuation">,</span>xM<span class="token punctuation">)</span>command<span class="token keyword">end</span></code></pre><p>其中 y1,…,yN 是输出，x1,…,xM 是输入，myfun 是函数名称。可以将命名函数保存在以下位置：</p><ul><li>只包含函数定义的函数文件中。文件的名称须与文件中第一个函数的名称一致；文件中的其余函数可以作为局部函数，仅能被该文件主函数调用。</li><li>包含命令和函数定义的脚本文件中。函数必须位于该文件的末尾。脚本文件不能与文件中的函数具有相同的名称。R2016b 或更高版本的脚本中支持函数。</li></ul><p>例如：</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.001</span><span class="token punctuation">,</span><span class="token number">1.111</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1.3</span><span class="token punctuation">,</span><span class="token number">0.51</span><span class="token punctuation">,</span><span class="token number">3.96</span><span class="token punctuation">,</span><span class="token number">1.22</span><span class="token punctuation">]</span><span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">% 函数保存在 ./fmax.m 中</span><span class="token comment">% In ./fmax.m</span><span class="token keyword">function</span> y <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    B <span class="token operator">=</span> x<span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.</span><span class="token operator">/</span><span class="token punctuation">(</span>x<span class="token operator">.^</span><span class="token number">2</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token operator">.^</span><span class="token number">3</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span></code></pre><pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">[</span>y<span class="token punctuation">,</span>f<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fun1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">% In ./fun1.m</span><span class="token keyword">function</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span>f<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fun1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    temp <span class="token operator">=</span> <span class="token function">fact</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    f <span class="token operator">=</span> <span class="token operator">@</span>fact<span class="token punctuation">;</span>          <span class="token comment">%返回表示函数fact的函数句柄f</span><span class="token keyword">end</span><span class="token keyword">function</span> y <span class="token operator">=</span> <span class="token function">fact</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> index <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>x        y <span class="token operator">=</span> y <span class="token operator">*</span> index<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span></code></pre><h3 id="函数句柄"><a href="#函数句柄" class="headerlink" title="函数句柄"></a>函数句柄</h3><p>函数句柄是一种表示函数的数据类型，可以表示命名函数或匿名函数。使用 <code>@</code> 运算符创建函数句柄。函数句柄的典型用法是将一个函数传递给另一个函数、从主函数外调用局部函数等。函数句柄不能组成一般数组，但可以收集到一个元胞数组或结构体数组中。</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 例1：表示命名函数</span>clear<span class="token punctuation">;</span>f1 <span class="token operator">=</span> <span class="token operator">@</span>fmax<span class="token punctuation">;</span>x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0.001</span><span class="token punctuation">,</span><span class="token number">1.111</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1.3</span><span class="token punctuation">,</span><span class="token number">0.51</span><span class="token punctuation">,</span><span class="token number">3.96</span><span class="token punctuation">,</span><span class="token number">1.22</span><span class="token punctuation">]</span><span class="token punctuation">;</span>y1 <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token comment">% 例2：表示匿名函数</span>clear<span class="token punctuation">;</span>f2 <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token operator">.^</span><span class="token number">3</span><span class="token punctuation">;</span>     <span class="token comment">%以x为自变量，y = x^3</span>x2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>y2 <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token comment">% 例3：将一个函数传递给另一个函数</span>clear<span class="token punctuation">;</span>f3 <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span>         <span class="token comment">%以x为自变量，y = x^2</span><span class="token function">integral</span><span class="token punctuation">(</span>f3<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>       <span class="token comment">%f3作为函数integral()的参数</span><span class="token comment">% 例4：从主函数外调用局部函数(1)</span>clear<span class="token punctuation">;</span>x4 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">[</span>y4<span class="token punctuation">,</span>f4<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fun1</span><span class="token punctuation">(</span>x4<span class="token punctuation">)</span>y4_1 <span class="token operator">=</span> <span class="token function">f4</span><span class="token punctuation">(</span>x4<span class="token punctuation">)</span>       <span class="token comment">%调用了局部函数fact()</span><span class="token function">log</span><span class="token punctuation">(</span>y4_1<span class="token punctuation">)</span><span class="token function">log</span><span class="token punctuation">(</span>y4_1<span class="token punctuation">)</span> <span class="token operator">-</span> y4<span class="token comment">% 例5：从主函数外调用局部函数(2)/函数句柄组成的数组</span>clear<span class="token punctuation">;</span><span class="token punctuation">[</span>f5<span class="token punctuation">,</span>f6<span class="token punctuation">]</span> <span class="token operator">=</span> circle<span class="token punctuation">;</span>f5<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>f5<span class="token punctuation">.</span><span class="token function">Cirumference</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>f5<span class="token punctuation">.</span><span class="token function">Curvature</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>f6<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>f6<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>f6<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">% In circle.m</span><span class="token keyword">function</span> <span class="token punctuation">[</span>f<span class="token punctuation">,</span>f1<span class="token punctuation">]</span> <span class="token operator">=</span> circle    f<span class="token punctuation">.</span>Curvature <span class="token operator">=</span> <span class="token operator">@</span>Curvature<span class="token punctuation">;</span>    f<span class="token punctuation">.</span>Area <span class="token operator">=</span> <span class="token operator">@</span>Area<span class="token punctuation">;</span>    f<span class="token punctuation">.</span>Cirumference <span class="token operator">=</span> <span class="token operator">@</span>Circumference<span class="token punctuation">;</span>            <span class="token comment">%f以结构体形式返回</span>    f1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">@</span>Curvature<span class="token punctuation">,</span><span class="token operator">@</span>Area<span class="token punctuation">,</span><span class="token operator">@</span>Circumference<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token comment">%f1以元胞数组形式返回</span>    enda<span class="token comment">%计算圆的曲率</span><span class="token keyword">function</span> y <span class="token operator">=</span> <span class="token function">Curvature</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span>    y <span class="token operator">=</span> <span class="token number">1.</span><span class="token operator">/</span>R<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment">%计算圆的面积</span><span class="token keyword">function</span> y <span class="token operator">=</span> <span class="token function">Area</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span>    y <span class="token operator">=</span> <span class="token keyword">pi</span> <span class="token operator">.*</span> R<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment">%计算圆的周长</span><span class="token keyword">function</span> y <span class="token operator">=</span> <span class="token function">Circumference</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span>    y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">.*</span> <span class="token keyword">pi</span> <span class="token operator">.*</span> R<span class="token punctuation">;</span><span class="token keyword">end</span></code></pre><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数是不存储在程序文件中、但与数据类型是函数句柄的变量相关的函数。匿名函数可以接受多个输入并返回一个输出。</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 例1：多个输入的匿名函数</span>clear<span class="token punctuation">;</span>f <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> x<span class="token operator">.^</span><span class="token number">2</span> <span class="token operator">+</span> y<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">% 例2：参数化函数</span>clear<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>f <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token operator">.^</span><span class="token number">2</span> <span class="token operator">+</span> a <span class="token operator">.*</span> x <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>clear a b<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token comment">%可以看到，函数句柄f也保存了a和b的值，即便清除掉a和b也没有影响</span><span class="token comment">% 例3：匿名函数的嵌套，以积分函数为例</span>F <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">integral</span><span class="token punctuation">(</span><span class="token operator">@</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> t<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">F</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">% 例4：对于多输入函数，在创建函数句柄时可以只将部分输入作为自变量，其余输入作为参数</span>f <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span> x<span class="token operator">.^</span><span class="token number">2</span><span class="token operator">+</span>y<span class="token operator">.^</span><span class="token number">2</span><span class="token operator">+</span>z<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span>f1 <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="符号变量"><a href="#符号变量" class="headerlink" title="符号变量"></a>符号变量</h2><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 用syms函数创建符号标量、数组、矩阵</span>clear<span class="token punctuation">;</span>syms asyms b csyms e <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>syms <span class="token string">'d_%da'</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>syms g h <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>syms f <span class="token number">4</span><span class="token comment">% 用syms函数创建符号函数</span>clear<span class="token punctuation">;</span>syms <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>syms <span class="token function">m</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>syms <span class="token function">a</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token function">b</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token comment">% 用sym函数创建符号标量、数组、矩阵</span>clear<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'d_%da'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'f_a_%d_%d'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>g <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'g_a%d%d'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span></code></pre><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 例1：标量运算</span>syms a bf <span class="token operator">=</span> a <span class="token operator">+</span> bg <span class="token operator">=</span> f<span class="token operator">^</span><span class="token number">2</span>h <span class="token operator">=</span> g<span class="token operator">/</span>aF <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token punctuation">;</span>g<span class="token punctuation">,</span>a<span class="token operator">-</span>b<span class="token punctuation">]</span>G <span class="token operator">=</span> F<span class="token operator">.*</span>F<span class="token comment">% 例2：矩阵运算</span>clear<span class="token punctuation">;</span>A <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>B <span class="token operator">=</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>A <span class="token operator">+</span> BA<span class="token operator">*</span>BA<span class="token operator">/</span>B<span class="token function">diag</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>A<span class="token operator">.'</span>A<span class="token operator">'</span><span class="token comment">% 例3：符号函数</span>clear<span class="token punctuation">;</span>syms <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> a b<span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> x<span class="token operator">^</span><span class="token number">2</span><span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token operator">^</span><span class="token number">3</span><span class="token function">f</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">g</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token function">cos</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token function">exp</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">%double(exp(g(1,1)))</span><span class="token comment">% 例4：数值计算</span>clear<span class="token punctuation">;</span>syms a b <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>h <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span>A <span class="token operator">=</span> <span class="token function">subs</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">double</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>B <span class="token operator">=</span> <span class="token function">subs</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>b<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">2.1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">3.25</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">double</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token comment">%请对比</span><span class="token number">1</span><span class="token operator">/</span><span class="token function">sym</span><span class="token punctuation">(</span><span class="token number">1234567</span><span class="token punctuation">)</span>    <span class="token comment">%精确计算</span><span class="token function">sym</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">1234567</span><span class="token punctuation">)</span>    <span class="token comment">%非精确计算</span><span class="token comment">% 例5：一些函数</span>clear<span class="token punctuation">;</span>syms a b <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span> a<span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>b<span class="token operator">*</span>a<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span>D1 <span class="token operator">=</span> <span class="token function">diff</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>                <span class="token comment">%一阶导数</span>D2 <span class="token operator">=</span> <span class="token function">diff</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>              <span class="token comment">%二阶导数</span><span class="token function">D1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                       <span class="token comment">%代入a=2</span>D1 <span class="token operator">=</span> <span class="token function">subs</span><span class="token punctuation">(</span>D1<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>           <span class="token comment">%将参数b替换为3</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token function">D1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment">%类型转换</span>e <span class="token operator">=</span> <span class="token function">subs</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>g <span class="token operator">=</span> <span class="token function">fourier</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment">%Fourier变换</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span>              LF <span class="token operator">=</span> <span class="token function">laplace</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>             <span class="token comment">%Laplace变化</span></code></pre><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><h3 id="交互方式"><a href="#交互方式" class="headerlink" title="交互方式"></a>交互方式</h3><p>MATLAB选项卡 —— 主页 —— 变量 —— 导入数据/保存工作区</p><h3 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% save：将工作区变量保存为MAT文件</span>clear<span class="token punctuation">;</span>A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>B <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">'./data/data1.mat'</span><span class="token punctuation">,</span>"A"<span class="token punctuation">)</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">'./data/data1.mat'</span><span class="token punctuation">,</span>"B"<span class="token punctuation">,</span><span class="token string">'-append'</span><span class="token punctuation">)</span><span class="token comment">%save('./data/data1.mat',"B")</span><span class="token comment">% load：读取MAT文件(或ASCII文件，请自行查阅说明文档)中保存的变量</span>clear<span class="token punctuation">;</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'./data/data1.mat'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%load('./data/data1.mat');</span>b <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'./data/data1.mat'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token comment">% fileread：以文本格式读取内容</span>clear<span class="token punctuation">;</span>charA <span class="token operator">=</span> <span class="token function">fileread</span><span class="token punctuation">(</span><span class="token string">'./data/data2.txt'</span><span class="token punctuation">)</span><span class="token comment">% writetable(选学)：将表(table)写入有分隔符的文本文件</span>clear<span class="token punctuation">;</span>Age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">;</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token number">21</span><span class="token punctuation">;</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Name <span class="token operator">=</span> <span class="token punctuation">[</span>"Alice"<span class="token punctuation">;</span>"Bob"<span class="token punctuation">;</span>"Carol"<span class="token punctuation">;</span>"Dave"<span class="token punctuation">]</span><span class="token punctuation">;</span>Weight <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">;</span><span class="token number">69</span><span class="token punctuation">;</span><span class="token number">64</span><span class="token punctuation">;</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Height <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">176</span><span class="token punctuation">;</span><span class="token number">163</span><span class="token punctuation">;</span><span class="token number">181</span><span class="token punctuation">;</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">;</span>T <span class="token operator">=</span> <span class="token function">table</span><span class="token punctuation">(</span>Name<span class="token punctuation">,</span>Age<span class="token punctuation">,</span>Height<span class="token punctuation">,</span>Weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">writetable</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span><span class="token string">'./data/data3.xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">% readtable：基于扩展名确定文件格式；从带分隔符的文本文件(如txt，csv，dat)或电子表格文件(如xls，xlsx)读取列向数据来创建表(table)</span>clear<span class="token punctuation">;</span>T <span class="token operator">=</span> <span class="token function">readtable</span><span class="token punctuation">(</span>"data<span class="token operator">\</span>data3<span class="token punctuation">.</span>xlsx"<span class="token punctuation">)</span>Name <span class="token operator">=</span> T<span class="token punctuation">.</span>NameAge <span class="token operator">=</span> T<span class="token punctuation">.</span>AgeHeight <span class="token operator">=</span> T<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span>Weight <span class="token operator">=</span> T<span class="token punctuation">.</span>Weight<span class="token comment">% imread：从指定文件读取图像数据，由于文件格式较多，在此不一一列出，仅以bmp格式为例，更详细的说明参阅说明文档“imread”页面。</span>clear<span class="token punctuation">;</span>image1 <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span>"<span class="token operator">./</span>data<span class="token operator">/</span>image1<span class="token punctuation">.</span>bmp"<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">image</span><span class="token punctuation">(</span>image1<span class="token punctuation">)</span><span class="token comment">% imwrite：将数组保存为图像(灰度图或RGB彩色图像)，数据类型为uint8或uint16。</span>clear<span class="token punctuation">;</span><span class="token function">load</span><span class="token punctuation">(</span>"<span class="token operator">./</span>data<span class="token operator">/</span>image2<span class="token punctuation">.</span>mat"<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imwrite</span><span class="token punctuation">(</span>image2<span class="token punctuation">,</span>"<span class="token operator">./</span>data<span class="token operator">/</span>image2<span class="token punctuation">.</span>jpg"<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">%如果image2.jpg已经存在，可以删除后重新运行</span></code></pre><h2 id="数据处理入门"><a href="#数据处理入门" class="headerlink" title="数据处理入门"></a>数据处理入门</h2><h3 id="cftool工具"><a href="#cftool工具" class="headerlink" title="cftool工具"></a>cftool工具</h3><ul><li>进入工具箱界面：MATLAB选项栏 —— APP —— Curve Fitting（或直接在命令行输入 cftool）</li><li>加载数据：在一个打开的 .m 文件中导入数据，例如：</li></ul><pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">447.1</span><span class="token punctuation">,</span> <span class="token number">471.3</span><span class="token punctuation">,</span> <span class="token number">492.2</span><span class="token punctuation">,</span> <span class="token number">501.6</span><span class="token punctuation">,</span> <span class="token number">587.6</span><span class="token punctuation">,</span> <span class="token number">667.8</span><span class="token punctuation">,</span> <span class="token number">706.6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.6694</span><span class="token punctuation">,</span> <span class="token number">1.6638</span><span class="token punctuation">,</span> <span class="token number">1.6604</span><span class="token punctuation">,</span> <span class="token number">1.6577</span><span class="token punctuation">,</span> <span class="token number">1.6477</span><span class="token punctuation">,</span> <span class="token number">1.6411</span><span class="token punctuation">,</span> <span class="token number">1.6389</span><span class="token punctuation">]</span><span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span></code></pre><ul><li>选择拟合曲线类型(在此选择线性拟合，基函数为 $1, x, x^2$)</li></ul><p><img src="https://s2.loli.net/2022/02/23/OW8wGC7LTXdcnu4.png" alt="image-20220223213053229"></p><ul><li>查看拟合结果(Result栏)</li><li>导出拟合结果：cftool界面选项栏 —— 文件(F) —— Generate Code 即可导出代码文件。</li></ul><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>data <span class="token operator">=</span> <span class="token function">readtable</span><span class="token punctuation">(</span>"<span class="token operator">./</span>data<span class="token operator">/</span>data4<span class="token punctuation">.</span>csv"<span class="token punctuation">)</span><span class="token punctuation">;</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>Close<span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">histogram</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%用名称-值对组参数设置直方图的各种属性，如bin的颜色、透明度、归一化方式等</span><span class="token comment">%在此将'Normalization'设置为'probability'进行归一化，使得各bin的高度为概率值，各bin高度之和为1</span><span class="token comment">%更详细的说明请参阅说明文档页面"histogram"</span><span class="token function">histogram</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'Normalization'</span><span class="token punctuation">,</span><span class="token string">'probability'</span><span class="token punctuation">)</span>     <span class="token comment">%指定标量nbins，确定直方图的bin数</span>edges <span class="token operator">=</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">38</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%在此将'FaceColor'设置为[0.9,0.5,0.2]</span><span class="token function">histogram</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>edges<span class="token punctuation">,</span><span class="token string">'FaceColor'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">%指定向量edges，确定直方图bin的边界(左闭右开)</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%在此将'Normalization'设置为'pdf'进行归一化，使得bin的高度为概率密度的估计值，使得各bin面积和为1</span><span class="token function">histogram</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'Normalization'</span><span class="token punctuation">,</span><span class="token string">'pdf'</span><span class="token punctuation">)</span>    <span class="token comment">%指定标量nbins，确定直方图的bin数</span></code></pre><h1 id="可视化与优化问题"><a href="#可视化与优化问题" class="headerlink" title="可视化与优化问题"></a>可视化与优化问题</h1><h2 id="图形对象"><a href="#图形对象" class="headerlink" title="图形对象"></a>图形对象</h2><p>图形对象是用来创建可视化数据的组件。每个对象在图形显示中都具有特定角色。例如，一个线图包含一个图窗对象、一个坐标区对象和一个图形线条对象。可以通过设置它们的属性来自定义图形对象。 要设置属性，可以通过创建该对象的函数将其以输出参数的形式返回。例如，plot 函数返回图形线条对象。然后，使用圆点表示法查看和设置属性，或者使用 <code>get()</code> 和 <code>set()</code> 函数查看和设置属性。</p><h3 id="Line"><a href="#Line" class="headerlink" title="Line"></a>Line</h3><pre class="language-matlab" data-language="matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">;</span>y <span class="token operator">=</span> x<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment">% 可使用 get() 函数查询特定属性</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'LineStyle'</span><span class="token punctuation">)</span><span class="token comment">% 可用原点表示法修改设置属性</span>p<span class="token punctuation">.</span>LineWidth <span class="token operator">=</span> <span class="token number">3</span><span class="token comment">% 也可用 set() 函数设置属性</span><span class="token function">set</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'LineWidth'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">% 还可以在创建对象时使用名称-值对组参数设置属性。例如</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'LineWidth'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Axes"><a href="#Axes" class="headerlink" title="Axes"></a>Axes</h3><p>Axes 属性控制 Axes 对象的外观和行为。通过更改属性值，您可以修改坐标区的特定方面。使用圆点表示法查询和设置属性。</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">ax <span class="token operator">=</span> gca <span class="token comment">% get current axes</span>ax<span class="token punctuation">.</span>Color <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span>ax<span class="token punctuation">.</span>XLim <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">% 修改坐标轴范围</span><span class="token comment">% 可以更改 Axes 属性给绘图增加标签</span>ax<span class="token punctuation">.</span>Title<span class="token punctuation">.</span>String <span class="token operator">=</span> <span class="token string">'My Title'</span><span class="token punctuation">;</span>ax<span class="token punctuation">.</span>Title<span class="token punctuation">.</span>FontSize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>ax<span class="token punctuation">.</span>XLabel<span class="token punctuation">.</span>String <span class="token operator">=</span> <span class="token string">'My x-Axis Label'</span><span class="token punctuation">;</span>ax<span class="token punctuation">.</span>YLabel<span class="token punctuation">.</span>String <span class="token operator">=</span> <span class="token string">'My y-Axis Label'</span><span class="token punctuation">;</span><span class="token comment">% 也可以直接使用函数添加标签</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'My Title'</span><span class="token punctuation">,</span> <span class="token string">'FontSize'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'My x-Axis Label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">'My y-Axis Label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="矩阵可视化"><a href="#矩阵可视化" class="headerlink" title="矩阵可视化"></a>矩阵可视化</h2><h3 id="meshgrid"><a href="#meshgrid" class="headerlink" title="meshgrid"></a>meshgrid</h3><p>meshgrid 函数可用于创建二维表格。</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>y <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>F <span class="token operator">=</span> X<span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>X<span class="token operator">.^</span><span class="token number">2</span><span class="token operator">-</span>Y<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">surf</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>F<span class="token punctuation">)</span></code></pre><h3 id="contour"><a href="#contour" class="headerlink" title="contour"></a>contour</h3><p>使用 contour 函数绘制等高线。</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">contour</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> F<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="streamline"><a href="#streamline" class="headerlink" title="streamline"></a>streamline</h3><p>使用 streamline 函数绘制流线。</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token comment">% x方向速度</span>v <span class="token operator">=</span> <span class="token operator">-</span>y<span class="token punctuation">;</span>   <span class="token comment">% y方向速度</span>startx <span class="token operator">=</span> <span class="token number">0.1</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">% x起始点</span>starty <span class="token operator">=</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>startx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">% y起始点</span>figure<span class="token punctuation">;</span><span class="token function">streamline</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>startx<span class="token punctuation">,</span>starty<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="最优化问题"><a href="#最优化问题" class="headerlink" title="最优化问题"></a>最优化问题</h2><p>安装 Optimization Toolbox，在实时脚本中，选择<strong>插入——任务——优化</strong>或者<strong>实时编辑器——任务——优化</strong>。</p><p>下面给出一个求解有约束非线性问题的示例：</p><p>问题为在单位圆盘上最小化 Rosenbrock 函数 <code>f(x,y)=100(y−x^2)^2+(1−x)^2</code>，约束条件为 <code>x^2+y^2&lt;=1</code>。</p><p>首先执行下面一行代码把初值写入工作区。</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">x0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">% 迭代初始点(x, y) = (0, 0)</span></code></pre><p>下面使用求解器求解该问题，结果放入 solution 和 objectiveValue 变量中。对于不同的问题，可参照 objectiveFcn 和 unitdisk 函数自行修改。</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> f <span class="token operator">=</span> <span class="token function">objectiveFcn</span><span class="token punctuation">(</span>optimInput<span class="token punctuation">)</span>    <span class="token comment">% 示例:</span>    <span class="token comment">% 最小化 Rosenbrock 函数</span>    <span class="token comment">% f = 100*(y - x^2)^2 + (1 - x)^2</span>    <span class="token comment">% 编辑以下行以添加您的计算方法</span>    x <span class="token operator">=</span> <span class="token function">optimInput</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token function">optimInput</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f <span class="token operator">=</span> <span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span>y <span class="token operator">-</span> x<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token punctuation">[</span>c<span class="token punctuation">,</span>ceq<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">unitdisk</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment">% 示例：</span>    <span class="token comment">% 单位圆盘</span>    <span class="token comment">% 编辑以下行以添加您的计算方法</span>    <span class="token comment">% 注意，如果没有不等式约束，请指定 c = []</span>    <span class="token comment">% 注意，如果没有等式约束，请指定 ceq = []</span>    c <span class="token operator">=</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    ceq <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">end</span></code></pre><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 使用 disp函数查看运行结果</span><span class="token function">disp</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span><span class="token function">disp</span><span class="token punctuation">(</span>objectiveValue<span class="token punctuation">)</span></code></pre><h1 id="更多应用"><a href="#更多应用" class="headerlink" title="更多应用"></a>更多应用</h1><h2 id="求解黄金分割比"><a href="#求解黄金分割比" class="headerlink" title="求解黄金分割比"></a>求解黄金分割比</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 解方程</span>p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">% 降次排列</span>r <span class="token operator">=</span> <span class="token function">roots</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment">% 解析字符串后解方程</span>r <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token string">'x-1=1/x'</span><span class="token punctuation">)</span>phi <span class="token operator">=</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">% 符号变量解方程</span>syms x<span class="token punctuation">;</span>r <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">)</span>phi <span class="token operator">=</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">% 数值求解非线性方程</span>f <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1.</span><span class="token operator">/</span>x<span class="token function">ezplot</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>phi <span class="token operator">=</span> <span class="token function">fzero</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>hold on<span class="token function">plot</span><span class="token punctuation">(</span>phi<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">)</span><span class="token comment">% .m 的两种功能：脚本或函数</span><span class="token comment">% In goldrect.m</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token string">'b--'</span><span class="token punctuation">)</span><span class="token function">text</span><span class="token punctuation">(</span>phi<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1.05</span><span class="token punctuation">,</span> <span class="token string">'\phi'</span><span class="token punctuation">)</span>…axis equalaxis off<span class="token function">set</span><span class="token punctuation">(</span>gcf<span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">)</span> <span class="token comment">% get current figure</span></code></pre><h2 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h2><pre class="language-matlab" data-language="matlab"><code class="language-matlab">f <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>tic<span class="token punctuation">,</span> <span class="token function">fibnum</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  toc <span class="token comment">% tic toc 计时命令</span></code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>无系 2021-2022 冬 MatPyFly 培训的 MATLAB 部分讲义</li><li>《数值分析》MATLAB 简介及入门.pptx</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;大概记录的是 MATLAB 的入门之路。反正《数值分析》课程也得用。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="技术/MATLAB" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/%E6%8A%80%E6%9C%AF-MATLAB/"/>
    
    
    <category term="MATLAB" scheme="https://www.c7w.tech/tags/MATLAB/"/>
    
  </entry>
  
  <entry>
    <title>ESLint 配置指北</title>
    <link href="https://www.c7w.tech/eslint/"/>
    <id>https://www.c7w.tech/eslint/</id>
    <published>2022-02-17T13:35:32.000Z</published>
    <updated>2022-02-17T16:49:46.534Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从代码规范说起"><a href="#从代码规范说起" class="headerlink" title="从代码规范说起"></a>从代码规范说起</h2><p>由于我们每个人对 JavaScript 的理解不同，编写代码的习惯也不同，所以在合作编写项目时，难免会出现代码风格的不同。这种差异性导致了团队协作的效率低下，也影响了项目的健壮性和可维护性。所以，我们需要对代码风格进行规范。这种规范不仅可以使代码风格保持统一，并且可以在代码运行之前就检测出一些错误和 Bug，提高协作开发效率。</p><p>lint 是最著名的 C 语言工具之一，作用是静态代码分析，它被用于检查 C 程序中潜在的错误，包括（但不限于）可疑的类型组合、未使用的变量、不可达的代码以及不可移植的代码等等。</p><p>而 ESLint 则是 2013 年推出的 JavaScript 的 lint 工具。命名前缀的来源是由于 JavaScript 也被称为 ECMAScript（ES）。</p><p>ESLint 是在 ECMAScript/JavaScript 代码中识别和报告模式匹配的工具，它的目标是保证代码的一致性和避免错误。</p><p>ESLint 可以在运行代码前就发现一些语法错误和潜在的 Bug，极大地减轻测试人员的压力，减少软件项目的除错成本。同时，ESLint 允许开发者通过 rules 定义自己的代码规范，所以非常适合用于制定团队代码规范。</p><a id="more"></a><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><ul><li>引入 ESLint：注意只需要将依赖安装到开发环境</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> eslint --save-dev<span class="token comment"># or</span><span class="token function">yarn</span> <span class="token function">add</span> eslint --dev</code></pre><p>然后我们输入 <code>npm init @eslint/config</code> 或 <code>yarn create @eslint/config</code> 回答问题进行配置。</p><p><img src="https://s2.loli.net/2022/02/17/nWjZaQvTKLcgdVm.png" alt="image-20220217215148544"></p><p>之后再使用 <code>yarn install</code> 进行依赖补全。</p><p>什么是 <code>airbnb</code>？且听下节分解。</p><h2 id="常见的标准规范"><a href="#常见的标准规范" class="headerlink" title="常见的标准规范"></a>常见的标准规范</h2><p>我们在 <code>eslintrc.js</code> 中以 CommonJS 格式规定我们的标准规范。</p><pre class="language-json" data-language="json"><code class="language-json">module.exports = <span class="token punctuation">&#123;</span>  env<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    browser<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    es2021<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  extends<span class="token operator">:</span> <span class="token punctuation">[</span>    'plugin<span class="token operator">:</span>react/recommended'<span class="token punctuation">,</span>    'airbnb'<span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  parser<span class="token operator">:</span> '@typescript-eslint/parser'<span class="token punctuation">,</span>  parserOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    ecmaFeatures<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      jsx<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    ecmaVersion<span class="token operator">:</span> 'latest'<span class="token punctuation">,</span>    sourceType<span class="token operator">:</span> 'module'<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    'react'<span class="token punctuation">,</span>    '@typescript-eslint'<span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  rules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>;</code></pre><h3 id="eslint-recommended"><a href="#eslint-recommended" class="headerlink" title="eslint:recommended"></a><code>eslint:recommended</code></h3><ul><li>参考 <a href="https://eslint.org/docs/rules/。">https://eslint.org/docs/rules/。</a></li></ul><h3 id="eslint-standard"><a href="#eslint-standard" class="headerlink" title="eslint:standard"></a><code>eslint:standard</code></h3><p>standard 是基于 recommended 衍生出来的更严格的规范。其与后者的不同之处主要是 recommended 很多都是 off, standard 是 error, 比如 <code>单行代码块两边加空格</code>、<code>禁止使用分号结尾</code>。</p><p>先使用 <code>npm i standard eslint-plugin-standard eslint-config-standard -D</code> 命令安装 <code>standard</code> 插件，然后在 <code>eslintrc.js</code> 文件中写入以下内容后，将会启用 standard 规范：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  root<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'standard'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>standard 会比 recommended 更加严格，在代码风格上也做了一些限制。不过它的用户群体也是比较多的，也不乏一些大家耳熟能详的。</p><p><img src="https://s2.loli.net/2022/02/17/cQrWjvtLeORM5AG.jpg" alt="image"></p><ul><li>参考：<a href="https://standardjs.com/rules-zhcn.html">https://standardjs.com/rules-zhcn.html</a></li></ul><h3 id="Airbnb"><a href="#Airbnb" class="headerlink" title="Airbnb"></a><code>Airbnb</code></h3><p>Airbnb 规范是最严格的 ESLint 规范，列出下面几点比较明显的区别：</p><ol><li>默认必须要分号，而 ESLint 默认不添加分号</li><li>不能使用 for 循环，推荐使用数组自带的 API 完成遍历工作。</li><li>当你必须使用函数表达式（或传递一个匿名函数）时，使用箭头函数符号。</li></ol><p>除了这些以外，还有更多严格的规则，可以参考：</p><ul><li><a href="https://link.segmentfault.com/?enc=cUG%2BYxm078373Ai4Zl7xzg%3D%3D.mQwuT8A0xwjTxWnJCQBguM5%2BsxTvj%2FcbfNrhYRoEuzlOAiIikVMfCqL4fFnglX%2FQ">Airbnb 规范</a></li></ul><blockquote><ul><li>补充：<strong>Babel-eslint</strong> ?</li></ul><p><a href="https://www.npmjs.com/package/@babel/eslint-parser">https://www.npmjs.com/package/@babel/eslint-parser</a></p><p>ESLint’s default parser and core rules <a href="https://github.com/eslint/eslint/blob/a675c89573836adaf108a932696b061946abf1e6/README.md#what-about-experimental-features">only support the latest final ECMAScript standard</a> and do not support experimental (such as new features) and non-standard (such as Flow or TypeScript types) syntax provided by Babel. @babel/eslint-parser is a parser that allows ESLint to run on source code that is transformed by Babel.</p><p><strong>Note:</strong> You only need to use @babel/eslint-parser <strong>if you are using Babel to transform your code</strong>. If this is not the case, please use the relevant parser for your chosen flavor of ECMAScript (note that the default parser supports all non-experimental syntax as well as JSX).</p></blockquote><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>直接说结论，使用以下插件：</p><ul><li>@typescript-eslint/parser</li><li>@typescript-eslint/eslint-plugin</li></ul><p>在上述回答问题的过程中会帮我们自动补全在 <code>package.json</code> 中。</p><h2 id="对照：Prettier"><a href="#对照：Prettier" class="headerlink" title="对照：Prettier"></a>对照：Prettier</h2><blockquote><ul><li>什么是 Prettier</li></ul><p>Prettier 在自己官网首页列出这么三点：</p><ul><li>An opinionated code formatter</li><li>Supports many languages</li><li>Integrates with most editors</li><li>Has few options</li></ul><p>官方首先告诉你，Prettier 是一个 <strong>Opinionated</strong> 的代码格式化工具。所以要掌握 Prettier 的精髓就是要理解这个单词。</p><p>对比 Angular, ExpressJS 和 SpringBoot 的 Unopinionated，Prettier 说自己是一个 Opinionated code formatter，就是说：你必须认同我的观点，按照我说的做。否则你就别用我，硬着头皮用就会处处不爽！</p><p>Has few options，其实就是 Opinionated 的最直接体现。除了必要的设置项，不会再给你们更多。给你设置项越多，你们越乱，你们就会继续争吵！</p><p>Prettier 的原理非常简单：</p><p>不管你写的代码是个什么鬼样子，Prettier 会去掉你代码里的所有样式风格，然后用统一固定的格式重新输出。输出时基本上只考虑一个参数，就是 line length。</p></blockquote><p>而 Prettier 与 Linters 有什么区别呢？</p><blockquote><ul><li>Formatting rules</li></ul><p>当 ESLint 遇到上面的 incorrect code 的时候，会提示你违反规则，让你修改代码以符合规则。</p><p>而 Prettier 则不会这么麻烦，它根本不管你之前符不符合什么规则，都先把你的代码解析成 AST，然后按照它自己的风格给你重新输出代码。</p><p>换句话说，Prettier 对应的是各种 Linters 的 Formatting rules 这一类规则。而且你用了 Prettier 之后，就不会再违反这类规则了！不需要你自己手动修改代码。</p><ul><li>Code-quality rules</li></ul><p>Prettier 对这类规则束手无策。而且这类规则也正是各种 Linters 的重点，因为它们真的能帮你发现很多低级的 Bug。</p><p>所以，Prettier 并不会取代各种 Linters，而是能避免你的代码和这些 Linters 定义的 Formatting rules 冲突。Linters 检查出来违反 Code-quality rules 的情况后还需要你自己根据业务逻辑和语法手动修改。Prettier 帮你格式化代码，但是不会帮你挑出潜在的错误。</p><p>那么既要让 Prettier 帮你格式化代码，还想让 Linters 帮你挑出潜在的 Code-quality 类错误，怎么办？就需要 Prettier 和 Linters 配合使用。</p></blockquote><p>以上摘自：参考资料中的《Prettier》文</p><p>现在 ESLint 也有了 <code>--fix</code> 功能，暂且搁置一下 Prettier 的学习。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>// TODO</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="husky"><a href="#husky" class="headerlink" title="husky"></a><code>husky</code></h3><p>在项目开发过程中，自动格式化并不总是让人安心的，因为并不是项目组的所有成员都会使用插件来做自动格式化。</p><p>这样的情况会导致有一些不规范的代码被提交到服务端，依然会造成团队规范不一致的问题，这个时候就需要用到提交时自动检测和格式化代码的功能。</p><p>接下来，我们将使用 <code>husky</code> Hook 来进行代码提交时的自动检测工作。</p><p>先使用 <code>npm i husky -D</code> 安装依赖，在依赖完成完成后，我们需要使用下面这条命令初始化 <code>husky</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash">husky <span class="token function">install</span>npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">"npm pre-commit"</span></code></pre><p>我们还需要在项目的 <code>package.json</code> 中，添加 <code>pre-commit</code>，这个命令运行时进行 <code>eslint</code> 检测（如下）。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"pre-commit"</span><span class="token operator">:</span> <span class="token string">"eslint src"</span><span class="token punctuation">&#125;</span></code></pre><h3 id="lint-staged"><a href="#lint-staged" class="headerlink" title="lint-staged"></a><code>lint-staged</code></h3><p>如果我们希望在检测错误的同时，自动修复 <code>eslint</code> 语法错误，则需要用到 <code>lint-staged</code>，使用 <code>npm i lint-staged -D</code> 先进行安装，然后在 <code>package.json</code> 中修改 <code>pre-commit</code> 命令，再添加以下内容。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"pre-commit"</span><span class="token operator">:</span> <span class="token string">"lint-staged"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"src/**"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"eslint --fix"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p><code>lint-staged</code> Repo 地址：<a href="https://github.com/okonet/lint-staged">https://github.com/okonet/lint-staged</a></p><p><code>lint-staged</code> 针对暂存的 git 文件运行 linters，不要让不符合规则的代码溜进代码库。<code>lint-staged</code>总是将 <strong>所有暂存文件的列表传递给任务</strong>，忽略任何文件都应该在任务本身中配置，比如：<code>.prettierignore</code> / <code>.eslintignore</code> 。lint-stage 总是配合 husky 一起使用。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://segmentfault.com/a/1190000016626739">在React项目中使用Eslint代码检查工具</a></li><li><a href="https://eslint.org/docs/user-guide/getting-started">Getting Started with ESLint</a></li><li><a href="https://segmentfault.com/a/1190000039880312">从项目规范（eslint + prettier）到自动化配置</a></li><li><a href="https://zhuanlan.zhihu.com/p/81764012">Prettier</a></li><li><a href="https://zhuanlan.zhihu.com/p/62401626">使用ESLint+Prettier规范React+Typescript项目</a></li><li><a href="https://juejin.cn/post/6844903901292920846">深入理解 ESlint</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;从代码规范说起&quot;&gt;&lt;a href=&quot;#从代码规范说起&quot; class=&quot;headerlink&quot; title=&quot;从代码规范说起&quot;&gt;&lt;/a&gt;从代码规范说起&lt;/h2&gt;&lt;p&gt;由于我们每个人对 JavaScript 的理解不同，编写代码的习惯也不同，所以在合作编写项目时，难免会出现代码风格的不同。这种差异性导致了团队协作的效率低下，也影响了项目的健壮性和可维护性。所以，我们需要对代码风格进行规范。这种规范不仅可以使代码风格保持统一，并且可以在代码运行之前就检测出一些错误和 Bug，提高协作开发效率。&lt;/p&gt;
&lt;p&gt;lint 是最著名的 C 语言工具之一，作用是静态代码分析，它被用于检查 C 程序中潜在的错误，包括（但不限于）可疑的类型组合、未使用的变量、不可达的代码以及不可移植的代码等等。&lt;/p&gt;
&lt;p&gt;而 ESLint 则是 2013 年推出的 JavaScript 的 lint 工具。命名前缀的来源是由于 JavaScript 也被称为 ECMAScript（ES）。&lt;/p&gt;
&lt;p&gt;ESLint 是在 ECMAScript/JavaScript 代码中识别和报告模式匹配的工具，它的目标是保证代码的一致性和避免错误。&lt;/p&gt;
&lt;p&gt;ESLint 可以在运行代码前就发现一些语法错误和潜在的 Bug，极大地减轻测试人员的压力，减少软件项目的除错成本。同时，ESLint 允许开发者通过 rules 定义自己的代码规范，所以非常适合用于制定团队代码规范。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="技术/JavaScript" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/%E6%8A%80%E6%9C%AF-JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://www.c7w.tech/tags/JavaScript/"/>
    
    <category term="ESLint" scheme="https://www.c7w.tech/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 实现搜索网站纪实</title>
    <link href="https://www.c7w.tech/elasticsearch/"/>
    <id>https://www.c7w.tech/elasticsearch/</id>
    <published>2022-02-15T13:56:16.000Z</published>
    <updated>2022-03-03T14:24:58.613Z</updated>
    
    <content type="html"><![CDATA[<p>事实上是挑战杯要搭一个文书搜索网站…暂时需要用 BM25 算法顶一下。</p><p>Elasticsearch 的默认相似度算法就是 BM25，嘛嘛，大胜利。</p><p>搜索的对象是…数目约在 $10^8$ 规模左右的文档…</p><p>嘛嘛，反正都是大调库。缝合就完事了。</p><p>// WIP: 应该不会咕</p><a id="more"></a><h2 id="索引算法"><a href="#索引算法" class="headerlink" title="索引算法"></a>索引算法</h2><p>我们首先介绍下 Sparse Retrieval 的主要算法，TF-IDF 算法和 BM25 算法。</p><h3 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h3><p>TF 是指归一化的词频，IDF 是指逆文档频率。给定文档集合 $D$，有 $d_i \in D, 1 \le i \le n$. </p><p>文档集合总共包含 $m$​ 个词，去除一些十分常见的词作为停用词（Stop Words），有 $w_i \in W, 1 \le i \le m$​.</p><p>定义 TF 如下，即一篇文档中某个词出现的频率：</p><script type="math/tex; mode=display">\text{TF}(q_i, d_j) = \dfrac {f_{i, d_j}}{ |d_j| }</script><p>TF 只能描述词在文档中的频率，但假设现在有个词为“我们”，这个词可能在文档集 $D$ 中每篇文档中都会出现，并且有较高的频率。那么这一类词就不具有很好的区分文档的能力，为了降低这种通用词的作用，引入了 IDF：</p><script type="math/tex; mode=display">\text{IDF}(q_i) = \ln \dfrac {|D|}{|\{d_i  : q_i \in d_i \}|}</script><p>于是我们综合这两部分， 便可以得到 TF-IDF：</p><script type="math/tex; mode=display">\text{TF-IDF} = \text{TF} * \text{IDF}</script><p>TF 可以计算在一篇文档中词出现的频率，而 IDF 可以降低一些通用词的作用。因此对于一篇文档我们可以用文档中每个词的 TF−IDF 组成的向量来表示该文档，再根据余弦相似度这类的方法来计算文档之间的相关性。</p><h3 id="BM25"><a href="#BM25" class="headerlink" title="BM25"></a>BM25</h3><p>BM25 是信息索引领域用来计算 query 与文档相似度得分的经典算法。</p><p>不同于 TF-IDF，BM25 的公式主要由三个部分组成：</p><ol><li>query 中每个单词 $q_i$ 与文档 $d$ 之间的相关性</li><li>单词 $q_i$ 与 query 之间的相似性</li><li>每个单词的权重</li></ol><p>BM25 算法的一般公式：</p><script type="math/tex; mode=display">score(Q,d) = \sum_i^n W_i R(q_i, d)</script><p>其中 $Q$ 表示 query，$q_i \in Q$，$d$​ 表示 document.</p><p>下展开介绍各部分公式：</p><ul><li><strong>$W_i$</strong></li></ul><script type="math/tex; mode=display">W_i = IDF(q_i) = \ln \dfrac {N-df_i+0.5}{df_i+0.5}</script><p>其中 $N$​​ 是 document 总数，$df_i$​ 表示含有 $q_i$​ 的文档总数。</p><p>依据 IDF 的作用，对于某个 $q_i$​ ，包含 $q_i$ 的文档数越多，说明 $q_i$ 重要性越小，或者区分度越低，IDF 越小，因此 IDF 可以用来刻画 $q_i$ 与文档的相似性。</p><ul><li><strong>$R(q_i, d)$​</strong></li></ul><p>BM25 的设计依据一个重要的发现：<strong>词频和相关性之间的关系是非线性的</strong>，也就是说，每个词对于文档的相关性分数不会超过一个特定的阈值，当词出现的次数达到一个阈值后，其影响就不在线性增加了，而这个阈值会跟文档本身有关。</p><script type="math/tex; mode=display">R(q_i, d) = \dfrac {f_i \cdot (k_1+1)}{f_i+K} \cdot \dfrac {qf_i \cdot(k_2+1)}{qf_i+k_2}</script><p>我们可以分成两部分来看待上述公式，其中 $f_i$​ 为 $q_i$​ 在 $d$​ 中出现的次数，$k_1, k_2, K$​ 是常数。</p><p>后一部分 $\dfrac {qf_i \cdot(k_2+1)}{qf_i+k_2}$ 在控制 $q_i$​ 和 Query 的相似度。</p><p>前一部分在计算 $q_i$ 与 $d$​ 的相似度，其中 $K = k_1 \cdot (1-b+b\cdot \dfrac {|d|}{AVG_n(|d|)})$，参数 $b$ 在调节文本长度对相关性的影响。</p><p>不失一般性地我们可以取 $k_1 = 2, k_2 = 0, b = 0.75$​.</p><p>反正在接下来的运用也是大调库，调参数可以通过更改配置文件来进行。</p><h2 id="网站搭建纪实：Elasticsearch"><a href="#网站搭建纪实：Elasticsearch" class="headerlink" title="网站搭建纪实：Elasticsearch"></a>网站搭建纪实：Elasticsearch</h2><blockquote><p><strong>Elasticsearch</strong> is the distributed <strong>search and analytics engine</strong> at the heart of the Elastic Stack. <em>Logstash</em> and <em>Beats</em> facilitate collecting, aggregating, and enriching your data and storing it in Elasticsearch. <em>Kibana</em> enables you to interactively explore, visualize, and share insights into your data and manage and monitor the stack. <strong>Elasticsearch is where the indexing, search, and analysis magic happens.</strong></p><p>Elasticsearch 是一个开源的搜索引擎，建立在一个全文搜索引擎库 Apache Lucene™ 基础之上。</p><p>那 Lucene 又是什么？Lucene 可能是目前存在的，不论开源还是私有的，拥有最先进，高性能和全功能搜索引擎功能的库，但也仅仅只是一个库。</p><p>要用上 Lucene，我们需要编写 Java 并引用 Lucene 包才可以，而且我们需要对信息检索有一定程度的理解才能明白 Lucene 是怎么工作的，反正用起来没那么简单。</p><p>那么为了解决这个问题，Elasticsearch 就诞生了。Elasticsearch 也是使用 Java 编写的，它的内部使用 Lucene 做索引与搜索，但是它的目标是使全文检索变得简单，相当于 Lucene 的一层封装，它提供了一套简单一致的 RESTful API 来帮助我们实现存储和检索。</p><p>所以 Elasticsearch 仅仅就是一个简易版的 Lucene 封装吗？那就大错特错了，Elasticsearch 不仅仅是 Lucene，并且也不仅仅只是一个全文搜索引擎。它可以被下面这样准确的形容：</p><ul><li>一个分布式的实时文档存储，每个字段可以被索引与搜索</li><li>一个分布式实时分析搜索引擎</li><li>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</li></ul><p>总之，是一个相当牛逼的搜索引擎，维基百科、Stack Overflow、GitHub 都纷纷采用它来做搜索。</p></blockquote><p>总之我们先来到了下载网站看看：<a href="https://www.elastic.co/cn/downloads/elasticsearch。然后选择了适用">https://www.elastic.co/cn/downloads/elasticsearch。然后选择了适用</a> Linux 的安装方式：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html。然后就是把">https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html。然后就是把</a> <code>./config/elasticsearch.yml</code> 的关于安全的设定全部设置成 <code>false</code>（毕竟还要过一层 Django 转接）。然后执行 <code>curl localhost:9200</code>，返回：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"thunlp-3"</span><span class="token punctuation">,</span>  <span class="token property">"cluster_name"</span> <span class="token operator">:</span> <span class="token string">"elasticsearch"</span><span class="token punctuation">,</span>  <span class="token property">"cluster_uuid"</span> <span class="token operator">:</span> <span class="token string">"7O7KbQ6hQGOUieAXeKm10g"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"number"</span> <span class="token operator">:</span> <span class="token string">"8.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"build_flavor"</span> <span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token property">"build_type"</span> <span class="token operator">:</span> <span class="token string">"tar"</span><span class="token punctuation">,</span>    <span class="token property">"build_hash"</span> <span class="token operator">:</span> <span class="token string">"1b6a7ece17463df5ff54a3e1302d825889aa1161"</span><span class="token punctuation">,</span>    <span class="token property">"build_date"</span> <span class="token operator">:</span> <span class="token string">"2022-02-03T16:47:57.507843096Z"</span><span class="token punctuation">,</span>    <span class="token property">"build_snapshot"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"lucene_version"</span> <span class="token operator">:</span> <span class="token string">"9.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"minimum_wire_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"7.17.0"</span><span class="token punctuation">,</span>    <span class="token property">"minimum_index_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"7.0.0"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"tagline"</span> <span class="token operator">:</span> <span class="token string">"You Know, for Search"</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>观前提示：官方的中文 Doc 已经过时了，不少接口和格式都已经改了，请阅读最新版的文档。<s>好大的坑</s></p><p>2022-2-17 00:23:38：姑且是把后端调通了，不过这份学习笔记我觉得可以近似作废了，找时间再改吧。下面的教程并不适用 ES 最新版本，虽然大多数思想是相同的，比较便于迁移学习。</p></blockquote><h3 id="Node-与-Cluster"><a href="#Node-与-Cluster" class="headerlink" title="Node 与 Cluster"></a>Node 与 Cluster</h3><p>Elastic 本质上是一个<strong>分布式</strong>数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。</p><p>单个 Elastic 实例称为一个<strong>节点</strong>（node）。一组节点构成一个<strong>集群</strong>（cluster）。</p><h4 id="集群与分布式"><a href="#集群与分布式" class="headerlink" title="集群与分布式"></a>集群与分布式</h4><p>（只是趁着这次机会顺便就把 Elasticsearch 上手学一遍，这次毕竟只有单节点（x）</p><blockquote><p>事实上，Elasticsearch 被设计出来就是以集群运作为基础的。</p><p>ElasticSearch 的主旨是随时可用和按需扩容。 而扩容可以通过购买性能更强大（垂直扩容，或纵向扩容）或者数量更多的服务器（水平扩容，或横向扩容）来实现。虽然 Elasticsearch 可以获益于更强大的硬件设备，但是垂直扩容是有极限的。 真正的扩容能力是来自于水平扩容—为集群添加更多的节点，并且将负载压力和稳定性分散到这些节点中。</p></blockquote><ul><li>结点与集群：一个运行中的 Elasticsearch 实例称为一个节点，而集群是由一个或者多个拥有相同 <code>cluster.name</code> 配置的节点组成， 它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。</li><li>主节点：管理集群范围内的所有变更，例如增加、删除索引，或者增加、删除节点等。用户可以将请求发送到任意结点，每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。</li><li>集群健康状态：通过 <code>[GET] /_cluster/health</code> 可以查询当前节点所在集群的状态。其中返回值的 <code>status</code> 字段如果为 <code>green</code>，代表所有主分片和副本分片都在正常运行；如果为 <code>yellow</code>，代表所有主分片都在正常运行，副本分片并不是都在正常运行；如果为 <code>red</code>，说明有主分片没能正常运行。</li><li>主分片与副本分片：<ul><li>分片：索引实际上是指向一个或者多个物理<strong>分片</strong>的逻辑命名空间。一个分片是一个底层的工作单元，它保存了全部数据中的一部分。现在我们只需知道一个分片是一个 Lucene 的实例，以及它本身就是一个完整的搜索引擎。 我们的文档被存储和索引到分片内，但是应用程序是直接与索引而不是与分片进行交互。</li><li>主分片：索引内任意一个文档都归属于一个主分片，所以主分片的数目决定着索引能够保存的最大数据量。</li><li>副本分片：一个副本分片只是一个主分片的拷贝。副本分片作为硬件故障时保护数据不丢失的冗余备份，并为搜索和返回文档等读操作提供服务。副本分片的存在目的是为了在故障的情况下不至于丢失数据。如在下图这个具有三个节点的集群中，$P_i$ 代表主分片，$R_i$ 代表副本分片，每个主分片拥有 2 个其对应的副本分片。</li></ul></li></ul><p><img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_0205.png" alt="拥有2份副本分片3个节点的集群"></p><h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><p>Index 里面单条的记录称为 Document（<strong>文档</strong>）。许多条 Document 构成了一个 Index。</p><p>Document 使用 JSON 格式表示，下面是一个例子。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"工程师"</span><span class="token punctuation">,</span>  <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"数据库管理"</span><span class="token punctuation">&#125;</span></code></pre><p>同一个 Index 里面的 Document，<strong>不要求有相同的结构</strong>（scheme），但是最好保持相同，这样有利于提高搜索效率。</p><p>文档的元数据：</p><ul><li><p><strong><code>_id</code></strong>：文档的 ID 字符串</p></li><li><p><strong><code>_type</code></strong>：文档的类型名</p></li><li><p><strong><code>_index</code></strong>：文档所在的索引</p></li><li><p><strong><code>_uid</code></strong>：<code>_type</code> 和 <code>_id</code> 连接在一起构造成 <code>type#id</code></p></li><li><strong><code>_source</code></strong>：原模原样的 JSON 文件</li><li><strong><code>_all</code></strong>：全文拼接</li></ul><p>文档路由到分片中的方式为：<code>shard = hash(routing) % number_of_primary_shards</code>，其中默认 <code>routing</code> 是一个可变值，默认是文档的 <code>_id</code>。所有的文档 API（<code>get</code>、<code>index</code>、<code>delete</code>、<code>bulk</code>、<code>update</code> 以及 <code>mget</code>）都接受一个叫做 <code>routing</code> 的路由参数 ，通过这个参数我们可以自定义文档到分片的映射。</p><h3 id="Indexing"><a href="#Indexing" class="headerlink" title="Indexing"></a>Indexing</h3><p>Elastic 会索引所有字段，经过处理后写入一个<strong>倒排索引</strong>（Inverted Index）。查找数据的时候，直接查找该索引。</p><p>所以，Elastic 数据管理的顶层单位就叫做<strong>索引</strong>（Index）。它是单个数据库的同义词。每个 Index （即数据库）的名字必须是小写。</p><h4 id="索引与中文分析器"><a href="#索引与中文分析器" class="headerlink" title="索引与中文分析器"></a>索引与中文分析器</h4><ul><li>索引的创建</li></ul><pre class="language-json" data-language="json"><code class="language-json">PUT /my_index<span class="token punctuation">&#123;</span>    <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"number_of_shards"</span> <span class="token operator">:</span>   <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 主分片数</span>        <span class="token property">"number_of_replicas"</span> <span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"type_one"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> ... any mappings ... <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"type_two"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> ... any mappings ... <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        ...    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>索引的删除：<code>[DELETE] /my_index</code></li></ul><h5 id="分析器-Analysis"><a href="#分析器-Analysis" class="headerlink" title="分析器 Analysis"></a>分析器 Analysis</h5><ul><li><p>索引的设置：分析器（<code>analysis</code>），用于将全文字符串转换为适合搜索的倒排索引的工具。</p></li><li><p>何为<strong>分析</strong>？</p></li></ul><p><strong>Exact Values 与 Full Text</strong></p><p>Elasticsearch 中的数据可以分为两类：精确值（Exact Values）和全文本（Full Text）。</p><p>精确值是指一些精确的数据，比如日期或者用户 ID。相比较起来，精确值类型的数据很容易查询。结果是二进制的：要么匹配查询，要么不匹配。</p><p>全文本数据指的是长文本数据，比如一个推文的内容或者一封邮件的内容。查询全文数据要微妙的多。我们问的不只是“这个文档匹配查询吗”，而是“该文档匹配查询的程度有多大？”换句话说，该文档与给定查询的相关性如何？</p><p>为了促进这类在全文本域中的查询，Elasticsearch 首先 <strong>分析</strong> 文档，之后根据结果创建 <strong>倒排索引</strong> 。在接下来的两节，我们会讨论倒排索引和分析过程。</p><p><strong>倒排索引</strong></p><p>Elasticsearch 使用一种称为 <strong>倒排索引</strong> 的结构，它适用于快速的全文搜索。一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，有一个包含它的文档列表。</p><p>例如，假设我们有两个文档，每个文档的 <code>content</code> 域包含如下内容：</p><ol><li>The quick brown fox jumped over the lazy dog</li><li>Quick brown foxes leap over lazy dogs in summer</li></ol><p>为了创建倒排索引，我们首先将每个文档的 <code>content</code> 域拆分成单独的词（我们称它为 <code>词条</code> 或 <code>tokens</code> ），创建一个包含所有不重复词条的排序列表，然后列出每个词条出现在哪个文档。结果如下所示：</p><pre class="language-none"><code class="language-none">Term      Doc_1  Doc_2-------------------------Quick   |       |  XThe     |   X   |brown   |   X   |  Xdog     |   X   |dogs    |       |  Xfox     |   X   |foxes   |       |  Xin      |       |  Xjumped  |   X   |lazy    |   X   |  Xleap    |       |  Xover    |   X   |  Xquick   |   X   |summer  |       |  Xthe     |   X   |------------------------</code></pre><p>现在，如果我们想搜索 <code>quick brown</code> ，我们只需要查找包含每个词条的文档：</p><pre class="language-none"><code class="language-none">Term      Doc_1  Doc_2-------------------------brown   |   X   |  Xquick   |   X   |------------------------Total   |   2   |  1</code></pre><p>但是，我们目前的倒排索引有一些问题：</p><ul><li><code>Quick</code> 和 <code>quick</code> 以独立的词条出现，然而用户可能认为它们是相同的词。</li><li><code>fox</code> 和 <code>foxes</code> 非常相似, 就像 <code>dog</code> 和 <code>dogs</code> ；他们有相同的词根。</li><li><code>jumped</code> 和 <code>leap</code>, 尽管没有相同的词根，但他们的意思很相近。他们是同义词。</li></ul><p>如果我们将词条和用户查询都规范为标准模式，那么我们可以找到与用户搜索的词条不完全一致，但具有足够相关性的文档。</p><p>这种<strong>分词</strong>和<strong>标准化</strong>的过程就称为是<strong>分析</strong>。</p><p><strong>分析和分析器</strong></p><p><strong>分析</strong>包含下面的过程：</p><ul><li>首先，将一块文本分成适合于倒排索引的独立的 <strong>Tokens</strong></li><li>之后，将这些词条统一化为标准格式以提高它们的“可搜索性”</li></ul><p><strong>分析器</strong>执行上面的工作。 <strong>分析器</strong> 实际上是将三个功能封装到了一个包里：</p><ul><li><p><strong>字符过滤器</strong></p><p>首先，字符串按顺序通过每个 <strong>字符过滤器</strong> 。他们的任务是在分词前整理字符串。一个字符过滤器可以用来去掉 HTML，或者将 <code>&amp;</code> 转化成 <code>and</code>。</p></li><li><p><strong>分词器</strong></p><p>其次，字符串被 <strong>分词器</strong> 分为单个的词条。一个简单的分词器遇到空格和标点的时候，可能会将文本拆分成词条。</p></li><li><p><strong>Token 过滤器</strong></p><p>最后，词条按顺序通过每个 <strong>token 过滤器</strong> 。这个过程可能会改变词条（例如，小写化 <code>Quick</code> ），删除词条（例如， 像 <code>a</code>， <code>and</code>， <code>the</code> 等无用词，我们一般称为停用词，Stop Word），或者增加词条（例如，像 <code>jump</code> 和 <code>leap</code> 这种同义词）。</p></li></ul><p><strong>内置的分析器</strong></p><ul><li>Standard analyzer：对于西方语种表现较好，标准分析器</li><li>Simple analyzer：在任何不是字母的地方分隔文本，将词条小写</li><li>Whitespace analyzer：在空格的地方划分文本</li><li>Language analyzers：考虑指定语言的特点的分析器</li></ul><p><strong>测试分析器</strong></p><pre class="language-json" data-language="json"><code class="language-json">GET /_analyze<span class="token punctuation">&#123;</span>  <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"standard"</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Text to analyze"</span><span class="token punctuation">&#125;</span></code></pre><p><strong>中文分析器</strong></p><p>在本节的最后会介绍一个中文分析器插件 IK Analysis for Elasticsearch：</p><ul><li><a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></li></ul><p>提供的分析器：</p><ul><li><code>ik_smart</code>：将需要分词的文本做最大粒度的拆分。</li><li><code>ik_max_word</code>：将需要分词的文本做最小粒度的拆分，尽量分更多的词。</li></ul><p>安装：</p><pre class="language-bash" data-language="bash"><code class="language-bash">./elasticsearch-plugin -v <span class="token function">install</span> https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v8.0.0/elasticsearch-analysis-ik-8.0.0.zip</code></pre><h4 id="Type-amp-Mappings"><a href="#Type-amp-Mappings" class="headerlink" title="Type &amp; Mappings"></a>Type &amp; Mappings</h4><p>Document 可以分组，比如 <code>weather</code> 这个 Index 里面，可以按城市分组（北京和上海），也可以按气候分组（晴天和雨天）。这种分组就叫做 Type，它是虚拟的逻辑分组，用来过滤 Document。</p><p>不同的 Type 应该有相似的结构（schema），举例来说，<code>id</code> 字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的<a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/mapping.html">一个区别</a>。性质完全不同的数据（比如 <code>products</code> 和 <code>logs</code>）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。</p><p>类型（Type）由名称（Name）和映射（Mapping）组成。<strong>映射</strong>，就像数据库中的 schema，描述了文档可能具有的字段或属性以及每个字段的数据类型 —— 比如 <code>string</code>，<code>integer</code> 或 <code>date</code> —— 以及 Lucene 是如何索引和存储这些字段的。</p><h5 id="映射-Mappings"><a href="#映射-Mappings" class="headerlink" title="映射 Mappings"></a>映射 Mappings</h5><p>为了能够将时间域视为时间，数字域视为数字，字符串域视为全文本或精确值字符串， Elasticsearch 需要知道每个域中数据的类型。这个信息包含在映射中。</p><p>索引中每个文档都有 <strong>类型</strong>，每种类型都有它自己的 <strong>映射</strong>。映射定义了类型中的域，每个域的数据类型，以及 Elasticsearch 如何处理这些域。映射也用于配置与类型有关的元数据。</p><p>所有可用的域类型枚举如下：</p><ul><li>字符串: <code>string</code></li><li>整数: <code>byte</code>, <code>short</code>, <code>integer</code>, <code>long</code></li><li>浮点数: <code>float</code>, <code>double</code></li><li>布尔型: <code>boolean</code></li><li>日期: <code>date</code></li><li>多层级对象: <code>object</code></li></ul><p><strong>自定义域映射</strong></p><p>针对于简单域类型：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"number_of_clicks"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span><span class="token punctuation">,</span> <span class="token comment">// 指定类型</span>                <span class="token comment">// analyzed 作为全文本域索引; </span>        <span class="token comment">// not_analyzed 作为精确值索引;</span>        <span class="token comment">// no 不索引.</span>        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"not_analyzed"</span><span class="token punctuation">,</span>                 <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"whitespace"</span> <span class="token comment">// 分析器 默认为 standard</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>针对于多层级对象：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"gb"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"tweet"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>       <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"tweet"</span><span class="token operator">:</span>            <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"user"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>           <span class="token property">"type"</span><span class="token operator">:</span>             <span class="token string">"object"</span><span class="token punctuation">,</span>          <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"id"</span><span class="token operator">:</span>           <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"gender"</span><span class="token operator">:</span>       <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"age"</span><span class="token operator">:</span>          <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span>   <span class="token punctuation">&#123;</span>               <span class="token property">"type"</span><span class="token operator">:</span>         <span class="token string">"object"</span><span class="token punctuation">,</span>              <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"full"</span><span class="token operator">:</span>     <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"first"</span><span class="token operator">:</span>    <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"last"</span><span class="token operator">:</span>     <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span> <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>事实上这将被索引为：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tweet"</span><span class="token operator">:</span>            <span class="token punctuation">[</span>elasticsearch<span class="token punctuation">,</span> flexible<span class="token punctuation">,</span> very<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"user.id"</span><span class="token operator">:</span>          <span class="token punctuation">[</span>@johnsmith<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"user.gender"</span><span class="token operator">:</span>      <span class="token punctuation">[</span>male<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"user.age"</span><span class="token operator">:</span>         <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"user.name.full"</span><span class="token operator">:</span>   <span class="token punctuation">[</span>john<span class="token punctuation">,</span> smith<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"user.name.first"</span><span class="token operator">:</span>  <span class="token punctuation">[</span>john<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"user.name.last"</span><span class="token operator">:</span>   <span class="token punctuation">[</span>smith<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>总结起来，我们可以在 <code>[PUT] /my_index</code> 时使用：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"tweet"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 类型名</span>      <span class="token property">"properties"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"tweet"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"type"</span> <span class="token operator">:</span>    <span class="token string">"string"</span><span class="token punctuation">,</span>          <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"english"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"date"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"type"</span> <span class="token operator">:</span>   <span class="token string">"date"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"type"</span> <span class="token operator">:</span>   <span class="token string">"string"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"user_id"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"type"</span> <span class="token operator">:</span>   <span class="token string">"long"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><h4 id="新增记录"><a href="#新增记录" class="headerlink" title="新增记录"></a>新增记录</h4><ul><li><code>[PUT] /Index/Type/Id</code></li></ul><p>比如，向<code>/accounts/person</code>发送请求，就可以新增一条人员记录。服务器返回的 JSON 对象，会给出 Index、Type、Id、Version 等信息。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"accounts"</span><span class="token punctuation">,</span>  <span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"person"</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"_version"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"result"</span><span class="token operator">:</span><span class="token string">"created"</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"total"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"successful"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"failed"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"created"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span></code></pre><ul><li><code>[POST] /Index/Type</code></li></ul><p>新增记录的时候，也可以不指定 Id，这时要改成 POST 请求。这时，服务器返回的 JSON 对象里面，<code>_id</code>字段就是一个随机字符串。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"accounts"</span><span class="token punctuation">,</span>  <span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"person"</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"AV3qGfrC6jMbsbXb6k1p"</span><span class="token punctuation">,</span>  <span class="token property">"_version"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"result"</span><span class="token operator">:</span><span class="token string">"created"</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"total"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"successful"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"failed"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"created"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span></code></pre><p>注意，如果没有先创建 Index（这个例子是<code>accounts</code>），直接执行上面的命令，Elastic 也不会报错，而是直接生成指定的 Index。</p><h4 id="查看记录"><a href="#查看记录" class="headerlink" title="查看记录"></a>查看记录</h4><ul><li><code>[GET] /Index/Type/Id</code></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token string">'localhost:9200/accounts/person/1?pretty=true'</span></code></pre><p>上面代码请求查看<code>/accounts/person/1</code>这条记录，URL 的参数<code>pretty=true</code>表示以易读的格式返回。</p><p>返回的数据中，<code>found</code>字段表示查询成功，<code>_source</code>字段返回原始记录。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"accounts"</span><span class="token punctuation">,</span>  <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"person"</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"found"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"user"</span> <span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span> <span class="token operator">:</span> <span class="token string">"工程师"</span><span class="token punctuation">,</span>    <span class="token property">"desc"</span> <span class="token operator">:</span> <span class="token string">"数据库管理"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果 Id 不正确，就查不到数据，<code>found</code>字段就是<code>false</code>。</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token string">'localhost:9200/weather/beijing/abc?pretty=true'</span><span class="token punctuation">&#123;</span>  <span class="token string">"_index"</span> <span class="token builtin class-name">:</span> <span class="token string">"accounts"</span>,  <span class="token string">"_type"</span> <span class="token builtin class-name">:</span> <span class="token string">"person"</span>,  <span class="token string">"_id"</span> <span class="token builtin class-name">:</span> <span class="token string">"abc"</span>,  <span class="token string">"found"</span> <span class="token builtin class-name">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></code></pre><h4 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h4><ul><li><code>[PUT] /Index/Type/Id</code></li></ul><p>更新记录就是使用 PUT 请求，重新发送一次数据。比如我们将原始数据从”数据库管理”改成”数据库管理，软件开发”。 返回结果里面，有几个字段发生了变化。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"updated"</span><span class="token punctuation">,</span><span class="token property">"created"</span> <span class="token operator">:</span> <span class="token boolean">false</span></code></pre><p>可以看到，记录的 Id 没变，但是版本（version）从 <code>1</code> 变成 <code>2</code>，操作类型（result）从 <code>created</code> 变成 <code>updated</code>，<code>created</code> 字段变成 <code>false</code>，因为这次不是新建记录。</p><h4 id="部分更新记录"><a href="#部分更新记录" class="headerlink" title="部分更新记录"></a>部分更新记录</h4><p>使用 <code>update</code> API 我们还可以部分更新文档，例如在某个请求时对计数器进行累加。</p><ul><li><code>[POST] /Index/Type/Id/_update</code></li></ul><p><code>update</code> 请求最简单的一种形式是接收文档的一部分作为 <code>doc</code> 的参数， 它只是与现有的文档进行合并。对象被合并到一起，覆盖现有的字段，增加新的字段。 例如，我们增加字段 <code>tags</code> 和 <code>views</code> 到我们的博客文章：</p><pre class="language-json" data-language="json"><code class="language-json">POST /website/blog/<span class="token number">1</span>/_update<span class="token punctuation">&#123;</span>   <span class="token property">"doc"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"tags"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"testing"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"views"</span><span class="token operator">:</span> <span class="token number">0</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果请求成功，我们看到类似于 <code>index</code> 请求的响应：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>   <span class="token property">"_index"</span> <span class="token operator">:</span>   <span class="token string">"website"</span><span class="token punctuation">,</span>   <span class="token property">"_id"</span> <span class="token operator">:</span>      <span class="token string">"1"</span><span class="token punctuation">,</span>   <span class="token property">"_type"</span> <span class="token operator">:</span>    <span class="token string">"blog"</span><span class="token punctuation">,</span>   <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span></code></pre><h4 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h4><ul><li><code>[DELETE] /Index/Type/Id</code></li></ul><h4 id="取回多个文档"><a href="#取回多个文档" class="headerlink" title="取回多个文档"></a>取回多个文档</h4><p>将多个请求合并成一个，避免单独处理每个请求花费的网络延时和开销。如果你需要从 Elasticsearch 检索很多文档，那么使用 <code>mget</code> API 来将这些检索请求放在一个请求中，将比逐个文档请求更快地检索到全部文档。<strong>每个文档都是单独检索和报告的。</strong>要想知道请求数组中某个请求是否确实找到，检查 <code>found</code> 字段。</p><pre class="language-json" data-language="json"><code class="language-json">GET /_mget<span class="token punctuation">&#123;</span>   <span class="token property">"docs"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>         <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span>         <span class="token property">"_type"</span> <span class="token operator">:</span>  <span class="token string">"blog"</span><span class="token punctuation">,</span>         <span class="token property">"_id"</span> <span class="token operator">:</span>    <span class="token number">2</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>         <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span>         <span class="token property">"_type"</span> <span class="token operator">:</span>  <span class="token string">"pageviews"</span><span class="token punctuation">,</span>         <span class="token property">"_id"</span> <span class="token operator">:</span>    <span class="token number">1</span><span class="token punctuation">,</span>         <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token string">"views"</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>返回值：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>   <span class="token property">"docs"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>         <span class="token property">"_index"</span> <span class="token operator">:</span>   <span class="token string">"website"</span><span class="token punctuation">,</span>         <span class="token property">"_id"</span> <span class="token operator">:</span>      <span class="token string">"2"</span><span class="token punctuation">,</span>         <span class="token property">"_type"</span> <span class="token operator">:</span>    <span class="token string">"blog"</span><span class="token punctuation">,</span>         <span class="token property">"found"</span> <span class="token operator">:</span>    <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"text"</span> <span class="token operator">:</span>  <span class="token string">"This is a piece of cake..."</span><span class="token punctuation">,</span>            <span class="token property">"title"</span> <span class="token operator">:</span> <span class="token string">"My first external blog entry"</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">10</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>         <span class="token property">"_index"</span> <span class="token operator">:</span>   <span class="token string">"website"</span><span class="token punctuation">,</span>         <span class="token property">"_id"</span> <span class="token operator">:</span>      <span class="token string">"1"</span><span class="token punctuation">,</span>         <span class="token property">"_type"</span> <span class="token operator">:</span>    <span class="token string">"pageviews"</span><span class="token punctuation">,</span>         <span class="token property">"found"</span> <span class="token operator">:</span>    <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>         <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"views"</span> <span class="token operator">:</span> <span class="token number">2</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><h4 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h4><p>与 <code>mget</code> 可以使我们一次取回多个文档同样的方式， <code>bulk</code> API 允许在单个步骤中进行多次 <code>create</code> 、 <code>index</code> 、 <code>update</code> 或 <code>delete</code> 请求。 如果你需要索引一个数据流比如日志事件，它可以排队和索引数百或数千批次。</p><p><code>bulk</code> 与其他的请求体格式稍有不同，如下所示：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> action<span class="token operator">:</span> <span class="token punctuation">&#123;</span> metadata <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#123;</span> request body1        <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#123;</span> action<span class="token operator">:</span> <span class="token punctuation">&#123;</span> metadata <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#123;</span> request body2        <span class="token punctuation">&#125;</span>\n...</code></pre><p>这种格式就是每行写一个 JSON 格式的数据，通过换行符(<code>\n</code>)连接到一起。注意两个要点：</p><ul><li>每行一定要以换行符(<code>\n</code>)结尾，<strong>包括最后一行</strong>。这些换行符被用作一个标记，可以有效分隔行。</li><li>这些行不能包含未转义的换行符，因为他们将会对解析造成干扰。这意味着这个 JSON不能使用 pretty 参数打印。</li></ul><p><code>action</code> 必须是以下选项之一:</p><ul><li><strong><code>create</code></strong>：如果文档不存在，那么就创建它。</li><li><strong><code>index</code></strong>：创建一个新文档或者替换一个现有的文档。</li><li><strong><code>update</code></strong>：部分更新一个文档。</li><li><strong><code>delete</code></strong>：删除一个文档。不需要再另附一行请求体。</li></ul><p><code>metadata</code> 应该指定被索引、创建、更新或者删除的文档的 <code>_index</code> 、 <code>_type</code> 和 <code>_id</code> 。</p><p>举个例子：</p><pre class="language-json" data-language="json"><code class="language-json">POST /_bulk<span class="token punctuation">&#123;</span> <span class="token property">"delete"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span> <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span> <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"123"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span> <span class="token property">"create"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span> <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span> <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"123"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token property">"title"</span><span class="token operator">:</span>    <span class="token string">"My first blog post"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token property">"index"</span><span class="token operator">:</span>  <span class="token punctuation">&#123;</span> <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span> <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"blog"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token property">"title"</span><span class="token operator">:</span>    <span class="token string">"My second blog post"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token property">"update"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"website"</span><span class="token punctuation">,</span> <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span> <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token property">"_retry_on_conflict"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token property">"doc"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"title"</span> <span class="token operator">:</span> <span class="token string">"My updated blog post"</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> </code></pre><p>返回值：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>   <span class="token property">"took"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>   <span class="token property">"errors"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"items"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>  <span class="token property">"delete"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"_index"</span><span class="token operator">:</span>   <span class="token string">"website"</span><span class="token punctuation">,</span>            <span class="token property">"_type"</span><span class="token operator">:</span>    <span class="token string">"blog"</span><span class="token punctuation">,</span>            <span class="token property">"_id"</span><span class="token operator">:</span>      <span class="token string">"123"</span><span class="token punctuation">,</span>            <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"status"</span><span class="token operator">:</span>   <span class="token number">200</span><span class="token punctuation">,</span>            <span class="token property">"found"</span><span class="token operator">:</span>    <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>  <span class="token property">"create"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"_index"</span><span class="token operator">:</span>   <span class="token string">"website"</span><span class="token punctuation">,</span>            <span class="token property">"_type"</span><span class="token operator">:</span>    <span class="token string">"blog"</span><span class="token punctuation">,</span>            <span class="token property">"_id"</span><span class="token operator">:</span>      <span class="token string">"123"</span><span class="token punctuation">,</span>            <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token property">"status"</span><span class="token operator">:</span>   <span class="token number">201</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>  <span class="token property">"create"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"_index"</span><span class="token operator">:</span>   <span class="token string">"website"</span><span class="token punctuation">,</span>            <span class="token property">"_type"</span><span class="token operator">:</span>    <span class="token string">"blog"</span><span class="token punctuation">,</span>            <span class="token property">"_id"</span><span class="token operator">:</span>      <span class="token string">"EiwfApScQiiy7TIKFxRCTw"</span><span class="token punctuation">,</span>            <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"status"</span><span class="token operator">:</span>   <span class="token number">201</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>  <span class="token property">"update"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"_index"</span><span class="token operator">:</span>   <span class="token string">"website"</span><span class="token punctuation">,</span>            <span class="token property">"_type"</span><span class="token operator">:</span>    <span class="token string">"blog"</span><span class="token punctuation">,</span>            <span class="token property">"_id"</span><span class="token operator">:</span>      <span class="token string">"123"</span><span class="token punctuation">,</span>            <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>            <span class="token property">"status"</span><span class="token operator">:</span>   <span class="token number">200</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>批量大小选择：一个好的办法是开始时将 1,000 到 5,000 个文档作为一个批次, 如果你的文档非常大，那么就减少批量的文档个数。一个好的批量大小在开始处理后所占用的物理大小约为 <strong>5-15 MB</strong>。</p><h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><h4 id="返回所有记录"><a href="#返回所有记录" class="headerlink" title="返回所有记录"></a>返回所有记录</h4><ul><li><code>[GET] /Index/Type/_search</code></li></ul><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"took"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"total"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"successful"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"failed"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token property">"total"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span><span class="token operator">:</span><span class="token number">1.0</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"accounts"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"person"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"AV3qGfrC6jMbsbXb6k1p"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span><span class="token operator">:</span><span class="token number">1.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>          <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"工程师"</span><span class="token punctuation">,</span>          <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"系统管理"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"_index"</span><span class="token operator">:</span><span class="token string">"accounts"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span><span class="token operator">:</span><span class="token string">"person"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span><span class="token operator">:</span><span class="token number">1.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"user"</span> <span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>          <span class="token property">"title"</span> <span class="token operator">:</span> <span class="token string">"工程师"</span><span class="token punctuation">,</span>          <span class="token property">"desc"</span> <span class="token operator">:</span> <span class="token string">"数据库管理，软件开发"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上面代码中，返回结果的 <code>took</code> 字段表示该操作的耗时（单位为毫秒），<code>timed_out</code> 字段表示是否超时，<code>hits</code> 字段表示命中的记录，里面子字段的含义如下。</p><ul><li><code>total</code>：返回记录数，本例是 2 条。</li><li><code>max_score</code>：最高的匹配程度，本例是 <code>1.0</code>。</li><li><code>hits</code>：返回的记录组成的数组。</li></ul><p>返回的记录中，每条记录都有一个<code>_score</code>字段，表示匹配的程序，默认是按照这个字段降序排列。</p><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><ul><li><code>[GET] /Index/Type?size=10&amp;from=10</code></li></ul><p>分页实现的逻辑：</p><p>当我们请求结果的第一页（结果从 1 到 10），每一个分片产生前 10 的结果，并且返回给 <strong>协调节点</strong> ，协调节点对 50 个结果排序得到全部结果的前 10 个。</p><p>现在假设我们请求第 1000 页 —— 结果从 10001 到 10010。所有都以相同的方式工作除了每个分片不得不产生前 10010 个结果以外。然后协调节点对全部 50050 个结果排序最后丢弃掉这些结果中的 50040 个结果。</p><p>可以看到，在分布式系统中，对结果排序的成本随分页的深度成指数上升。这就是 Web 搜索引擎对任何查询都不要返回超过 1000 个结果的原因。</p><h4 id="搜索-API：轻量版"><a href="#搜索-API：轻量版" class="headerlink" title="搜索 API：轻量版"></a>搜索 API：轻量版</h4><p>有两种形式的 <code>搜索</code> API：一种是 “轻量的” <strong>查询字符串</strong> 版本，要求在查询字符串中传递所有的参数，另一种是更完整的 <strong>请求体</strong> 版本，要求使用 JSON 格式和更丰富的查询表达式作为搜索语言。</p><p>在 <code>name</code> 字段中包含 <code>john</code> 并且在 <code>tweet</code> 字段中包含 <code>mary</code> 的文档。实际的查询就是这样：</p><pre class="language-none"><code class="language-none">+name:john +tweet:mary</code></pre><p>但是查询字符串参数所需要的 URL 编码实际上更加难懂：</p><p><code>[GET] /_search?q=%2Bname%3Ajohn+%2Btweet%3Amary</code></p><p>下面的查询使用以下的条件：</p><ul><li><code>name</code> 字段中包含 <code>mary</code> 或者 <code>john</code></li><li><code>date</code> 值大于 <code>2014-09-10</code></li><li><code>_all</code> 字段包含 <code>aggregations</code> 或者 <code>geo</code>（除非设置特定字段，否则查询字符串就使用 <code>_all</code> 字段进行搜索）</li></ul><pre class="language-sense" data-language="sense"><code class="language-sense">+name:(mary john) +date:&gt;2014-09-10 +(aggregations geo)</code></pre><p>从之前的例子中可以看出，这种 <strong>轻量</strong> 的查询字符串搜索效果还是挺让人惊喜的。 它的查询语法在相关参考文档中有详细解释，以便简洁的表达很复杂的查询。对于通过命令做一次性查询，或者是在开发阶段，都非常方便。</p><p>但同时也可以看到，这种精简让调试更加晦涩和困难。而且很脆弱，一些查询字符串中很小的语法错误，像 <code>-</code>，<code>:</code>，<code>/</code> 或者 <code>&quot;</code> 不匹配等，将会返回错误而不是搜索结果。</p><p>最后，查询字符串搜索允许任何用户在索引的任意字段上执行可能较慢且重量级的查询，这可能会暴露隐私信息，甚至将集群拖垮。</p><p>相反，我们经常在生产环境中更多地使用功能全面的 <strong>request body</strong> 查询 API，除了能完成以上所有功能，还有一些附加功能。</p><h4 id="搜索-API：请求体"><a href="#搜索-API：请求体" class="headerlink" title="搜索 API：请求体"></a>搜索 API：请求体</h4><h5 id="返回所有记录与分页"><a href="#返回所有记录与分页" class="headerlink" title="返回所有记录与分页"></a>返回所有记录与分页</h5><p><code>[GET/POST] /Index/Type/_search</code></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"from"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span></code></pre><h5 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h5><p><strong>查询语句（Query clauses）</strong>就像一些简单的组合块，这些组合块可以彼此之间合并组成更复杂的查询。这些语句可以是如下形式：</p><ul><li><strong>叶子语句（Leaf clauses）</strong>(比如 <code>match</code> 语句) 被用于将查询字符串和一个字段（或者多个字段）对比。</li><li><strong>复合(Compound)</strong> 语句主要用于合并其它查询语句。 比如，一个 <code>bool</code> 语句允许在你需要的时候组合其它语句，无论是 <code>must</code> 匹配、 <code>must_not</code> 匹配还是 <code>should</code> 匹配，同时它可以包含不评分的过滤器（filters）：</li></ul><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"must"</span><span class="token operator">:</span>     <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"tweet"</span><span class="token operator">:</span> <span class="token string">"elasticsearch"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span>  <span class="token string">"mary"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"should"</span><span class="token operator">:</span>   <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"tweet"</span><span class="token operator">:</span> <span class="token string">"full text"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"filter"</span><span class="token operator">:</span>   <span class="token punctuation">&#123;</span> <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"gt"</span> <span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="查询与过滤"><a href="#查询与过滤" class="headerlink" title="查询与过滤"></a>查询与过滤</h5><p>我们的搜索一般有以下两种情况：过滤情况（filtering context）和查询情况（query context）。</p><p>当使用于 <strong>过滤情况</strong> 时，查询被设置成一个“不评分”或者“过滤”查询。即，这个查询只是简单的问一个问题：“这篇文档是否匹配？”。回答也是非常的简单，yes 或者 no ，二者必居其一。</p><p>当使用于 <strong>查询情况</strong> 时，查询就变成了一个“评分”的查询。和不评分的查询类似，也要去判断这个文档是否匹配，同时它还需要判断这个文档匹配的有 <strong>多好</strong>（匹配程度如何）。一个评分查询计算每一个文档与此查询的 <strong>相关程度</strong>，同时将这个相关程度分配给表示相关性的字段 <code>_score</code>，并且按照相关性对匹配到的文档进行排序。这种相关性的概念是非常适合全文搜索的情况，因为全文搜索几乎没有完全 “正确” 的答案。</p><p>在一般情况下，一个 filter 会比一个 query 性能更优异，并且每次都表现的很稳定。</p><p>通常的规则是，使用查询（query）语句来进行 <strong>全文</strong> 搜索或者其它任何需要影响 <strong>相关性得分</strong> 的搜索。除此以外的情况都使用过滤（filters)。</p><h5 id="Leaf-Clauses"><a href="#Leaf-Clauses" class="headerlink" title="Leaf Clauses"></a>Leaf Clauses</h5><ul><li><code>match_all</code></li></ul><p><code>match_all</code> 查询简单的匹配所有文档。在没有指定查询方式时，它是默认的查询：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>它经常与 filter 结合使用—例如，检索收件箱里的所有邮件。所有邮件被认为具有相同的相关性，所以都将获得分值为 <code>1</code> 的中性 <code>_score</code>。</p><ul><li><code>match</code></li></ul><p>无论你在任何字段上进行的是全文搜索还是精确查询，<code>match</code> 查询是你可用的标准查询。如果你在一个全文字段上使用 <code>match</code> 查询，<strong>在执行查询前，它将用正确的分析器去分析查询字符串</strong>。也就是说，如果在一个精确值的字段上使用它，例如数字、日期、布尔或者一个 <code>not_analyzed</code> 字符串字段，那么它将会精确匹配给定的值。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"tweet"</span><span class="token operator">:</span> <span class="token string">"About Search"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><code>multi_match</code></li></ul><p><code>multi_match</code> 查询可以在多个字段上执行相同的 <code>match</code> 查询：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"query"</span><span class="token operator">:</span>    <span class="token string">"full text search"</span><span class="token punctuation">,</span>        <span class="token property">"fields"</span><span class="token operator">:</span>   <span class="token punctuation">[</span> <span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"body"</span> <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><code>range</code></li></ul><p><code>range</code> 查询找出那些落在指定区间内的数字或者时间：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"gte"</span><span class="token operator">:</span>  <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token property">"lt"</span><span class="token operator">:</span>   <span class="token number">30</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>被允许的操作符如下：</p><ul><li><strong><code>gt</code></strong>：大于</li><li><strong><code>gte</code></strong>：大于等于</li><li><strong><code>lt</code></strong>：小于</li><li><strong><code>lte</code></strong>：小于等于</li></ul><ul><li><code>term</code></li></ul><p><code>term</code> 查询被用于精确值匹配，这些精确值可能是数字、时间、布尔或者那些 <code>not_analyzed</code> 的字符串：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"age"</span><span class="token operator">:</span>    <span class="token number">26</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"date"</span><span class="token operator">:</span>   <span class="token string">"2014-09-01"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"public"</span><span class="token operator">:</span> <span class="token boolean">true</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"tag"</span><span class="token operator">:</span>    <span class="token string">"full_text"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>term</code> 查询对于输入的文本不分析，所以它将给定的值进行精确查询。</p><ul><li><code>terms</code></li></ul><p><code>terms</code> 查询和 <code>term</code> 查询一样，但它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"search"</span><span class="token punctuation">,</span> <span class="token string">"full_text"</span><span class="token punctuation">,</span> <span class="token string">"nosql"</span> <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><code>exists / missing</code></li></ul><p><code>exists</code> 查询和 <code>missing</code> 查询被用于查找那些指定字段中有值 (<code>exists</code>) 或无值 (<code>missing</code>) 的文档。这与SQL中的 <code>IS_NULL</code> (<code>missing</code>) 和 <code>NOT IS_NULL</code> (<code>exists</code>) 在本质上具有共性：</p><pre class="language-sense" data-language="sense"><code class="language-sense">&#123;    &quot;exists&quot;:   &#123;        &quot;field&quot;:    &quot;title&quot;    &#125;&#125;</code></pre><h5 id="Compound-Clauses"><a href="#Compound-Clauses" class="headerlink" title="Compound Clauses"></a>Compound Clauses</h5><p>现实的查询需求从来都没有那么简单；它们需要在多个字段上查询多种多样的文本，并且根据一系列的标准来过滤。为了构建类似的高级查询，你需要一种能够将多查询组合成单一查询的查询方法。</p><p>你可以用 <code>bool</code> 查询来实现你的需求。这种查询将多查询组合在一起，成为用户自己想要的布尔查询。它接收以下参数：</p><ul><li><strong><code>must</code></strong>：文档 <strong>必须</strong> 匹配这些条件才能被包含进来。</li><li><strong><code>must_not</code></strong>：文档 <strong>必须不</strong> 匹配这些条件才能被包含进来。</li><li><strong><code>should</code></strong>：如果满足这些语句中的任意语句，将增加 <code>_score</code> ，否则，无任何影响。它们主要用于修正每个文档的相关性得分。</li><li><strong><code>filter</code></strong>：<strong>必须</strong> 匹配，但它以不评分、过滤模式来进行。这些语句对评分没有贡献，只是根据过滤标准来排除或包含文档。</li></ul><p>例子：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"must"</span><span class="token operator">:</span>     <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"how to make millions"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"tag"</span><span class="token operator">:</span>   <span class="token string">"spam"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"should"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"starred"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>               <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">&#123;</span> <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"date"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token string">"2014-01-01"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#123;</span> <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"price"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">29.99</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token property">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">&#123;</span> <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"ebooks"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>              <span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"软件"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"系统"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="网站搭建纪实：前端"><a href="#网站搭建纪实：前端" class="headerlink" title="网站搭建纪实：前端"></a>网站搭建纪实：前端</h2><p>没啥好讲的，用的是自己最熟悉的 React+Redux 框架半天肝了个 Prototype…</p><p>嘛嘛，反正前端不是主要部分啦x</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/jiangxinyang/p/10516302.html">https://www.cnblogs.com/jiangxinyang/p/10516302.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/79202151">https://zhuanlan.zhihu.com/p/79202151</a></li><li><a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></li><li><a href="https://cuiqingcai.com/6214.html">https://cuiqingcai.com/6214.html</a></li><li><a href="https://www.ruanyifeng.com/blog/2017/08/elasticsearch.html">https://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;事实上是挑战杯要搭一个文书搜索网站…暂时需要用 BM25 算法顶一下。&lt;/p&gt;
&lt;p&gt;Elasticsearch 的默认相似度算法就是 BM25，嘛嘛，大胜利。&lt;/p&gt;
&lt;p&gt;搜索的对象是…数目约在 $10^8$ 规模左右的文档…&lt;/p&gt;
&lt;p&gt;嘛嘛，反正都是大调库。缝合就完事了。&lt;/p&gt;
&lt;p&gt;// WIP: 应该不会咕&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="技术/后端" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/%E6%8A%80%E6%9C%AF-%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="ElasticSearch" scheme="https://www.c7w.tech/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX 从入坑到退坑</title>
    <link href="https://www.c7w.tech/latex/"/>
    <id>https://www.c7w.tech/latex/</id>
    <published>2022-02-13T08:43:16.000Z</published>
    <updated>2022-02-13T17:12:26.296Z</updated>
    
    <content type="html"><![CDATA[<p>虽然 Markdown 很好用，但是生成的 pdf 文档看起来就是<s>没有范</s>不够正式。此外，使用 LaTeX 也是我们之后写论文的必备技能。</p><p>本教程主要涉及已对 Markdown 较为熟识之后的迁移学习。</p><a id="more"></a><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>Markdown 入门</li><li>Markdown 编写数学公式的方法</li></ul><h2 id="LaTeX-简介"><a href="#LaTeX-简介" class="headerlink" title="LaTeX 简介"></a>LaTeX 简介</h2><p>我们首先解决以下几个问题：</p><ul><li>LaTeX 是什么？</li><li>LaTeX 怎样运作？</li><li>我该在哪里写 LaTex？</li></ul><p>在解决上述几个问题之后，我们再详细介绍该怎么写 LaTeX 的问题。</p><h3 id="LaTeX-是什么？"><a href="#LaTeX-是什么？" class="headerlink" title="LaTeX 是什么？"></a>LaTeX 是什么？</h3><p>相信你读到这里已经做好觉悟要被灌输一系列关键词和其对应概念了。让我们开始：</p><blockquote><p>历史回溯到 Knuth 教授的巨著 The Art of Computer Programming 将要出版之际，当出版商将他们排版的书稿草样交给 Knuth 教授的时候，他对于其中复杂数学公式的排版处理十分不满。其排版之粗糙，已达到了会影响人们理解原书内容的程度。因此，对于复杂的数学和物理公式，我们急需一种能够将其在互联网上传输的编码格式，使得人能阅读的公式和机器能存储的公式之间达到一种互相转化。</p></blockquote><ul><li><strong>TeX</strong>：一种排版引擎，也是该引擎使用的标记语言的名称。引擎是指能够断行、分页的程序，标记语言是控制命令和文本结合的格式。可以类比理解成你写的 C++ 源代码或者更底层的机器指令码，如输入 <script type="math/tex">2^6</script>。</li><li><strong>LaTeX</strong>：是一个基于 TeX 的排版系统，将用户按照它的格式编写的文档解释成 TeX 引擎能理解的形式并交付给 TeX 引擎处理，再将最终结果返回给用户。可以类比理解成 g++ 编译器，将上述代码渲染为 $2^6$。</li><li><strong>pdfTeX</strong> 与 <strong>pdfLaTeX</strong>：原版 TeX 系统生成的文件是 <code>dvi</code> 格式，而 pdfTeX 系统下生成的文件是 <code>pdf</code> 格式。</li><li><strong>XeTeX</strong> 与 <strong>XeLaTeX</strong>：上述 TeX 系统生成的字符集只支持 ASCII 字符。在 XeTeX 出现之前，我们曾使用过引用引入 CJK 宏库（解决不支持中日韩字符问题的一个库）手段来处理中文字符的问题。但是这个排版系统对所有 Unicode 字符都实现了支持。</li><li><strong>LuaTeX</strong> 与 <strong>LuaLaTeX</strong>：<code>pdfTeX</code> 系统的继承者，支持使用一些用户自定义脚本来实现之前需要写成 TeX 的功能。支持 Unicode，内联 lua，支持 OpenType。</li></ul><p>这里我们推荐使用 <code>XeTeX</code> 系统来进行我们日常的工作，我们后续的教程也围绕这个排版系统展开。为了简洁起见，我们后续不再区分上述概念，统一使用 <code>TeX</code>，<code>LaTeX</code> 来表述我们在说的这个话题。</p><h3 id="LaTeX-怎样运作？"><a href="#LaTeX-怎样运作？" class="headerlink" title="LaTeX 怎样运作？"></a>LaTeX 怎样运作？</h3><p>LaTeX 排版系统的输入是含有我们敲的文本和控制命令的 <code>tex</code> 文件，输出是一份 <code>pdf</code> 文件。我们只需要负责在 <code>tex</code> 文件中写下源码，然后剩下的编译和生成工作全部交给 LaTeX 即可。</p><p>有时我们还可以把一个 LaTeX 项目组织成一个文件夹，此时还是一份 <code>tex</code> 文件决定一个 <code>pdf</code> 的生成，但是我们还可以在这个文件夹中引入其他一些文件，如字体文件，图片文件，<code>.cls</code> 文件（文档模板类文件）等等。此外，我们还可以在这个文件夹中编写多个 <code>tex</code> 文件，以共享文件夹中的其他资源。此时不同的 <code>tex</code> 文件之间甚至可以项目包含（类比于 C++ 的 <code>#include</code> 包含）。</p><h3 id="在哪里编写-LaTeX？"><a href="#在哪里编写-LaTeX？" class="headerlink" title="在哪里编写 LaTeX？"></a>在哪里编写 LaTeX？</h3><p>我们有离线和在线两种模式来撰写 LaTeX。</p><p>离线模式就是安装一个 LaTeX 排版系统，类比我们想写 Markdown 的时候装了一个 Typora 软件一样，我们可以安装相应的软件来辅助我们工作，如：</p><ul><li>TeXworks</li><li>TeXstudio</li></ul><p>而使用这种方式安装带来的问题是可能安装包过于臃肿，优点是不用受到网络环境等等因素的干扰，也不用受到网络环境存储容量或运行时环境的限制。其安装方式在网络上搜索“LaTeX 入门”便可找到堆积如山的<a href="https://www.zhihu.com/question/62943097">教程</a>。</p><p>而我们这里推崇的方式就是使用在线方式来编写。如 <code>Overleaf</code> 在内的托管网站会将你的每个 TeX 项目组织成一个仓库的形式，并允许你在其中进行在线编辑：</p><p><img src="https://s2.loli.net/2022/02/14/JcqCKNfs31vxm2u.png" alt="image-20220213203750216"></p><p><img src="https://s2.loli.net/2022/02/13/IKAPDlYTmFEu5S1.png" alt="image-20220213204115880"></p><p>左上角是我们当前仓库的文件清单，较左侧窗口是编辑器，右侧窗口是即时预览窗口。类似于 <code>Overleaf</code> 的网站甚至还提供了仓库权限管理系统，你可以邀请其他人一起编辑，或是导入别人编辑好的模板继续你的编辑等等。值得一提的是许多学术会议都会给出他们接受的论文的模板。</p><p>鉴于 <code>Overleaf</code> 需要科学上网才能访问：</p><ul><li>贵校 TUNA 协会维护了一份 <a href="https://overleaf.tsinghua.edu.cn/login">Tsinghua Overleaf</a>，需要使用清华统一认证登录; </li><li>贵校贵系贵协网络部维护了一份自己的基于 <code>Overleaf</code>  的 LaTeX 在线编辑网站 <a href="https://stu.cs.tsinghua.edu.cn/tex9/">TeX9</a>，<u>需要使用酒井 ID 才能进行登录</u>。</li></ul><p>我们接下来的演示便是基于 TeX9。</p><h2 id="LaTeX-编写基础"><a href="#LaTeX-编写基础" class="headerlink" title="LaTeX 编写基础"></a>LaTeX 编写基础</h2><p>说是编写基础，接下来我们就要像介绍 Markdown 一样，先简单罗列一些简单的文档控制命令。在基础篇中我们先仅仅介绍怎样实现从 Markdown 到 LaTeX 的迁移。对于其中一些文档控制命令，我们将会在后续教程详细说明。</p><p>这里提供 CheatSheet 供查阅：</p><p><img src="https://s2.loli.net/2022/02/14/KP5yeuotcJhTlVO.png" alt="image-20220214004156979"></p><p><img src="https://s2.loli.net/2022/02/14/j3EHglvqhoetRi4.png" alt="image-20220214004207594"></p><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello, World!"></a>Hello, World!</h3><p><img src="https://s2.loli.net/2022/02/13/HPCaZJUtNOj74uF.png" alt="image-20220213205714169"></p><p>上述便是一份 <code>tex</code> 文件的示例，我们推荐你新建一个项目，然后将下面我们要介绍的内容一一尝试。</p><h3 id="支持中文字符"><a href="#支持中文字符" class="headerlink" title="支持中文字符"></a>支持中文字符</h3><p>首先，我们上述已经介绍过，支持中文字符的方式有二，一种是引入 <code>CJK</code> 宏包，另一种是使用 XeLaTeX 编译器并对源码做适当修改。这里我们采用第二种方式。</p><p>首先，按下你项目左上角的 Menu 按钮，然后在 Compiler 选项中选择 XeLaTeX 选项。</p><p>然后，输入以下内容：</p><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>UTF8<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">ctexart</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span>你好，world!<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span></code></pre><p>这样我们就完成了中文字符的引入。至于 <code>documentclass</code> 是什么，我们将在后续介绍。</p><h3 id="导言与文档信息"><a href="#导言与文档信息" class="headerlink" title="导言与文档信息"></a>导言与文档信息</h3><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>UTF8<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">ctexart</span><span class="token punctuation">&#125;</span><span class="token function selector">\title</span><span class="token punctuation">&#123;</span>Sample Document<span class="token punctuation">&#125;</span><span class="token function selector">\author</span><span class="token punctuation">&#123;</span>c7w<span class="token punctuation">&#125;</span><span class="token function selector">\date</span><span class="token punctuation">&#123;</span><span class="token function selector">\today</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span class="token comment">% 这条控制命令会读取导言部分的文档相关信息</span><span class="token comment">% 并将其渲染到文档中</span><span class="token comment">% 事实上可以参考相关宏包的 Doc：</span><span class="token comment">% http://texdoc.net/texmf-dist/doc/latex/titling/titling.pdf</span><span class="token function selector">\maketitle</span> 你好，world!<span class="token punctuation">[</span>在这里你就开始写你的作业第一题了<span class="token punctuation">]</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s2.loli.net/2022/02/13/IbNdaCD2wFXVlAq.png" alt="image-20220213210910831"></p><h3 id="章节与段落"><a href="#章节与段落" class="headerlink" title="章节与段落"></a>章节与段落</h3><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>UTF8<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">ctexart</span><span class="token punctuation">&#125;</span><span class="token function selector">\title</span><span class="token punctuation">&#123;</span>Sample Document<span class="token punctuation">&#125;</span><span class="token function selector">\author</span><span class="token punctuation">&#123;</span>c7w<span class="token punctuation">&#125;</span><span class="token function selector">\date</span><span class="token punctuation">&#123;</span><span class="token function selector">\today</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span class="token function selector">\maketitle</span><span class="token function selector">\section</span><span class="token punctuation">&#123;</span><span class="token headline class-name">我是 Section 标题</span><span class="token punctuation">&#125;</span>我是 Section 介绍。<span class="token function selector">\subsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">我是 Subsection 标题</span><span class="token punctuation">&#125;</span>我是 Subsection 介绍。<span class="token function selector">\subsubsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">我是 Subsubsection 标题</span><span class="token punctuation">&#125;</span>我是 Subsubsection 介绍。<span class="token comment">% \subsubsubsection&#123;不能继续套 sub 了，到底了&#125;</span><span class="token function selector">\paragraph</span><span class="token punctuation">&#123;</span><span class="token headline class-name">我是 Paragraph 标题</span><span class="token punctuation">&#125;</span>我是 Paragraph 后面跟着写的东西。本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。我们都知道，只要有意义，那么就必须慎重考虑。这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。要想清楚，一天掉多少根头发，到底是一种怎么样的存在。贝多芬曾经说过，卓越的人一大优点是：在不利与艰难的遭遇里百折不饶。<span class="token function selector">\subparagraph</span><span class="token punctuation">&#123;</span><span class="token headline class-name">我是 Subparagraph 标题</span><span class="token punctuation">&#125;</span>我是 Subparagraph 后面跟着写的东西。这不禁令我深思既然如何，一天掉多少根头发的发生，到底需要如何做到，不一天掉多少根头发的发生，又会如何产生。 总结的来说， 所谓一天掉多少根头发，关键是一天掉多少根头发需要如何写。 生活中，若一天掉多少根头发出现了，我们就不得不考虑它出现了的事实。 郭沫若曾经说过，形成天才的决定因素应该是勤奋。这不禁令我深思这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。<span class="token function selector">\subsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">这是第二节</span><span class="token punctuation">&#125;</span><span class="token function selector">\paragraph</span><span class="token punctuation">&#123;</span><span class="token headline class-name">第二节</span><span class="token punctuation">&#125;</span> 的首段。<span class="token function selector">\subparagraph</span><span class="token punctuation">&#123;</span><span class="token headline class-name">第二节</span><span class="token punctuation">&#125;</span>的第二段。<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s2.loli.net/2022/02/13/kIeOlBjF7uzJ5ZH.png" alt="image-20220213211528785"></p><p>在文档类 <code>article</code>/<code>ctexart</code> 中（文档类的概念我们会在进阶篇中提供指导），我们使用这些控制序列来调整行文组织结构。他们分别是：</p><ul><li><code>\section&#123;·&#125;</code></li><li><code>\subsection&#123;·&#125;</code></li><li><code>\subsubsection&#123;·&#125;</code></li><li><code>\paragraph&#123;·&#125;</code></li><li><code>\subparagraph&#123;·&#125;</code></li></ul><h3 id="文档目录"><a href="#文档目录" class="headerlink" title="文档目录"></a>文档目录</h3><p>我们尝试在渲染区 <code>\maketitle</code> 后加入如下控制命令：</p><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\tableofcontents</span></code></pre><p>没错，正如你所想的，这就会生成文档的 TOC：</p><p><img src="https://s2.loli.net/2022/02/13/sSI8byUWJjYLkPw.png" alt="image-20220213211830033"></p><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><h4 id="行内公式与行间公式"><a href="#行内公式与行间公式" class="headerlink" title="行内公式与行间公式"></a>行内公式与行间公式</h4><p>首先引入相应包 <strong>amsmath</strong>，然后我们简单介绍公式的引入：</p><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>UTF8<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">ctexart</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">amsmath</span><span class="token punctuation">&#125;</span> <span class="token comment">% 注意这里引入相应包</span><span class="token function selector">\title</span><span class="token punctuation">&#123;</span>Sample Document<span class="token punctuation">&#125;</span><span class="token function selector">\author</span><span class="token punctuation">&#123;</span>c7w<span class="token punctuation">&#125;</span><span class="token function selector">\date</span><span class="token punctuation">&#123;</span><span class="token function selector">\today</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span class="token function selector">\maketitle</span><span class="token function selector">\tableofcontents</span><span class="token function selector">\section</span><span class="token punctuation">&#123;</span><span class="token headline class-name">我是 Section 标题</span><span class="token punctuation">&#125;</span>我是 Section 介绍。<span class="token function selector">\subsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">这个 Section 我们介绍数学公式的写法</span><span class="token punctuation">&#125;</span><span class="token function selector">\subsubsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">行内公式</span><span class="token punctuation">&#125;</span><span class="token comment">% 行内公式基本可以照搬 Markdown 的模式。</span>初始处理 1 - 5 位的初始字符串集合需要处理 <span class="token equation string">$18 + 18^2 + 18^3 + 18^4 + 18^5 = 2*10^6$</span> 的数据，因此需要 <span class="token equation string">$O(T)$</span> 的时间，这里 <span class="token equation string">$T=2*10^6$</span>。<span class="token function selector">\subsubsection</span><span class="token punctuation">&#123;</span><span class="token headline class-name">行间公式</span><span class="token punctuation">&#125;</span><span class="token comment">% 行间公式用 $$ $$ 或者 \[ \] 来框住都可以，但在 LaTeX 中前者会改变行文的默认行间距，因此不推荐采用。</span><span class="token equation string">\[<span class="token equation-command regex">\text</span>&#123;dp&#125;[i] = <span class="token equation-command regex">\text</span>&#123;dp&#125;[next[i]]+1, next[i] > 0.\]</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s2.loli.net/2022/02/13/CI2hzmUEwluDp6s.png" alt="image-20220213213336585"></p><h4 id="上下标、根式与分式"><a href="#上下标、根式与分式" class="headerlink" title="上下标、根式与分式"></a>上下标、根式与分式</h4><ul><li>上下标请使用 <code>^</code> 与 <code>_</code></li><li>根式与分式请使用 <code>\sqrt&#123;·&#125;</code> 与 <code>\frac&#123;·&#125;&#123;·&#125;</code><ul><li>在行间公式和行内公式中，分式的输出效果是有差异的。如果要强制行内模式的分式显示为行间模式的大小，可以使用 <code>\dfrac</code>, 反之可以使用 <code>\tfrac</code></li></ul></li></ul><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>一些小的运算符，可以在数学模式下直接输入；另一些需要用控制序列生成，如</p><pre class="language-none"><code class="language-none">\[ \pm\; \times \; \div\; \cdot\; \cap\; \cup\;\geq\; \leq\; \neq\; \approx \; \equiv \]</code></pre><p>连加、连乘、极限、积分等大型运算符分别用 <code>\sum</code>, <code>\prod</code>, <code>\lim</code>, <code>\int</code> 生成。他们的上下标在行内公式中被压缩，以适应行高。我们可以用 <code>\limits</code> 和 <code>\nolimits</code> 来强制显式地指定是否压缩这些上下标。例如：</p><pre class="language-none"><code class="language-none">$ \sum_&#123;i&#x3D;1&#125;^n i\quad \prod_&#123;i&#x3D;1&#125;^n $$ \sum\limits _&#123;i&#x3D;1&#125;^n i\quad \prod\limits _&#123;i&#x3D;1&#125;^n $\[ \lim_&#123;x\to0&#125;x^2 \quad \int_a^b x^2 dx \]\[ \lim\nolimits _&#123;x\to0&#125;x^2\quad \int\nolimits_a^b x^2 dx \]</code></pre><p>多重积分可以使用 <code>\iint</code>, <code>\iiint</code>, <code>\iiiint</code>, <code>\idotsint</code> 等命令输入。</p><pre class="language-none"><code class="language-none">\[ \iint\quad \iiint\quad \iiiint\quad \idotsint \]</code></pre><p><img src="https://s2.loli.net/2022/02/13/VeI1zToC3JfAyK9.png" alt="image-20220213214301901"></p><h4 id="定界符"><a href="#定界符" class="headerlink" title="定界符"></a>定界符</h4><p>各种括号用 <code>()</code>, <code>[]</code>, <code>\&#123;\&#125;</code>, <code>\langle\rangle</code> 等命令表示；注意花括号通常用来输入命令和环境的参数，所以在数学公式中它们前面要加 <code>\</code>。</p><p>因为 LaTeX 中 <code>|</code> 和 <code>\|</code> 的应用过于随意，amsmath 宏包推荐用 <code>\lvert\rvert</code> 和 <code>\lVert\rVert</code> 取而代之。</p><p>为了调整这些定界符的大小，amsmath 宏包推荐使用 <code>\big</code>, <code>\Big</code>, <code>\bigg</code>, <code>\Bigg</code> 等一系列命令放在上述括号前面调整大小。</p><h4 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h4><p>省略号用 <code>\dots</code>, <code>\cdots</code>, <code>\vdots</code>, <code>\ddots</code> 等命令表示。<code>\dots</code> 和 <code>\cdots</code> 的纵向位置不同，前者一般用于有下标的序列。</p><h4 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h4><p><code>amsmath</code> 的 <code>pmatrix</code>, <code>bmatrix</code>, <code>Bmatrix</code>, <code>vmatrix</code>, <code>Vmatrix</code> 等环境可以在矩阵两边加上各种分隔符。</p><pre class="language-none"><code class="language-none">\[ \begin&#123;pmatrix&#125; a&amp;b\\c&amp;d \end&#123;pmatrix&#125; \quad\begin&#123;bmatrix&#125; a&amp;b\\c&amp;d \end&#123;bmatrix&#125; \quad\begin&#123;Bmatrix&#125; a&amp;b\\c&amp;d \end&#123;Bmatrix&#125; \quad\begin&#123;vmatrix&#125; a&amp;b\\c&amp;d \end&#123;vmatrix&#125; \quad\begin&#123;Vmatrix&#125; a&amp;b\\c&amp;d \end&#123;Vmatrix&#125; \]</code></pre><p><img src="https://s2.loli.net/2022/02/14/uix67cYI4UaXvK9.jpg" alt="img"></p><h4 id="多行公式"><a href="#多行公式" class="headerlink" title="多行公式"></a>多行公式</h4><p>可以用 <code>aligned</code> 环境来实现，用 <code>&amp;</code> 实现位置对齐。</p><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">\[<span class="token equation-command regex">\begin</span>&#123;aligned&#125;x = a+b+c+ <span class="token equation-command regex">\\</span>+d+e+f+g+d+d+d+d+d+d+d+d+d+d+d+d <span class="token equation-command regex">\\</span>+h+i <span class="token equation-command regex">\\</span>+1 <span class="token equation-command regex">\\</span><span class="token equation-command regex">\end</span>&#123;aligned&#125;\]</span><span class="token equation string">\[<span class="token equation-command regex">\begin</span>&#123;aligned&#125;x &amp;= a+b+c+ <span class="token equation-command regex">\\</span>&amp; +d+e+f+g+d+d+d+d+d+d+d+d+d+d+d+d <span class="token equation-command regex">\\</span>&amp; +h+i <span class="token equation-command regex">\\</span>&amp; +1 <span class="token equation-command regex">\\</span><span class="token equation-command regex">\end</span>&#123;aligned&#125;\]</span></code></pre><p>效果：</p><p><img src="https://s2.loli.net/2022/02/14/oZugGY2MF78Lk9t.png" alt="image-20220214001008550"></p><p>若想要公式自带编号，可以用 <code>gather</code> 和 <code>align</code> 环境，其中 <code>gather</code> 环境将公式分行渲染，<code>align</code> 同上述 <code>aligned</code>，可以控制对齐：</p><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">gather</span><span class="token punctuation">&#125;</span><span class="token equation string">a = b+c+d <span class="token equation-command regex">\\</span>x = y+z <span class="token equation-command regex">\\</span> p = a_1 + a_2 + a_3 + <span class="token equation-command regex">\dots</span> + a_&#123;200&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">gather</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">align</span><span class="token punctuation">&#125;</span><span class="token equation string">a &amp;= b+c+d <span class="token equation-command regex">\\</span>x &amp;= y+z <span class="token equation-command regex">\\</span>p &amp;= a_1 + a_2 + a_3 + <span class="token equation-command regex">\dots</span> + a_&#123;200&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">align</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s2.loli.net/2022/02/14/5tZcTngyKSIsWxV.png" alt="image-20220214001355079"></p><p>若想使用分段函数，可以使用 <code>cases</code> 环境：</p><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">\[y= <span class="token equation-command regex">\begin</span>&#123;cases&#125;-x,<span class="token equation-command regex">\quad</span> x<span class="token equation-command regex">\leq</span> 0 <span class="token equation-command regex">\\</span>x,<span class="token equation-command regex">\quad</span> x>0<span class="token equation-command regex">\end</span>&#123;cases&#125; \]</span></code></pre><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>数学公式是在引入了 <strong>amsmath</strong> 包之后，利用其提供的各种各样次环境来实现了较为复杂的公式的编辑。整体来说，与 Mathjax 的风格相差不大，因此迁移学习起来也十分方便。</p><p>这里我们再提供辅助工具：</p><ul><li><a href="https://mathpix.com/">https://mathpix.com/</a> 能够 OCR 手写体或是印刷体公式，而后将图片中的公式转换成 LaTeX 数学公式的代码。</li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><code>tabular</code> 环境提供了最简单的表格功能。它用 <code>\hline</code> 命令表示横线，在列格式中用 <code>|</code> 表示竖线；用 <code>&amp;</code> 来分列，用 <code>\\</code> 来换行；每列可以采用居左、居中、居右等横向对齐方式，分别用 <code>l</code>、<code>c</code>、<code>r</code> 来表示。</p><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">tabular</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>|l|c|r|<span class="token punctuation">&#125;</span> <span class="token function selector">\hline</span>操作系统<span class="token punctuation">&amp;</span> 发行版<span class="token punctuation">&amp;</span> 编辑器<span class="token function selector">\\</span> <span class="token function selector">\hline</span>Windows <span class="token punctuation">&amp;</span> MikTeX <span class="token punctuation">&amp;</span> TexMakerX <span class="token function selector">\\</span> <span class="token function selector">\hline</span>Unix/Linux <span class="token punctuation">&amp;</span> teTeX <span class="token punctuation">&amp;</span> Kile <span class="token function selector">\\</span> <span class="token function selector">\hline</span>Mac OS <span class="token punctuation">&amp;</span> MacTeX <span class="token punctuation">&amp;</span> TeXShop <span class="token function selector">\\</span> <span class="token function selector">\hline</span>通用<span class="token punctuation">&amp;</span> TeX Live <span class="token punctuation">&amp;</span> TeXworks <span class="token function selector">\\</span> <span class="token function selector">\hline</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">tabular</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s2.loli.net/2022/02/14/ytG5hReFbjWClwg.jpg" alt="img"></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>在 LaTeX 中插入图片，有很多种方式。最好用的应当属利用 <code>graphicx</code> 宏包提供的 <code>\includegraphics</code> 命令。比如你在你的 TeX 源文件同目录下，有名为 <code>a.jpg</code> 的图片，你可以用这样的方式将它插入到输出文档中：</p><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">&#123;</span><span class="token keyword">article</span><span class="token punctuation">&#125;</span><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">graphicx</span><span class="token punctuation">&#125;</span><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span><span class="token function selector">\includegraphics</span><span class="token punctuation">&#123;</span>a.jpg<span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">document</span><span class="token punctuation">&#125;</span></code></pre><p>想要了解更多，参见 <code>graphicx</code> 的文档：<a href="http://texdoc.net/texmf-dist/doc/latex/graphics/graphicx.pdf。">http://texdoc.net/texmf-dist/doc/latex/graphics/graphicx.pdf。</a></p><blockquote><p><strong>浮动体环境</strong></p><p>什么是浮动体环境：<code>table</code> 与 <code>figure</code>，两种浮动体环境可以替代上述的表格和图片环境，实现为表格或图片自动安排位置。</p><p>想了解更多有关浮动体环境的内容，详见<a href="https://liam.page/series/#LaTeX-%E4%B8%AD%E7%9A%84%E6%B5%AE%E5%8A%A8%E4%BD%93">这里</a>。</p></blockquote><h3 id="页面设置"><a href="#页面设置" class="headerlink" title="页面设置"></a>页面设置</h3><h4 id="页边距"><a href="#页边距" class="headerlink" title="页边距"></a>页边距</h4><p>设置页边距，推荐使用 <code>geometry</code> 宏包。可以在<a href="http://texdoc.net/texmf-dist/doc/latex/geometry/geometry.pdf">这里</a>查看它的说明文档。</p><p>比如我希望，将纸张的长度设置为 20cm、宽度设置为 15cm、左边距 1cm、右边距 2cm、上边距 3cm、下边距 4cm，可以在导言区加上这样几行：</p><pre class="language-none"><code class="language-none">\usepackage&#123;geometry&#125;\geometry&#123;papersize&#x3D;&#123;20cm,15cm&#125;&#125;\geometry&#123;left&#x3D;1cm,right&#x3D;2cm,top&#x3D;3cm,bottom&#x3D;4cm&#125;</code></pre><h4 id="页眉页脚"><a href="#页眉页脚" class="headerlink" title="页眉页脚"></a>页眉页脚</h4><p>设置页眉页脚，推荐使用 <code>fancyhdr</code> 宏包。可以在<a href="http://texdoc.net/texmf-dist/doc/latex/fancyhdr/fancyhdr.pdf">这里</a>查看它的说明文档。</p><p>比如我希望，设置自定义页眉；页脚的正中写上页码；页眉和正文之间有一道宽为 0.4pt 的横线分割，可以在导言区加上如下几行：</p><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\usepackage</span><span class="token punctuation">&#123;</span><span class="token keyword">fancyhdr</span><span class="token punctuation">&#125;</span><span class="token function selector">\pagestyle</span><span class="token punctuation">&#123;</span>fancy<span class="token punctuation">&#125;</span><span class="token function selector">\lhead</span><span class="token punctuation">&#123;</span>页眉左侧<span class="token punctuation">&#125;</span><span class="token function selector">\chead</span><span class="token punctuation">&#123;</span>页眉中间<span class="token punctuation">&#125;</span><span class="token function selector">\rhead</span><span class="token punctuation">&#123;</span>页眉右侧<span class="token punctuation">&#125;</span><span class="token function selector">\lfoot</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function selector">\cfoot</span><span class="token punctuation">&#123;</span><span class="token function selector">\thepage</span><span class="token punctuation">&#125;</span><span class="token function selector">\rfoot</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function selector">\renewcommand</span><span class="token punctuation">&#123;</span><span class="token function selector">\headrulewidth</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>0.4pt<span class="token punctuation">&#125;</span><span class="token function selector">\renewcommand</span><span class="token punctuation">&#123;</span><span class="token function selector">\headwidth</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token function selector">\textwidth</span><span class="token punctuation">&#125;</span><span class="token function selector">\renewcommand</span><span class="token punctuation">&#123;</span><span class="token function selector">\footrulewidth</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>0pt<span class="token punctuation">&#125;</span></code></pre><h4 id="段间距"><a href="#段间距" class="headerlink" title="段间距"></a>段间距</h4><p>我们可以通过修改长度 <code>\parskip</code> 的值来调整段间距。例如在导言区添加以下内容</p><pre class="language-none"><code class="language-none">\addtolength&#123;\parskip&#125;&#123;.4em&#125;</code></pre><p>则可以在原有的基础上，增加段间距 0.4em。如果需要减小段间距，只需将该数值改为负值即可。</p><h3 id="引用与尾注脚注"><a href="#引用与尾注脚注" class="headerlink" title="引用与尾注脚注"></a>引用与尾注脚注</h3><h4 id="交叉引用"><a href="#交叉引用" class="headerlink" title="交叉引用"></a>交叉引用</h4><p>交叉引用设置方法：</p><ul><li>给对象命名：<code>\label&#123;name&#125;</code></li><li>引用对象：<code>\ref&#123;name&#125;</code></li></ul><p>注意，在引用对象时，<code>\ref&#123;name&#125;</code> 会被替换会被引用对象的编号。举个例子，如果被引用对象在文档中是第 5 个被命名的，那么这里就会被替换为 5.</p><p>要想避免图/表/论文等等引用在计数上互相影响，你可以在命名时命名为 <code>tag:name</code> 的格式，引用时使用 <code>tag:name</code> 的格式来引用。具体来说，这些 tag 有：</p><div class="table-container"><table><thead><tr><th>Tag</th><th>Description</th></tr></thead><tbody><tr><td><strong><code>ch:</code></strong></td><td>chapter</td></tr><tr><td><strong><code>sec:</code></strong></td><td>section</td></tr><tr><td><strong><code>subsec:</code></strong></td><td>subsection</td></tr><tr><td><strong><code>fig:</code></strong></td><td>figure</td></tr><tr><td><strong><code>tab:</code></strong></td><td>table</td></tr><tr><td><strong><code>eq:</code></strong></td><td>equation</td></tr><tr><td><strong><code>lst:</code></strong></td><td>code listing</td></tr><tr><td><strong><code>itm:</code></strong></td><td>enumerated list item</td></tr><tr><td><strong><code>alg:</code></strong></td><td>algorithm</td></tr><tr><td><strong><code>app:</code></strong></td><td>appendix subsection</td></tr></tbody></table></div><h4 id="尾注脚注"><a href="#尾注脚注" class="headerlink" title="尾注脚注"></a>尾注脚注</h4><p>尾注直接在最后写就行，记得设置引用。</p><p>脚注可以使用 <code>\footnote&#123;角注内容&#125;</code> 来声明。</p><blockquote><p>想了解该如何更好地引入参考文献，请学习 BibTeX 宏包。</p><ul><li><a href="https://zh.wikipedia.org/wiki/BibTeX">https://zh.wikipedia.org/wiki/BibTeX</a></li></ul></blockquote><h3 id="列表与枚举"><a href="#列表与枚举" class="headerlink" title="列表与枚举"></a>列表与枚举</h3><pre class="language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">enumerate</span><span class="token punctuation">&#125;</span>    <span class="token function selector">\item</span> <span class="token function selector">\LaTeX</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> 好 处 都 有 啥        <span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">description</span><span class="token punctuation">&#125;</span>            <span class="token function selector">\item</span><span class="token punctuation">[</span>好 用<span class="token punctuation">]</span> 体 验 好 才 是 真 的 好            <span class="token function selector">\item</span><span class="token punctuation">[</span>好 看<span class="token punctuation">]</span> 强 迫 症 的 福 音            <span class="token function selector">\item</span><span class="token punctuation">[</span>开 源<span class="token punctuation">]</span> 众 人 拾 柴 火 焰 高        <span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">description</span><span class="token punctuation">&#125;</span>    <span class="token function selector">\item</span> 还 有 呢?        <span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">itemize</span><span class="token punctuation">&#125;</span>            <span class="token function selector">\item</span> 好 处 1            <span class="token function selector">\item</span> 好 处 2    <span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">itemize</span><span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">enumerate</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s2.loli.net/2022/02/14/U3E8uCBy4RKxfSL.png" alt="image-20220214004408507"></p><h2 id="LaTeX-后续学习"><a href="#LaTeX-后续学习" class="headerlink" title="LaTeX 后续学习"></a>LaTeX 后续学习</h2><h3 id="更多宏包"><a href="#更多宏包" class="headerlink" title="更多宏包"></a>更多宏包</h3><p>宏包一般都会提供相应的文档供我们阅读使用。</p><p>这里提供查询宏包对应文档的网站：</p><ul><li><a href="https://texdoc.org/index.html">https://texdoc.org/index.html</a></li></ul><p><img src="https://s2.loli.net/2022/02/14/jkVbA8vBeY9FsUR.png" alt="image-20220214003834121"></p><h3 id="制作自己的模板"><a href="#制作自己的模板" class="headerlink" title="制作自己的模板"></a>制作自己的模板</h3><p>详见参考资料中 <code>.cls</code> 文件详解部分。我们同时推荐读者可以去多读一读其他已存在的 Template 的 <code>.cls</code> 内容。</p><h3 id="制作幻灯片"><a href="#制作幻灯片" class="headerlink" title="制作幻灯片"></a>制作幻灯片</h3><p>使用 Beamer 宏包可以制作幻灯片。详见：</p><ul><li><a href="https://www.overleaf.com/learn/latex/Beamer">https://www.overleaf.com/learn/latex/Beamer</a></li></ul><p>同时，校内也提供了一些适用于各种 pre 的 Beamer 模板。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>（推荐）一份其实很短的 LaTeX 入门文档：<a href="https://liam.page/2014/09/08/latex-introduction/">https://liam.page/2014/09/08/latex-introduction/</a></li><li>（推荐）如何使用 LaTeX 排版论文：<a href="https://github.com/tuna/thulib-latex-talk">https://github.com/tuna/thulib-latex-talk</a></li><li>（<code>.cls</code> 文件详解）How to write a LaTeX class file and design your own CV： <a href="https://www.overleaf.com/learn/latex/How_to_write_a_LaTeX_class_file_and_design_your_own_CV_(Part_1">https://www.overleaf.com/learn/latex/How_to_write_a_LaTeX_class_file_and_design_your_own_CV_(Part_1</a>)</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;虽然 Markdown 很好用，但是生成的 pdf 文档看起来就是&lt;s&gt;没有范&lt;/s&gt;不够正式。此外，使用 LaTeX 也是我们之后写论文的必备技能。&lt;/p&gt;
&lt;p&gt;本教程主要涉及已对 Markdown 较为熟识之后的迁移学习。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="技术/综合" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/%E6%8A%80%E6%9C%AF-%E7%BB%BC%E5%90%88/"/>
    
    
    <category term="Latex" scheme="https://www.c7w.tech/tags/Latex/"/>
    
  </entry>
  
  <entry>
    <title>Docker 使用指北</title>
    <link href="https://www.c7w.tech/docker/"/>
    <id>https://www.c7w.tech/docker/</id>
    <published>2022-02-11T14:00:29.000Z</published>
    <updated>2022-02-11T15:03:07.659Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/02/11/MbaA67dgptL9YBc.png" alt="img"></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境不同，可能导致软件在开发环境中能运行，而到了生产环境无法运行的情况。</p><p>用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。</p><p>环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，<strong>安装的时候，把原始环境一模一样地复制过来</strong>。</p><p>这个问题的一种解决方式是使用<strong>虚拟机</strong>，比如我们常用的 WSL，就是在 Windows 系统中运行 Linux 虚拟系统的例子。但是，这样做的资源占用多，要重新配置一个全新操作系统的冗余步骤多，启动起来也十分缓慢。于是，Linux 发展出了另一种虚拟化技术：<strong>虚拟容器</strong>。</p><p><strong>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。</strong>或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p><p><strong>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。</strong>它是目前最流行的 Linux 容器解决方案。</p><p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p><p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><a id="more"></a><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ul><li>Windows <a href="https://docs.docker.com/desktop/windows/install/">https://docs.docker.com/desktop/windows/install/</a></li><li>Linux <a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></li></ul><h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><ol><li>镜像（Image）：类似于虚拟机中的镜像，是一个包含有文件系统的面向 Docker 引擎的只读模板。任何应用程序运行都需要环境，而镜像就是用来提供这种运行环境的。例如一个 Ubuntu 镜像就是一个包含 Ubuntu 操作系统环境的模板，同理在该镜像上装上 Apache 软件，就可以称为 Apache 镜像。</li><li>容器（Container）：类似于一个轻量级的沙盒，可以将其看作一个极简的 Linux 系统环境（包括 root 权限、进程空间、用户空间和网络空间等），以及运行在其中的应用程序。Docker 引擎利用容器来运行、隔离各个应用。容器是镜像创建的应用实例，可以创建、启动、停止、删除容器，各个容器之间是是相互隔离的，互不影响。注意：<strong>镜像本身是只读的，容器从镜像启动时，Docker 在镜像的上层创建一个可写层，镜像本身不变。</strong></li><li>仓库（Repository）：类似于代码仓库，这里是镜像仓库，是 Docker 用来集中存放镜像文件的地方。注意与注册服务器（Registry）的区别：注册服务器是存放仓库的地方，一般会有多个仓库；而仓库是存放镜像的地方，一般每个仓库存放一类镜像，每个镜像利用 tag 进行区分，比如 Ubuntu 仓库存放有多个版本（12.04、14.04 等）的 Ubuntu 镜像。</li></ol><h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><p>对镜像的基本操作总结：</p><ul><li>官方注册服务器（Registry）：<a href="https://hub.docker.com/">https://hub.docker.com/</a></li><li>搜索某个镜像：<code>docker search &lt;image&gt;</code></li><li>将某个镜像下载到本地：<ul><li><code>docker pull &lt;image&gt;</code>// 如果不加 tag 默认使用 latest 镜像</li><li><code>docker pull &lt;image&gt;:&lt;tag&gt;</code></li></ul></li><li>查看当前下载的镜像信息：<code>docker images</code></li><li>新建自定义镜像的方法</li></ul><p><strong>方法 1：利用镜像启动一个容器后修改，再进行 commit</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker run -it centos:latest /bin/bash    # 启动一个容器</span><span class="token punctuation">[</span>root@72f1a8a0e394 /<span class="token punctuation">]</span><span class="token comment">#    # 这里命令行形式变了，表示已经进入了一个新环境</span><span class="token punctuation">[</span>root@72f1a8a0e394 /<span class="token punctuation">]</span><span class="token comment"># git --version    # 此时的容器中没有 git</span>bash: git: <span class="token builtin class-name">command</span> not found<span class="token punctuation">[</span>root@72f1a8a0e394 /<span class="token punctuation">]</span><span class="token comment"># yum install git    # 利用 yum 安装 git</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>root@72f1a8a0e394 /<span class="token punctuation">]</span><span class="token comment"># git --version   # 此时的容器中已经装有 git 了</span><span class="token function">git</span> version <span class="token number">1.8</span>.3.1</code></pre><p>然后按下 Ctrl+D 或者输入 exit 退出容器，然后查看当前所有容器：<code>docker ps -a</code>。这里将容器转化为一个镜像，即执行 commit 操作，完成后可使用 docker images 查看：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker ps -a</span>CONTAINER ID  IMAGE    COMMAND      CREATED   STATUS   PORTS    NAMES72f1a8a0e394  centos:latest <span class="token string">"/bin/bash"</span>  <span class="token number">9</span> minutes ago   Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">3</span> minutes ago      angry_hodgkin<span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker commit -m "Commit Message" -a "UserInfo" &lt;Container ID> &lt;user>/&lt;repo>:&lt;tag></span><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY       TAG    IMAGE ID         CREATED             SIZE<span class="token operator">&lt;</span>user<span class="token operator">></span>/<span class="token operator">&lt;</span>repo<span class="token operator">></span>    <span class="token function">git</span>    52166e4475ed     <span class="token number">5</span> seconds ago       <span class="token number">358.1</span> MBcentos           latest 0584b3d2cf6d     <span class="token number">9</span> days ago          <span class="token number">196.5</span> MB</code></pre><p>此时 Docker 引擎中就有了我们新建的镜像 <code>&lt;user&gt;/&lt;repo&gt;:&lt;tag&gt;</code>，此镜像和原有的 CentOS 镜像区别在于多了个 Git 工具。此时我们利用新镜像创建的容器，本身就自带 Git 了。</p><p><strong>方法 2：使用 <code>Dockerfile</code></strong></p><p>Dockerfile 可以理解为一种配置文件，用来告诉 <code>docker build</code> 命令应该执行哪些操作。一个简易的 <code>Dockerfile</code> 文件如下所示：</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile"># 说明该镜像以哪个镜像为基础FROM centos:latest# 构建者的基本信息MAINTAINER &lt;user&gt;# 在 build 这个镜像时执行的操作 RUN yum updateRUN yum install -y git# 拷贝本地文件到镜像中COPY .&#x2F;* &#x2F;usr&#x2F;share&#x2F;gitdir&#x2F;# Expose 对应端口，允许外部连接EXPOSE 3000</code></pre><p>官方教程链接：<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><p>有了 <code>Dockerfile</code> 之后，就可以利用 <code>build</code> 命令<strong>构建镜像</strong>了：</p><pre class="language-text" data-language="text"><code class="language-text">[root@xxx ~]# docker build -t="&lt;user>/&lt;repo>:&lt;tag>" .</code></pre><p>其中 -t 用来指定新镜像的用户信息、tag 等。最后的点表示在当前目录寻找 <code>Dockerfile</code>。</p><ul><li><p>删除容器或镜像</p><ul><li>删除容器：<code>docker rm container_name/container_id</code></li><li>删除镜像：<code>docker rmi image_name/image_id</code></li><li>删除镜像前必须先删除以此镜像为基础的容器。</li></ul></li><li><p>镜像的保存与加载</p><ul><li>保存镜像：<code>docker save -o centos.tar &lt;user&gt;/&lt;repo&gt;:&lt;tag&gt;</code></li><li>加载镜像：<code>docker load -i centos.tar</code></li></ul></li></ul><h2 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h2><ul><li>启动容器：<code>docker run [Options] &lt;Image&gt; [Command]</code><ul><li><code>-d</code>：Run container in background and print container ID</li><li><code>-e</code>：Set environment variables</li><li><code>-i</code>：Keep STDIN open even if not attached</li><li><code>-p &lt;host&gt;:&lt;container&gt;</code>：Publish a container’s port to the host</li><li><code>-t</code>：Allocate a pseudo-TTY</li><li><code>--name</code>：Assign a name to the container</li><li><code>-v &lt;host&gt;:&lt;container&gt;</code>：Mount host_path to container_path </li><li>常用命令：<code>docker run -itd centos:latest /bin/bash</code></li><li>如果想让容器一直运行，而不是停止，可以使用快捷键 Ctrl+P Ctrl+Q 退出，此时容器的状态为 Up。</li></ul></li><li>启动容器：<code>docker start &lt;container&gt;</code></li><li>停止容器：<code>docker stop container&gt;</code></li><li>重启容器：<code>docker restart &lt;container&gt;</code></li><li>进入已启动的容器：<code>docker attach &lt;container&gt;</code></li><li>复制文件：<code>docker cp &lt;container&gt;:&lt;path&gt; &lt;host_path&gt;</code></li></ul><h2 id="Repositories"><a href="#Repositories" class="headerlink" title="Repositories"></a>Repositories</h2><ul><li>官方镜像服务器：<a href="https://hub.docker.com">https://hub.docker.com</a></li><li>登录 DockerHub：<code>docker login</code></li><li>推送本地镜像：<code>docker push &lt;username&gt;/&lt;repo&gt;:&lt;tag&gt;</code><ul><li><code>username</code> 必须与你 Docker Hub 中的用户名一致</li></ul></li><li>拉取远端镜像：<code>docker pull &lt;username&gt;/&lt;repo&gt;:&lt;tag&gt;</code></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/23599229">https://zhuanlan.zhihu.com/p/23599229</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/02/11/MbaA67dgptL9YBc.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境不同，可能导致软件在开发环境中能运行，而到了生产环境无法运行的情况。&lt;/p&gt;
&lt;p&gt;用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。&lt;/p&gt;
&lt;p&gt;环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，&lt;strong&gt;安装的时候，把原始环境一模一样地复制过来&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个问题的一种解决方式是使用&lt;strong&gt;虚拟机&lt;/strong&gt;，比如我们常用的 WSL，就是在 Windows 系统中运行 Linux 虚拟系统的例子。但是，这样做的资源占用多，要重新配置一个全新操作系统的冗余步骤多，启动起来也十分缓慢。于是，Linux 发展出了另一种虚拟化技术：&lt;strong&gt;虚拟容器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。&lt;/strong&gt;或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。&lt;/strong&gt;它是目前最流行的 Linux 容器解决方案。&lt;/p&gt;
&lt;p&gt;Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。&lt;/p&gt;
&lt;p&gt;总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="技术/后端" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/%E6%8A%80%E6%9C%AF-%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Docker" scheme="https://www.c7w.tech/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Solving Wordle Using Information Theory 字幕及截图</title>
    <link href="https://www.c7w.tech/solving-wordle-using-infomation-theory/"/>
    <id>https://www.c7w.tech/solving-wordle-using-infomation-theory/</id>
    <published>2022-02-09T07:35:22.000Z</published>
    <updated>2022-02-09T08:29:03.579Z</updated>
    
    <content type="html"><![CDATA[<p>视频链接：<a href="https://www.youtube.om/watch?v=v68zYyaEmEA">https://www.youtube.om/watch?v=v68zYyaEmEA</a></p><p>The game Wordle has gone pretty viral in the last month or two, and never one to overlook an opportunity for a math lesson, it occurs to me that this game makes for a very good central example in a lesson about information theory, and in particular a topic known as entropy.</p><p><img src="https://s2.loli.net/2022/02/09/qEurwPIfFleZXxH.png" alt="image-20220209153901098"></p><p>You see like a lot of people I got kind of sucked into the puzzle, and like a lot of programmers I also got sucked into trying to write an algorithm that would play the game as optimally as it could.</p><a id="more"></a><p>What I thought I’d do here is just talk through with you some of my process in that, and explain some of the math that went into it, since the whole algorithm centers on this idea of entropy.</p><p><img src="https://s2.loli.net/2022/02/09/ZRVUzqtEAgydulF.png" alt="image-20220209153936071"></p><h2 id="What-is-Wordle"><a href="#What-is-Wordle" class="headerlink" title="What is Wordle?"></a>What is Wordle?</h2><p>First things first, in case you haven’t heard of it, what is Wordle? And to kill two birds with one stone here while we go through the rules of the game, let me also preview where we’re going with this, which is to develop a little algorithm that will basically play the game for us.</p><p>I haven’t done today’s Wordle, this is February 4th, and we’ll see how the bot does.</p><p><strong>The goal of Wordle is to guess a mystery five-letter word, and you’re given six different chances to guess.</strong></p><p>For example, my wordlebot suggests that I start with the guess “crane”.</p><p><strong>Each time that you make a guess, you get some information about how close your guess is to the true answer.</strong></p><p><img src="https://s2.loli.net/2022/02/09/VcihA67oex9HlEK.png" alt="image-20220209154123515"></p><p><strong>Here the gray box is telling me there’s no c in the actual answer, the yellow box is telling me there is an r but it’s not in that position. The green box is telling me that the secret word does have an a and it’s in the third position. And then there’s no ‘n’ and there’s no ‘e’.</strong></p><p>Let me just go in and tell the wordlebot about that information… we started with “crane”, we got gray yellow green grey grey…</p><p><img src="https://s2.loli.net/2022/02/09/yYrJl2hP39o8kMV.png" alt="image-20220209154314214"></p><p>Don’t worry about all the data that it’s showing right now, I’ll explain that in due time. Its top suggestion for our second pick is “shtik”. Your guess does have to be an actual five-letter word, but as you’ll see it’s pretty liberal with what it will actually let you guess.</p><p>In this case we try stick and…all right! Things are looking pretty good.</p><p>We hit the ‘s’ and the ‘h’, so we know the first three letters, and we know that there’s an ‘r’.</p><p>So it’s going to be like s-h-a something r or s-h-a-r-something.</p><p>And it looks like the Wordle-bot knows that it’s down to just two possibilities, either “shard” or “sharp”.</p><p><img src="https://s2.loli.net/2022/02/09/K2LFqOyxtXe1njI.png" alt="image-20220209154423328"></p><p>I’s kind of a toss-up between them at this point, so I guess probably just because it’s alphabetical it goes with shard, which…hooray! It is the actual answer.</p><p><img src="https://s2.loli.net/2022/02/09/Nk1zK8PglIqtGno.png" alt="image-20220209154457213"></p><p>So we got it in three. If you’re wondering if that’s any good, the way I heard one person phrase it is that with Wordle, four is par and three is birdie, which I think is a pretty apt analogy.</p><p>You have to be consistently on your game to be getting four but it’s certainly not crazy. But when you get it in three, it just feels great. </p><h2 id="Initial-Ideas"><a href="#Initial-Ideas" class="headerlink" title="Initial Ideas"></a>Initial Ideas</h2><p>If you’re down for it what I’d like to do here is just talk through my thought process from the beginning for how I approach the wordlebot. And like I said really it’s an excuse for an information theory lesson, <strong>the main goal is to explain what is information and what is entropy</strong>. </p><p>My first thought in approaching this was to take a look at the relative frequencies of different letters in the english language.</p><p><img src="https://s2.loli.net/2022/02/09/tTjM6GAB5wrPKmV.png" alt="image-20220209154730755"></p><p>I thought, okay, is there an opening guess or an opening pair of guesses that hits a lot of these most frequent letters.</p><p>Once that I was pretty fond of was doing “other” followed by “nails”.</p><p><img src="https://s2.loli.net/2022/02/09/gYUZmdHpfyucPz6.png" alt="image-20220209154803058"></p><p>The thought is that if you hit a letter, you know you get a green or a yellow, that always feels good, it feels like you’re getting information.But in these cases even if you don’t hit and you always get greys, that’s still giving you a lot of information, since it’s pretty rare to find a word that doesn’t have any of these letters.</p><p>But even still that doesn’t feel super systematic, because for example it does nothing to consider the order of the letters.</p><p>Why type “nails” when I could type “snail”.</p><p>Is it better to have that s at the end? I’m not really sure. Now a friend of mine said that he liked to open with the word “weary”, which kind of surprised me because it has some uncommon letters in there like the ‘w’ and the ‘y’.</p><p>But who knows, maybe that is a better opener.</p><p><strong>Is there some kind of quantitative score that we can give to judge the quality of a potential guess?</strong> To set up for the way that we’re going to rank possible guesses, let’s go back and add a little clarity to how exactly the game is set up.</p><p>There’s a list of words that it will allow you to enter, that are considered valid guesses, that’s just about 13,000 words long.</p><p>But when you look at it there’s a lot of really uncommon things things like “aahed” or “aalii” and “aargh”.</p><p>The kind of words that bring about family arguments in a game of Scrabble.</p><p>But the vibe of the game is that the answer is always going to be a decently common word, and in fact there’s another list of around 2,300 words that are the possible answers.</p><p><img src="https://s2.loli.net/2022/02/09/KrcWQZMwJhz73mq.png" alt="image-20220209154934933"></p><p>This is a human-curated list, I think specifically by the game creator’s girlfriend which is kind of fun. <strong>But what I would like to do, our challenge for this project, is to see if we can write a program solving Wordle that doesn’t incorporate previous knowledge about this list (Answer list).</strong></p><p>For one thing there’s plenty of pretty common five letter words that you won’t find in that list, so it would be better to write a program that’s a little more resilient and would play Wordle against anyone, not just what happens to be the official website.</p><p>And also, the reason that we know what this list of possible answers is is because it’s visible in the source code, but the way that it’s visible in the source code is in the specific order in which answers come up from day to day, so you could always just look up what tomorrow’s answer will be.</p><p>So clearly there’s some sense in which using the list is cheating, and what makes for a more interesting puzzle and a richer information theory lesson is to instead use some more universal data, like relative word frequencies in general, to capture this intuition of having a preference for more common words.</p><p>So! Of these 13,000 possibilities, how should we choose the opening guess? For example if my friend proposes “weary”, how should we analyze its quality? Well the reason he said he likes that unlikely ‘w’ is that he likes the long shot nature of just how good it feels if you do hit that ‘w’.</p><p>For example if the first pattern revealed was something like this, then it turns out there are only 58 words in this giant lexicon that match that pattern, so that’s a huge reduction from 13,000.</p><p>But the flip side of that, of course, is that it’s very uncommon to get a pattern like this.</p><p>Specifically, if each word was equally likely to be the answer, the probability of hitting this pattern would be 58 divided by around 13,000. Of course, they’re not equally likely to be answers, most of these are very obscure and even questionable words, but at least for our first pass at all of this let’s assume that they’re all equally likely, then refine that a bit later.</p><p>The point is the pattern with a lot of information is by its very nature unlikely to occur.</p><p><strong>In fact what it means to be informative is that it’s unlikely.</strong></p><p>A much more probable pattern to see with this opening would be something like this, where of course there’s not a ‘w’ in it, maybe there’s an ‘e’ and maybe there’s no ‘a’, there’s no ‘r’, and there’s no ‘y’.</p><p>In this case there are 1,400 possible matches.</p><p>So if all were equally likely, it works out to be a probability of about 11% that this is the pattern you would see.</p><p><strong>So the most likely outcomes are also the least informative.</strong> To get a more global view here, let me show you the full distribution of probabilities across all of the different patterns that you might see.</p><p><img src="https://s2.loli.net/2022/02/09/Wf9udeVOsp76Phm.png" alt="image-20220209155232751"></p><p>Each bar that you’re looking at corresponds to a possible pattern of colors that could be revealed, of which there are 3^5 possibilities. And they’re organized from left to right, most common to least common.</p><p>So the most common possibility here is that you get all grays, that happens about 14% of the time.</p><p>What you’re hoping for when you make a guess is that you end up somewhere out in this long tail, like over here where there’s only 18 possibilities for what matches this pattern, that evidently look like this.</p><p>Or if we venture a little farther to the left…you know maybe we go all the way over here…okay here’s a good puzzle for you.</p><p>What are the three words in the english language that start with a ‘w’ end with a ‘y’ and have an ‘r’ somewhere in them? It turns out the answers are…</p><p>let’s see…”wordy” “wormy” and “wrily”. </p><p>To judge how good this word is overall, we want some kind of measure of the expected amount of information that you’re going to get from this distribution.</p><p>If we go through each pattern and we multiply its probability of occurring times something that measures how informative it is, that can maybe give us an objective score.</p><p><img src="https://s2.loli.net/2022/02/09/Av92qkau3UCL5Vn.png" alt="image-20220209155405454"></p><p>Now your first instinct for what that something should be might be the number of matches, you know you want a lower average number of matches, but instead I’d like to use a more universal measurement that we often ascribe to information, and one that will be more flexible once we have a different probability assigned to each of these 13,000 words for whether or not they’re actually the answer.</p><h2 id="Information-Theory-Basics"><a href="#Information-Theory-Basics" class="headerlink" title="Information Theory Basics"></a>Information Theory Basics</h2><p>The standard unit of information is the bit, which has a little bit of a funny formula, but it’s really intuitive if we just look at examples.</p><p>If you have an observation that cuts your space of possibilities in half, we say that it has one bit of information. In our example the space of possibilities is all possible words, and it turns out about half of the five letter words have an ‘s’, a little less than that but about half.</p><p><img src="https://s2.loli.net/2022/02/09/pnDBUbVrWLX87zO.png" alt="image-20220209155501486"></p><p>So that observation would give you one bit of information.</p><p>If instead a new fact chops down that space of possibilities by a factor of four, we say that it has two bits of information.</p><p>For example it turns out about a quarter of these words have a ‘t’.</p><p>If the observation cuts that space by a factor of eight, we say it has three bits of information, and so on and so forth.</p><p>Four bits cuts it into a sixteenth, five bits cuts it into a 32nd.</p><p><img src="https://s2.loli.net/2022/02/09/EZtzMDXKNHLu1bj.png" alt="image-20220209155530333"></p><p>So now is when you might want to take a moment to pause and ask for yourself, what is the formula for information, for the number of bits in terms of the probability of an occurrence? Well, what we’re saying here is basically that when you take one half to the number of bits, that’s the same thing as the probability, which is the same thing as saying 2 to the power of the number of bits is 1 over the probability, which rearranges further to saying the information is the log base 2 of 1 divided by the probability.</p><p><img src="https://s2.loli.net/2022/02/09/r9mxnBdh6Kv7tpQ.png" alt="image-20220209155601625"></p><p>And sometimes you see this with one more rearrangement still, where the information is the negative log base 2 of the probability.</p><script type="math/tex; mode=display">I = - \log_2(p)</script><p>Expressed like this it can look a little bit weird to the uninitiated, but it really is just the very intuitive idea of asking how many times you’ve cut down your possibilities in half.</p><p>Now if you’re wondering, you know, I thought we were just playing a fun word game why are logarithms entering the picture? One reason this is a nicer unit is it just a lot easier to talk about very unlikely events.</p><p>Much easier to say that an observation has 20 bits of information than it is to say that the probability of such and such occurring is 0.00000095.</p><p>But a more substantive reason that this logarithmic expression turned out to be a very useful addition to the theory of probability is the way that <strong>information adds together</strong>.</p><p>For example if one observation gives you two bits of information, cutting your space down by four, and then a second observation, like your second guess in Wordle, gives you another three bits of information, chopping you down further by another factor of eight, the two together give you five bits of information.</p><p><img src="https://s2.loli.net/2022/02/09/26ZwfmLz4W7CDIE.png" alt="image-20220209155733905"></p><p>In the same way that probabilities like to multiply, Information likes to add.</p><p>So as soon as we’re in the realm of something like an expected value, where we’re adding a bunch of numbers up, the logs make it a lot nicer to deal with.Let’s go back to our distribution for weary and add another little tracker on here showing us how much information there is for each pattern.</p><p>The main thing I want you to notice is that <strong>the higher the probability, as we get to those more likely patterns, the lower the information, the fewer bits you gain.</strong></p><p><img src="https://s2.loli.net/2022/02/09/Jj7mgwP2xGFpV8d.png" alt="image-20220209155818230"></p><p>The way we measure the quality of this guess will be to take the expected value of this information, where we go through each pattern, we say how probable is it, and then we multiply that by how many bits of information do we get.</p><p><img src="https://s2.loli.net/2022/02/09/obpnzMEUHyArOs6.png" alt="image-20220209155839919"></p><p>And in the example of weary, that turns out to be 4.9 bits. So on average, the information you get from this opening guess is as good as chopping your space of possibilities in half about five times.</p><p>By contrast, an example of a guess with a higher expected information value would be something like “slate”.</p><p>In this case you’ll notice the distribution looks a lot flatter, in particular the most probable occurrence of all grays only has about a 6% chance of occurring.</p><p><img src="https://s2.loli.net/2022/02/09/rnp6IsjAbRkEHae.png" alt="image-20220209155905333"></p><p>So at minimum you’re getting, evidently, 3.9 bits of information. But that’s a minimum, more typically you’d get something better than that.</p><p>And it turns out when you crunch the numbers on this one and you add up all of the relevant terms, the average information is about 5.8.</p><p><img src="https://s2.loli.net/2022/02/09/jq79CUDv3tNucnp.png" alt="image-20220209160058972"></p><p>So in contrast with weary your space of possibilities will be about half as big after this first guess, on average. There’s actually a fun story about the name for this expected value of information quantity.</p><p>You see information theory was developed by Claude Shannon, who was working at Bell labs in the 1940s.</p><p>He was talking about some of his yet-to-be-published ideas with John von Neumann, who was this intellectual giant of the time, a very prominent in math and physics and the beginnings of what was becoming computer science.</p><p>And when he mentioned that he didn’t really have a good name for this expected value of information quantity, von Neumann supposedly said, so the story goes, “well you should call it <strong>Entropy</strong>, and for two reasons.</p><p>In the first place your uncertainty function has been used in statistical mechanics under that name, so it already has a name.</p><p>And in the second place, and more important, nobody knows what entropy really is, so in a debate you’ll always have the advantage.”So if the name seems a little bit mysterious, and if this story is to be believed, that’s kind of by design.</p><p>Also, if you’re wondering about its relation to all of that second law of thermodynamics stuff from physics, there definitely is a connection, but in its origins Shannon was just dealing with pure probability theory.</p><p>And for our purposes here, when I use the word entropy, I just want you to think the expected information value of a particular guess.You can think of entropy as measuring two things simultaneously.</p><p>The first one is how flat is the distribution. The closer a distribution is to uniform, the higher that entropy will be.</p><p>In our case, where there are 3^5 total patterns, for a uniform distribution, observing any one of them would have information log_2(3^5), which happens to be 7.92.</p><p>So that is the absolute maximum that you could possibly have for this entropy.</p><p><img src="https://s2.loli.net/2022/02/09/nA6pmjhPRetwYLD.png" alt="image-20220209160237737"></p><p>But entropy is also kind of a measure of how many possibilities there are in the first place.</p><p>For example if you happen to have some word where there’s only 16 possible patterns, and each one is equally likely, this entropy, this expected information, would be four bits.</p><p>But if you have another word where there are 64 possible patterns that could come up, and they’re all equally likely, then the entropy would work out to be six bits.</p><p>So if you see some distribution out in the wild that has an entropy of six bits, it’s sort of like it’s saying there’s as much variation and uncertainty in what’s about to happen as if there were 64 equally likely outcomes.</p><p>For my first pass at the worldbot, I basically had it just do this. It goes through all of the different possible guesses that you could have, all 13,000 words.</p><p><strong>It computes the entropy for each one, or more specifically the entropy of the distribution across all patterns that you might see for each one, and then it picks the highest, since that’s the one that’s likely to chop down your space of possibilities as much as possible. And even though I’ve only been talking about the first guess here it does the same thing for the next few guesses.</strong></p><p>For example, after you see some pattern on that first guess, which would restrict you to a smaller number of possible words based on what matches with that, you just play the same game with respect to that smaller set of words.</p><p>For a proposed second guess, you look at the distribution of all patterns that could occur from that more restricted set of words.</p><p>You search through all 13,000 possibilities, and you find the one that maximizes that entropy. To show you how this works in action let me just pull up a little variant of Wordle that I wrote that shows the highlights of this analysis in the margins.</p><p>So after doing all its entropy calculations, on the right here it’s showing us which ones have the highest expected information.</p><p><img src="https://s2.loli.net/2022/02/09/psOiFTtw4RazxgV.png" alt="image-20220209160445358"></p><p>It turns out the top answer, at least at the moment we’ll refine this later, is “tares”, which means…um…of course, a vetch the most common vetch.Each time we make a guess here, where maybe I kind of ignore its recommendations and go with slate, because I like slate, we can see how much expected information it had.</p><p>But then on the right of the word here it’s showing us how much actual information we got given this particular pattern.</p><p>So here it looks like we were a little unlucky.</p><p>We were expected to get 5.8, but we happened to get something with less than that.</p><p>And then on the left side here it’s showing us all of the different possible words given where we are now.</p><p>The blue bars are telling us how likely it thinks each word is, so at the moment it’s assuming each word is equally likely to occur, but we’ll refine that in a moment.</p><p><img src="https://s2.loli.net/2022/02/09/p1UQW4CPo7uyMLD.png" alt="image-20220209160549360"></p><p>And then this uncertainty measurement is telling us the entropy of this distribution across the possible words, which right now, because it’s a uniform distribution, is just a needlessly complicated way to count the number of possibilities.</p><p>For example, if we were to take 2 to the power of 13.66, that should be around the 13,000 possibilities.</p><p>It’ a little bit off here, but only because I’m not showing all the decimal places.At the moment that might feel redundant, and like it’s overly complicating things, but you’ll see why it’s useful to have both numbers in a minute. Here it looks like it’s suggesting the highest entropy for our second guess is “ramin”, which again…just really doesn’t feel like a word.</p><p>So to take the moral high ground here I’m going to go ahead and type in “rains”.</p><p>Again it looks like we were a little unlucky, we were expecting 4.3 bits and we only got 3.39 bits of information.</p><p>So that takes us down to 55 possibilities. And here maybe I’ll just actually go with what it’s suggesting, which is “kombu”, whatever that means.</p><p>Okay! This is actually a good chance for a puzzle.</p><p>It’s telling us this pattern gives us 4.78 bits of information, but over on the left before we see that pattern there were 5.78 bits of uncertainty.</p><p><img src="https://s2.loli.net/2022/02/09/JlVRyZmhEcN7g9K.png" alt="image-20220209160719833"></p><p>So as a quiz for you, what does that mean about the number of remaining possibilities? Well it means that we’re reduced down to 1 bit of uncertainty, which is the same thing as saying that there’s two possible answers, it’s a 50/50 choice.</p><p>And from here, because you and I know which words are more common, we know that the answer should be “abyss”.</p><p>But as it’s written right now the program doesn’t know that, so it just keeps going trying to gain as much information as it can until there’s only one possibility left, and then it guesses it.</p><p>So obviously we need a better endgame strategy, but let’s say we call this version one of our Wordle solver and then we go and run some simulations to see how it does.</p><p>The way this is working is it’s playing every possible Wordle game, it’s going through all of those 2,315 words that are the actual Wordle answers, it’s basically using that as a testing set, and with this naive method of not considering how common a word is and just trying to maximize the information at each step along the way until it gets down to one and only one choice, by the end of the simulation the average score works out to be about 4.124.</p><p>Which…you know it’s not bad.</p><p>To be honest I kind of expected to do worse. But the people who play Wordle will tell you that they can usually get it in four.</p><p>The real challenge is to get as many in three as you can.</p><p>It’s a pretty big jump between the score four and the score of three.</p><p>The obvious low-hanging fruit here is to somehow incorporate whether or not a word is common, and how exactly do we do that?</p><h2 id="Incorporating-Word-Frequencies"><a href="#Incorporating-Word-Frequencies" class="headerlink" title="Incorporating Word Frequencies"></a>Incorporating Word Frequencies</h2><p>The way I approached it is to get a list of the relative frequencies for all of the words in the english language.</p><p>I just used Mathematica’s word frequency data function, which itself pulls from the google books english n-gram public dataset.</p><p>And it’s kind of fun to look at, for example if we sort it from the most common words to the least common words, evidently these are the most common five letter words in the english language.</p><p><img src="https://s2.loli.net/2022/02/09/WKVlt4IXGFPySqD.png" alt="image-20220209161017067"></p><p>Or rather, “these” is the eighth most common.</p><p>First is “which” after which there’s “there” and “their”.</p><p>“First” itself is not first but ninth, and it makes sense that these other words could come about more often, where those after “first” are “after,” “where”, and “those”, being just a little bit less common.</p><p>Now, in using this data to model how likely each of these words is to be the final answer, it shouldn’t just be proportional to the frequency.</p><p>Because for example “which” is given a score of 0.002 in this data set, whereas the word “braid” is in some sense about a thousand times less likely.</p><p><img src="https://s2.loli.net/2022/02/09/g2QwhfeLoIFs3Ak.png" alt="image-20220209161048640"></p><p>But both of these are common enough words that they’re almost certainly worth considering, so we want more of a binary cutoff.</p><p>The way I went about it is to imagine taking this whole sorted list of words, and then arranging it on an x-axis, and then applying the sigmoid function, which is the standard way to have a function whose output is basically binary, it’s either zero or it’s one, but there’s a smoothing in between for that region of uncertainty.</p><p><img src="https://s2.loli.net/2022/02/09/iNd4FsV3zk2ZtoD.png" alt="image-20220209161137592"></p><p>So essentially the probability that I’m assigning to each word for being in the final list will be the value of the sigmoid function above wherever it sits on the x-axis.</p><p>Now obviously this depends on a few parameters, for example how wide a space on the x-axis those words fill determines how gradually or steeply we drop off from one to zero, and where we situate them left to right determines the cut off. (取决于输入维度的区间宽度及范围)</p><p>And to be honest the way I did this was kind of just licking my finger and sticking it into the wind.</p><p>I looked through the sorted list and tried to find a window where when I looked at it, I figured about half of these words are more likely than not to be the final answer. And I use that as the cutoff. </p><p><img src="https://s2.loli.net/2022/02/09/MTYE4pyde8aNinZ.png" alt="image-20220209161310497"></p><p>Now once we have a distribution like this across the words, it gives us another situation where entropy becomes this really useful measurement. For example let’s say we were playing a game and we start with my old openers which were “other” and “nails”, and we end up with a situation where there’s four possible words that match it.</p><p>And let’s say we consider them all equally likely.</p><p><img src="https://s2.loli.net/2022/02/09/DwzTrXiO8jM241U.png" alt="image-20220209161353273"></p><p>Let me ask you, what is the entropy of this distribution? Well the information associated with each one of these possibilities is going to be the log_2(4), since each one is 1/4, and that’s 2.</p><p>It’s two bits of information, 4 possibilities, all very well and good. But! What if I told you that actually there are more than four matches.</p><p>In reality, when we look through the full word list, there are 16 words that match it.</p><p>But suppose our model puts a really low probability on those other 12 words of actually being the final answer, something like one in a thousand, because they’re really obscure.</p><p>Now let me ask you, what is the entropy of this distribution? If entropy was purely measuring the number of matches here, then you might expect it to be something like the log_2(16), which would be 4. Two more bits of uncertainty than we had before.</p><p>But of course, the actual uncertainty is not really that different from what we had before.</p><p>Just because there’s these 12 really obscure words doesn’t mean that it would be all that more surprising to learn that the final answer is “charm”, for example.</p><p>So when you actually do the calculation here, and you add up the probability of each occurrence times the corresponding information, what you get is 2.11 bits.</p><p><img src="https://s2.loli.net/2022/02/09/lfBS7JXdjD2M4ao.png" alt="image-20220209161502273"></p><p>It’s saying it’s basically two bits, it’s basically those four possibilities, but there’s a little more uncertainty because of all of those highly unlikely events though if you did learn them you’d get a ton of information from it.</p><p>So zooming out, this is part of what makes Wordle such a nice example for an information theory lesson.</p><p><strong>We have these two distinct feeling applications for entropy, the first one telling us what’s the expected information we’ll get from a given guess, and the second one saying can we measure the remaining uncertainty among all of the words that are possible.</strong></p><p>And I should emphasize, in that first case where we’re looking at the expected information of a guess, once we have an unequal weighting to the words, that affects the entropy calculation.</p><p>For example let me pull up that same case we were looking at earlier of the distribution associated with “weary”, but this time using a non-uniform distribution across all possible words.</p><p>So let me see if I can find a part here that illustrates it pretty well…uh okay, here, this is pretty good.</p><p>Here we have two adjacent patterns that are about equally likely but one of them, we’re told, has 32 possible words that match it.</p><p>And if we check what they are, these are those 32, which are all just very unlikely words.</p><p><img src="https://s2.loli.net/2022/02/09/GDQVr1hBYo5P7W6.png" alt="image-20220209161706837"></p><p>As you scan your eyes over them it’s hard to find any that feel like plausible answers.</p><p>Maybe “yells”? But if we look at the neighboring pattern in the distribution, which is considered just about as likely, we’re told that it only has eight possible matches.</p><p>So a quarter as many matches, but it’s about as likely.</p><p>And when we pull up those matches, we can see why.</p><p><img src="https://s2.loli.net/2022/02/09/ayRoFKzOZTmAWjH.png" alt="image-20220209161727181"></p><p>Some of these are actual plausible answers like “wring” or “wrath” or “wraps”.</p><p>To illustrate how we incorporate all that, let me pull up version 2 of the wordlebot here. There are two or three main differences from the first one that we saw.</p><p>First off, like I just said, the way that we’re computing these entropies, these expected values of information, is now using the more refined distributions across the patterns that incorporates the probability that a given word would actually be the answer. As it happens, “tares” is still number one, though the ones following are a bit different. </p><p><img src="https://s2.loli.net/2022/02/09/HevyU5hxcwrXpKQ.png" alt="image-20220209161825240"></p><p>Second, when it ranks its top picks, it’s now going to keep a model of the probability that each word is the actual answer, and it’ll incorporate that into its decision, which is easier to see once we have a few guesses on the table.</p><p>Again ignoring its recommendation, because we can’t let machines rule our lives…And I suppose I should mention another thing different here is over on the left, that uncertainty value, that number of bits, is no longer just redundant with the number of possible matches.</p><p>Now if we pull it up, and you know, we calculated, say, 2 to the 8.02, which would be a little above 256…I guess 259.</p><p><img src="https://s2.loli.net/2022/02/09/2jCnzwULoJIKV1i.png" alt="image-20220209161923324"></p><p>What it’s saying is even though there are 526 total words that actually match this pattern, the amount of uncertainty it has is more akin to what it would be if there were 259 equally likely outcomes.</p><p>You could think of it like this, it knows “borks” is not the answer same with “yortz” and “zoril” and “zorus”.</p><p>So it’s a little less uncertain than it was in the previous case, this number of bits will be smaller.</p><p>And if I keep playing the game, I’ll refining this down with a couple guesses that are apropos of what I would like to explain here…By the fourth guess, if you look over at its top picks, you can see it’s no longer just maximizing the entropy.</p><p>At this point, there’s technically seven possibilities, but the only ones with a meaningful chance are “dorms” and “words”, and you can see it ranks choosing both of those above all of these other values that, strictly speaking, would give more information.</p><p><img src="https://s2.loli.net/2022/02/09/wpbVlZ5EDegxfOY.png" alt="image-20220209162134927"></p><p>The very first time I did this I just added up these two numbers to measure the quality of each guess, which actually worked better than you might suspect.</p><p>But it really didn’t feel systematic.</p><p>I’m sure there are other approaches people could take, but here’s the one I landed on.</p><p>If we’re considering the prospect of a next guess, like in this case “words”, what we really care about is the expected score of our game if we do that.</p><p>And to calculate that expected score, we say “what’s the probability that ‘words’ is the actual answer?”, which at the moment it ascribes 58% to.</p><p>So we say with a 58% chance, our score in this game would be four, and then with the probability of one minus that 58 percent, our score will be more than that four.How much more? We don’t know, but we can estimate it based on how much uncertainty there’s likely to be once we get to that point.</p><p><img src="https://s2.loli.net/2022/02/09/SKobMxvZHJB4pP2.png" alt="image-20220209162242496"></p><p>Specifically, at the moment there are 1.44 bits of uncertainty, if we guess “words” it’s telling us the expected information we’ll get is 1.27 bits, so if we guess “words” this difference represents how much uncertainty we’re likely to be left with after that happens.</p><p>What we need is some kind of function, which I’m calling $f$ here, that associates this uncertainty with an expected score.</p><p>The way I went about this was to just plot a bunch of the data from previous games based on version one of the bot, to say “hey what was the actual score after various points with certain very measurable amounts of uncertainty?” For example, these data points here that are sitting above a value that’s around 8.7 or so are saying “for some games, after a point at which there were 8.7 bits of uncertainty, it took two guesses to get the final answer.</p><p><img src="https://s2.loli.net/2022/02/09/CH8We4Z9a7hm2PS.png" alt="image-20220209162411016"></p><p>For other games it took three guesses, for other games it took four guesses.”If we shift over to the left here, all the points over zero are saying “whenever there are zero bits of uncertainty, which is to say there’s only one possibility, then the number of guesses required is always just one”, which is reassuring.</p><p>Whenever there was one bit of uncertainty, meaning it was essentially just down to two possibilities, then sometimes it required one more guess sometimes it required two more guesses, and so on and so forth.</p><p>Here, maybe a slightly easier way to visualize this data is to bucket it together and take averages.</p><p><img src="https://s2.loli.net/2022/02/09/Kcf2tdrQmqRPC3l.png" alt="image-20220209162433488"></p><p>For example, this bar here is saying “among all the points where we had one bit of uncertainty, on average the number of new guesses required was about 1.5.”And the bar over here saying “among all of the different games were at some point the uncertainty was a little above 4 bits, which is like narrowing it down to 16 different possibilities, then on average it requires a little more than two guesses from that point forward”.</p><p>And from here I just did a regression to fit a function that seemed reasonable to this.And remember the whole point of doing any of that is so that we can quantify this intuition that the more information we gain from a word, the lower the expected score will be.</p><h2 id="Final-Performance"><a href="#Final-Performance" class="headerlink" title="Final Performance"></a>Final Performance</h2><p>So with this as version 2.0, if we go back and we run the same set of simulations, having it play against all 2,315 possible Wordle answers, how does it do? Well in contrast to our first version, it’s definitely better, which is reassuring. All said and done, the average is around 3.6.</p><p>Although unlike the first version, there are a couple times that it loses and requires more than six in this circumstance, presumably because there are times when it’s making that trade-off to actually go for the goal, rather than maximizing information.</p><p>So can we do better than 3.6? We definitely can. I said at the start that it’s most fun to try not incorporating the true list of Wordle answers into the way that it builds its model.</p><p>But if we do incorporate it, the best performance I could get was around 3.43.</p><p><img src="https://s2.loli.net/2022/02/09/KPkag9GVXID2nlW.png" alt="image-20220209162714823"></p><p>So if we try to get more sophisticated than just using word frequency data to choose this prior distribution, this 3.43 probably gives a max at how good we could get with that. Or at least how good I could get with that.</p><p>That best performance essentially just uses the ideas that I’ve been talking about here, but it goes a little farther.</p><p>Like it does a search for the expected information two steps forward, rather than just one.</p><p>Originally I was planning on talking more about that, but I realize we’ve actually gone quite long as it is.</p><p><img src="https://s2.loli.net/2022/02/09/rOoiW9mEnjU7PRu.png" alt="image-20220209162754003"></p><p>The one thing I’ll say is after doing this two-step search, and then running a couple sample simulations in the top candidates, so far for me at least it’s looking like “crane” is the best opener.</p><p>Who would have guessed?Also if you use the true word list to determine your space of possibilities then the uncertainty you start with is a little over 11 bits.</p><p>And it turns out, just from a brute force search, the maximum possible expected information after the first two guesses is around 10 bits, which suggests that, best case scenario after your first two guesses, with perfectly optimal play, you’ll be left with around one bit of uncertainty, which is the same as being down to two possible guesses.</p><p>So I think it’s fair, and probably pretty conservative, to say that you could never possibly write an algorithm that gets this average as low as 3, because with the words available to you there’s simply not room to get enough information after only two steps to be able to guarantee the answer in the third slot every single time without fail.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;视频链接：&lt;a href=&quot;https://www.youtube.om/watch?v=v68zYyaEmEA&quot;&gt;https://www.youtube.om/watch?v=v68zYyaEmEA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The game Wordle has gone pretty viral in the last month or two, and never one to overlook an opportunity for a math lesson, it occurs to me that this game makes for a very good central example in a lesson about information theory, and in particular a topic known as entropy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/02/09/qEurwPIfFleZXxH.png&quot; alt=&quot;image-20220209153901098&quot;&gt;&lt;/p&gt;
&lt;p&gt;You see like a lot of people I got kind of sucked into the puzzle, and like a lot of programmers I also got sucked into trying to write an algorithm that would play the game as optimally as it could.&lt;/p&gt;</summary>
    
    
    
    <category term="理论" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/"/>
    
    <category term="理论/信息论" scheme="https://www.c7w.tech/categories/%E7%90%86%E8%AE%BA/%E7%90%86%E8%AE%BA-%E4%BF%A1%E6%81%AF%E8%AE%BA/"/>
    
    
    <category term="信息论" scheme="https://www.c7w.tech/tags/%E4%BF%A1%E6%81%AF%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>VSCode 配置指北</title>
    <link href="https://www.c7w.tech/vscode/"/>
    <id>https://www.c7w.tech/vscode/</id>
    <published>2022-02-09T03:49:16.000Z</published>
    <updated>2022-02-13T08:44:35.991Z</updated>
    
    <content type="html"><![CDATA[<p>VSCode 是一款<strong>轻量级</strong>的<strong>代码编辑器</strong>，可以通过安装各种各样不同<strong>扩展</strong>的方式来实现开发者所需要的功能。</p><blockquote><p>区分：代码编辑器（Editor）与集成开发环境（IDE, Integrated Development Environment）</p><p>代码编辑器事实上我们可以看成是一个记事本（没错，如果是 Windows 用户，就是你按下 Win+R 输入 notepad 回车之后的那个记事本），其最基本的功能是文档编辑。不过之所以将其称为是<strong>代码编辑器</strong>，是因为它虽然继承自一般的文档编辑器，又具备了一些一般的文档编辑器所不具备的功能。具体来说，例如自动语法高亮，自动补全，甚至是自动代码重构等等。</p><p>集成开发环境（IDE）是一种用于构建应用程序的软件，<strong>可将常用的开发人员工具合并到单个图形用户界面</strong>（GUI）中。具体来说，我们只需要简单的点击按钮，可能就可以完成程序的编译、链接、运行、调试等等工作。而这些工作在最初都是需要人手工在命令行中完成的。我们在《程序设计基础》课程中最初使用的 Dev-C++ 便是一个集成开发环境。</p></blockquote><p>我们今天要介绍的 VSCode 是一款轻量级的<strong>代码编辑器</strong>。如果没有各种扩展插件的支持的话，可能我们只能把它称作是大号的 Notepad++，而正是因为社区中各种各样的扩展，VSCode 才得以展现其强大。</p><p><img src="https://s2.loli.net/2022/02/09/psKk8yJ2CxMic1O.png" alt="image-20220209114623794"></p><p>本文我们介绍 VSCode 的基本配置，重点在于介绍一些未来可能会用到的扩展插件。按照本文的流程完成后，你应该等效地完成了足以应对《面向对象程序设计基础》课程中的代码的集成开发环境的配置。此外，我们还会介绍一些基本的调试方法，而这恰恰是 VSCode 比 Dev-C++ 在现阶段不知道高到哪里去的地方。</p><p>事实上，在未来，我们可以用 VSCode 配置 Python 开发环境，配置软件工程课程中所需要的框架的开发环境，而这些都是通过“扩展”（Extension）来实现的。</p><a id="more"></a><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>了解一个 C++ 程序从源代码到可执行程序中发生了编译、链接这两步操作（《程序设计基础》大作业中会有此部分的讲解）</li><li>动手能力</li></ul><h2 id="下载与运行"><a href="#下载与运行" class="headerlink" title="下载与运行"></a>下载与运行</h2><ul><li>打开 VSCode 官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li><li>点击大大的 Download 按钮（如果是 Windows 64 位用户可以点击下拉框选择 x64 安装包版本）</li><li>进行安装或解压缩（注意路径中不能存在任何中文字符，推荐仅用字母和数字）</li><li>到你安装 VSCode 的目录下，新建 <code>data</code> 文件夹</li></ul><blockquote><p>这里我们新建 <code>data</code> 文件夹后，之后 VSCode 运行时的扩展插件和用户数据便都会存放在 <code>data</code> 文件夹下，这样可以在一定程度上避免系统盘容量占用的问题。如果不新建 <code>data</code> 文件夹，那么 VSCode 会将上述插件和用户信息存放在系统盘的用户目录下。</p><p><img src="https://s2.loli.net/2022/02/09/IsPShQ2nLyqmwH8.png" alt="image-20220209213021194"></p></blockquote><h2 id="C-相关开发环境配置"><a href="#C-相关开发环境配置" class="headerlink" title="C++ 相关开发环境配置"></a>C++ 相关开发环境配置</h2><h3 id="环境变量与-Mingw64"><a href="#环境变量与-Mingw64" class="headerlink" title="环境变量与 Mingw64"></a>环境变量与 Mingw64</h3><p>我们可以先打开终端（Windows 用户请使用 Win+R，输入 <code>cmd</code>），尝试输入：</p><pre class="language-bash" data-language="bash"><code class="language-bash">g++ --version</code></pre><p>如果你的终端返回了 <code>g++</code> 的版本信息，恭喜，您 C++ 编译器的环境变量配置正确，可以跳过这一小节。当然，如果想更加详细地了解环境变量是什么，可以继续阅读这一小节。</p><p>而如果返回：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token string">'g++'</span> 不是内部或外部命令，也不是可运行的程序或批处理文件。</code></pre><p>那么则说明你的终端不知道 <code>g++</code> 是什么命令。我们接下来将首先讲解环境变量是什么，然后再为大家讲述该怎么配置环境变量。</p><ul><li>什么是环境变量？</li></ul><p>当你的 Shell 在执行命令时，会尝试在<strong>一系列路径</strong>下搜索同名的可执行文件。这一系列路径我们就称作是环境变量。</p><p>Windows 用户可以在终端中输入 path 来查看当前环境变量（由于我进行过一系列配置，所以其输出结果可能与你的不同）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">D:<span class="token punctuation">\</span>Coding<span class="token operator">></span>path<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>D:<span class="token punctuation">\</span>Anaconda<span class="token punctuation">;</span>D:<span class="token punctuation">\</span>Anaconda<span class="token punctuation">\</span>Library<span class="token punctuation">\</span>mingw-w64<span class="token punctuation">\</span>bin<span class="token punctuation">;</span>D:<span class="token punctuation">\</span>Anaconda<span class="token punctuation">\</span>Library<span class="token punctuation">\</span>usr<span class="token punctuation">\</span>bin<span class="token punctuation">;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><p>Linux 用户可以通过使用 <code>echo $PATH</code> 来查看自己的环境变量：</p><pre class="language-bash" data-language="bash"><code class="language-bash">c7w@cc7w <span class="token operator">></span> /mnt/d/Coding <span class="token operator">></span> <span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span>/home/c7w/.local/lib/python3.8/site-packages:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/mnt/d/Anaconda:/mnt/d/Anaconda/Library/mingw-w64/bin:/mnt/d/Anaconda/Library/usr/bin:/mnt/d/Anaconda/Library/bin:/mnt/d/Anaconda/Scripts:/mnt/f/VM/bin/:/mnt/c/Program Files <span class="token punctuation">(</span>x86<span class="token punctuation">)</span>/Common Files/Intel/Shared Libraries/redist/intel64/compiler:/mnt/c/Program Files/Common Files/Oracle/Java/javapath:<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><p>没错，就是这一系列文件夹。回忆我们刚才执行 <code>g++ --version</code> 命令的时候，我们的终端会在这一系列文件夹下为我们寻找叫做 <code>g++</code> 的可执行文件。如果找到了名为 <code>g++</code> 的可执行文件，我们的终端就会将参数传入，将其执行；而如果我们的终端没有找到，那么就会向我们报告“未知命令”。</p><p>我们刚刚已经理解了“环境变量（Path）”的运行逻辑，接下来我们讲解如何进行环境变量的配置。`</p><p>对于 Windows 用户，请按下 Windows + S 打开搜索框，在其中输入 <code>path</code>，然后选择”编辑系统环境变量”，进而选择“环境变量”，然后选择“系统变量”中的 Path 字段，双击打开后即可配置。</p><p><img src="https://s2.loli.net/2022/02/09/L9DhPnOjNZ58gCV.png" alt="image-20220209214212982"></p><p>对于 Linux 用户，环境变量是绑定在你的 Shell 上的，不同的 Shell 有不同的配置方式。这里我们提供一个<a href="https://www.cnblogs.com/youyoui/p/10680329.html">链接</a>帮助您了解环境变量的相关配置。</p><ul><li>什么是 Mingw64？</li></ul><blockquote><p>MinGW 的全称是：Minimalist GNU on Windows。</p><p>它实际上是将经典的开源 C 语言编译器 GCC 移植到了 Windows 平台下，并且包含了 Win32API，因此可以将源代码编译为可在 Windows 中运行的可执行程序。而且还可以使用一些 Windows 不具备的，Linux平台下的开发工具。</p><p>一句话来概括：MinGW 就是 GCC 的 Windows 版本。这是将你写的 C/C++ 语言的源代码编译成汇编代码，进而链接成可执行文件的工具。之前我们的 Dev-C++ 事实上也集成了这个工具。</p></blockquote><p>我们下载官方的安装工具（<a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe">链接</a>），下载完成后右键以管理员身份运行，<code>Architecture</code> 中 <code>i686</code> 是针对于 32 位系统，<code>x86_64</code> 针对于 64 位系统，其他不用修改，进入下一步选择安装目录即可。然后即可等待安装程序下载并进行安装。</p><p>然后，我们需要进行环境变量配置。进入 <code>Mingw64 的安装路径/mingw64/bin/</code>，我们可以看到 <code>gcc</code>，<code>g++</code> 这些我们熟悉的可执行文件。<strong>然后我们需要做的就是将这个文件夹添加至环境变量中。</strong></p><p>然后我们就可以打开终端，输入 <code>g++</code> 验证环境变量是否配置成功。（请注意，在环境变量配置后需要重启终端才能生效）</p><h3 id="Make"><a href="#Make" class="headerlink" title="Make"></a>Make</h3><p>同时，针对于我们之后课上所需要用到的 <code>make</code> 命令，我们可以将同目录下的 <code>mingw32-make.exe</code> 复制一份，改名为 <code>make.exe</code>，这样我们也能正常使用 <code>make</code> 命令了。</p><p>由于 Linux 平台自带了 <code>gcc</code> 和 <code>make</code> 等等编译工具，所以这里不需要进行额外的配置。</p><h2 id="扩展插件的安装"><a href="#扩展插件的安装" class="headerlink" title="扩展插件的安装"></a>扩展插件的安装</h2><p>我们打开 VSCode，先简单介绍下界面及其功能：</p><p><img src="https://s2.loli.net/2022/02/09/pM6kzGH4xbIRW5K.png" alt="image-20220209220846472"></p><p>红色框是我们当前项目（即文件夹）下的所有文件清单，蓝色框是我们编写代码的地方，绿色框是我们的应用商店。</p><p>这里我们推荐几个扩展，在应用商店中搜索即可下载：</p><ul><li>Chinese (Simplified) Language Pack for Visual Studio Code：语言</li><li>Code Runner：调试用</li><li>C/C++：支持在 Code 中调试 C/C++ 程序</li><li>Remote - SSH：之后进行远程开发会用到，这里不多做介绍</li></ul><p>在安装了简体中文插件后，我们可以按 <code>Ctrl + Shift + P</code>，打开输入框，输入 <code>Configurate display language</code>，选择中文后重新启动即可。</p><h2 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h2><p>如何运行一段代码呢？很简单，我们只需要在<strong>对应的代码界面</strong>按下 <code>F5</code> 或是在菜单栏找到“运行 &gt; 启动调试”，便可以启动调试模式：</p><p><img src="https://s2.loli.net/2022/02/09/x6yBiPzfVAQsErZ.png" alt="image-20220209221547145"></p><p>在配置中选择 <code>C++ (GDB)</code>，进而选择 <code>g++.exe</code>。</p><p>然后我们会发现项目路径下生成了一个 <code>.vscode</code> 文件夹，内含 <code>tasks.json</code> 和 <code>launch.json</code>，这两个文件分别有什么作用我们即将就会进行介绍。</p><p><img src="https://s2.loli.net/2022/02/09/pwDenGirIJZdjsv.png" alt="image-20220209221657511"></p><p>（你的界面排版可能和我有所不同，不过主要功能是大同小异的，当你熟练运用了 Code 之后你可以自行将这几个框框拖来拖去摆到你觉得舒适的位置）</p><p>我们接下来将分单文件项目和多文件项目进行讨论，说明一些在 Code 中调试 C++ 代码的技巧。</p><h3 id="单文件项目"><a href="#单文件项目" class="headerlink" title="单文件项目"></a>单文件项目</h3><p>单文件项目指只有一个 cpp 文件的项目，<code>main()</code> 函数的定义就在其中，我们在《程序设计基础》课程的大部分平时作业都是这种项目。</p><p>这种项目我们直接按 <code>F5</code> 便可进行运行，其输出结果会在“终端”选项卡中出现。</p><p><img src="https://s2.loli.net/2022/02/09/UO5mv1K3VBcN2lL.png" alt="image-20220209222124275"></p><p>这是一段演示单向平方和双向平方探测在哈希表中可以占用的位置的示例程序，在这里仅做说明使用，大家不必理解其背后的原理。（事实上你给别人调代码的时候不都是这样嘛，对着看不懂的逻辑满脸黑线.jpeg）</p><p>想要在程序运行过程中设置断点，我们只需点击对应的行号：</p><p><img src="https://s2.loli.net/2022/02/09/ZVFLrcwSbaOdxTm.png" alt="image-20220209222401148"></p><p>在这里设置断点，程序将会在第 30 行执行完成，第 31 行将要执行的时候触发断点，让我们看一看：</p><p><img src="https://s2.loli.net/2022/02/09/5tHAOwQBdh1Sqcs.png" alt="image-20220209222500324"></p><p>红框，也就是“终端框中，我们的程序输出了前半段运行时产生的 <code>cout</code> 信息。接下来我们将说明该如何查看中间变量：</p><p><img src="https://s2.loli.net/2022/02/09/UEioypzr9fa57GK.png" alt="image-20220209222635735"></p><p>比如程序在命中这个断点时，我们有以下途径获取中间变量的值：</p><p>在黄色框“变量”中，我们可以看到程序自动追溯的局部变量和寄存器值。在蓝色框“监视”中，我们可以自行定义一些需要追溯的变量。在红色框中，我们可以直接输入变量名来查看其对应的值。</p><p><img src="https://s2.loli.net/2022/02/09/jAlCZgHIYphwoDv.png" alt="image-20220209222812673"></p><p>然后，我们来将目光放在上述这几个按钮身上。</p><ul><li>继续（F5）按钮将会使程序继续执行，直到命中下一个断点或是到程序结尾。</li><li>单步跳过（F10）按钮对于程序来说，如果将要执行的行调用了某些函数，那么将直接将本行执行完毕，进入下一行。</li><li>单步调试（F11）按钮对于程序来说，如果将要执行的行调用了某些函数，那么将进入将要执行的函数内部。</li><li>停止（Shift+F5）按钮终止当前调试工作。</li></ul><h3 id="多文件项目"><a href="#多文件项目" class="headerlink" title="多文件项目"></a>多文件项目</h3><p>对于多文件项目的调试来说，我们重点关注点在于 <code>.vscode</code> 下两个文件的配置。</p><p>首先我们将我们的示例程序修改为多文件项目：</p><p><img src="https://s2.loli.net/2022/02/09/IBLJmUG7NCy1ikv.png" alt="image-20220209223422595"></p><p>我们采用最简单的方式，将我们的单文件项目魔改成多文件。</p><p>我们回忆如果使用命令行，该如何将我们的程序编译：</p><pre class="language-bash'" data-language="bash'"><code class="language-bash'">g++ hash.cpp another.cpp -o main</code></pre><p>没错，我们现在配置 Code 使得其在“生成目标文件”任务中执行上述命令。</p><p><code>tasks.json</code> 负责可执行文件的生成，我们主要进行如下修改：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span> <span class="token comment">// cppbuild -> shell</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"C/C++: g++.exe 生成活动文件"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"D:\\Mingw\\mingw64\\bin\\g++.exe"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"-g"</span><span class="token punctuation">,</span>                <span class="token string">"hash.cpp"</span><span class="token punctuation">,</span> <span class="token comment">// $&#123;file&#125; -> your source code list</span>                <span class="token string">"another.cpp"</span><span class="token punctuation">,</span>                <span class="token string">"-o"</span><span class="token punctuation">,</span>                <span class="token string">"$&#123;fileDirname&#125;\\main.exe"</span> <span class="token comment">// main.exe</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"$gcc"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>                <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token string">"调试器生成的任务。"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">&#125;</span></code></pre><p><code>launch.json</code> 主要负责调试目标程序，我们做以下修改：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token comment">// 使用 IntelliSense 了解相关属性。 </span>    <span class="token comment">// 悬停以查看现有属性的描述。</span>    <span class="token comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"g++.exe - 生成和调试活动文件"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;\\main.exe"</span><span class="token punctuation">,</span> <span class="token comment">// main.exe</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;"</span><span class="token punctuation">,</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>            <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"D:\\Mingw\\mingw64\\bin\\gdb.exe"</span><span class="token punctuation">,</span>            <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"为 gdb 启用整齐打印"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"C/C++: g++.exe 生成活动文件"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>然后我们就可以愉快地调试多文件项目了。</p><h2 id="后续学习"><a href="#后续学习" class="headerlink" title="后续学习"></a>后续学习</h2><ul><li>自行研究 Remote-SSH 的使用方法，如何连接到外部服务器进行开发</li><li>自行研究 Python 配置调试环境的方法</li><li>在《软件工程》课程中，使用 Code Prettier 插件 + ESLint 规范项目</li></ul><h2 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h2><ul><li><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li><li><a href="https://zhuanlan.zhihu.com/p/76613134">https://zhuanlan.zhihu.com/p/76613134</a></li><li><a href="https://blog.csdn.net/linjf520/article/details/108559210">https://blog.csdn.net/linjf520/article/details/108559210</a></li></ul><p>Tips: 配置开发环境往往是在学习的过程中最恼人的一件事，但是不用心急，常言道“良好的开端是成功的一半”。如果实在遇到配置问题，在进行搜索无法解决后，建议向同年级/学长/答疑坊进行求助。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;VSCode 是一款&lt;strong&gt;轻量级&lt;/strong&gt;的&lt;strong&gt;代码编辑器&lt;/strong&gt;，可以通过安装各种各样不同&lt;strong&gt;扩展&lt;/strong&gt;的方式来实现开发者所需要的功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;区分：代码编辑器（Editor）与集成开发环境（IDE, Integrated Development Environment）&lt;/p&gt;
&lt;p&gt;代码编辑器事实上我们可以看成是一个记事本（没错，如果是 Windows 用户，就是你按下 Win+R 输入 notepad 回车之后的那个记事本），其最基本的功能是文档编辑。不过之所以将其称为是&lt;strong&gt;代码编辑器&lt;/strong&gt;，是因为它虽然继承自一般的文档编辑器，又具备了一些一般的文档编辑器所不具备的功能。具体来说，例如自动语法高亮，自动补全，甚至是自动代码重构等等。&lt;/p&gt;
&lt;p&gt;集成开发环境（IDE）是一种用于构建应用程序的软件，&lt;strong&gt;可将常用的开发人员工具合并到单个图形用户界面&lt;/strong&gt;（GUI）中。具体来说，我们只需要简单的点击按钮，可能就可以完成程序的编译、链接、运行、调试等等工作。而这些工作在最初都是需要人手工在命令行中完成的。我们在《程序设计基础》课程中最初使用的 Dev-C++ 便是一个集成开发环境。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们今天要介绍的 VSCode 是一款轻量级的&lt;strong&gt;代码编辑器&lt;/strong&gt;。如果没有各种扩展插件的支持的话，可能我们只能把它称作是大号的 Notepad++，而正是因为社区中各种各样的扩展，VSCode 才得以展现其强大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/02/09/psKk8yJ2CxMic1O.png&quot; alt=&quot;image-20220209114623794&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文我们介绍 VSCode 的基本配置，重点在于介绍一些未来可能会用到的扩展插件。按照本文的流程完成后，你应该等效地完成了足以应对《面向对象程序设计基础》课程中的代码的集成开发环境的配置。此外，我们还会介绍一些基本的调试方法，而这恰恰是 VSCode 比 Dev-C++ 在现阶段不知道高到哪里去的地方。&lt;/p&gt;
&lt;p&gt;事实上，在未来，我们可以用 VSCode 配置 Python 开发环境，配置软件工程课程中所需要的框架的开发环境，而这些都是通过“扩展”（Extension）来实现的。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="技术/综合" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/%E6%8A%80%E6%9C%AF-%E7%BB%BC%E5%90%88/"/>
    
    
    <category term="VSCode" scheme="https://www.c7w.tech/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>ExpressJS 项目开发指北</title>
    <link href="https://www.c7w.tech/express-js/"/>
    <id>https://www.c7w.tech/express-js/</id>
    <published>2022-02-08T10:58:10.000Z</published>
    <updated>2022-02-08T16:14:35.861Z</updated>
    
    <content type="html"><![CDATA[<p>Express 是一个简洁而灵活的 Node.js Web 应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。</p><p>使用 Express 可以快速地搭建一个完整功能的网站，但是，我们一般更倾向于使用 Express 来快速搭建<strong>网站后端</strong>。</p><p>注意，这里我们将网站分为前端和后端，事实上与我们在《程序设计训练》课程中对于使用 Django 来搭建网站的方式不同。Django 的页面渲染是<strong>服务器端渲染</strong>（Server-side Rendering），也就是说，在收到用户发来的请求后，服务器端按照设计的逻辑读取相应的页面模板，在完成页面渲染（也就是在页面模板的对应处填充对应字段）后，将渲染后的 HTML 页面直接发给用户。</p><p>而这里我们将网站分为“前端”和“后端”，这种设计模式和上述服务器端渲染有本质的区别，我们一般称为<strong>客户端渲染</strong>（Client-side Rendering）。其运作模式是，网站提供服务器直接将未渲染的 HTML 模板（我们称为“前端代码”）发送给用户，而这模板中包含了类似于 <code>fetch</code> 的函数，可以在浏览器将其渲染时向我们的“后端”发送请求。“后端”在收到请求后，一般以 Json 格式返回所请求的数据，前端再通过 Javascript 脚本将收到的数据渲染在页面上。</p><p>在《软件工程》课程中我们推荐使用后者这种设计模式，即进行前后端分离。虽然我们也可以继续利用 Django 来作为后端，但是我们这里给大家提供一种业界也很常用的选项 —— Express。其优点在于，相比于 Django 而言，其编写起来更加方便，也更加快捷。<s>而且，后端更加靠近 <code>npm</code> 这个轮子工厂，对于我们进行大调库也更加的方便。当然，因为 Javascript 令人**的设计，也会收获更加酸爽的 Debug 体验。</s></p><p>本文我们侧重介绍如何配置一个 Express 项目，并完成一个最基本的与后端数据库通信的增删查改功能.</p><a id="more"></a><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>JavaScript 语言</li><li>RESTful API 的有关知识（事实上后文也有介绍） <a href="https://www.runoob.com/nodejs/nodejs-restful-api.html">https://www.runoob.com/nodejs/nodejs-restful-api.html</a></li><li>（至少一种）数据库的使用操作<ul><li>可以是直接使用 SQL 语句操作</li><li>可以是使用 ORM 来操作</li></ul></li></ul><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>搜索结果可以找到的大多数编写教程均是基于 <code>CommonJS</code> 规范（以 <code>require</code> 和 <code>define</code> 为特点），而 <code>Node.js</code> 则推出了基于语言层面支持的 <code>ES6 Module</code> 规范（以 <code>import</code> 和 <code>export</code> 为特点）。后者必将成为今后较为常用的编写规范。如果想了解更多关于 Javascript 模块化开发的有关知识，可以参考本文初稿作者的<a href="https://c7w.tech/javascript-module-dev/">这篇博客</a>。</p><p>同样，这里我们采用更为广泛使用的 <code>yarn</code> 来进行包管理。其安装在 Node.js 简介及 npm 的介绍中已给出，这里我们不再赘述。</p><p>首先我们先新建一个项目。（这里采用 Windows 的 CMD 进行操作，Linux 的操作类似，下同）</p><pre class="language-bash" data-language="bash"><code class="language-bash">D:<span class="token punctuation">\</span>Coding<span class="token operator">></span>cd D:<span class="token punctuation">\</span>Coding<span class="token punctuation">\</span>MyDashBoardBackendD:<span class="token punctuation">\</span>Coding<span class="token punctuation">\</span>MyDashBoardBackend<span class="token operator">></span>yarn init<span class="token function">yarn</span> init v1.22.17question name <span class="token punctuation">(</span>MyDashBoardBackend<span class="token punctuation">)</span>:question version <span class="token punctuation">(</span><span class="token number">1.0</span>.0<span class="token punctuation">)</span>:question description: A sample backend project.question entry point <span class="token punctuation">(</span>index.js<span class="token punctuation">)</span>:question repository url:question author:question license <span class="token punctuation">(</span>MIT<span class="token punctuation">)</span>:question private:success Saved package.jsonDone <span class="token keyword">in</span> <span class="token number">20</span>.93s.</code></pre><p>然后我们安装 express 模块：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> express</code></pre><p>为了使用 <code>ES6 Module</code> 规范，我们配置 <code>package.json</code>，在其中加入 <code>&quot;type&quot;: &quot;module&quot;</code> 字段：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"MyDashBoardBackend"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"A sample backend project."</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"^4.17.2"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>然后，我们在根目录新建 <code>index.js</code>，写入如下内容：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">"express"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello, baka c7w!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后我们就可以运行 <code>node index.js</code>，然后前往浏览器访问 <code>http://localhost:3000/</code>，便可以看到我们输出的欢迎信息。</p><p>若是感觉如此逼格还不够高，不要紧，我们可以继续进行一些配置：</p><p>我们可以继续修改 <code>package.json</code>，向其中加入使用 <code>yarn start</code> 开启服务端的配置：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"MyDashBoardBackend"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"node index.js"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"A sample backend project."</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"^4.17.2"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>之后我们就可以使用 <code>yarn start</code> 来开启服务端了。</p><h2 id="路由-Routing"><a href="#路由-Routing" class="headerlink" title="路由 Routing"></a>路由 Routing</h2><p>没错，相信你已经猜到了，我们后端网站的路由便是主要通过 <code>app.get</code> 和 <code>app.post</code> 两个方法来定义。事实上，如果你对 HTTP 请求方法了解的更多些的话，我们可以使用以下方法：</p><ul><li><code>app.get()</code></li><li><code>app.post()</code></li><li><code>app.put()</code></li><li><code>app.delete()</code></li></ul><p>事实上还有更多，这里我们不再一一列出，如欲了解可以借助<a href="https://expressjs.com/en/4x/api.html#app.METHOD">官方的 Docs</a>。</p><p>我们这里给出一些示例写法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">"express"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello, baka c7w!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/item'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'GET method to /item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/item'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'POST method to /item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// Regular Expression!</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/item/*'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `/item/1`</span>    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Item/*"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// Variables!</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/item2/:item/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `/item2/1`</span>    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; item: '1' &#125;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Item/*"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// Even ReExp + Variables!</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/item3/:item(\\d+)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `/item3/1`</span>    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; item: '1' &#125;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Item/*"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Route-Handler"><a href="#Route-Handler" class="headerlink" title="Route Handler"></a>Route Handler</h3><p>我们可以尝试考虑以下情景：我们要根据用户身份（这里做简要简化，假设用户身份通过 Routing 传入），分别展示不同的页面。事实上这种情景很常见，比如一个网站的管理员登入博客看到的应该是管理页面，而登录作者看到的应该是写作页面，普通用户看到的就是浏览页面。但是这些页面中又会有一些耦合的元素。于是，我们能不能采用 OOP 课程中策略模式的思想来解决这个问题呢？</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">logger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// Logger 部件，记录用</span>    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>user <span class="token operator">+</span> <span class="token string">' tried to visit...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>user <span class="token operator">==</span> <span class="token string">"c7w"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">"Welcome!&lt;br />"</span><span class="token punctuation">;</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Permission Denied"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">footer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span>result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token string">'&lt;br />&lt;br />'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/:user"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>logger<span class="token punctuation">,</span> main<span class="token punctuation">,</span> footer<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>事实上我们可以利用这种 Handler “数组”来定义处理一个请求的先后顺序。如果在前面的某个 Handler 调用了 <code>next()</code>，那么便会执行下一个 <code>Handler</code>。</p><h2 id="req-与-res"><a href="#req-与-res" class="headerlink" title="req 与 res"></a>req 与 res</h2><p>这里我们介绍下 <code>req</code> 和 <code>res</code> 两个参数的主要属性和方法。</p><h3 id="req"><a href="#req" class="headerlink" title="req"></a><code>req</code></h3><div class="table-container"><table><thead><tr><th>Property</th><th>Description</th></tr></thead><tbody><tr><td>req.query</td><td>在请求后以 <code>?</code> 和 <code>&amp;</code> 连接的键值对</td></tr><tr><td>req.body</td><td>请求体的内容</td></tr><tr><td>req.cookies</td><td>Cookies 中的内容</td></tr></tbody></table></div><p>更多详见：<a href="https://expressjs.com/en/4x/api.html#req">https://expressjs.com/en/4x/api.html#req</a></p><h3 id="res"><a href="#res" class="headerlink" title="res"></a><code>res</code></h3><div class="table-container"><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://expressjs.com/en/4x/api.html#res.download">res.download()</a></td><td>Prompt a file to be downloaded.</td></tr><tr><td><a href="https://expressjs.com/en/4x/api.html#res.end">res.end()</a></td><td>End the response process.</td></tr><tr><td><a href="https://expressjs.com/en/4x/api.html#res.json">res.json()</a></td><td>Send a JSON response.</td></tr><tr><td><a href="https://expressjs.com/en/4x/api.html#res.redirect">res.redirect()</a></td><td>Redirect a request.</td></tr><tr><td><a href="https://expressjs.com/en/4x/api.html#res.render">res.render()</a></td><td>Render a view template.</td></tr><tr><td><a href="https://expressjs.com/en/4x/api.html#res.send">res.send()</a></td><td>Send a response of various types.</td></tr><tr><td><a href="https://expressjs.com/en/4x/api.html#res.sendFile">res.sendFile()</a></td><td>Send a file as an octet stream.</td></tr><tr><td><a href="https://expressjs.com/en/4x/api.html#res.sendStatus">res.sendStatus()</a></td><td>Set the response status code and send its string representation as the response body.</td></tr></tbody></table></div><p>更多详见：<a href="https://expressjs.com/en/4x/api.html#res">https://expressjs.com/en/4x/api.html#res</a></p><h2 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h2><p>Middleware（中间件函数）的概念其实很好理解。就像是我们上面举的那个例子，<code>logger</code> 和 <code>main</code> 就可以理解成是 Middleware functions。中间件函数是带有了 <code>req, res, next</code> 为签名的函数，在 Express 处理请求的时候，事实上会将某个地址对应的路由的所有中间件组织成一个类似链表的结构，随着 <code>next()</code> 的调用在中间件间顺序执行。而且，中间件都是有修改 <code>req</code> 和 <code>res</code> 的所有属性的能力的。</p><p>一个需要注意的点是，如果中间件函数没有使用类似于 <code>res.send()</code> 的方法将一个请求返回的话，必须要调用 <code>next()</code> 函数，不然即使这个中间件函数执行到末尾，也不会自动跳转。这就会导致请求“假死”的现象。</p><h3 id="全局-Middleware"><a href="#全局-Middleware" class="headerlink" title="全局 Middleware"></a>全局 Middleware</h3><p>使用 <code>app.use([path], &lt;middleware function&gt;)</code> 我们可以添加供全局使用的 Middleware 函数（Application-level middleware），示例如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">"express"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">logger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// Logger 部件，记录用</span>    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>req<span class="token punctuation">.</span>originalUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello, baka c7w!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/item'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'GET method to /item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/item'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'POST method to /item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/item/*'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `/item/1`</span>    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Item/*"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/item2/:item/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `/item2/1`</span>    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; item: '1' &#125;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Item/*"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/item3/:item(\\d+)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `/item3/1`</span>    console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; item: '1' &#125;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Item/*"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Tue Feb 08 <span class="token number">2022</span> <span class="token number">22</span>:16:18 GMT+0800 <span class="token punctuation">(</span>China Standard Time<span class="token punctuation">)</span><span class="token punctuation">]</span> GET /user/123<span class="token punctuation">[</span>Tue Feb 08 <span class="token number">2022</span> <span class="token number">22</span>:16:20 GMT+0800 <span class="token punctuation">(</span>China Standard Time<span class="token punctuation">)</span><span class="token punctuation">]</span> GET /user/123<span class="token punctuation">[</span>Tue Feb 08 <span class="token number">2022</span> <span class="token number">22</span>:16:22 GMT+0800 <span class="token punctuation">(</span>China Standard Time<span class="token punctuation">)</span><span class="token punctuation">]</span> GET /user/123/123</code></pre><h3 id="异常处理-Middleware"><a href="#异常处理-Middleware" class="headerlink" title="异常处理 Middleware"></a>异常处理 Middleware</h3><p>我们可以定义处理异常的中间件函数，方法如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Sorry, but fatal error occurred meanwhile.'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="内置-Middleware"><a href="#内置-Middleware" class="headerlink" title="内置 Middleware"></a>内置 Middleware</h3><p>Express 内置了以下中间件：</p><ul><li><a href="https://expressjs.com/en/4x/api.html#express.static">express.static</a> 用于提供静态文件，比如图片，文件等等</li><li><a href="https://expressjs.com/en/4x/api.html#express.json">express.json</a> 将 req.body 处理为 json (Available with Express 4.16.0+)</li><li><a href="https://expressjs.com/en/4x/api.html#express.urlencoded">express.urlencoded</a></li></ul><p>对于 POST 请求，我们推荐使用后两个中间件。</p><h2 id="CRUD-的实现"><a href="#CRUD-的实现" class="headerlink" title="CRUD 的实现"></a>CRUD 的实现</h2><p>首先我们先简单地介绍一下 RESTful API 是什么。</p><p>RESTful API 是目前比较成熟的一套互联网应用程序的 API 设计理论。可以参考 <a href="https://www.ruanyifeng.com/blog/2014/05/restful_api.html。">https://www.ruanyifeng.com/blog/2014/05/restful_api.html。</a></p><p>TL; DR: 按照一定约定俗成的设计，对于我们所关心的涉及的资源，进行增删查改的操作。RESTful API 更多的是关注在“设计”这一层面。</p><p>作为今天的教程，我们只要理解，我们设计出一个后端，能让它和我们的数据库连接，完成增删查改（Create, Read, Update, Delete）就可以了。</p><p>作为轮子工厂，我们经过简单的搜索就能找到 JavaScript 与 mysql 连接的工具，其使用教程可以<a href="https://www.runoob.com/nodejs/nodejs-mysql.html">见此</a>。</p><p>直接撰写 SQL 语句固然在应用上是高效的，但是切换编程语言或者找一些自动生成 SQL 查询语句的工具也会降低我们的编程效率。在我们<strong>并不是很在意查询效率的前提下</strong>，我们不禁回忆起 Django 中用类撰写 Model 的模式，当时可是十分节省我们的力气。</p><p>事实上，这也是一种十分常见的设计模式，叫做 ORM（Object–relational mapping）。之前我们可以将关系型数据库中的一个表看做是一张 Excel 表，而表头规定了这个表的每行记录所应该有的属性。而如果我们把这张表中的表头，视为是一个类在规定它应该具有的属性的话，那么这张表的每行记录，事实上就是这个类所实例化出来的对象。这正是 Django 的 db.models 所采用的设计模式。</p><p>再一次，作为轮子工厂，只需要简单的搜索，我们便能找到实现与数据库之间 ORM 设计的库，这里我们以 <a href="https://sequelize.org/v7/">Sequelize</a> 为例。这里我们采用便携的 <code>sqlite3</code> 作为我们的数据库。</p><p>实现后的简单项目归档于：<a href="https://github.com/c7w/MyDashboardBackend">https://github.com/c7w/MyDashboardBackend</a></p><h2 id="后续拓展"><a href="#后续拓展" class="headerlink" title="后续拓展"></a>后续拓展</h2><ul><li>了解更多 ExpressJS 的中间件</li><li>了解 ExpressJS 的模板渲染机制</li><li>换用其他数据库尝试，包括 fs（本地存储），MySQL，以及非关系型数据库 PostgreSQL</li></ul><p>可以应用 ExpressJS 的课程：</p><ul><li>《软件工程》</li></ul><h2 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h2><ul><li>ExpressJS 官网 <a href="https://expressjs.com/">https://expressjs.com/</a></li><li>ExpressJS 中文网 <a href="https://expressjs.com/zh-cn/">https://expressjs.com/zh-cn/</a></li><li>菜鸟教程 <a href="https://www.runoob.com/nodejs/nodejs-express-framework.html">https://www.runoob.com/nodejs/nodejs-express-framework.html</a></li><li>MDN 教程 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website">https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Express 是一个简洁而灵活的 Node.js Web 应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。&lt;/p&gt;
&lt;p&gt;使用 Express 可以快速地搭建一个完整功能的网站，但是，我们一般更倾向于使用 Express 来快速搭建&lt;strong&gt;网站后端&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;注意，这里我们将网站分为前端和后端，事实上与我们在《程序设计训练》课程中对于使用 Django 来搭建网站的方式不同。Django 的页面渲染是&lt;strong&gt;服务器端渲染&lt;/strong&gt;（Server-side Rendering），也就是说，在收到用户发来的请求后，服务器端按照设计的逻辑读取相应的页面模板，在完成页面渲染（也就是在页面模板的对应处填充对应字段）后，将渲染后的 HTML 页面直接发给用户。&lt;/p&gt;
&lt;p&gt;而这里我们将网站分为“前端”和“后端”，这种设计模式和上述服务器端渲染有本质的区别，我们一般称为&lt;strong&gt;客户端渲染&lt;/strong&gt;（Client-side Rendering）。其运作模式是，网站提供服务器直接将未渲染的 HTML 模板（我们称为“前端代码”）发送给用户，而这模板中包含了类似于 &lt;code&gt;fetch&lt;/code&gt; 的函数，可以在浏览器将其渲染时向我们的“后端”发送请求。“后端”在收到请求后，一般以 Json 格式返回所请求的数据，前端再通过 Javascript 脚本将收到的数据渲染在页面上。&lt;/p&gt;
&lt;p&gt;在《软件工程》课程中我们推荐使用后者这种设计模式，即进行前后端分离。虽然我们也可以继续利用 Django 来作为后端，但是我们这里给大家提供一种业界也很常用的选项 —— Express。其优点在于，相比于 Django 而言，其编写起来更加方便，也更加快捷。&lt;s&gt;而且，后端更加靠近 &lt;code&gt;npm&lt;/code&gt; 这个轮子工厂，对于我们进行大调库也更加的方便。当然，因为 Javascript 令人**的设计，也会收获更加酸爽的 Debug 体验。&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;本文我们侧重介绍如何配置一个 Express 项目，并完成一个最基本的与后端数据库通信的增删查改功能.&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="技术/后端" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/%E6%8A%80%E6%9C%AF-%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="ExpressJS" scheme="https://www.c7w.tech/tags/ExpressJS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 模块化进化论</title>
    <link href="https://www.c7w.tech/javascript-module-dev/"/>
    <id>https://www.c7w.tech/javascript-module-dev/</id>
    <published>2022-02-06T15:48:48.000Z</published>
    <updated>2022-02-07T13:48:41.795Z</updated>
    
    <content type="html"><![CDATA[<p>什么是模块化开发？我们可以类比 C++ 中的面向对象和 Java 中的类，我们的做法是，为了避免因为项目过大而导致变量名发生冲突，同时为了便于解耦合的实现，我们将具有某个特定功能的一些属性和方法组织为一个类，单独放在一个文件之中。</p><p>事实上，在前端开发中，我们的习惯是，要么将用到的模块全部打包，要么通过 CDN 引入。前者通过 Node.js 实现，而后者则直接将导出的模块挂在在 <code>window</code> 下，也即成为全局变量，这也就是早期 JavaScript 的问题，通过全局变量解决一切问题。</p><p>本文我们梳理 JavaScript 对于项目模块化的范式的历史发展进程，以此我们在今后编写项目时提出以下建议：使用最新的 <code>ES6</code> 标准，使用 <code>Babel</code> 向前兼容。</p><a id="more"></a><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><h3 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a><code>window</code> 对象</h3><p>最初的时候，JavaScript 脚本之间的通信完全依靠 <code>window</code> 对象：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config.js</span><span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token string">'https://github.com/ronffy'</span><span class="token punctuation">;</span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  api<span class="token operator">:</span> api<span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// utils.js</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>config<span class="token punctuation">.</span>api<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js</span>window<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 所有 script 标签必须保证顺序正确，否则会依赖报错 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/config.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/utils.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h3><p><strong>IIFE</strong>（立即调用函数表达式）是一个在定义时就会立即执行的 JavaScript 函数。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    statements<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token string">'https://github.com/ronffy'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    api<span class="token operator">:</span> api<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>IIFE 的出现，使全局变量的声明数量得到了有效的控制。</p><h2 id="AMD-CMD"><a href="#AMD-CMD" class="headerlink" title="AMD / CMD"></a>AMD / CMD</h2><p>随着前端业务增重，代码越来越复杂，靠全局变量通信的方式开始捉襟见肘，前端急需一种更清晰、更简单的处理代码依赖的方式，将 JS 模块化的实现及规范陆续出现，其中被应用较广的模块规范有 AMD 和 CMD。</p><p>面对一种模块化方案，我们首先要了解的是：1. 如何导出接口；2. 如何导入接口。</p><h3 id="AMD-RequireJS"><a href="#AMD-RequireJS" class="headerlink" title="AMD + RequireJS"></a>AMD + RequireJS</h3><p><code>AMD</code>(<code>Asynchronous Module Definition</code>，异步加载模块定义)规范，一个单独的文件就是一个模块。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。</p><p>这里异步指的是不堵塞浏览器其他任务（<code>dom</code> 构建，<code>css</code> 渲染等），而加载内部是同步的（加载完模块后立即执行回调）。</p><p>AMD 是一种异步模块规范，<code>RequireJS</code> 是 AMD 规范的实现。官网介绍 <code>RequireJS</code>是一个 <code>js</code> 文件和模块的加载器，提供了加载和定义模块的 <code>api</code>，当在页面中引入了 <code>RequireJS</code> 之后，我们便能够在全局调用 <strong><code>define</code> 和 <code>require</code></strong>。</p><h4 id="require"><a href="#require" class="headerlink" title="require"></a><code>require</code></h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第一个参数 [module]，是一个数组，里面的成员是要加载的模块，<code>callback</code>是加载完成后的回调函数，回调函数中参数对应数组中的成员（模块）。</p><p><code>AMD</code> 的标准中，引入模块需要用到方法 <code>require</code>，由于 <code>window</code> 对象上没定义 <code>require</code> 方法，RequireJS 这个库将其具体实现。</p><h4 id="define"><a href="#define" class="headerlink" title="define"></a><code>define</code></h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span>id<span class="token operator">?</span><span class="token punctuation">,</span> dependencies<span class="token operator">?</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>id：模块的名字，如果没有提供该参数，模块的名字应该默认为模块加载器请求的指定脚本的名字</li><li>dependencies：模块的依赖，已被模块定义的模块标识的数组字面量。依赖参数是可选的，如果忽略此参数，它应该默认为 <code>[&quot;require&quot;, &quot;exports&quot;, &quot;module&quot;]</code>。然而，如果工厂方法的长度属性小于 3，加载器会选择以函数的长度属性指定的参数个数调用工厂方法。</li><li>factory：模块的工厂函数，模块初始化要执行的函数或对象。<strong>如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值。</strong></li></ul><p>接下来，我们用 <code>RequireJS</code> 重构上面的项目。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token string">'https://github.com/ronffy'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    api<span class="token operator">:</span> api<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// utils.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./config'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>api<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> utils<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// main.js</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./utils'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">utils</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  utils<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- index.html  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/main<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/require.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>CMD 和 AMD 一样，都是 JS 的模块化规范，也主要应用于浏览器端。</p><p>AMD 是 RequireJS 在的推广和普及过程中被创造出来。</p><p>CMD 是 SeaJS 在的推广和普及过程中被创造出来。</p><p>二者的的主要区别是 CMD 推崇依赖就近，AMD 推崇依赖前置：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// AMD</span><span class="token comment">// 依赖必须一开始就写好</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./utils'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">utils</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  utils<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// CMD</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 依赖可以就近书写</span>  <span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  utils<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>AMD 也支持依赖就近，但 RequireJS 作者和官方文档都是优先推荐依赖前置写法。</p><p><strong>考虑到目前主流项目中对 AMD 和 CMD 的使用越来越少，大家对 AMD 和 CMD 有大致的认识就好，此处不再过多赘述。</strong></p><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p><code>CommonJS</code> 是一个更<strong>偏向于服务器端</strong>的规范。<code>NodeJS</code> 采用了这个规范。<code>CommonJS</code> 的一个模块就是一个脚本文件。</p><h3 id="exports-与-module-exports"><a href="#exports-与-module-exports" class="headerlink" title="exports 与 module.exports"></a><code>exports</code> 与 <code>module.exports</code></h3><p>定义一个模块导出通过 <code>exports</code> 或者 <code>module.exports</code> 挂载即可。</p><h3 id="require-1"><a href="#require-1" class="headerlink" title="require"></a><code>require</code></h3><p><code>require</code> 命令<strong>第一次加载该脚本时就会执行整个脚本，然后在内存中生成一个对象</strong>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span>  exports<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  loaded<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">&#125;</span></code></pre><p><code>id</code> 是模块名，<code>exports</code>是该模块导出的接口，<code>loaded</code> 表示模块是否加载完毕。</p><p>以后需要用到这个模块时，就会到 <code>exports</code> 属性上取值。<strong>即使再次执行 <code>require</code> 命令，也不会再次执行该模块，而是到缓存中取值</strong>。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config.js</span><span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token string">'https://github.com/ronffy'</span><span class="token punctuation">;</span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  api<span class="token operator">:</span> api<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span><span class="token comment">// utils.js</span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>api<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> utils<span class="token punctuation">;</span><span class="token comment">// main.js</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>utils<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>api<span class="token punctuation">)</span></code></pre><p>执行<code>node main.js</code>，<code>https://github.com/ronffy</code> 被打印了出来。</p><p>在 main.js 中打印 <code>global.api</code>，打印结果是 <code>undefined</code>。</p><p>node 用 <code>global</code> 管理全局变量，与浏览器的 <code>window</code> 类似。与浏览器不同的是，浏览器中顶层作用域是全局作用域，在顶层作用域中声明的变量都是全局变量，而 node 中顶层作用域不是全局作用域，所以在顶层作用域中声明的变量非全局变量。</p><p>注意：</p><ul><li><code>CommonJS</code> 是同步导入模块</li><li><code>CommonJS</code> 导入时，它会给你一个导入对象的副本</li><li><code>CommonJS</code> 模块不能直接在浏览器中运行，需要进行转换、打包</li></ul><p>由于 <code>CommonJS</code> 是同步加载模块，这对于服务器端不是一个问题，因为所有的模块都放在本地硬盘。等待模块时间就是硬盘读取文件时间，很小。但是，对于浏览器而言，它需要从服务器加载模块，涉及到网速，代理等原因，一旦等待时间过长，浏览器处于”假死”状态。所以在浏览器端，不适合于 <code>CommonJS</code> 规范。</p><h3 id="CommonJS-与-AMD-的对比"><a href="#CommonJS-与-AMD-的对比" class="headerlink" title="CommonJS 与 AMD 的对比"></a>CommonJS 与 AMD 的对比</h3><ol><li>CommonJS 是服务器端模块规范，AMD 是浏览器端模块规范。</li><li>CommonJS 加载模块是同步的，即执行<code>var a = require(&#39;./a.js&#39;);</code> 时，在 a.js 文件加载完成后，才执行后面的代码。AMD 加载模块是异步的，所有依赖加载完成后以回调函数的形式执行代码。</li><li>如下代码中，<code>fs</code> 和 <code>chalk</code> 都是模块，不同的是，<code>fs</code> 是 node 内置模块，<code>chalk</code> 是一个 npm 包。这两种情况在 CommonJS 中才有，AMD 不支持。</li></ol><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> chalk <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'chalk'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><p><code>UMD</code> 代表通用模块定义（<code>Universal Module Definition</code>）。所谓的通用，就是兼容了 <code>CommonJS</code> 和 <code>AMD</code> 规范，这意味着无论是在 <code>CommonJS</code> 规范的项目中，还是 <code>AMD</code> 规范的项目中，都可以直接引用 <code>UMD</code> 规范的模块使用。</p><p>原理其实就是在模块中去判断全局是否存在 <code>exports</code> 和 <code>define</code>，如果存在 <code>exports</code>，那么以 <code>CommonJS</code> 的方式暴露模块，如果存在 <code>define</code> 那么以 <code>AMD</code> 的方式暴露模块:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"jquery"</span><span class="token punctuation">,</span> <span class="token string">"underscore"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jquery"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"underscore"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    root<span class="token punctuation">.</span>Requester <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>$<span class="token punctuation">,</span> root<span class="token punctuation">.</span>_<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$<span class="token punctuation">,</span> _</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// this is where I defined my module implementation</span>  <span class="token keyword">const</span> Requester <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ... &#125;;</span>  <span class="token keyword">return</span> Requester<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="ES6-Module"><a href="#ES6-Module" class="headerlink" title="ES6 Module"></a>ES6 Module</h2><p>AMD、CMD 等都是在原有 JS 语法的基础上<strong>二次封装</strong>的一些方法来解决模块化的方案，<strong>ES6 module</strong>（在很多地方被简写为 ESM）是<strong>语言层面的规范</strong>，ES6 module 旨在<strong>为浏览器和服务器提供通用的模块解决方案</strong>。</p><p><strong>长远来看，未来无论是基于 JS 的 Web 端，还是基于 node 的服务器端或桌面应用，模块规范都会统一使用 ES6 module。因此，使用 ES6 Module 规范是我们今后的开发首选。</strong></p><p><code>ES6</code> 模块是前端开发同学更为熟悉的方式，使用 <code>import</code>, <code>export</code> 关键字来进行模块输入输出。<code>ES6</code> 不再是使用闭包和函数封装的方式进行模块化，而是从语法层面提供了模块化的功能。</p><p>使用 <code>Node</code> 原生 <code>ES6</code> 模块需要将 <code>js</code> 文件后缀改成 <code>mjs</code>，或者 <code>package.json</code> “type” 字段改为 “module”，通过这种形式告知 <code>Node</code> 使用 <code>ES Module</code> 的形式加载模块。（这里我们推荐使用后者）</p><h3 id="export"><a href="#export" class="headerlink" title="export"></a><code>export</code></h3><p>方式 1：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> prefix <span class="token operator">=</span> <span class="token string">'https://github.com'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/ronffy</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre><p>方式 2：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> prefix <span class="token operator">=</span> <span class="token string">'https://github.com'</span><span class="token punctuation">;</span><span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/ronffy</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>  prefix<span class="token punctuation">,</span>  api<span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>方式 1 和方式 2 只是写法不同，结果是一样的，都是把 prefix 和 api 分别导出。</p><p>方式 3（默认导出）：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// foo.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等同于：</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>  foo <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">&#125;</span></code></pre><p>方式 4（先导入再导出）：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> api <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span><span class="token comment">// 等同于：</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> api <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>  api<span class="token punctuation">&#125;</span></code></pre><h3 id="import"><a href="#import" class="headerlink" title="import"></a><code>import</code></h3><p>假设我们以方式 1 和方式 2 导出了 <code>&#123;prefix: prefix, api: api&#125;</code>，那么我们可以以如下方式导入：</p><p>方式 1：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> api <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span><span class="token comment">// or</span><span class="token comment">// 配合 import 使用的 as 关键字用来为导入的接口重命名。</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> api <span class="token keyword">as</span> myApi <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span></code></pre><p>方式 2（整体导入）：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> config <span class="token keyword">from</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span><span class="token keyword">const</span> api <span class="token operator">=</span> config<span class="token punctuation">.</span>api<span class="token punctuation">;</span></code></pre><p>方式 3（默认导出的导入）：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// foo.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> conut <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">myFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// index.js</span><span class="token comment">// 默认导入的接口此处刻意命名为 cusFoo，旨在说明该命名可完全自定义。</span><span class="token keyword">import</span> cusFoo<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./foo.js'</span><span class="token punctuation">;</span><span class="token comment">// 等同于：</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token keyword">default</span> <span class="token keyword">as</span> cusFoo<span class="token punctuation">,</span> count <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./foo.js'</span><span class="token punctuation">;</span></code></pre><p><code>export default</code> 导出的接口，可以使用 <code>import name from &#39;module&#39;</code> 导入。这种方式，使导入默认接口很便捷。</p><p>方式 4（整体加载）：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span></code></pre><p>这样会加载整个 config.js 模块，但未导入该模块的任何接口。</p><p>方式 5（动态加载模块）：</p><p>上面介绍了 ES6 module 各种导入接口的方式，但有一种场景未被涵盖：动态加载模块。比如用户点击某个按钮后才弹出弹窗，弹窗里功能涉及的模块的代码量比较重，所以这些相关模块如果在页面初始化时就加载，实在浪费资源，<code>import()</code> 可以解决这个问题，从语言层面实现模块代码的按需加载。</p><p>ES6 module 在处理以上几种导入模块接口的方式时都是编译时处理，所以 <code>import</code> 和 <code>export</code> 命令只能用在模块的顶层，以下方式都会报错：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 报错</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> api <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 报错</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> api <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./config.js'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 报错</span><span class="token keyword">const</span> modulePath <span class="token operator">=</span> <span class="token string">'./utils'</span> <span class="token operator">+</span> <span class="token string">'/api.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> modulePath<span class="token punctuation">;</span></code></pre><p>使用 <code>import()</code> 实现按需加载：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./config.js'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> api <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> modulePath <span class="token operator">=</span> <span class="token string">'./utils'</span> <span class="token operator">+</span> <span class="token string">'/api.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意，在浏览器中加载 ES6 模块的时候，我们需要使用：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>但是，对于加载外部模块，需要注意：</p><ul><li>代码是在模块作用域之中运行，而不是在全局作用域运行。<strong>模块内部的顶层变量，外部不可见</strong></li><li>模块脚本自动采用严格模式，不管有没有声明 <code>use strict</code></li><li>模块之中，可以使用 <code>import</code> 命令加载其他模块（.js 后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用 <code>export</code> 命令输出对外接口</li><li><strong>模块之中，顶层的 <code>this</code> 关键字返回 <code>undefined</code>，而不是指向 <code>window</code></strong>。也就是说，在模块顶层使用 <code>this</code> 关键字，是无意义的</li><li><strong>同一个模块如果加载多次，将只执行一次</strong></li></ul><h3 id="ES6-Module-与-CommonJS-的区别"><a href="#ES6-Module-与-CommonJS-的区别" class="headerlink" title="ES6 Module 与 CommonJS 的区别"></a>ES6 Module 与 CommonJS 的区别</h3><ul><li><code>CommonJS</code> 输出的是一个<strong>值的拷贝</strong>，ES6 模块输出的是<strong>值的引用</strong>,加载的时候会做静态优化</li><li><code>CommonJS</code> 模块是<strong>运行时加载</strong>确定输出接口，ES6 模块是<strong>编译时</strong>确定输出接口</li></ul><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>目前，无论是浏览器端还是 node，<strong>都没有完全原生支持 ES6 module</strong>，如果想使用 ES6 module ，可借助 <a href="https://link.segmentfault.com/?enc=NPnBue71LLC14ip6TZXbng%3D%3D.bbpSMgal9YqIDxlkVk1c1BQhJYiGJYf2ZYbUth7aOkE%3D">babel</a> 等编译器。</p><blockquote><p> Babel 是一个 JavaScript 编译器。</p><p>今天就开始使用下一代的 JavaScript 语法编程吧！</p><p><img src="https://s2.loli.net/2022/02/07/lm5dWXcRirIC8JH.png" alt="image-20220207214422726"></p><p><img src="https://s2.loli.net/2022/02/07/uSzJEKP8rBGV24T.png" alt="image-20220207214437008"></p><p>简单来说，可以理解成是编译时替换的一种 polyfill.</p></blockquote><p>Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. </p><p>Here are the main things Babel can do for you:</p><ul><li>Transform syntax</li><li>Polyfill features that are missing in your target environment (through a third-party polyfill such as core-js)</li><li>Source code transformations (codemods)</li><li>And more! (check out these videos for inspiration)</li></ul><p>配置方法：<a href="https://babeljs.io/setup#installation">https://babeljs.io/setup#installation</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://segmentfault.com/a/1190000023711059">https://segmentfault.com/a/1190000023711059</a></li><li><a href="https://segmentfault.com/a/1190000039375332">https://segmentfault.com/a/1190000039375332</a></li><li><a href="https://juejin.cn/post/6844904080955932680">https://juejin.cn/post/6844904080955932680</a></li><li><a href="http://nodejs.cn/api/modules.html">http://nodejs.cn/api/modules.html</a></li><li><a href="http://nodejs.cn/api/esm.html">http://nodejs.cn/api/esm.html</a></li><li><a href="https://docs.net9.org/languages/node.js/">https://docs.net9.org/languages/node.js/</a></li><li><a href="https://babeljs.io/docs/en/index.html">https://babeljs.io/docs/en/index.html</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;什么是模块化开发？我们可以类比 C++ 中的面向对象和 Java 中的类，我们的做法是，为了避免因为项目过大而导致变量名发生冲突，同时为了便于解耦合的实现，我们将具有某个特定功能的一些属性和方法组织为一个类，单独放在一个文件之中。&lt;/p&gt;
&lt;p&gt;事实上，在前端开发中，我们的习惯是，要么将用到的模块全部打包，要么通过 CDN 引入。前者通过 Node.js 实现，而后者则直接将导出的模块挂在在 &lt;code&gt;window&lt;/code&gt; 下，也即成为全局变量，这也就是早期 JavaScript 的问题，通过全局变量解决一切问题。&lt;/p&gt;
&lt;p&gt;本文我们梳理 JavaScript 对于项目模块化的范式的历史发展进程，以此我们在今后编写项目时提出以下建议：使用最新的 &lt;code&gt;ES6&lt;/code&gt; 标准，使用 &lt;code&gt;Babel&lt;/code&gt; 向前兼容。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="技术/JavaScript" scheme="https://www.c7w.tech/categories/%E6%8A%80%E6%9C%AF/%E6%8A%80%E6%9C%AF-JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://www.c7w.tech/tags/JavaScript/"/>
    
  </entry>
  
</feed>
